[
  {
    "url": "https://www.w3schools.com/vue/index.php",
    "cours": {
      "titre": "Vue Tutorial",
      "description": "Learn Vue Vue is a popular JavaScript framework. User interfaces built in Vue updates automatically when data changes. Vue is easy to learn. Start learning Vue now »",
      "lien": "https://www.w3schools.com/vue/index.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "HTML",
            "CSS",
            "JavaScript"
          ]
        ],
        "examples": [
          "<h1>\"Hello, World!\" Example</h1> <div id=\"app\">{{ message }}</div>",
          "Example <h1>\"Hello, World!\" Example</h1> <div id=\"app\">{{ message }}</div> Try it Yourself »"
        ],
        "course_structure": [
          {
            "title": "Start learning Vue now »",
            "url": "https://www.w3schools.com/vue/vue_intro.php"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_helloWorld"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_intro.php",
    "cours": {
      "titre": "Vue Introduction",
      "description": "Vue is a JavaScript framework . It can be added to an HTML page with a <script> tag. Vue extends HTML attributes with Directives , and binds data to HTML with Expressions .",
      "lien": "https://www.w3schools.com/vue/vue_intro.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "It is simple and easy to use.",
            "It is able to handle both simple and complex projects.",
            "Its growing popularity and open-source community support.",
            "In normal JavaScript we need to write HOW HTML and JavaScript is connected, but in Vue we simply need to make sure that there IS a connection and let Vue take care of the rest.",
            "It allows for a more efficient development process with a template-based syntax, two-way data binding, and a centralized state management."
          ],
          [
            "Start with a basic HTML file.",
            "Add a <div> tag with id=\"app\" for Vue to connect with.",
            "Tell the browser how to handle Vue code by adding a <script> tag with a link to Vue.",
            "Add a <script> tag with the Vue instance inside.",
            "Connect the Vue instance to the <div id=\"app\"> tag."
          ]
        ],
        "examples": [
          "<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"> </script>",
          "<!DOCTYPE html> <html lang=\"en\"> <head> <title>My first Vue page</title> </head> <body> </body> </html>",
          "<body> <div id=\"app\"></div> </body>",
          "<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>",
          "<div id=\"app\"></div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { message: \"Hello World!\" } } }) app.mount('#app') </script>",
          "<div id=\"app\"> {{ message }} </div>",
          "<!DOCTYPE html> <html lang=\"en\"> <head> <title>My first Vue page</title> </head> <body> <div id=\"app\"> {{ message }} </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { message: \"Hello World!\" } } }) app.mount('#app') </script> </body> </html>",
          "<div id=\"app\"> {{ message }} </div>",
          "<div id=\"app\">Hello World!</div>",
          "<div id=\"app\"> {{ message }} <br> {{'Random number: ' + Math.ceil(Math.random()*6) }} </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { message: \"Hello World!\" } } }) app.mount('#app') </script>",
          "<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"> </script>",
          "<!DOCTYPE html> <html lang=\"en\"> <head> <title>My first Vue page</title> </head> <body> </body> </html>",
          "<body> <div id=\"app\"></div> </body>",
          "<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>",
          "<div id=\"app\"></div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { message: \"Hello World!\" } } }) app.mount('#app') </script>",
          "<div id=\"app\"> {{ message }} </div>",
          "Example: My first Vue page! Test this code with the 'Try it Yourself' button below. <!DOCTYPE html> <html lang=\"en\"> <head> <title>My first Vue page</title> </head> <body> <div id=\"app\"> {{ message }} </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { message: \"Hello World!\" } } }) app.mount('#app') </script> </body> </html> Try it Yourself »",
          "<div id=\"app\"> {{ message }} </div>",
          "<div id=\"app\">Hello World!</div>",
          "Example Use JavaScript syntax to add a random number to the message inside the div element: <div id=\"app\"> {{ message }} <br> {{'Random number: ' + Math.ceil(Math.random()*6) }} </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { message: \"Hello World!\" } } }) app.mount('#app') </script> Try it Yourself »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/index.php"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_helloWorld"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_helloWorld_js"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/index.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_directives.php",
    "cours": {
      "titre": "Vue Directives",
      "description": "Vue directives are special HTML attributes with the prefix v- that give the HTML tag extra functionality. Vue directives connect to the Vue instance to create dynamic and reactive user interfaces. With Vue, creating responsive pages is much easier and requires less code compared to traditional JavaScript methods.",
      "lien": "https://www.w3schools.com/vue/vue_directives.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "<!DOCTYPE html> <html lang=\"en\"> <head> <style> .pinkBG { background-color: lightpink; } </style> </head> <body> <div id=\"app\"> <div v-bind:class=\"vueClass\"></div> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { vueClass: \"pinkBG\" } } }) app.mount('#app') </script> </body> </html>",
          "Example: The v-bind Directive The browser finds what class to connect the <div> element to from the Vue instance. <!DOCTYPE html> <html lang=\"en\"> <head> <style> .pinkBG { background-color: lightpink; } </style> </head> <body> <div id=\"app\"> <div v-bind:class=\"vueClass\"></div> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { vueClass: \"pinkBG\" } } }) app.mount('#app') </script> </body> </html> Try it Yourself »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_intro.php"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-bind_1"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_intro.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_v-bind.php",
    "cours": {
      "titre": "Vue v-bind Directive",
      "description": "You have already seen that a basic Vue setup consists of a Vue instance and that we can access it from the <div id=\"app\"> tag with {{ }} or the v-bind directive. On this page we will explain the v-bind directive in more detail.",
      "lien": "https://www.w3schools.com/vue/vue_v-bind.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "<div v-bind:[ attribute ]=\"[ Vue data ]\"></div>",
          "<img v-bind:src=\"url\">",
          "<div v-bind:style=\"{ fontSize: size }\"> Text example </div>",
          "<div v-bind:style=\"{ fontSize: size + 'px' }\"> Text example </div>",
          "<div v-bind:style=\"{ 'font-size' : size + 'px' }\"> Text example </div>",
          "<div v-bind:style=\"{ backgroundColor: 'hsl('+bgVal+',80%,80%)' }\"> Notice the background color on this div tag. </div>",
          "<div v-bind:style=\"{ backgroundColor: isImportant ? 'lightcoral' : 'lightgray' }\"> Conditional background color </div>",
          "<div v-bind:class=\"className\"> The class is set with Vue </div>",
          "<div v-bind:class=\"{ myClass: true }\"> The class is set conditionally to change the background color </div>",
          "<div v-bind:class=\"{ myClass: isImportant }\"> The class is set conditionally to change the background color </div>",
          "<div :class =\"{ impClass: isImportant }\"> The class is set conditionally to change the background color </div>",
          "Syntax <div v-bind:[ attribute ]=\"[ Vue data ]\"></div>",
          "Example The src attribute value of an <img> tag is taken from the Vue instance data property 'url': <img v-bind:src=\"url\"> Try it Yourself »",
          "Example The font size depends on the Vue data property 'size'. <div v-bind:style=\"{ fontSize: size }\"> Text example </div> Try it Yourself »",
          "Example The font size number value is stored the Vue data property 'size'. <div v-bind:style=\"{ fontSize: size + 'px' }\"> Text example </div> Try it Yourself »",
          "Example The CSS property fontSize is referred to as 'font-size'. <div v-bind:style=\"{ 'font-size' : size + 'px' }\"> Text example </div> Try it Yourself »",
          "Example The background color depends on the 'bgVal' data property value inside the Vue instance. <div v-bind:style=\"{ backgroundColor: 'hsl('+bgVal+',80%,80%)' }\"> Notice the background color on this div tag. </div> Try it Yourself »",
          "Example The background color is set with a JavaScript conditional (ternary) expression depending on whether the 'isImportant' data property value is 'true' or 'false'. <div v-bind:style=\"{ backgroundColor: isImportant ? 'lightcoral' : 'lightgray' }\"> Conditional background color </div> Try it Yourself »",
          "Example The class name is taken from the 'className' Vue data property: <div v-bind:class=\"className\"> The class is set with Vue </div> Try it Yourself »",
          "Example The class attribute is assigned or not depending on if the class 'myClass' is set to 'true' or 'false': <div v-bind:class=\"{ myClass: true }\"> The class is set conditionally to change the background color </div> Try it Yourself »",
          "Example The class attribute is assigned depending on the 'isImportant' property, if it is 'true' or 'false': <div v-bind:class=\"{ myClass: isImportant }\"> The class is set conditionally to change the background color </div> Try it Yourself »",
          "Example Here we just write ' : ' instead of ' v-bind: ': <div :class =\"{ impClass: isImportant }\"> The class is set conditionally to change the background color </div> Try it Yourself »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_directives.php"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-bind_src"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-bind_style0"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-bind_style"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-bind_style4"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-bind_style2"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-bind_style3"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-bind_class"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-bind_class2"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-bind_class3"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-bind_shorthand"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_directives.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_v-if.php",
    "cours": {
      "titre": "Vue v-if Directive",
      "description": "It is a lot easier to create an HTML element depending on a condition in Vue with the v-if directive than with plain JavaScript. With Vue you just write the if-statement directly in the HTML element you want to create conditionally. It's that simple.",
      "lien": "https://www.w3schools.com/vue/vue_v-if.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "We use comparison operators like < , >= or !== to do such checks.",
            "Comparison checks can also be combined with logical operators such as && or || .",
            "Go to our JavaScript tutorial page to find out more about JavaScript comparisons."
          ]
        ],
        "examples": [
          "<p v-if=\"typewritersInStock\"> in stock </p> <p v-else> not in stock </p>",
          "<p v-if=\"typewriterCount > 0\"> in stock </p> <p v-else> not in stock </p>",
          "<p v-if=\"typewriterCount>3\"> In stock </p> <p v-else-if=\"typewriterCount>0\"> Very few left! </p> <p v-else> Not in stock </p>",
          "<div id=\"app\"> <p v-if=\"text.includes('pizza')\">The text includes the word 'pizza'</p> <p v-else>The word 'pizza' is not found in the text</p> </div>",
          "data() { return { text: 'I like taco, pizza, Thai beef salad, pho soup and tagine.' } }",
          "<div id=\"app\"> <div v-if=\"text.includes('pizza')\"> <p>The text includes the word 'pizza'</p> <img src=\"img_pizza.svg\"> </div> <p v-else>The word 'pizza' is not found in the text</p> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { text: 'I like taco, pizza, Thai beef salad, pho soup and tagine.' } } }) app.mount('#app') </script>",
          "<div id=\"app\"> <div v-if=\"text.includes('pizza')\"> <p>The text includes the word 'pizza'</p> <img src=\"img_pizza.svg\"> </div> <div v-else-if=\"text.includes('burrito')\"> <p>The text includes the word 'burrito', but not 'pizza'</p> <img src=\"img_burrito.svg\"> </div> <p v-else>The words 'pizza' or 'burrito' are not found in the text</p> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { text: 'I like taco, pizza, Thai beef salad, pho soup and tagine.' } } }) app.mount('#app') </script>",
          "Example Write different messages depending on whether there are any typewriters in stock or not: <p v-if=\"typewritersInStock\"> in stock </p> <p v-else> not in stock </p> Try it Yourself »",
          "Example Use a comparison check to decide whether to write \"In stock\" or \"Not in stock\" depending on the number of typewriters in storage. <p v-if=\"typewriterCount > 0\"> in stock </p> <p v-else> not in stock </p> Try it Yourself »",
          "Example Use a comparison check to decide whether to write \"In stock\", \"Very few left!\" or \"Not in stock\" depending on the number of typewriters in storage. <p v-if=\"typewriterCount>3\"> In stock </p> <p v-else-if=\"typewriterCount>0\"> Very few left! </p> <p v-else> Not in stock </p> Try it Yourself »",
          "Example If a certain text contains the word 'pizza', create a <p> tag with an appropriate message. The 'includes()' method is a native JavaScript method that checks if a text contain certain words. <div id=\"app\"> <p v-if=\"text.includes('pizza')\">The text includes the word 'pizza'</p> <p v-else>The word 'pizza' is not found in the text</p> </div> data() { return { text: 'I like taco, pizza, Thai beef salad, pho soup and tagine.' } } Try it Yourself »",
          "Example If a certain text contains the word 'pizza', create a <div> tag with a pizza image and a <p> tag with a message. The 'includes()' method is a native JavaScript method that check if a text contain certain words. <div id=\"app\"> <div v-if=\"text.includes('pizza')\"> <p>The text includes the word 'pizza'</p> <img src=\"img_pizza.svg\"> </div> <p v-else>The word 'pizza' is not found in the text</p> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { text: 'I like taco, pizza, Thai beef salad, pho soup and tagine.' } } }) app.mount('#app') </script> Try it Yourself »",
          "Example If a certain text contains the word 'pizza' or 'burrito' or none of these words, different images and texts will be created. <div id=\"app\"> <div v-if=\"text.includes('pizza')\"> <p>The text includes the word 'pizza'</p> <img src=\"img_pizza.svg\"> </div> <div v-else-if=\"text.includes('burrito')\"> <p>The text includes the word 'burrito', but not 'pizza'</p> <img src=\"img_burrito.svg\"> </div> <p v-else>The words 'pizza' or 'burrito' are not found in the text</p> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { text: 'I like taco, pizza, Thai beef salad, pho soup and tagine.' } } }) app.mount('#app') </script> Try it Yourself »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_v-bind.php"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-if_typewriters"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-if_typewriters2"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-if_typewriters3"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-if_pizza"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-if_pizza2"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-if_pizzaLonger"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_v-bind.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_v-show.php",
    "cours": {
      "titre": "Vue v-show Directive",
      "description": "Learn how to make an element visible or not with v-show . v-show is easy to use because the condition is written right in the HTML tag attribute.",
      "lien": "https://www.w3schools.com/vue/vue_v-show.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "<div v-show=\"showDiv\">This div tag can be hidden</div>",
          "<div id=\"app\"> <div v-show=\"showDiv\">This div tag can be hidden</div> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { showDiv: true } } }) app.mount('#app') </script>",
          "<div id=\"app\"> <div v-show=\"showDiv\">Div tag with v-show</div> <div v-if=\"showDiv\">Div tag with v-if</div> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { showDiv: true } } }) app.mount('#app') </script>",
          "Syntax <div v-show=\"showDiv\">This div tag can be hidden</div>",
          "Example Display the <div> element only if the showDiv property is set to 'true'. <div id=\"app\"> <div v-show=\"showDiv\">This div tag can be hidden</div> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { showDiv: true } } }) app.mount('#app') </script> Try it Yourself »",
          "Example Display the two <div> elements only if the showDiv property is set to 'true'. If the showDiv property is set to 'false' and we inspect the example page with the browser we can see that the <div> element with v-if is destroyed, but the <div> element with v-show has just CSS display property set to 'none'. <div id=\"app\"> <div v-show=\"showDiv\">Div tag with v-show</div> <div v-if=\"showDiv\">Div tag with v-if</div> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { showDiv: true } } }) app.mount('#app') </script> Try it Yourself »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_v-if.php"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-show_div"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-show_div2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_v-if.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_v-for.php",
    "cours": {
      "titre": "Vue v-for Directive",
      "description": "With normal JavaScript you might want to create HTML elements based on an array. You use a for-loop, and inside you need to create the elements, adjust them, and then add each element to your page. And these elements will not react to a change in the array. With Vue you start with the HTML element you want to create into a list, with v-for as an attribute, refer to the array inside the Vue instance, and let Vue take care of the rest. And the elements created with v-for will automatically update when the array changes.",
      "lien": "https://www.w3schools.com/vue/vue_v-for.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "<ol> <li v-for=\"x in manyFoods\">{{ x }}</li> </ol>",
          "<div> <img v-for=\"x in manyFoods\" v-bind:src=\"x\"> </div>",
          "<div> <figure v-for=\"x in manyFoods\"> <img v-bind:src=\"x.url\"> <figcaption>{{ x.name }}</figcaption> </figure> </div>",
          "<p v-for=\"(x, index) in manyFoods\"> {{ index }}: \"{{ x }}\" <br> </p>",
          "<p v-for=\"(x, index) in manyFoods\"> {{ index }}: \"{{ x.name }}\", url: \"{{ x.url }}\" <br> </p>",
          "Example Display a list based on the items of an array. <ol> <li v-for=\"x in manyFoods\">{{ x }}</li> </ol> Try it Yourself »",
          "Example Show images of food, based on an array in the Vue instance. <div> <img v-for=\"x in manyFoods\" v-bind:src=\"x\"> </div> Try it Yourself »",
          "Example Show both images and names of different types of food, based on an array in the Vue instance. <div> <figure v-for=\"x in manyFoods\"> <img v-bind:src=\"x.url\"> <figcaption>{{ x.name }}</figcaption> </figure> </div> Try it Yourself »",
          "Example Show index number and food name of elements in the 'manyFoods' array in the Vue instance. <p v-for=\"(x, index) in manyFoods\"> {{ index }}: \"{{ x }}\" <br> </p> Try it Yourself »",
          "Example Show both the array element index number, and text from the objects in the 'manyFoods' array. <p v-for=\"(x, index) in manyFoods\"> {{ index }}: \"{{ x.name }}\", url: \"{{ x.url }}\" <br> </p> Try it Yourself »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_v-show.php"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-for_foodText"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-for_foodImgs"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-for_foodImgs2"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-for_index"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-for_index2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_v-show.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_events.php",
    "cours": {
      "titre": "Vue Events",
      "description": "Event handling in Vue is done with the v-on directive, so that we can make something happen when for example a button is clicked. Event handling is when HTML elements are set up to run a certain code when a certain event happens. Events in Vue are easy to use and will make our page truly responsive. Vue methods are code that can be set up to run when an event happens. With v-on modifiers you can describe in more detail how to react to an event.",
      "lien": "https://www.w3schools.com/vue/vue_events.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "A button",
            "v-on on the <button> tag to listen to the 'click' event",
            "Code to increase the number of moose",
            "A property (variable) in the Vue instance to hold the number of moose",
            "Double curly braces {{}} to show the increased number of moose"
          ],
          [
            "The Vue v-on directive",
            "Vue methods",
            "Vue v-on modifiers"
          ]
        ],
        "examples": [
          "<div id=\"app\"> <img src=\"img_moose.jpg\"> <p>{{ \"Moose count: \" + count }}</p> <button v-on:click=\"count++\">Count moose</button> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { count: 0 } } }) app.mount('#app') </script>",
          "<p v-on:click=\"changeColor\">Click me</p>",
          "Example Click the button to count one more moose in the forest. The count property increases each time the button is clicked. <div id=\"app\"> <img src=\"img_moose.jpg\"> <p>{{ \"Moose count: \" + count }}</p> <button v-on:click=\"count++\">Count moose</button> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { count: 0 } } }) app.mount('#app') </script> Try it Yourself »",
          "<p v-on:click=\"changeColor\">Click me</p>"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_v-for.php"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-on_moose"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_v-for.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_v-on.php",
    "cours": {
      "titre": "Vue v-on Directive",
      "description": "Like event handling in plain JavaScript, the v-on directive in Vue tells the browser: which event to listen to ('click', 'keydown', 'mouseover', etc) what to do when that event occurs",
      "lien": "https://www.w3schools.com/vue/vue_v-on.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "<div id=\"app\"> <div id=\"lightDiv\"> <div v-show=\"lightOn\"></div> <img src=\"img_lightBulb.svg\"> </div> <button v-on:click=\"lightOn = !lightOn\">Switch light</button> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { lightOn: false } } }) app.mount('#app') </script>",
          "<div id=\"app\"> <input v-on:input=\"inpCount++\"> <p>{{ 'Input events occured: ' + inpCount }}</p> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { inpCount: 0 } } }) app.mount('#app') </script>",
          "<div id=\"app\"> <p>Move the mouse pointer over the box below</p> <div v-on:mousemove=\"colorVal=Math.floor(Math.random()*360)\" v-bind:style=\"{backgroundColor:'hsl('+colorVal+',80%,80%)'}\"> </div> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { colorVal: 50 } } }) app.mount('#app') </script>",
          "<div id=\"app\"> <img v-bind:src=\"imgUrl\"> <ol> <li v-for=\"food in manyFoods\" v-on:click=\"imgUrl=food.url\"> {{ food.name }} </li> </ol> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { imgUrl: 'img_salad.svg', manyFoods: [ {name: 'Burrito', url: 'img_burrito.svg'}, {name: 'Salad', url: 'img_salad.svg'}, {name: 'Cake', url: 'img_cake.svg'}, {name: 'Soup', url: 'img_soup.svg'} ] } } }) app.mount('#app') </script>",
          "<button @:click =\"lightOn = !lightOn\">Switch light</button>",
          "Example The v-on directive is used on the <button> tag to listen to the 'click' event. When the 'click' event occurs the 'lightOn' data property is toggled between 'true' and 'false', making the yellow <div> behind the lightbulb visible/hidden. <div id=\"app\"> <div id=\"lightDiv\"> <div v-show=\"lightOn\"></div> <img src=\"img_lightBulb.svg\"> </div> <button v-on:click=\"lightOn = !lightOn\">Switch light</button> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { lightOn: false } } }) app.mount('#app') </script> Try it Yourself »",
          "Example Count the number of keystroke for a input text field: <div id=\"app\"> <input v-on:input=\"inpCount++\"> <p>{{ 'Input events occured: ' + inpCount }}</p> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { inpCount: 0 } } }) app.mount('#app') </script> Try it Yourself »",
          "Example Change the background color of a <div> element whenever the mouse pointer moves over it: <div id=\"app\"> <p>Move the mouse pointer over the box below</p> <div v-on:mousemove=\"colorVal=Math.floor(Math.random()*360)\" v-bind:style=\"{backgroundColor:'hsl('+colorVal+',80%,80%)'}\"> </div> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { colorVal: 50 } } }) app.mount('#app') </script> Try it Yourself »",
          "Example Display a list based on the food array and add an click event for each item that will use a value from the array item to change the source of an image. <div id=\"app\"> <img v-bind:src=\"imgUrl\"> <ol> <li v-for=\"food in manyFoods\" v-on:click=\"imgUrl=food.url\"> {{ food.name }} </li> </ol> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { imgUrl: 'img_salad.svg', manyFoods: [ {name: 'Burrito', url: 'img_burrito.svg'}, {name: 'Salad', url: 'img_salad.svg'}, {name: 'Cake', url: 'img_cake.svg'}, {name: 'Soup', url: 'img_soup.svg'} ] } } }) app.mount('#app') </script> Try it Yourself »",
          "Example Here we just write ' @ ' instead of ' v-on ': <button @:click =\"lightOn = !lightOn\">Switch light</button> Try it Yourself »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_events.php"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-on_lightSwitch"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-on_textInput"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-on_changeColor"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-on_changeFoodImg"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-on_shorthand"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_events.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_methods.php",
    "cours": {
      "titre": "Vue Methods",
      "description": "Vue methods are functions that belong to the Vue instance under the 'methods' property. Vue methods are great to use with event handling ( v-on ) to do more complex things. Vue methods can also be used to do other things than event handling.",
      "lien": "https://www.w3schools.com/vue/vue_methods.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "const app = Vue.createApp({ data() { return { text: '' } }, methods: { writeText() { this.text = 'Hello World!' } } })",
          "<div v-on:click=\"writeText\"></div>",
          "<div id=\"app\"> <p>Click on the box below:</p> <div v-on:click=\"writeText\"> {{ text }} </div> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { text: '' } }, methods: { writeText() { this.text = 'Hello World!' } } }) app.mount('#app') </script>",
          "<div id=\"app\"> <p>Move the mouse pointer over the box below:</p> <div v-on:mousemove=\"mousePos\"></div> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { xPos: 0, yPos: 0 } }, methods: { mousePos(event) { this.xPos = event.offsetX this.yPos = event.offsetY } } }) app.mount('#app') </script>",
          "<div v-on:mousemove=\"mousePos\" v-bind:style=\"{backgroundColor:'hsl('+xPos+',80%,80%)'}\"> </div>",
          "<div id=\"app\"> <textarea v-on:input=\"writeText\" placeholder=\"Start writing..\"></textarea> <span>{{ text }}</span> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { text: '' } }, methods: { writeText(event) { this.text = event.target.value } } }) app.mount('#app') </script>",
          "<button v-on:click=\"addMoose(5)\">+5</button>",
          "methods: { addMoose(number) { this.count = this.count + number } }",
          "<div id=\"app\"> <img src=\"img_moose.jpg\"> <p>{{ \"Moose count: \" + count }}</p> <button v-on:click=\"addMoose(+1)\">+1</button> <button v-on:click=\"addMoose(+5)\">+5</button> <button v-on:click=\"addMoose(-1)\">-1</button> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { count: 0 } }, methods: { addMoose(number) { this.count+=number } } }) app.mount('#app') </script>",
          "<button v-on:click=\"addAnimal($event, 5)\">+5</button>",
          "methods: { addAnimal(e, number) { if(e.target.parentElement.id===\"tigers\"){ this.tigers = this.tigers + number } } }",
          "<div id=\"app\"> <img src=\"img_tiger.jpg\" id=\"tiger\" v-on:click=\"myMethod($event,'Hello')\"> <p>\"{{ msgAndId }}\"</p> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { msgAndId: '' } }, methods: { myMethod(e,msg) { this.msgAndId =   msg + ', ' this.msgAndId +=  e.target.id } } }) app.mount('#app') </script>",
          "<div id=\"app\"> <div id=\"tigers\"> <img src=\"img_tiger.jpg\"> <button v-on:click=\"addAnimal($event,1)\">+1</button> <button v-on:click=\"addAnimal($event,5)\">+5</button> <button v-on:click=\"addAnimal($event,-1)\">-1</button> </div> <div id=\"moose\"> <img src=\"img_moose.jpg\"> <button v-on:click=\"addAnimal($event,1)\">+1</button> <button v-on:click=\"addAnimal($event,5)\">+5</button> <button v-on:click=\"addAnimal($event,-1)\">-1</button> </div> <div id=\"kangaroos\"> <img src=\"img_kangaroo.jpg\"> <button v-on:click=\"addAnimal($event,1)\">+1</button> <button v-on:click=\"addAnimal($event,5)\">+5</button> <button v-on:click=\"addAnimal($event,-1)\">-1</button> </div> <ul> <li>Tigers: {{ tigers }} </li> <li>Moose: {{ moose }} </li> <li>Kangaroos: {{ kangaroos }} </li> </ul> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { tigers: 0, moose: 0, kangaroos: 0 } }, methods: { addAnimal(e,number) { if(e.target.parentElement.id===\"tigers\") { this.tigers+=number } else if(e.target.parentElement.id===\"moose\") { this.moose+=number } else { this.kangaroos+=number } } } }) app.mount('#app') </script>",
          "const app = Vue.createApp({ data() { return { text: '' } }, methods: { writeText() { this.text = 'Hello World!' } } })",
          "<div v-on:click=\"writeText\"></div>",
          "Example The v-on directive is used on the <div> element to listen to the 'click' event. When the 'click' event occurs the 'writeText' method is called and the text is changed. <div id=\"app\"> <p>Click on the box below:</p> <div v-on:click=\"writeText\"> {{ text }} </div> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { text: '' } }, methods: { writeText() { this.text = 'Hello World!' } } }) app.mount('#app') </script> Try it Yourself »",
          "Example The v-on directive is used on the <div> element to listen to the 'mousemove' event. When the 'mousemove' event occurs the 'mousePos' method is called and the event object is sent with the method by default so we can get the mouse pointer position. We must use the this. prefix to refer to \"xPos\" inside the Vue instance data property from the method. <div id=\"app\"> <p>Move the mouse pointer over the box below:</p> <div v-on:mousemove=\"mousePos\"></div> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { xPos: 0, yPos: 0 } }, methods: { mousePos(event) { this.xPos = event.offsetX this.yPos = event.offsetY } } }) app.mount('#app') </script> Try it Yourself »",
          "Example The difference here from the example above is that the background color is bound to 'xPos' with v-bind so that hsl 'hue' value is set equal to 'xPos'. <div v-on:mousemove=\"mousePos\" v-bind:style=\"{backgroundColor:'hsl('+xPos+',80%,80%)'}\"> </div> Try it Yourself »",
          "Example The v-on directive is used on the <textarea> tag to listen to the 'input' event which occurs whenever there is a change in the text inside the textarea element. When the 'input' event occurs the 'writeText' method is called and the event object is sent with the method by default so we can get the text from the <textarea> tag. The 'text' property in the Vue instance is updated by the 'writeText' method. A span element is set up to show the 'text' value with the double curly braces syntax, and this is updated automatically by Vue. <div id=\"app\"> <textarea v-on:input=\"writeText\" placeholder=\"Start writing..\"></textarea> <span>{{ text }}</span> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { text: '' } }, methods: { writeText(event) { this.text = event.target.value } } }) app.mount('#app') </script> Try it Yourself »",
          "<button v-on:click=\"addMoose(5)\">+5</button>",
          "methods: { addMoose(number) { this.count = this.count + number } }",
          "Example <div id=\"app\"> <img src=\"img_moose.jpg\"> <p>{{ \"Moose count: \" + count }}</p> <button v-on:click=\"addMoose(+1)\">+1</button> <button v-on:click=\"addMoose(+5)\">+5</button> <button v-on:click=\"addMoose(-1)\">-1</button> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { count: 0 } }, methods: { addMoose(number) { this.count+=number } } }) app.mount('#app') </script> Try it Yourself »",
          "<button v-on:click=\"addAnimal($event, 5)\">+5</button>",
          "methods: { addAnimal(e, number) { if(e.target.parentElement.id===\"tigers\"){ this.tigers = this.tigers + number } } }",
          "Example In this example our method receives both the event object and a text. <div id=\"app\"> <img src=\"img_tiger.jpg\" id=\"tiger\" v-on:click=\"myMethod($event,'Hello')\"> <p>\"{{ msgAndId }}\"</p> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { msgAndId: '' } }, methods: { myMethod(e,msg) { this.msgAndId =   msg + ', ' this.msgAndId +=  e.target.id } } }) app.mount('#app') </script> Try it Yourself »",
          "Example Both the increment size and the event object are passed as arguments with the method when a button is clicked. The reserved word ' $event ' is used to pass the event object with the method to tell what animal to count. <div id=\"app\"> <div id=\"tigers\"> <img src=\"img_tiger.jpg\"> <button v-on:click=\"addAnimal($event,1)\">+1</button> <button v-on:click=\"addAnimal($event,5)\">+5</button> <button v-on:click=\"addAnimal($event,-1)\">-1</button> </div> <div id=\"moose\"> <img src=\"img_moose.jpg\"> <button v-on:click=\"addAnimal($event,1)\">+1</button> <button v-on:click=\"addAnimal($event,5)\">+5</button> <button v-on:click=\"addAnimal($event,-1)\">-1</button> </div> <div id=\"kangaroos\"> <img src=\"img_kangaroo.jpg\"> <button v-on:click=\"addAnimal($event,1)\">+1</button> <button v-on:click=\"addAnimal($event,5)\">+5</button> <button v-on:click=\"addAnimal($event,-1)\">-1</button> </div> <ul> <li>Tigers: {{ tigers }} </li> <li>Moose: {{ moose }} </li> <li>Kangaroos: {{ kangaroos }} </li> </ul> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { tigers: 0, moose: 0, kangaroos: 0 } }, methods: { addAnimal(e,number) { if(e.target.parentElement.id===\"tigers\") { this.tigers+=number } else if(e.target.parentElement.id===\"moose\") { this.moose+=number } else { this.kangaroos+=number } } } }) app.mount('#app') </script> Try it Yourself »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_v-on.php"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_methods_helloWorld"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_methods_mousePos"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_methods_mousePosColor"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_methods_notebook"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_methods_moose"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_methods_2args"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_methods_animals"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_v-on.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_event-modifiers.php",
    "cours": {
      "titre": "Vue Event Modifiers",
      "description": "Event modifiers in Vue modify how events trigger the running of methods and help us handle events in a more efficient and straightforward way. Event modifiers are used together with the Vue v-on directive, to for example: Prevent the default submit behavior of HTML forms ( v-on:submit.prevent ) Make sure that an event can only run once after the page is loaded ( v-on:click.once ) Specify what keyboard key to use as an event to run a method ( v-on:keyup.enter )",
      "lien": "https://www.w3schools.com/vue/vue_event-modifiers.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "<button v-on:click=\"createAlert\">Create alert</button>",
          "<button v-on:click .once =\"createAlert\">Create alert</button>",
          "<div id=\"app\"> <p>Click the button to create an alert:</p> <button v-on:click.once=\"creteAlert\">Create Alert</button> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ methods: { createAlert() { alert(\"Alert created from button click\") } } }) app.mount('#app') </script>",
          "<input v-on:keydown=\"getKey\"> <p> {{ keyValue }} </p>",
          "data() { return { keyValue = '' } }, methods: { getKey(evt) { this.keyValue = evt.key console.log(evt.key) } }",
          "<div id=\"app\"> <p>Try pressing the 's' key:</p> <textarea v-on:keyup.s=\"createAlert\"></textarea> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ methods: { createAlert() { alert(\"You pressed the 'S' key!\") } } }) app.mount('#app') </script>",
          "<div id=\"app\"> <p>Try pressing the 's' key:</p> <textarea v-on:keydown.ctrl.s=\"createAlert\"></textarea> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ methods: { createAlert() { alert(\"You pressed the 'S' and 'Ctrl' keys, in combination!\") } } }) app.mount('#app') </script>",
          "<div id=\"app\"> <div v-on:click.right=\"changeColor\" v-bind:style=\"{backgroundColor:'hsl('+bgColor+',80%,80%)'}\"> <p>Press right mouse button here.</p> </div> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { bgColor: 0 } }, methods: { changeColor() { this.bgColor+=50 } } }) app.mount('#app') </script>",
          "<div id=\"app\"> <div v-on:click.right.ctrl=\"changeColor\" v-bind:style=\"{backgroundColor:'hsl('+bgColor+',80%,80%)'}\"> <p>Press right mouse button here.</p> </div> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { bgColor: 0 } }, methods: { changeColor() { this.bgColor+=50 } } }) app.mount('#app') </script>",
          "<div id=\"app\"> <div v-on:click.right.prevent=\"changeColor\" v-bind:style=\"{backgroundColor:'hsl('+bgColor+',80%,80%)'}\"> <p>Press right mouse button here.</p> </div> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { bgColor: 0 } }, methods: { changeColor() { this.bgColor+=50 } } }) app.mount('#app') </script>",
          "<div id=\"app\"> <p>Hold 'Shift' key and press left mouse button:</p> <img v-on:click.left.shift=\"changeImg\" v-bind:src=\"imgUrl\"> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { imgUrlIndex: 0, imgUrl: 'img_tiger_square.jpeg', imgages: [ 'img_tiger_square.jpeg', 'img_moose_square.jpeg', 'img_kangaroo_square.jpeg' ] } }, methods: { changeImg() { this.imgUrlIndex++ if(this.imgUrlIndex>=3){ this.imgUrlIndex=0 } this.imgUrl = this.images[this.imgUrlIndex] } } }) app.mount('#app') </script>",
          "<button v-on:click=\"createAlert\">Create alert</button>",
          "<button v-on:click .once =\"createAlert\">Create alert</button>",
          "Example The .once modifier is used on the <button> tag to only run the method the first time the 'click' event happens. <div id=\"app\"> <p>Click the button to create an alert:</p> <button v-on:click.once=\"creteAlert\">Create Alert</button> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ methods: { createAlert() { alert(\"Alert created from button click\") } } }) app.mount('#app') </script> Try it Yourself »",
          "Example The keydown keyboard event triggers the 'getKey' method, and the value 'key' from the event object is written to the console and to the web page. <input v-on:keydown=\"getKey\"> <p> {{ keyValue }} </p> data() { return { keyValue = '' } }, methods: { getKey(evt) { this.keyValue = evt.key console.log(evt.key) } } Try it Yourself »",
          "Example Use the .s modifier to create an alert when the user writes an 's' inside the <textarea> tag. <div id=\"app\"> <p>Try pressing the 's' key:</p> <textarea v-on:keyup.s=\"createAlert\"></textarea> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ methods: { createAlert() { alert(\"You pressed the 'S' key!\") } } }) app.mount('#app') </script> Try it Yourself »",
          "Example Use the .s and .ctrl modifiers in combination to create an alert when 's' and 'ctrl' are pressed simultaneously inside the <textarea> tag. <div id=\"app\"> <p>Try pressing the 's' key:</p> <textarea v-on:keydown.ctrl.s=\"createAlert\"></textarea> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ methods: { createAlert() { alert(\"You pressed the 'S' and 'Ctrl' keys, in combination!\") } } }) app.mount('#app') </script> Try it Yourself »",
          "Example Change the background color when a user right-clicks in the <div> element: <div id=\"app\"> <div v-on:click.right=\"changeColor\" v-bind:style=\"{backgroundColor:'hsl('+bgColor+',80%,80%)'}\"> <p>Press right mouse button here.</p> </div> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { bgColor: 0 } }, methods: { changeColor() { this.bgColor+=50 } } }) app.mount('#app') </script> Try it Yourself »",
          "Example Change the background color when a user right-clicks in the <div> element in combination with the 'ctrl' key: <div id=\"app\"> <div v-on:click.right.ctrl=\"changeColor\" v-bind:style=\"{backgroundColor:'hsl('+bgColor+',80%,80%)'}\"> <p>Press right mouse button here.</p> </div> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { bgColor: 0 } }, methods: { changeColor() { this.bgColor+=50 } } }) app.mount('#app') </script> Try it Yourself »",
          "Example The drop-down menu is prevented from appearing when you right click to change the background color of the <div> element: <div id=\"app\"> <div v-on:click.right.prevent=\"changeColor\" v-bind:style=\"{backgroundColor:'hsl('+bgColor+',80%,80%)'}\"> <p>Press right mouse button here.</p> </div> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { bgColor: 0 } }, methods: { changeColor() { this.bgColor+=50 } } }) app.mount('#app') </script> Try it Yourself »",
          "Example Hold the 'shift' keyboard key and press left mouse button on the <img> tag to change image. <div id=\"app\"> <p>Hold 'Shift' key and press left mouse button:</p> <img v-on:click.left.shift=\"changeImg\" v-bind:src=\"imgUrl\"> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { imgUrlIndex: 0, imgUrl: 'img_tiger_square.jpeg', imgages: [ 'img_tiger_square.jpeg', 'img_moose_square.jpeg', 'img_kangaroo_square.jpeg' ] } }, methods: { changeImg() { this.imgUrlIndex++ if(this.imgUrlIndex>=3){ this.imgUrlIndex=0 } this.imgUrl = this.images[this.imgUrlIndex] } } }) app.mount('#app') </script> Try it Yourself »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_methods.php"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_modifiers_buttonAlert"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_modifiers_findOut"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_modifiers_sKey"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_modifiers_sCtrlCombo"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_modifiers_rightClick"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_modifiers_rightClickSyst"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_modifiers_rightClickPrevent"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_modifiers_clickShiftImg"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_methods.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_forms.php",
    "cours": {
      "titre": "Vue Forms",
      "description": "Vue gives us an easy way to improve the user experience with forms by adding extra functionality like responsiveness and form validation. Vue uses the v-model directive when handling forms.",
      "lien": "https://www.w3schools.com/vue/vue_forms.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "<form> <p>Add item</p> <p>Item name: <input type=\"text\" required></p> <p>How many: <input type=\"number\"></p> <button type=\"submit\">Add item</button> </form>",
          "<div id=\"app\"> <form> <p>Add item</p> <p>Item name: <input type=\"text\" required v-model=\"itemName\"></p> <p>How many: <input type=\"number\" v-model=\"itemNumber\"></p> <button type=\"submit\">Add item</button> </form> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { itemName: null, itemNumber: null, shoppingList: [ { name: 'Tomatoes', number: 5 } ] } } }) app.mount('#app') </script>",
          "<form v-on:submit.prevent=\"addItem\">",
          "methods: { addItem() { let item = { name: this.itemName, number: this.itemNumber } this.shoppingList.push(item); this.itemName = null this.itemNumber = null } }",
          "<p>Shopping list:</p> <ul> <li v-for=\"item in shoppingList\">{{item.name}}, {{item.number}}</li> </ul>",
          "<div id=\"app\"> <form v-on:submit.prevent=\"addItem\"> <p>Add item</p> <p>Item name: <input type=\"text\" required v-model=\"itemName\"></p> <p>How many: <input type=\"number\" v-model=\"itemNumber\"></p> <button type=\"submit\">Add item</button> </form> <p>Shopping list:</p> <ul> <li v-for=\"item in shoppingList\">{{item.name}}, {{item.number}}</li> </ul> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { itemName: null, itemNumber: null, shoppingList: [ { name: 'Tomatoes', number: 5 } ] } }, methods: { addItem() { let item = { name: this.itemName, number: this.itemNumber } this.shoppingList.push(item) this.itemName = null this.itemNumber = null } } }) app.mount('#app') </script>",
          "<form> <p>Add item</p> <p>Item name: <input type=\"text\" required></p> <p>How many: <input type=\"number\"></p> <button type=\"submit\">Add item</button> </form>",
          "<div id=\"app\"> <form> <p>Add item</p> <p>Item name: <input type=\"text\" required v-model=\"itemName\"></p> <p>How many: <input type=\"number\" v-model=\"itemNumber\"></p> <button type=\"submit\">Add item</button> </form> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { itemName: null, itemNumber: null, shoppingList: [ { name: 'Tomatoes', number: 5 } ] } } }) app.mount('#app') </script>",
          "<form v-on:submit.prevent=\"addItem\">",
          "methods: { addItem() { let item = { name: this.itemName, number: this.itemNumber } this.shoppingList.push(item); this.itemName = null this.itemNumber = null } }",
          "<p>Shopping list:</p> <ul> <li v-for=\"item in shoppingList\">{{item.name}}, {{item.number}}</li> </ul>",
          "Example In this example we can add new items to a shopping list. <div id=\"app\"> <form v-on:submit.prevent=\"addItem\"> <p>Add item</p> <p>Item name: <input type=\"text\" required v-model=\"itemName\"></p> <p>How many: <input type=\"number\" v-model=\"itemNumber\"></p> <button type=\"submit\">Add item</button> </form> <p>Shopping list:</p> <ul> <li v-for=\"item in shoppingList\">{{item.name}}, {{item.number}}</li> </ul> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { itemName: null, itemNumber: null, shoppingList: [ { name: 'Tomatoes', number: 5 } ] } }, methods: { addItem() { let item = { name: this.itemName, number: this.itemNumber } this.shoppingList.push(item) this.itemName = null this.itemNumber = null } } }) app.mount('#app') </script> Try it Yourself »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_event-modifiers.php"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_forms_shoppingList"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_event-modifiers.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_v-model.php",
    "cours": {
      "titre": "Vue v-model Directive",
      "description": "Compared to normal JavaScript, it is easier to work with forms in Vue because the v-model directive connects with all types of input elements in the same way. v-model creates a link between the input element value attribute and a data value in the Vue instance. When you change the input, the data updates and when the data changes, the input updates as well (two-way binding).",
      "lien": "https://www.w3schools.com/vue/vue_v-model.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "a boolean value in the Vue instance data property called 'important'",
            "a checkbox where the user can check if the item is important",
            "a dynamic feedback text so that the user can see if the item is important"
          ],
          [
            "the list items to react on click",
            "to change the status of the clicked item to 'found', and use this to visually move the item away and strike it through with CSS"
          ],
          [
            "A form, with relevant input tags and 'Order' button.",
            "Radio-buttons to select 'Dinner', 'Drink' or 'Dessert'.",
            "After category is chosen, a dropdown menu appears with all the items in that category.",
            "When an item is chosen you see an image of it, you can choose how many and add it to the order. The form is reset when the item is added to the order."
          ]
        ],
        "examples": [
          "<div id=\"app\"> <input type=\"text\" v-model=\"inpText\"> <p> {{ inpText }} </p> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { inpText: 'Initial text' } } }) app.mount('#app') </script>",
          "<div id=\"app\"> <form> <p> Important item? <label> <input type=\"checkbox\" v-model=\"important\"> {{ important }} </label> </p> </form> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { important: false } } }) app.mount('#app') </script>",
          "<div id=\"app\"> <form v-on:submit.prevent=\"addItem\"> <p>Add item</p> <p>Item name: <input type=\"text\" required v-model=\"itemName\"></p> <p>How many: <input type=\"number\" v-model=\"itemNumber\"></p> <p> Important? <label> <input type=\"checkbox\" v-model=\"itemImportant\"> {{ important }} </label> </p> <button type=\"submit\">Add item</button> </form> <hr> <p>Shopping list:</p> <ul> <li v-for=\"item in shoppingList\">{{item.name}}, {{item.number}}</li> </ul> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { itemName: null, itemNumber: null, important: false, shoppingList: [ { name: 'Tomatoes', number: 5, important: false } ] } }, methods: { addItem() { let item = { name: this.itemName, number: this.itemNumber important: this.itemImportant } this.shoppingList.push(item) this.itemName = null this.itemNumber = null this.itemImportant = false } } }) app.mount('#app') </script>",
          "<div id=\"app\"> <form v-on:submit.prevent=\"addItem\"> <p>Add item</p> <p>Item name: <input type=\"text\" required v-model=\"itemName\"></p> <p>How many: <input type=\"number\" v-model=\"itemNumber\"></p> <p> Important? <label> <input type=\"checkbox\" v-model=\"itemImportant\"> {{ important }} </label> </p> <button type=\"submit\">Add item</button> </form> <p><strong>Shopping list:</strong></p> <ul id=\"ulToFind\"> <li v-for=\"item in shoppingList\" v-bind:class=\"{ impClass: item.important }\" v-on:click=\"item.found=!item.found\" v-show=\"!item.found\"> {{ item.name }}, {{ item.number}} </li> </ul> <ul id=\"ulFound\"> <li v-for=\"item in shoppingList\" v-bind:class=\"{ impClass: item.important }\" v-on:click=\"item.found=!item.found\" v-show=\"item.found\"> {{ item.name }}, {{ item.number}} </li> </ul> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { itemName: null, itemNumber: null, important: false, shoppingList: [ { name: 'Tomatoes', number: 5, important: false, found: false } ] } }, methods: { addItem() { let item = { name: this.itemName, number: this.itemNumber, important: this.itemImportant, found: false } this.shoppingList.push(item) this.itemName = null this.itemNumber = null this.itemImportant = false } } }) app.mount('#app') </script>",
          "Example Two-way binding: Try to write inside the input field to see that the Vue data property value gets updated. Try also to write directly in the code to change the Vue data property value, run the code, and see how the input field is updated. <div id=\"app\"> <input type=\"text\" v-model=\"inpText\"> <p> {{ inpText }} </p> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { inpText: 'Initial text' } } }) app.mount('#app') </script> Try it Yourself »",
          "Example The checkbox text is made dynamic so that the text reflects the current checkbox input value. <div id=\"app\"> <form> <p> Important item? <label> <input type=\"checkbox\" v-model=\"important\"> {{ important }} </label> </p> </form> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { important: false } } }) app.mount('#app') </script> Try it Yourself »",
          "Example <div id=\"app\"> <form v-on:submit.prevent=\"addItem\"> <p>Add item</p> <p>Item name: <input type=\"text\" required v-model=\"itemName\"></p> <p>How many: <input type=\"number\" v-model=\"itemNumber\"></p> <p> Important? <label> <input type=\"checkbox\" v-model=\"itemImportant\"> {{ important }} </label> </p> <button type=\"submit\">Add item</button> </form> <hr> <p>Shopping list:</p> <ul> <li v-for=\"item in shoppingList\">{{item.name}}, {{item.number}}</li> </ul> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { itemName: null, itemNumber: null, important: false, shoppingList: [ { name: 'Tomatoes', number: 5, important: false } ] } }, methods: { addItem() { let item = { name: this.itemName, number: this.itemNumber important: this.itemImportant } this.shoppingList.push(item) this.itemName = null this.itemNumber = null this.itemImportant = false } } }) app.mount('#app') </script> Try it Yourself »",
          "Example After adding items to the shopping list we can pretend to go shopping, clicking the items away after finding them. If we click an item by mistake we can take it back to the 'not found' list by clicking the item once more. <div id=\"app\"> <form v-on:submit.prevent=\"addItem\"> <p>Add item</p> <p>Item name: <input type=\"text\" required v-model=\"itemName\"></p> <p>How many: <input type=\"number\" v-model=\"itemNumber\"></p> <p> Important? <label> <input type=\"checkbox\" v-model=\"itemImportant\"> {{ important }} </label> </p> <button type=\"submit\">Add item</button> </form> <p><strong>Shopping list:</strong></p> <ul id=\"ulToFind\"> <li v-for=\"item in shoppingList\" v-bind:class=\"{ impClass: item.important }\" v-on:click=\"item.found=!item.found\" v-show=\"!item.found\"> {{ item.name }}, {{ item.number}} </li> </ul> <ul id=\"ulFound\"> <li v-for=\"item in shoppingList\" v-bind:class=\"{ impClass: item.important }\" v-on:click=\"item.found=!item.found\" v-show=\"item.found\"> {{ item.name }}, {{ item.number}} </li> </ul> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { itemName: null, itemNumber: null, important: false, shoppingList: [ { name: 'Tomatoes', number: 5, important: false, found: false } ] } }, methods: { addItem() { let item = { name: this.itemName, number: this.itemNumber, important: this.itemImportant, found: false } this.shoppingList.push(item) this.itemName = null this.itemNumber = null this.itemImportant = false } } }) app.mount('#app') </script> Try it Yourself »",
          "Example This form is dynamic. It changes based on user choices. The user must first choose category, then product and how many, before the order button becomes visible and the user can order it. Try it Yourself »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_forms.php"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_modifiers_twoWay"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_forms_important"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_forms_shoppingList2"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_forms_shoppingList3"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_forms_shoppingList4"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_forms.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_css-binding.php",
    "cours": {
      "titre": "Vue CSS Binding",
      "description": "Learn more about how to use v-bind to modify CSS with the style and class attributes. While the concept to change the style and class attributes with v-bind is fairly straight forward, the syntax might need some getting used to.",
      "lien": "https://www.w3schools.com/vue/vue_css-binding.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "When CSS classes are assigned to an HTML tag with both class=\"\" and v-bind:class=\"\" Vue merges the classes.",
            "An object containing one or more classes is assigned with v-bind:class=\"{}\" . Inside the object one or more classes might be toggled on or off.",
            "With in-line styling ( v-bind:style ) camelCase is preferred when defining a CSS property, but 'kebab-case' can also be used if it is written inside quotes.",
            "CSS classes can be assigned with arrays / with array notation / syntax"
          ]
        ],
        "examples": [
          "<input type=\"range\" v-model=\"opacityVal\"> <div v-bind:style=\"{ backgroundColor: 'rgba(155,20,20,'+opacityVal+')' }\"> Drag the range input above to change opacity here. </div>",
          "<div v-for=\"(img, index) in images\"> <img v-bind:src=\"img.url\" v-on:click=\"select(index)\" v-bind:class=\"{ selClass: img.sel }\"> </div>",
          "<div class=\"impClass\" v-bind:class=\"{yelClass: isYellow}\"> This div belongs to both 'impClass' and 'yelClass'. </div>",
          "<div v-bind:class=\"{yelClass: isYellow, impClass: isImportant}\"> This tag can belong to both the 'impClass' and 'yelClass' classes. </div>",
          "<div v-bind:style=\"{ backgroundColor: 'lightpink', 'font-weight': 'bolder' }\"> This div tag has pink background and bold text. </div>",
          "<div v-bind:class=\"[{ impClass: isImportant }, 'yelClass' ]\"> This div tag belongs to one or two classes depending on the isImportant property. </div>",
          "Example An <input type=\"range\"> element is used to change the opacity of a <div> element with the use of in-line styling. <input type=\"range\" v-model=\"opacityVal\"> <div v-bind:style=\"{ backgroundColor: 'rgba(155,20,20,'+opacityVal+')' }\"> Drag the range input above to change opacity here. </div> Try it Yourself »",
          "Example Select images of food. Selected food is highlighted with the use of v-bind:class to show what you have selected. <div v-for=\"(img, index) in images\"> <img v-bind:src=\"img.url\" v-on:click=\"select(index)\" v-bind:class=\"{ selClass: img.sel }\"> </div> Try it Yourself »",
          "Example A <div> element belongs to two classes: 'impClass' and 'yelClass'. The 'important' class is set the normal way with the class attribute, and 'yellow' class is set with v-bind:class . <div class=\"impClass\" v-bind:class=\"{yelClass: isYellow}\"> This div belongs to both 'impClass' and 'yelClass'. </div> Try it Yourself »",
          "Example A <div> element can belong to both 'impClass' and 'yelClass' classes, depending on the boolean Vue data properties 'isYellow' and 'isImportant'. <div v-bind:class=\"{yelClass: isYellow, impClass: isImportant}\"> This tag can belong to both the 'impClass' and 'yelClass' classes. </div> Try it Yourself »",
          "Example Here, we set CSS properties background-color and font-weight for a <div> element in two different ways: the recommended way with \n  camel Case backgroundColor , and the not recommended way with 'kebab-case' in quotes 'font-weight' . Both alternatives work. <div v-bind:style=\"{ backgroundColor: 'lightpink', 'font-weight': 'bolder' }\"> This div tag has pink background and bold text. </div> Try it Yourself »",
          "Example Here, we set CSS classes 'impClass' and 'yelClass' with array syntax. The class 'impClass' depends on a Vue property isImportant and the class 'yelClass' is always attached to the <div> element. <div v-bind:class=\"[{ impClass: isImportant }, 'yelClass' ]\"> This div tag belongs to one or two classes depending on the isImportant property. </div> Try it Yourself »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_v-model.php"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_cssBinding_range"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_cssBinding_food"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_cssBinding_1"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_cssBinding_2"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_cssBinding_3"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_cssBinding_4"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_v-model.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_computed-properties.php",
    "cours": {
      "titre": "Vue Computed Properties",
      "description": "Computed properties are like data properties, except they depend on other properties. Computed properties are written like methods, but they do not accept any input arguments. Computed properties are updated automatically when a dependency changes, while methods are called on when something happens, like with event handling for example. Computed properties are used when outputting something that depends on something else.",
      "lien": "https://www.w3schools.com/vue/vue_computed-properties.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Methods runs when called from HTML, but computed properties updates automatically when a dependency change.",
            "Computed properties are used the same way we use data properties, but they are dynamic."
          ]
        ],
        "examples": [
          "const app = Vue.createApp({ data() { ... }, computed : { ... }, methods: { ... } })",
          "<input type=\"checkbox\" v-model=\"chbxVal\"> {{ chbxVal }}",
          "data() { return { chbxVal: false } }",
          "<input type=\"checkbox\" v-model=\"chbxVal\"> {{ isImportant }}",
          "data() { return { chbxVal: false } }, computed: { isImportant() { if(this.chbxVal){ return 'yes' } else { return 'no' } }",
          "Syntax const app = Vue.createApp({ data() { ... }, computed : { ... }, methods: { ... } })",
          "Example An input element is made dynamic so that the text reflects the status. <input type=\"checkbox\" v-model=\"chbxVal\"> {{ chbxVal }} data() { return { chbxVal: false } } Try it Yourself »",
          "Example With a computed property 'isImportant' we can now customize the text feedback to the user when the checkbox is toggled on and off. <input type=\"checkbox\" v-model=\"chbxVal\"> {{ isImportant }} data() { return { chbxVal: false } }, computed: { isImportant() { if(this.chbxVal){ return 'yes' } else { return 'no' } } Try it Yourself »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_css-binding.php"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_cp_important"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_cp_important-2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_css-binding.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_watchers.php",
    "cours": {
      "titre": "Vue Watchers",
      "description": "A watcher is a method that watches a data property with the same name. A watcher runs every time the data property value changes. Use a watcher if a certain data property value requires an action.",
      "lien": "https://www.w3schools.com/vue/vue_watchers.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Methods are called from HTML.",
            "Methods are often called when an event happens.",
            "Methods automatically receives the event object as an input.",
            "We can also send other values we choose as an input to a method .",
            "Watchers are only called when the watched data property value changes, and this happens automatically.",
            "Watchers automatically receives the new and old value from the watched property.",
            "We cannot choose to send any other values with a watcher as an input."
          ],
          [
            "Watchers only depend on one property, the property they are set up to watch.",
            "Computed properties can depend on many properties.",
            "Computed properties are used like data properties, except they are dynamic.",
            "Watchers are not referred to from HTML."
          ]
        ],
        "examples": [
          "const app = Vue.createApp({ data() { ... }, watch : { ... }, computed: { ... }, methods: { ... } })",
          "<input type=\"range\" v-model=\"rangeVal\"> <p>{{ rangeVal }}</p>",
          "const app = Vue.createApp({ data() { rangeVal: 70 }, watch: { rangeVal(val){ if( val>20 && val<60) { if(val<40){ this.rangeVal = 20; } else { this.rangeVal = 60; } } } } })",
          "<div v-on:click=\"updatePos\"></div> <p>{{ xDiff }}</p>",
          "const app = Vue.createApp({ data() { xPos: 0, xDiff: 0 }, watch: { xPos( newVal,oldVal ){ this.xDiff = newVal-oldVal } }, methods: { updatePos(evt) { this.xPos = evt.offsetX } } })",
          "<input v-type=\"email\" v-model=\"inpAddress\"> <p v-bind:class=\"myClass\">{{ feedbackText }}</p>",
          "const app = Vue.createApp({ data() { inpAddress: '', feedbackText: '', myClass: 'invalid' }, watch: { inpAddress(newVal,oldVal) { if( !newVal.includes('@') ) { this.feedbackText = 'The e-mail address is NOT valid'; this.myClass = 'invalid'; } else if( !oldVal.includes('@') && newVal.includes('@') ) { this.feedbackText = 'Perfect! You fixed it!'; this.myClass = 'valid'; } else { this.feedbackText = 'The e-mail address is valid :)'; } } } })",
          "Syntax const app = Vue.createApp({ data() { ... }, watch : { ... }, computed: { ... }, methods: { ... } })",
          "Example An <input type=\"range\"> element is used to change a value 'rangeVal'. A watcher is used to prevent the user from choosing values between 20 and 60 that are considered illegal. <input type=\"range\" v-model=\"rangeVal\"> <p>{{ rangeVal }}</p> const app = Vue.createApp({ data() { rangeVal: 70 }, watch: { rangeVal(val){ if( val>20 && val<60) { if(val<40){ this.rangeVal = 20; } else { this.rangeVal = 60; } } } } }) Try it Yourself »",
          "Example We set up click event on a <div> element to record mouse pointer x-position 'xPos' with a method 'updatePos'. A watcher calculates the difference in pixels between the new x-position and the previous with the use of old and new input arguments to the watcher method. <div v-on:click=\"updatePos\"></div> <p>{{ xDiff }}</p> const app = Vue.createApp({ data() { xPos: 0, xDiff: 0 }, watch: { xPos( newVal,oldVal ){ this.xDiff = newVal-oldVal } }, methods: { updatePos(evt) { this.xPos = evt.offsetX } } }) Try it Yourself »",
          "Example The value from an <input> element is connected to a watcher. If the value includes a '@' it is considered a valid e-mail address. The user gets a feedback text to inform if the input is valid, invalid, or if it just got valid with the last keystroke. <input v-type=\"email\" v-model=\"inpAddress\"> <p v-bind:class=\"myClass\">{{ feedbackText }}</p> const app = Vue.createApp({ data() { inpAddress: '', feedbackText: '', myClass: 'invalid' }, watch: { inpAddress(newVal,oldVal) { if( !newVal.includes('@') ) { this.feedbackText = 'The e-mail address is NOT valid'; this.myClass = 'invalid'; } else if( !oldVal.includes('@') && newVal.includes('@') ) { this.feedbackText = 'Perfect! You fixed it!'; this.myClass = 'valid'; } else { this.feedbackText = 'The e-mail address is valid :)'; } } } }) Try it Yourself »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_computed-properties.php"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_watcher_1"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_watcher_newOld"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_watcher_newOld2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_computed-properties.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_templates.php",
    "cours": {
      "titre": "Vue Templates",
      "description": "A template in Vue is what we call the HTML part of our Vue application. The <template> tag will later be used in *.vue files to structure our code in a better way. It is possible to use template as a configuration option in the Vue instance, and put the HTML code inside.",
      "lien": "https://www.w3schools.com/vue/vue_templates.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "<template> where the HTML content is.",
            "<script> for our Vue code.",
            "<style> where we write the CSS styling."
          ]
        ],
        "examples": [
          "<div id=\"app\"></div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ template: `<h1>{{ message }}</h1> <p>This is a second line of HTML code, inside \n    back tick quotes</p>`, data() { return { message: \"Hello World!\" } } }) app.mount('#app') </script>",
          "Example The HTML content from inside the <div id=\"app\"> is moved to the configuration option 'template', encapsulated in backtick quotes `...` . We can write many lines of HTML inside a \n  back tick quote. <div id=\"app\"></div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ template: `<h1>{{ message }}</h1> <p>This is a second line of HTML code, inside \n    back tick quotes</p>`, data() { return { message: \"Hello World!\" } } }) app.mount('#app') </script> Try it Yourself »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_watchers.php"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_template_helloWorld"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_watchers.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_scale-up.php",
    "cours": {
      "titre": "Scaling up Vue",
      "description": "Using *.vue files for our Vue project makes sense because: it becomes easier to handle larger projects with the use of templates and components. we can see and test our project through the https protocol, like the users will see the page. the page updates immediately when changes are saved, without reloading. this is how real web pages in Vue are built. it is how developers work.",
      "lien": "https://www.w3schools.com/vue/vue_scale-up.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "have larger projects",
            "gather all Vue related code in one place",
            "use components in Vue (we will come to this soon)",
            "have highlighting and auto-completion support in the editor",
            "auto-update the browser"
          ],
          [
            "The \"VS Code\" Editor There are many different editors that can be used for Vue projects. We use the VS Code editor. Download VS Code and install it.",
            "The VS Code \"Volar\" Extension To get highlighting and auto-completion with *.vue files in the editor, open VS Code, go to \"Extensions\" on the left hand side. Search for \"Volar\" and install the extension with the most downloads and the description \"Language support for Vue 3\".",
            "Node.js Download and install the latest version of Node.js , as the Vue build tool \"Vite\" runs on top of this. Node.js is an open-source server-side JavaScript runtime environment."
          ],
          [
            "Create a folder for your Vue projects on your computer.",
            "In VS Code, open a terminal by choosing Terminal -> New Terminal from the menu:",
            "Use the terminal to navigate to the Vue folder you just created by using commands like cd <folder-name> , cd .. , ls (Mac/Linux) and dir (Windows). If you are not familiar with writing commands in the terminal, see our introduction to Command Line Interface (CLI) here .",
            "After you have navigated to your Vue folder in the terminal, write: npm init vue@latest",
            "Create your first project, with project name \"firstsfc\":",
            "Answer \"No\" to all options:",
            "Now you should be presented with this in your terminal:",
            "We will now run the commands as suggested above. Run this command to change directory to your new project inside the 'firstsfc' folder: cd firstsfc",
            "Install all required dependencies so that the Vue project works: npm install",
            "Start the development server: npm run dev",
            "The terminal window should now look like this: And your browser should open the example project automatically: If you cannot find the example project in the browser, use the link from the terminal. The link you find in your terminal window might have a different address than the address in the screenshot above. Now the example project is running on your machine in development mode by the Vite build tool."
          ]
        ],
        "examples": [
          "npm init vue@latest",
          "cd firstsfc",
          "npm install",
          "npm run dev",
          "npm init vue@latest",
          "cd firstsfc",
          "npm install",
          "npm run dev",
          "App.vue : <script setup>\nimport HelloWorld from './components/HelloWorld.vue'\nimport TheWelcome from './components/TheWelcome.vue'\n</script>\n\n<template>\n  <header>\n    <img alt=\"Vue logo\" class=\"logo\" src=\"./assets/logo.svg\" width=\"125\" height=\"125\" />\n\n    <div class=\"wrapper\">\n      <HelloWorld msg=\"You did it!\" />\n    </div>\n  </header>\n\n  <main>\n    <TheWelcome />\n  </main>\n</template>\n\n<style scoped>\nheader {\n  line-height: 1.5;\n}\n\n.logo {\n  display: block;\n  margin: 0 auto 2rem;\n}\n\n@media (min-width: 1024px) {\n  header {\n    display: flex;\n    place-items: center;\n    padding-right: calc(var(--section-gap) / 2);\n  }\n\n  .logo {\n    margin: 0 2rem 0 0;\n  }\n\n  header .wrapper {\n    display: flex;\n    place-items: flex-start;\n    flex-wrap: wrap;\n  }\n}\n</style>"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_templates.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_templates.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_sfc_first.php",
    "cours": {
      "titre": "Our First SFC Web Page",
      "description": "To create our first SFC web page from scratch we will: Create a new clean Vue project Write code in the 'App.vue' file See how the web page updates automatically during development Build the page for production",
      "lien": "https://www.w3schools.com/vue/vue_sfc_first.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "App.vue: <script></script>\n\n<template></template>\n\n<style></style>",
          "main.js: import { createApp } from 'vue'\nimport App from './App.vue'\n\ncreateApp(App).mount('#app')",
          "<template>\n  <h1>Hello World!</h1>\n</template>\n\n<script></script>\n<style></style>",
          "Example App.vue : <template>\n  <h1>{{ message }}</h1>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'This is some text'\n    };\n  }\n};\n</script>\n\n<style></style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_scale-up.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_mycomp2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_scale-up.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_components.php",
    "cours": {
      "titre": "Vue Components",
      "description": "Components in Vue lets us decompose our web page into smaller pieces that are easy to work with. We can work with a Vue component in isolation from the rest of the web page, with its own content and logic. A web page often consists of many Vue components.",
      "lien": "https://www.w3schools.com/vue/vue_components.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Create a new folder components inside the src folder.",
            "Inside the components folder, create a new file FoodItem.vue . It is common to name components with PascalCase naming convention, without spaces and where all new words starts with a capital letter, also the first word.",
            "Make sure the FoodItem.vue file look like this:"
          ]
        ],
        "examples": [
          "npm run dev",
          "Code inside the FoodItem.vue component: <template>\n  <div>\n    <h2>{{ name }}</h2>\n    <p>{{ message }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      name: 'Apples',\n      message: 'I like apples'\n    }\n  }\n};\n</script>\n\n<style></style>",
          "main.js : import { createApp } from 'vue'\n\nimport App from './App.vue'\n\nconst app = createApp(App)\napp.mount('#app')",
          "main.js : import { createApp } from 'vue'\n\nimport App from './App.vue'\nimport FoodItem from './components/FoodItem.vue'\n\nconst app = createApp(App)\napp.component('food-item', FoodItem)\napp.mount('#app')",
          "App.vue : <template>\n  <h1>Food</h1>\n  <food-item/>\n  <food-item/>\n  <food-item/>\n</template>\n\n<script></script>\n\n<style></style>",
          "Example App.vue : <template>\n  <h1>Food</h1>\n  <food-item/>\n  <food-item/>\n  <food-item/>\n</template>\n\n<script></script>\n\n<style>\n  #app > div {\n    border: dashed black 1px;\n    display: inline-block;\n    margin: 10px;\n    padding: 10px;\n    background-color: lightgreen;\n  }\n</style> Run Example »",
          "npm run dev",
          "CSS code added to the <style> tag in App.vue : #app > div:hover {\n  cursor: pointer;\n}",
          "Example FoodItem.vue : <template>\n  <div v-on:click=\"countClicks\">\n    <h2>{{ name }}</h2>  \n    <p>{{ message }}</p>\n    <p id=\"red\">You have clicked me {{ clicks }} times.</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      name: 'Apples',\n      message: 'I like apples',\n      clicks: 0\n    }\n  },\n  methods: {\n    countClicks() {\n      this.clicks++;\n    }\n  }\n}\n</script>\n\n<style>\n  #red {\n    font-weight: bold ;\n    color: rgb(144, 12, 12);\n  }\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_sfc_first.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_firstComp3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_secondComp3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_sfc_first.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_props.php",
    "cours": {
      "titre": "Vue Props",
      "description": "Props is a configuration option in Vue. With props we can pass data to the components via custom attributes to the component tag.",
      "lien": "https://www.w3schools.com/vue/vue_props.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "App.vue : <template>\n  <h1>Food</h1>\n  <food-item food-name=\"Apples\"/>\n  <food-item food-name=\"Pizza\"/>\n  <food-item food-name=\"Rice\"/>\n</template>\n\n<script></script>\n\n<style>\n  #app > div {\n    border: dashed black 1px;\n    display: inline-block;\n    width: 120px;\n    margin: 10px;\n    padding: 10px;\n    background-color: lightgreen;\n  }\n</style>",
          "FoodItem.vue : <script>\n  export default {\n    props: [\n      'foodName'\n    ]\n  }\n</script>",
          "Example App.vue : <template>\n  <h1>Food</h1>\n  <food-item food-name=\"Apples\"/>\n  <food-item food-name=\"Pizza\"/>\n  <food-item food-name=\"Rice\"/>\n</template> FoodItem.vue : <template>\n  <div>\n    <h2>{{ foodName }}</h2>\n  </div>\n</template>\n\n<script>\n  export default {\n    props: [\n      ' foodName '\n    ]\n  }\n</script>\n\n<style></style> Run Example »",
          "Example App.vue : <template>\n  <h1>Food</h1>\n  <div id=\"wrapper\">\n    <food-item\n      food-name=\"Apples\"\n      food-desc=\"Apples are a type of fruit that grow on trees.\"/>\n    <food-item\n      food-name=\"Pizza\"\n      food-desc=\"Pizza has a bread base with tomato sauce, cheese, and toppings on top.\"/>\n    <food-item\n      food-name=\"Rice\"\n      food-desc=\"Rice is a type of grain that people like to eat.\"/>\n  </div>\n</template>\n\n<script></script>\n\n<style>\n  #wrapper {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  #wrapper > div {\n    border: dashed black 1px;\n    margin: 10px;\n    padding: 10px;\n    background-color: lightgreen;\n  }\n</style> FoodItem.vue : <template>\n  <div>\n    <h2>{{ foodName }}</h2>\n    <p>{{ foodDesc }}</p>\n  </div>\n</template>\n\n<script>\n  export default {\n    props: [\n      'foodName',\n      'foodDesc'\n    ]\n  }\n</script>\n\n<style></style> Run Example »",
          "App.vue : <template>\n  <h1>Food</h1>\n  <p>My favorite food has a diploma image attached to it.</p>\n  <div id=\"wrapper\">\n    <food-item\n      food-name=\"Apples\"\n      food-desc=\"Apples are a type of fruit that grow on trees.\"\n      v-bind:is-favorite=\"true\"/>\n    <food-item\n      food-name=\"Pizza\"\n      food-desc=\"Pizza has a bread base with tomato sauce, cheese, and toppings on top.\"\n      v-bind:is-favorite=\"false\"/>\n    <food-item\n      food-name=\"Rice\"\n      food-desc=\"Rice is a type of grain that people like to eat.\"\n      v-bind:is-favorite=\"false\"/>\n  </div>\n</template>",
          "Example FoodItem.vue : <template>\n  <div>\n    <h2>\n      {{ foodName }}\n      <img src=\"/img_quality.svg\" v-show=\"isFavorite\">\n    </h2>\n    <p>{{ foodDesc }}</p>\n  </div>\n</template>\n\n<script>\n  export default {\n      props: ['foodName','foodDesc','isFavorite']\n  }\n</script>\n\n<style>\n  img {\n    height: 1.5em;\n    float: right;\n  }\n</style> Run Example »",
          "FoodItem.vue : <script>\n  export default {\n    // props: ['foodName','foodDesc','isFavorite']\n    props: {\n      foodName: String,\n      foodDesc: String,\n      isFavorite: Boolean\n    }\n  }\n</script>",
          "FoodItem.vue : <script>\n  export default {\n    // props: ['foodName','foodDesc','isFavorite']\n    props: {\n      foodName: {\n        type: String,\n        required: true\n      },\n      foodDesc: String,\n      isFavorite: Boolean\n    }\n  }\n</script>",
          "Example App.vue : <template>\n  <h1>Food</h1>\n  <p>My favorite food has a diploma image attached to it.</p>\n  <div id=\"wrapper\">\n    <food-item\n      food-name=\"Apples\"\n      food-desc=\"Apples are a type of fruit that grow on trees.\"\n      v-bind:is-favorite=\"true\"/>\n    <food-item\n      food-name=\"Pizza\"\n      food-desc=\"Pizza has a bread base with tomato sauce, cheese, and toppings on top.\"\n      v-bind:is-favorite=\"false\"/>\n    <food-item\n      food-name=\"Rice\" food-desc=\"Rice is a type of grain that people like to eat.\" v-bind:is-favorite=\"false\"/>\n  </div>\n</template> FoodItem.vue : <script>\n  export default {\n    props: {\n      foodName: {\n        type: String,\n        required: true\n      },\n      foodDesc: {\n        type: String,\n        required: false,\n        default: 'This is the default description.'\n      },\n      isFavorite: {\n        type: Boolean,\n        required: false,\n        default: false\n      }\n    }\n  }\n</script> Run Example »",
          "FoodItem.vue : <script>\n  export default {\n    props: {\n      foodName: {\n        type: String,\n        required: true\n      },\n      foodDesc: {\n        type: String,\n        required: false,\n        default: 'This is the default description.',\n        validator: function(value) {\n          if( 20<value.length && value.length<50 ) {\n            return true;\n          }\n          else {\n            return false;\n          }\n        }\n      },\n      isFavorite: {\n        type: Boolean,\n        required: false,\n        default: false\n      }\n    }\n  }\n</script>",
          "We are not allowed to change 'isFavorite'. This will generate an error. methods: {\n  toggleFavorite() { \n    this.isFavorite = !this.isFavorite;\n  }\n}",
          "data() {\n  return { \n    foodIsFavorite: this.isFavorite\n  }\n}",
          "methods: {\n  toggleFavorite() { \n    this.foodIsFavorite = !this.foodIsFavorite;\n  }\n}",
          "Example FoodItem.vue : <template>\n  <div>\n    <h2>\n      {{ foodName }}\n      <img src=\"/img_quality.svg\" v-show=\"foodIsFavorite\">\n    </h2>\n    <p>{{ foodDesc }}</p>\n    <button v-on:click=\"toggleFavorite\">Favorite</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: ['foodName','foodDesc','isFavorite'],\n  data() {\n    return {\n      foodIsFavorite: this.isFavorite\n    }\n  },\n  methods: {\n    toggleFavorite() {\n      this.foodIsFavorite = !this.foodIsFavorite;\n    }\n  }\n};\n</script>\n\n<style>\n  img {\n    height: 1.5em;\n    float: right;\n  }\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_components.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_props3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_props2_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_props3_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_props4_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_propsChangeVal_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_components.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_v-for-comp.php",
    "cours": {
      "titre": "Vue v-for Components",
      "description": "Components can be reused with v-for to generate many elements of the same kind. When generating elements with v-for from a component, it is also very helpful that props can be assigned dynamically based on values from an array.",
      "lien": "https://www.w3schools.com/vue/vue_v-for-comp.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example App.vue : <template>\n  <h1>Food</h1>\n  <p>Components created with v-for based on an array.</p>\n  <div id=\"wrapper\">\n    <food-item\n      v-for=\"x in foods\"\n      v-bind:food-name=\"x\"/>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        foods: ['Apples','Pizza','Rice','Fish','Cake']\n      };\n    }\n  }\n</script> FoodItem.vue : <template>\n  <div>\n    <h2>{{ foodName }}</h2>\n  </div>\n</template>\n\n<script>\n  export default {\n    props: ['foodName']\n  }\n</script> Run Example »",
          "Example App.vue : <template>\n  <h1>Food</h1>\n  <p>Food items are generated with v-for from the 'foods' array.</p>\n  <div id=\"wrapper\">\n    <food-item\n      v-for=\"x in foods\"\n      :food-name=\"x.name\"\n      :food-desc=\"x.desc\"\n      :is-favorite=\"x.favorite\"/>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        foods: [\n          { name: 'Apples',\n            desc: 'Apples are a type of fruit that grow on trees.',\n            favorite: true },\n          { name: 'Pizza',\n            desc: 'Pizza has a bread base with tomato sauce, cheese, and toppings on top.',\n            favorite: false },\n          { name: 'Rice',\n            desc: 'Rice is a type of grain that people like to eat.',\n            favorite: false }\n          { name: 'Fish',\n            desc: 'Fish is an animal that lives in water.',\n            favorite: true }\n          { name: 'Cake',\n            desc: 'Cake is something sweet that tastes good.',\n            favorite: false }\n        ]\n      };\n    }\n  }\n</script>\n\n<style>\n  #wrapper {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  #wrapper > div {\n    border: dashed black 1px;\n    flex-basis: 120px;\n    margin: 10px;\n    padding: 10px;\n    background-color: lightgreen;\n  }\n</style> FoodItem.vue : <template>\n  <div>\n    <h2>\n      {{ foodName }}\n      <img src=\"/img_quality.svg\" v-show=\"foodIsFavorite\">\n    </h2>\n    <p>{{ foodDesc }}</p>\n    <button v-on:click=\"toggleFavorite\">Favorite</button>\n  </div>\n</template>\n\n<script>\n  export default {\n    props: ['foodName','foodDesc','isFavorite'],\n    data() {\n      return {\n        foodIsFavorite: this.isFavorite\n      }\n    },\n    methods: {\n      toggleFavorite() {\n        this.foodIsFavorite = !this.foodIsFavorite;\n      }\n    }\n  }\n</script>\n\n<style>\n  img {\n    height: 1.5em;\n    float: right;\n  }\n</style> Run Example »",
          "Example The only difference from the previous example is that we add a button: <button @click=\"removeItem\">Remove Item</button> and a method: methods: {\n  removeItem() {\n    this.foods.splice(1,1);\n  }\n} in App.vue . Run Example »",
          "Example We only need to add one line in App.vue to uniquely identify each element created with v-for and fix the problem: <food-item\n  v-for=\"x in foods\"\n  :key=\"x.name\"\n  :food-name=\"x.name\"\n  :food-desc=\"x.desc\"\n  :is-favorite=\"x.favorite\"\n/> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_props.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_v-forComp_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_v-forKey_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_v-forKey2_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_v-forKey3_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_props.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_emit.php",
    "cours": {
      "titre": "Vue $emit() Method",
      "description": "With the built-in $emit() method in Vue we can create a custom event in the child component that can be captured in the parent element. Props are used to send data from the parent element to the child component, and $emit() is used to do the \n  opposite: to pass information from the child component to the parent.",
      "lien": "https://www.w3schools.com/vue/vue_emit.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "FoodItem.vue : methods: {\n  toggleFavorite() { this.foodIsFavorite = !this.foodIsFavorite; this.$emit('toggle-Favorite');\n  }\n}",
          "Example Listen to the 'toggle-favorite' event in App.vue : <food-item\n  v-for=\"x in foods\"\n  :key=\"x.name\"\n  :food-name=\"x.name\"\n  :food-desc=\"x.desc\"\n  :is-favorite=\"x.favorite\" @toggle-favorite=\"receiveEmit\" /> When our custom 'toggle-favorite' event happens, we need to create the receiveEmit method in App.vue so that we can see that the event happened: methods: {\n  receiveEmit() {\n    alert('Hello World!');\n  }\n} Run Example »",
          "FoodItem.vue : methods: {\n  toggleFavorite() {\n    this.$emit('toggle-favorite' , this.foodName );\n  }\n}",
          "Example App.vue : methods: {\n  receiveEmit( foodId ) {  \n    alert( 'You clicked: ' + foodId );\n  }\n} Run Example »",
          "App.vue : methods: {\n  receiveEmit(foodId) {\n    const foundFood = this.foods.find(\n      food => food.name === foodId\n    );\n    foundFood.favorite = !foundFood.favorite;\n  }\n} In the code above, the array method 'find' goes through the 'foods' array and looks for an object with name property equal to the food item we have clicked, and returns that object as 'foundFood'. After that we can set 'foundFood.health' to be \n  opposite to what it was before so that it toggles between true and false . Learn more about the JavaScript array method 'find' here . Learn more about JavaScript arrow functions here .",
          "<img src=\"/img_quality.svg\" v-show=\" isFavorite \">",
          "Example In this final example code the favorite status of the food items can be toggled in a similar way as before, but now the favorite status is modified in the correct place, inside App.vue . Run Example »",
          "<script>\nexport default {  \n  props: ['foodName','foodDesc','isFavorite'], emits: ['toggle-favorite'], methods: {\n    toggleFavorite() {\n      this.$emit('toggle-favorite', this.foodName);\n    }\n  }\n};\n</script>"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_v-for-comp.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_emit_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_emit2_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_emit3_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_v-for-comp.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_fallthru-attr.php",
    "cours": {
      "titre": "Vue Fallthrough Attributes",
      "description": "A component can be called with attributes that are not declared as props, and they will simply fall through to the root element in the component. With fallthrough attributes you get a better overview from the parent where the component is created, and it simplifies our code because we don't need to declare the attribute as a prop. Typical attributes used to fall through are class , style and v-on .",
      "lien": "https://www.w3schools.com/vue/vue_fallthru-attr.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "App.vue : <template>\n  <h3>Todo List</h3>  \n  <ul>\n    <todo-item\n      v-for=\"x in items\"\n      :key=\"x\"\n      :item-name=\"x\"\n    />\n  </ul>\n  <input v-model=\"newItem\">\n  <button @click=\"addItem\">Add</button>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        newItem: '',\n        items: ['Buy apples','Make pizza','Mow the lawn']\n      };\n    },\n    methods: {\n      addItem() {\n        this.items.push(this.newItem),\n        this.newItem = '';\n      }\n    }\n  }\n</script>",
          "TodoItem.vue : <template>\n  <li>{{ itemName }}</li>\n</template>\n\n<script>\n  export default {\n    props: ['itemName']\n  }\n</script>",
          "main.js : import { createApp } from 'vue'\n  \nimport App from './App.vue'\nimport TodoItem from './components/TodoItem.vue'\n\nconst app = createApp(App)\napp.component('todo-item', TodoItem)\napp.mount('#app')",
          "Example We give styling to the <li> elements inside the component, from App.vue : <template>\n  <h3>Todo List</h3>\n  <ul>\n    <todo-item\n      v-for=\"x in items\"\n      :key=\"x\"\n      :item-name=\"x\" style=\"background-color: lightgreen;\" />\n  </ul>\n  <input v-model=\"newItem\">\n  <button @click=\"addItem\">Add</button>\n</template> Run Example »",
          "Example In addition to the existing styling from the parent, we add a margin to the <li> elements inside the TodoItem.vue component: <template>\n  <li style=\"margin: 5px 0;\" >{{ itemName }}</li>\n</template>\n\n<script>\n  export default {\n    props: ['itemName']\n  }\n</script> Run Example »",
          "Example TodoItem.vue : <template>\n  <div class=\"pinkBall\"></div>\n  <li v-bind=\"$attrs\" >{{ itemName }}</li>\n  <div class=\"pinkBall\"></div>\n</template> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_emit.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_todoList_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_todoList2_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_todoList3_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_emit.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_scoped-styling.php",
    "cours": {
      "titre": "Scoped Styling",
      "description": "Styling defined inside the <style> tag in a component, or in App.vue , is actually available globally in all components. To keep the styling limited locally to just the component, we can use the scope attribute on that component: <style scoped>",
      "lien": "https://www.w3schools.com/vue/vue_scoped-styling.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example In this application we have three *.vue files: App.vue , and two components CompOne.vue and CompTwo.vue . The CSS styling inside CompOne.vue affects <p> tags in all three *.vue files: <template>\n  <p>This p-tag belongs to 'CompOne.vue'</p>\n</template>\n\n<script></script>\n\n<style>\n  p {\n    background-color: pink;\n    width: 150px;\n  }\n</style> Run Example »",
          "Example The <style> tag in CompOne.vue is given the scoped attribute: <template>\n  <p>This p-tag belongs to 'CompOne.vue'</p>\n</template>\n\n<script></script>\n\n<style scoped >\n  p {\n    background-color: pink;\n    width: 150px;\n  }\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_fallthru-attr.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_scopedStyle_4"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_scopedStyle2_4"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_fallthru-attr.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_local-components.php",
    "cours": {
      "titre": "Local Components",
      "description": "The way we have included components so far makes them accessible from all *.vue files in a project. Components can be made to be local , meaning that they are only accessible inside a specific *.vue file.",
      "lien": "https://www.w3schools.com/vue/vue_local-components.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example We use the CompOne.vue component inside both CompTwo.vue and App.vue to show that components are accessible to each other with our current main.js setup. main.js : import { createApp } from 'vue'\n \nimport App from './App.vue'\nimport CompOne from './components/CompOne.vue'\nimport CompTwo from './components/CompTwo.vue'\n\nconst app = createApp(App)\napp.component('comp-one', CompOne)\napp.component('comp-two', CompTwo)\napp.mount('#app') Run Example »",
          "Example To make CompOne.vue local to App.vue , and only accessible there, we remove it from main.js . main.js : import { createApp } from 'vue'\n \nimport App from './App.vue' import CompOne from './components/CompOne.vue' import CompTwo from './components/CompTwo.vue'\n \nconst app = createApp(App) app.component('comp-one', CompOne) app.component('comp-two', CompTwo)\napp.mount('#app') And include CompOne.vue directly in the <script> tag of App.vue instead. App.vue : <template>\n  <h3>Local Component</h3>\n  <p>The CompOne.vue component is a local component and can only be used inside App.vue.</p>\n  <comp-one />\n  <comp-two />\n</template>\n\n<script> import CompOne from './components/CompOne.vue';\n\n  export default {\n    components: {\n      'comp-one': CompOne\n    }\n  } </script> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_scoped-styling.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_globalComp_4"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_localComp_4"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_scoped-styling.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_slots.php",
    "cours": {
      "titre": "Vue Slots",
      "description": "Slots are a powerful feature in Vue that allow for more flexible and reusable components. We use slots in Vue to send content from the parent into the <template> of a child component.",
      "lien": "https://www.w3schools.com/vue/vue_slots.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "App.vue : <template>\n  <slot-comp />\n</template>",
          "App.vue : <template> <slot-comp>Hello World!</slot-comp> </template>",
          "Example SlotComp.vue : <template>\n  <div>  \n    <p>SlotComp.vue</p> <slot></slot> </div>\n</template> Run Example »",
          "Example App.vue : <template>\n  <h3>Slots in Vue</h3>  \n  <p>We create card-like div boxes from the foods array.</p>\n  <div id=\"wrapper\">\n    <slot-comp v-for=\"x in foods\">\n      <img v-bind:src=\"x.url\">\n      <h4>{{x.name}}</h4>\n      <p>{{x.desc}}</p>\n    </slot-comp>\n  </div>\n</template> As the content enters the component where the <slot> is, we use a div around the <slot> and style the <div> locally to create a card-like appearance around the content without affecting other divs in our application. SlotComp.vue : <template>\n  <div> <!-- This div makes the card-like appearance -->\n    <slot></slot>\n  </div>\n</template>\n\n<script></script>\n\n<style scoped>\n  div {\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\n    border-radius: 10px;\n    margin: 10px;\n  }\n</style> Run Example »",
          "Example App.vue : <template>\n  <h3>Reusable Slot Cards</h3>\n  <p>We create card-like div boxes from the foods array.</p>\n  <p>We also create a card-like footer by reusing the same component.</p>\n  <div id=\"wrapper\">\n    <slot-comp v-for=\"x in foods\">\n      <img v-bind:src=\"x.url\">\n      <h4>{{x.name}}</h4>\n    </slot-comp>\n  </div> <footer>\n    <slot-comp>\n      <h4>Footer</h4>\n    </slot-comp>\n  </footer> </template> Run Example »",
          "Example The first component in this application has no content provided, so the fallback content is rendered. App.vue : <template>\n  <h3>Slots Fallback Content</h3>\n  <p>A component without content provided can have fallback content in the slot tag.</p>\n  <slot-comp> <!-- Empty --> </slot-comp>\n  <slot-comp>\n    <h4>This content is provided from App.vue</h4>\n  </slot-comp>\n</template> SlotComp.vue : <template>\n  <div>\n    <slot>\n      <h4>This is fallback content</h4>\n    </slot>\n  </div>\n</template> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_local-components.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slots_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slots2_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slots4_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slots3_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_local-components.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_v-slot.php",
    "cours": {
      "titre": "Vue v-slot",
      "description": "We need the v-slot directive to refer to named slots . Named slots allow for more control over where the content is placed within the child component's template. Named slots can be used to create more flexible and reusable components.",
      "lien": "https://www.w3schools.com/vue/vue_v-slot.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example App.vue : <h1>App.vue</h1>\n<p>The component has two div tags with one slot in each.</p>\n<slot-comp>'Hello!'</slot-comp> SlotComp.vue : <h3>Component</h3>\n<div>\n  <slot></slot>\n</div>\n<div>\n  <slot></slot>\n</div> Run Example »",
          "Example To be able to differentiate the slots we give the slots different names. SlotComp.vue : <h3>Component</h3>\n<div>\n  <slot name=\"topSlot\" ></slot>\n</div>\n<div>\n  <slot name=\"bottomSlot\" ></slot>\n</div> And now we can use v-slot in App.vue to direct the content to the right slot. App.vue : <h1>App.vue</h1>\n<p>The component has two div tags with one slot in each.</p>\n<slot-comp v-slot:bottomSlot >'Hello!'</slot-comp> Run Example »",
          "Example SlotComp.vue : <h3>Component</h3>\n<div>\n  <slot name=\"topSlot\" ></slot>\n</div>\n<div>\n  <slot name=\"bottomSlot\"></slot>\n</div> App.vue : <h1>App.vue</h1>\n<p>The component has two div tags with one slot in each.</p>\n<slot-comp v-slot:bottomSlot >'Hello!'</slot-comp> Run Example »",
          "Example SlotComp.vue : <h3>Component</h3>\n<div>\n  <slot></slot>\n</div>\n<div>\n  <slot name=\"bottomSlot\"></slot>\n</div> App.vue : <h1>App.vue</h1>\n<p>The component has two div tags with one slot in each.</p>\n<slot-comp v-slot:default >'Default slot'</slot-comp> Run Example »",
          "Example App.vue : <h1>App.vue</h1>\n<p>The component has two div tags with one slot in each.</p>\n<slot-comp> <template v-slot:bottomSlot> <h4>To the bottom slot!</h4>\n    <p>This p tag and the h4 tag above are directed to the bottom slot with the v-slot directive used on the template tag.</p>\n  </template>\n  <p>This goes into the default slot</p>\n</slot-comp> SlotComp.vue : <h3>Component</h3>\n<div>\n  <slot></slot>\n</div>\n<div>\n  <slot name=\"bottomSlot\"></slot>\n</div> Run Example »",
          "<slot-comp v-slot:topSlot >'Hello!'</slot-comp>",
          "<slot-comp #topSlot >'Hello!'</slot-comp>",
          "Example App.vue : <h1>App.vue</h1>\n<p>The component has two div tags with one slot in each.</p>\n<slot-comp #topSlot >'Hello!'</slot-comp> SlotComp.vue : <h3>Component</h3>\n<div>\n  <slot name=\"topSlot\"></slot>\n</div>\n<div>\n  <slot name=\"bottomSlot\"></slot>\n</div> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_slots.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slots5_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slots6_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slots7_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slots9_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slots8_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slotsShorthand_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_slots.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_scoped-slots.php",
    "cours": {
      "titre": "Scoped Slots",
      "description": "A Scoped slot provides local data from the component so that the parent can choose how to render it.",
      "lien": "https://www.w3schools.com/vue/vue_scoped-slots.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "SlotComp.vue : <template>\n  <slot v-bind:lclData=\"data\"></slot>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: 'This is local data'\n      }\n    }\n  }\n</script>",
          "Example App.vue : <slot-comp v-slot:\"dataFromSlot\" >\n  <h2>{{ dataFromSlot.lclData }}</h2>\n</slot-comp> Run Example »",
          "Example SlotComp.vue : <template>\n  <slot\n    v-for=\"x in foods\"\n    :key=\"x\" :foodName=\"x\" ></slot>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        foods: ['Apple','Pizza','Rice','Fish','Cake']\n      }\n    }\n  }\n</script> App.vue : <slot-comp v-slot=\"food\" >\n  <h2>{{ food.foodName }}</h2>\n</slot-comp> Run Example »",
          "Example SlotComp.vue : <template>\n  <slot\n    v-for=\"x in foods\"\n    :key=\"x.name\" :foodName=\"x.name\" :foodDesc=\"x.desc\" :foodUrl=\"x.url\" ></slot>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        foods: [\n          { name: 'Apple', desc: 'Apples are a type of fruit that grow on trees.', url: 'img_apple.svg' },\n          { name: 'Pizza', desc: 'Pizza has a bread base with tomato sauce, cheese, and toppings on top.', url: 'img_pizza.svg' },\n          { name: 'Rice', desc: 'Rice is a type of grain that people like to eat.', url: 'img_rice.svg' },\n          { name: 'Fish', desc: 'Fish is an animal that lives in water.', url: 'img_fish.svg' },\n          { name: 'Cake', desc: 'Cake is something sweet that tastes good but is not considered healthy.', url: 'img_cake.svg' }\n       ]\n      }\n    }\n  }\n</script> App.vue : <slot-comp v-slot=\"food\">\n  <hr>\n  <h2>{{ food.foodName }}<img :src= food.foodUrl ></h2>\n  <p>{{ food.foodDesc }}</p>\n</slot-comp> Run Example »",
          "Example SlotComp.vue : <template>\n  <slot\n    staticText=\"This text is static\"\n    :dynamicText=\"text\"\n  ></slot>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        text: 'This text is from the data property'\n      }\n    }\n  }\n</script> App.vue : <slot-comp v-slot=\"texts\">\n  <h2>{{ texts.staticText }}</h2>\n  <p>{{ texts.dynamicText }}</p>\n</slot-comp> Run Example »",
          "Example In this example the component is created one time referring to the slot \"leftSlot\", and one time referring to the slot \"rightSlot\". SlotComp.vue : <template>\n  <slot\n    name=\"leftSlot\"\n    :text=\"leftText\"\n  ></slot>\n  <slot\n    name=\"rightSlot\"\n    :text=\"rightText\"\n  ></slot>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        leftText: 'This text belongs to the LEFT slot.',\n        rightText: 'This text belongs to the RIGHT slot.'\n      }\n    }\n  }\n</script> App.vue : <slot-comp #leftSlot=\"leftProps\">\n  <div>{{ leftProps.text }}</div>\n</slot-comp>\n<slot-comp #rightSlot=\"rightProps\">\n  <div>{{ rightProps.text }}</div>\n</slot-comp> Run Example »",
          "Example In this example the component is created only one time, but with two \"template\" tags, each referring to a different slot. SlotComp.vue is exactly the same as in the previous example. App.vue : <slot-comp>\n\n  <template #leftSlot=\"leftProps\">\n    <div>{{ leftProps.text }}</div>\n  </template>\n\n  <template #rightSlot=\"rightProps\">\n    <div>{{ rightProps.text }}</div>\n  </template>\n\n</slot-comp> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_v-slot.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slotsScoped_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slotsScoped2_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slotsScoped3_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slotsScoped4_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slotsScoped5_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slotsScoped6_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_v-slot.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_dynamic-components.php",
    "cours": {
      "titre": "Dynamic Components",
      "description": "Dynamic Components can be used to flip through pages within your page, like tabs in your browser, with the use of the 'is' attribute.",
      "lien": "https://www.w3schools.com/vue/vue_dynamic-components.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example In this example we have a <component> tag that acts as a placeholder for either the comp-one component or the comp-two component. The 'is' attribute is set on the <component> tag and listens to the computed value 'activeComp' that holds either 'comp-one' or 'comp-two' as value. And we have a button that toggles a data property between 'true' and 'false' to make the computed value switch between the active components. App.vue : <template>\n  <h1>Dynamic Components</h1>\n  <p>App.vue switches between which component to show.</p>\n  <button @click=\"toggleValue = !toggleValue\">\n    Switch component\n  </button>\n  <component :is=\"activeComp\"></component>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        toggleValue: true\n      }\n    },\n    computed: {\n      activeComp() {\n        if(this.toggleValue) {\n          return 'comp-one'\n        }\n        else {\n          return 'comp-two'\n        }\n      }\n    }\n  }\n</script> Run Example »",
          "Example This example is the same as the previous example except the components are different. In comp-one you can choose between 'Apple' and 'Cake', and in comp-two you can write a message. Your inputs will be gone when you return to a component. Run Example »",
          "Example The components now remember the user inputs. App.vue : <template>\n  <h1>Dynamic Components</h1>\n  <p>App.vue switches between which component to show.</p>\n  <button @click=\"toggleValue = !toggleValue\">\n    Switch component\n  </button> <KeepAlive> <component :is=\"activeComp\"></component> </KeepAlive> </template> Run Example »",
          "CompOne.vue : <script>\n  export default { name: 'CompOne' ,\n    data() {\n      return {\n        imgSrc: 'img_question.svg'\n      }\n    }\n  }\n</script>",
          "Example With <KeepAlive include=\"CompOne\"> , only the 'CompOne' component will remember its state, the previous inputs. App.vue : <template>\n  <h1>Dynamic Components</h1>\n  <p>App.vue switches between which component to show.</p>\n  <button @click=\"toggleValue = !toggleValue\">\n    Switch component\n  </button> <KeepAlive include=\"CompOne\"> <component :is=\"activeComp\"></component> </KeepAlive> </template> Run Example »",
          "Example With <KeepAlive exclude=\"CompOne\"> , only the 'CompTwo' component will remember its state. App.vue : <template>\n  <h1>Dynamic Components</h1>\n  <p>App.vue switches between which component to show.</p>\n  <button @click=\"toggleValue = !toggleValue\">\n    Switch component\n  </button> <KeepAlive exclude=\"CompOne\"> <component :is=\"activeComp\"></component> </KeepAlive> </template> Run Example »",
          "Example With <KeepAlive include=\"CompOne, CompThree\"> , both the 'CompOne' and the 'CompThree' components will remember their state. App.vue : <template>\n  <h1>Dynamic Components</h1>\n  <button @click=\"compNbr++\">\n    Next component\n  </button> <KeepAlive include=\"CompOne,CompThree\"> <component :is=\"activeComp\"></component> </KeepAlive> </template> Run Example »",
          "Example With <KeepAlive :max=\"2\"> , the browser will only remember the user input of the last two visited components. App.vue : <template>\n  <h1>Dynamic Components</h1>\n  <label><input type=\"radio\" name=\"rbgComp\" v-model=\"compName\" :value=\"'comp-one'\"> One</label>\n  <label><input type=\"radio\" name=\"rbgComp\" v-model=\"compName\" :value=\"'comp-two'\"> Two</label>\n  <label><input type=\"radio\" name=\"rbgComp\" v-model=\"compName\" :value=\"'comp-three'\"> Three</label> <KeepAlive :max=\"2\"> <component :is=\"activeComp\"></component> </KeepAlive> </template> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_scoped-slots.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_dynamicComp_4"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_dynamicComp2_4"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_dynamicComp3_4"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_dynamicComp4_4"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_dynamicComp5_4"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_dynamicComp_5"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_dynamicComp2_5"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_scoped-slots.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_teleport.php",
    "cours": {
      "titre": "Vue Teleport",
      "description": "The Vue <Teleport> tag is used to move content to a different place in the DOM structure.",
      "lien": "https://www.w3schools.com/vue/vue_teleport.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "<Teleport to=\"body\">\n  <p>Hello!</p>\n</Teleport>",
          "Example CompOne.vue : <template>\n  <div>\n    <h2>Component</h2>\n    <p>This is the inside of the component.</p>\n    <Teleport to=\"body\">\n      <div id=\"redDiv\">Hello!</div>\n    </Teleport>\n  </div>\n</template> Run Example »",
          "Example Relevant code from the <style> and <script> tags still works for the teleported <div> tag even though it is no longer inside the component after compilation. CompOne.vue : <template>\n  <div>\n    <h2>Component</h2>\n    <p>This is the inside of the component.</p>\n    <Teleport to=\"body\">\n      <div \n        id=\"redDiv\" \n        @click=\"toggleVal = !toggleVal\" \n        :style=\"{ backgroundColor: bgColor }\"\n      >\n        Hello!<br>\n        Click me!\n      </div>\n    </Teleport>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      toggleVal: true\n    }\n  },\n  computed: {\n    bgColor() {\n      if (this.toggleVal) {\n        return 'lightpink'\n      }\n      else {\n        return 'lightgreen'\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n#redDiv {\n  margin: 10px;\n  padding: 10px;\n  display: inline-block;\n}\n\n#redDiv:hover {\n  cursor: pointer;\n}\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_dynamic-components.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_teleport_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_teleport2_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_dynamic-components.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_http.php",
    "cours": {
      "titre": "Vue HTTP Requests",
      "description": "The HTTP request is a part of the communication between a client and a server. The client sends an HTTP request to the server, which handles the request and returns an HTTP response.",
      "lien": "https://www.w3schools.com/vue/vue_http.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "npm install axios",
          "Example App.vue : <template>\n  <div>\n    <button @click=\"fetchData\">Fetch Data</button>\n    <p v-if=\"data\">{{ data }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      data: null,\n    };\n  },\n  methods: {\n    fetchData() {\n      const response = fetch(\"file.txt\");\n      this.data = response;\n    }\n  }\n};\n</script> Run Example »",
          "const response = await fetch(\"file.txt\");",
          "async fetchData() {\n  const response = await fetch(\"file.txt\");\n  this.data = response;\n}",
          "Example App.vue : <template>\n  <div>\n    <button @click=\"fetchData\">Fetch Data</button>\n    <p v-if=\"data\">{{ data }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      data: null,\n    };\n  },\n  methods: {\n    async fetchData() {\n      const response = await fetch(\"file.txt\");\n      this.data = response;\n    }\n  }\n};\n</script> Run Example »",
          "Example App.vue : <template>\n  <div>\n    <button @click=\"fetchData\">Fetch Data</button>\n    <p v-if=\"data\">{{ data }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      data: null,\n    };\n  },\n  methods: {\n    async fetchData() {\n      const response = await fetch(\"file.txt\");\n      this.data = await response.text();\n    }\n  }\n};\n</script> Run Example »",
          "Example App.vue : <template>\n  <div>\n    <button @click=\"fetchData\">Fetch Data</button>\n    <pre v-if=\"data\">{{ data }}</pre>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      data: null,\n    };\n  },\n  methods: {\n    async fetchData() {\n      const response = await fetch(\"bigLandMammals.json\");\n      this.data = await response.json();\n    }\n  }\n};\n</script> Run Example »",
          "Example App.vue : <template>\n  <p>Try clicking the button more than once to see new animals picked randomly.</p>\n  <button @click=\"fetchData\">Fetch Data</button>\n  <div v-if=\"randomMammal\">\n    <h2>{{ randomMammal.name }}</h2>\n    <p>Max weight: {{ randomMammal.maxWeight }} kg</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      randomMammal: null\n    };\n  },\n  methods: {\n    async fetchData() {\n      const response = await fetch(\"bigLandMammals.json\");\n      const data = await response.json();\n      const randIndex = Math.floor(Math.random()*data.results.length);\n      this.randomMammal = data.results[randIndex];\n    }\n  }\n};\n</script> Run Example »",
          "Example A button can be clicked to get a random user from the random-data-api.com API. App.vue : <template>\n  <h1>Example</h1>\n  <p>Click the button to fetch data with an HTTP request.</p>\n  <p>Each click generates an object with a random user from <a href=\"https://random-data-api.com/\" target=\"_blank\">https://random-data-api.com/</a>.</p>\n  <p>The robot avatars are lovingly delivered by <a href=\"http://Robohash.org\" target=\"_blank\">RoboHash</a>.</p>\n  <button @click=\"fetchData\">Fetch data</button>\n  <pre v-if=\"data\">{{ data }}</pre>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: null,\n      };\n    },\n    methods: {\n      async fetchData() {      \n        const response = await fetch(\"https://random-data-api.com/api/v2/users\"); \n        this.data = await response.json();\n      }   \n    }\n  };\n</script> Run Example »",
          "Example We show the random user name in a <pre> tag, along with the job title and image when the button is clicked. App.vue : <template>\n  <h1>Example</h1>\n  <p>Click the button to fetch data with an HTTP request.</p>\n  <p>Each click generates an object with a random user from <a href=\"https://random-data-api.com/\" target=\"_blank\">https://random-data-api.com/</a>.</p>\n  <p>The robot avatars are lovingly delivered by <a href=\"http://Robohash.org\" target=\"_blank\">RoboHash</a>.</p>\n  <button @click=\"fetchData\">Fetch data</button>\n  <div v-if=\"data\" id=\"dataDiv\">\n    <img :src=\"data.avatar\" alt=\"avatar\">\n    <pre>{{ data.first_name + \" \" + data.last_name }}</pre>\n    <p>\"{{ data.employment.title }}\"</p>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: null,\n      };\n    },\n    methods: {\n      async fetchData() {      \n        const response = await fetch(\"https://random-data-api.com/api/v2/users\"); \n        this.data = await response.json();\n      },    \n    }\n  };\n</script>\n\n<style>\n#dataDiv {\n  width: 240px;\n  background-color: aquamarine;\n  border: solid black 1px;\n  margin-top: 10px;\n  padding: 10px;\n}\n#dataDiv > img {\n  width: 100%;\n}\npre {\n  font-size: larger;\n  font-weight: bold;\n}\n</style> Run Example »",
          "npm install axios",
          "Example Only small changes are made to the previous example to do the HTTP request with the 'axios' library instead. App.vue : <template>\n  <h1>Example</h1>\n  <p>Click the button to fetch data with an HTTP request.</p>\n  <p>Each click generates an object with a random user from <a href=\"https://random-data-api.com/\" target=\"_blank\">https://random-data-api.com/</a>.</p>\n  <p>The robot avatars are lovingly delivered by <a href=\"http://Robohash.org\" target=\"_blank\">RoboHash</a>.</p>\n  <button @click=\"fetchData\">Fetch data</button>\n  <div v-if=\"data\" id=\"dataDiv\">\n    <img :src=\"data.data.avatar\" alt=\"avatar\">\n    <pre>{{ data.data.first_name + \" \" + data.data.last_name }}</pre>\n    <p>\"{{ data.data.employment.title }}\"</p>\n  </div>\n</template>\n\n<script>\n  import axios from 'axios'\n\n  export default {\n    data() {\n      return {\n        data: null,\n      };\n    },\n    methods: {\n      async fetchData() {      \n        this.data = await axios.get(\"https://random-data-api.com/api/v2/users\");\n      }\n    }\n  };\n</script>\n\n<style>\n#dataDiv {\n  width: 240px;\n  background-color: aquamarine;\n  border: solid black 1px;\n  margin-top: 10px;\n  padding: 10px;\n}\n#dataDiv > img {\n  width: 100%;\n}\npre {\n  font-size: larger;\n  font-weight: bold;\n}\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_teleport.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_httpRemake_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_httpRemake2_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_httpRemake3_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_httpRemake4_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_httpRemake5_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_httpFetch4_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_httpFetch5_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_httpFetch6_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_teleport.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_refs.php",
    "cours": {
      "titre": "Vue Template Refs",
      "description": "Vue Template Refs are used to refer to specific DOM elements. When the ref attribute is set on an HTML tag, the resulting DOM element is added to the $refs object. We can use the ref attribute and the $refs object in Vue as an alternative to methods in plain JavaScript like getElementById() or querySelector().",
      "lien": "https://www.w3schools.com/vue/vue_refs.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example The text inside a <p> element is changed. App.vue : <template>\n  <h1>Example</h1>\n  <p>Click the button to put \"Hello!\" as the text in the green p element.</p>\n  <button @click=\"changeVal\">Change Text</button>\n  <p ref=\"pEl\">This is the initial text</p>\n</template>\n\n<script>\n  export default {\n    methods: {\n      changeVal() { this.$refs.pEl.innerHTML = \"Hello!\"; }\n    }\n  }\n</script> Run Example »",
          "Example The text from the first <p> tag is copied into the second <p> tag. App.vue : <template>\n  <h1>Example</h1>\n  <p ref=\"p1\">Click the button to copy this text into the paragraph below.</p>\n  <button @click=\"transferText\">Transfer text</button>\n  <p ref=\"p2\">...</p>\n</template>\n\n<script>\n  export default {\n    methods: {\n      transferText() { \n        this.$refs.p2.innerHTML = this.$refs.p1.innerHTML;\n      }\n    }\n  };\n</script> Run Example »",
          "Example A <p> element gets the same content as what's being written in the input field. App.vue : <template>\n  <h1>Example</h1>\n  <p>Start writing inside the input element, and the text will be copied into the last paragraph by the use of the '$refs' object.</p>\n  <input ref=\"inputEl\" @input=\"getRefs\" placeholder=\"Write something..\">\n  <p ref=\"pEl\"></p>\n</template>\n\n<script>\n  export default {\n    methods: {\n      getRefs() { \n        this.$refs.pEl.innerHTML = this.$refs.inputEl.value;\n      }\n    }\n  };\n</script> Run Example »",
          "Example The button reveals the the third list element stored as an array element inside the $refs object. App.vue : <template>\n  <h1>Example</h1>\n  <p>Click the button to reveal the 3rd list element stored as an array element in the $refs object.</p>\n  <button @click=\"getValue\">Get the 3rd list element</button><br>\n  <ul>\n    <li v-for=\"x in liTexts\" ref=\"liEl\">{{ x }}</li>\n  </ul>\n  <pre>{{ thirdEl }}</pre>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        thirdEl: ' ',\n        liTexts: ['Apple','Banana','Kiwi','Tomato','Lichi']\n      }\n    },\n    methods: {\n      getValue() { \n        this.thirdEl = this.$refs.liEl[2].innerHTML;\n        console.log(\"this.$refs.liEl = \",this.$refs.liEl);\n      }\n    }\n  };\n</script>\n\n<style>\npre {\n  background-color: lightgreen;\n  display: inline-block;\n}\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_http.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_refs3_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_refs0_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_refs2_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_refs4_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_http.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_lifecycle-hooks.php",
    "cours": {
      "titre": "Vue Lifecycle Hooks",
      "description": "Lifecycle hooks in Vue are certain stages in the lifecycle of a component where we can add code to do things.",
      "lien": "https://www.w3schools.com/vue/vue_lifecycle-hooks.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "beforeCreate",
            "created",
            "beforeMount",
            "mounted",
            "beforeUpdate",
            "updated",
            "beforeUnmount",
            "unmounted",
            "errorCaptured",
            "renderTracked",
            "renderTriggered",
            "activated",
            "deactivated",
            "serverPrefetch"
          ],
          [
            "the error",
            "the component that triggered the error",
            "the error source type"
          ]
        ],
        "examples": [
          "Example CompOne.vue : <template>\n    <h2>Component</h2>\n    <p>This is the component</p>\n    <p id=\"pResult\">{{ text }}</p>\n</template>\n\n<script>\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\ttext: '...'\n\t\t}\n\t},\n  beforeCreate() {\n\t\tthis.text = 'initial text'; // This line has no effect\n    console.log(\"beforeCreate: The component is not created yet.\");\n  }\n}\n</script> App.vue : <template>\n  <h1>The 'beforeCreate' Lifecycle Hook</h1>\n  <p>We can see the console.log() message from 'beforeCreate' lifecycle hook, but there is no effect from the text change we try to do to the Vue data property, because the Vue data property is not created yet.</p>\n  <button @click=\"this.activeComp = !this.activeComp\">Add/Remove Component</button>\n  <div>\n    <comp-one v-if=\"activeComp\"></comp-one>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      activeComp: false\n    }\n  }\n}\n</script>\n\n<style>\n#app > div {\n  border: dashed black 1px;\n  border-radius: 10px;\n  padding: 10px;\n  margin-top: 10px;\n  background-color: lightgreen;\n}\n#pResult {\n  background-color: lightcoral;\n  display: inline-block;\n}\n</style> Run Example »",
          "Example CompOne.vue : <template>\n    <h2>Component</h2>\n    <p>This is the component</p>\n    <p id=\"pResult\">{{ text }}</p>\n</template>\n\n<script>\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\ttext: '...'\n\t\t}\n\t},\n  created() {\n\t\tthis.text = 'initial text';\n    console.log(\"created: The component just got created.\");\n  }\n}\n</script> App.vue : <template>\n  <h1>The 'created' Lifecycle Hook</h1>\n  <p>We can see the console.log() message from 'created' lifecycle hook, and the text change we try to do to the Vue data property works, because the Vue data property is already created at this stage.</p>\n  <button @click=\"this.activeComp = !this.activeComp\">Add/Remove Component</button>\n  <div>\n    <comp-one v-if=\"activeComp\"></comp-one>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      activeComp: false\n    }\n  }\n}\n</script>\n\n<style>\n#app > div {\n  border: dashed black 1px;\n  border-radius: 10px;\n  padding: 10px;\n  margin-top: 10px;\n  background-color: lightgreen;\n}\n#pResult {\n  background-color: lightcoral;\n  display: inline-block;\n}\n</style> Run Example »",
          "Example CompOne.vue : <template>\n    <h2>Component</h2>\n    <p>This is the component</p>\n    <p ref=\"pEl\" id=\"pEl\">We try to access this text from the 'beforeMount' hook.</p>\n</template>\n\n<script>\nexport default {\n  beforeMount() {\n    console.log(\"beforeMount: This is just before the component is mounted.\");\n    this.$refs.pEl.innerHTML = \"Hello World!\"; // <-- We cannot reach the 'pEl' DOM element at this stage \n  }\n}\n</script> App.vue : <template>\n  <h1>The 'beforeMount' Lifecycle Hook</h1>\n  <p>We can see the console.log() message from the 'beforeMount' lifecycle hook, but the text change we try to do to the 'pEl' paragraph DOM element does not work, because the 'pEl' paragraph DOM element does not exist yet at this stage.</p>\n  <button @click=\"this.activeComp = !this.activeComp\">Add/Remove Component</button>\n  <div>\n    <comp-one v-if=\"activeComp\"></comp-one>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      activeComp: false\n    }\n  }\n}\n</script>\n\n<style>\n#app > div {\n  border: dashed black 1px;\n  border-radius: 10px;\n  padding: 10px;\n  margin-top: 10px;\n  background-color: lightgreen;\n}\n#pEl {\n  background-color: lightcoral;\n  display: inline-block;\n}\n</style> Run Example »",
          "Example CompOne.vue : <template>\n  <h2>Component</h2>\n  <p>Right after this component is added to the DOM, the mounted() function is called and we can add code to that mounted() function. In this example, an alert popup box appears after this component is mounted.</p>\n  <p><strong>Note:</strong> The reason that the alert is visible before the component is visible is because the alert is called before the browser gets to render the component to the screen.</p>\n</template>\n\n<script>\nexport default {\n  mounted() {\n    alert(\"The component is mounted!\");\n  }\n}\n</script> App.vue : <template>\n  <h1>The 'mounted' Lifecycle Hook</h1>\n  <button @click=\"this.activeComp = !this.activeComp\">Create component</button>\n  <div>\n    <comp-one v-if=\"activeComp\"></comp-one>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      activeComp: false\n    }\n  }\n}\n</script>\n\n<style scoped>\n  div {\n    border: dashed black 1px;\n    border-radius: 10px;\n    padding: 20px;\n    margin: 10px;\n    width: 400px;\n    background-color: lightgreen;\n  }\n</style> Run Example »",
          "Example CompOne.vue : <template>\n  <h2>Form Component</h2>\n  <p>When this component is added to the DOM tree, the mounted() function is called, and we put the cursor inside the input element.</p>\n  <form @submit.prevent>\n    <label>\n      <p>\n        Name: <br>\n        <input type=\"text\" ref=\"inpName\">\n      </p>\n    </label>\n    <label>\n      <p>\n        Age: <br>\n        <input type=\"number\">\n      </p>\n    </label>\n    <button>Submit</button>\n  </form>\n  <p>(This form does not work, it is only here to show the mounted lifecycle hook.)</p>\n</template>\n\n<script>\n  export default {\n    mounted() {\n      this.$refs.inpName.focus();\n    }\n  }\n</script> Run Example »",
          "Example The beforeUpdate() function adds an <li> tag to the document to indicate that the beforeUpdate() function has run. CompOne.vue : <template>\n  <h2>Component</h2>\n  <p>This is the component</p>\n</template> App.vue : <template>\n  <h1>The 'beforeUpdate' Lifecycle Hook</h1>\n  <p>Whenever there is a change in our page, the application is 'updated' and the 'beforeUpdate' hook happens just before that.</p>\n  <p>It is safe to modify our page in the 'beforeUpdate' hook like we do here, but if we modify our page in the 'updated' hook, we will generate an infinite loop.</p>\n  <button @click=\"this.activeComp = !this.activeComp\">Add/Remove Component</button>\n  <div>\n    <comp-one v-if=\"activeComp\"></comp-one>\n  </div>\n  <ol ref=\"divLog\"></ol>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      activeComp: true\n    }\n  },\n  beforeUpdate() {\n    this.$refs.divLog.innerHTML += \"<li>beforeUpdate: This happened just before the 'updated' hook.</li>\";\n  }\n}\n</script>\n\n<style>\n#app > div {\n  border: dashed black 1px;\n  border-radius: 10px;\n  padding: 10px;\n  margin-top: 10px;\n  background-color: lightgreen;\n}\n</style> Run Example »",
          "Example The updated() function writes a message with console.log() . This happens whenever the page is updated, which in this example is every time the component is added or removed. CompOne.vue : <template>\n  <h2>Component</h2>\n  <p>This is the component</p>\n</template> App.vue : <template>\n  <h1>The 'updated' Lifecycle Hook</h1>\n  <p>Whenever there is a change in our page, the application is updated and the updated() function is called. In this example we use console.log() in the updated() function that runs when our application is updated.</p>\n  <button @click=\"this.activeComp = !this.activeComp\">Add/Remove Component</button>\n  <div>\n    <comp-one v-if=\"activeComp\"></comp-one>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      activeComp: true\n    }\n  },\n  updated() {\n    console.log(\"The component is updated!\");\n  }\n}\n</script>\n\n<style>\n#app {\n  max-width: 450px;\n}\n#app > div {\n  border: dashed black 1px;\n  border-radius: 10px;\n  padding: 10px;\n  margin-top: 10px;\n  width: 80%;\n  background-color: lightgreen;\n}\n</style> Run Example »",
          "Example The updated() function adds text to a paragraph, which in turn updates the page again, and the function runs again and again in an infinite loop. Luckily, your browser will stop this loop eventually. CompOne.vue : <template>\n  <h2>Component</h2>\n  <p>This is the component</p>\n</template> App.vue : <template>\n  <h1>The 'updated' Lifecycle Hook</h1>\n  <p>Whenever there is a change in our page, the application is updated and the updated() function is called.</p>\n  <p>The first change that causes the updated hook to be called is when we remove the component by clicking the button. When this happens, the update() function adds text to the last paragraph, which in turn updates the page again and again.</p>\n  <button @click=\"this.activeComp = !this.activeComp\">Add/Remove Component</button>\n  <div>\n    <comp-one v-if=\"activeComp\"></comp-one>\n  </div>\n  <div>{{ text }}</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      activeComp: true,\n      text: \"Hello, \"\n    }\n  },\n  updated() {\n    this.text += \"hi, \";\n  }\n}\n</script>\n\n<style>\n#app {\n  max-width: 450px;\n}\n#app > div {\n  border: dashed black 1px;\n  border-radius: 10px;\n  padding: 10px;\n  margin-top: 10px;\n  width: 80%;\n  background-color: lightgreen;\n}\n</style> Run Example »",
          "Example CompOne.vue : <template>\n  <h2>Component</h2>\n  <p ref=\"pEl\">Strawberries!</p>\n</template>\n  \n<script>\nexport default {\n  beforeUnmount() {\n    alert(\"beforeUnmount: The text inside the p-tag is: \" + this.$refs.pEl.innerHTML);\n  }\n}\n</script> App.vue : <template>\n  <h1>Lifecycle Hooks</h1>\n  <button @click=\"this.activeComp = !this.activeComp\">{{ btnText }}</button>\n  <div>\n    <comp-one v-if=\"activeComp\"></comp-one>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      activeComp: true\n    }\n  },\n  computed: {\n    btnText() {\n      if(this.activeComp) {\n        return 'Remove component'\n      }\n      else {\n        return 'Add component'\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n  div {\n    border: dashed black 1px;\n    border-radius: 10px;\n    padding: 20px;\n    margin: 10px;\n    width: 400px;\n    background-color: lightgreen;\n  }\n</style> Run Example »",
          "Example CompOne.vue : <template>\n  <h2>Component</h2>\n  <p>When this component is removed from the DOM tree, the unmounted() function is called and we can add code to that function. In this example we create an alert popup box when this component is removed.</p>\n</template>\n\n<script>\nexport default {\n  unmounted() {\n    alert(\"The component is removed (unmounted)!\");\n  }\n}\n</script> App.vue : <template>\n  <h1>Lifecycle Hooks</h1>\n  <button @click=\"this.activeComp = !this.activeComp\">{{ btnText }}</button>\n  <div>\n    <comp-one v-if=\"activeComp\"></comp-one>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      activeComp: true\n    }\n  },\n  computed: {\n    btnText() {\n      if(this.activeComp) {\n        return 'Remove component'\n      }\n      else {\n        return 'Add component'\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n  div {\n    border: dashed black 1px;\n    border-radius: 10px;\n    padding: 20px;\n    margin: 10px;\n    width: 400px;\n    background-color: lightgreen;\n  }\n</style> Run Example »",
          "Example CompOne.vue : <template>\n  <h2>Component</h2>\n  <p>This is the component</p>\n  <button @click=\"generateError\">Generate Error</button>\n</template>\n\n<script>\nexport default {\n  methods: {\n    generateError() {\n      this.$refs.objEl.innerHTML = \"hi\";\n    }\n  }\n}\n</script> App.vue : <template>\n  <h1>The 'errorCaptured' Lifecycle Hook</h1>\n  <p>Whenever there is an error in a child component, the errorCaptured() function is called on the parent.</p>\n  <p>When the button inside the component is clicked, a method will run that tries to do changes to a $refs object that does not exist. This creates an error in the component that triggers the 'errorCaptured' lifecycle hook in the parent, and an alert box is displayed with information about the error.</p>\n  <p>After clicking \"Ok\" in the alert box you can see the error in the browser console.</p>\n  <div>\n    <comp-one></comp-one>\n  </div>\n</template>\n\n<script>\nexport default {\n  errorCaptured() {\n    alert(\"An error occurred\");\n  }\n}\n</script>\n\n<style>\n#app > div {\n  border: dashed black 1px;\n  border-radius: 10px;\n  padding: 10px;\n  margin-top: 10px;\n  background-color: lightgreen;\n}\n</style> Run Example »",
          "Example CompOne.vue : <template>\n  <h2>Component</h2>\n  <p>This is the component</p>\n  <button @click=\"generateError\">Generate Error</button>\n</template>\n\n<script>\nexport default {\n  methods: {\n    generateError() {\n      this.$refs.objEl.innerHTML = \"hi\";\n    }\n  }\n}\n</script> App.vue : <template>\n  <h1>The 'errorCaptured' Lifecycle Hook</h1>\n  <p>Whenever there is an error in a child component, the errorCaptured() function is called on the parent.</p>\n  <p>Open the browser console to see the captured error details.</p>\n  <div>\n    <comp-one></comp-one>\n  </div>\n</template>\n\n<script>\nexport default {\n  errorCaptured(error,compInst,errorInfo) {\n    console.log(\"error: \", error);\n    console.log(\"compInst: \", compInst);\n    console.log(\"errorInfo: \", errorInfo);\n  }\n}\n</script>\n\n<style>\n#app > div {\n  border: dashed black 1px;\n  border-radius: 10px;\n  padding: 10px;\n  margin-top: 10px;\n  background-color: lightgreen;\n}\n</style> Run Example »",
          "Example CompOne.vue : <template>\n  <h2>Component One</h2>\n  <p>This is a component.</p>\n  <button @click=\"counter++\">Add One</button>\n  <p>{{ counter }}</p>\n</template>\n  \n<script>\nexport default {\n  data() {\n    return {\n      counter: 0\n    }\n  },\n  renderTracked(evt) {\n    console.log(\"renderTracked: \",evt);\n    alert(\"renderTracked\");\n  },\n  renderTriggered(evt) {\n    console.log(\"renderTriggered: \",evt)\n    alert(\"renderTriggered\");\n  }\n}\n</script> App.vue : <template>\n  <h1>The 'renderTracked' and 'renderTriggered' Lifecycle Hooks</h1>\n  <p>The 'renderTracked' and 'renderTriggered' lifecycle hooks are used for debugging.</p>\n  <p><mark>This example only works in development mode, so to see the hooks run, you must copy this code and run it on you own computer in development mode.</mark></p>\n  <div>\n    <comp-one></comp-one>\n  </div>\n</template>\n\n<style scoped>\n  div {\n    border: dashed black 1px;\n    border-radius: 10px;\n    padding: 20px;\n    margin-top: 10px;\n    background-color: lightgreen;\n  }\n</style> Run Example »",
          "Example CompOne.vue : <template>\n  <h2>Component</h2>\n  <p>Below is a log with every time the 'mounted' or 'activated' hooks run.</p>\n  <ol ref=\"olEl\"></ol>\n  <p>You can also see when these hooks run in the console.</p>\n</template>\n  \n<script>\nexport default {\n  mounted() {\n    console.log(\"mounted\");\n    const liEl = document.createElement(\"li\");\n    liEl.innerHTML = \"mounted\";\n    this.$refs.olEl.appendChild(liEl);\n  },\n  activated() {\n    console.log(\"activated\");\n    const liEl = document.createElement(\"li\");\n    liEl.innerHTML = \"activated\";\n    this.$refs.olEl.appendChild(liEl);\n  }\n}\n</script>\n\n<style>\n  li {\n    background-color: lightcoral;\n    width: 5em;\n  }\n</style> App.vue : <template>\n  <h1>The 'activated' Lifecycle Hook</h1>\n  <p>In this example for the 'activated' hook we check if the component is cached properly with <KeepAlive>.</p>\n  <p>If the component is cached properly with <KeepAlive> we expect the 'mounted' hook to run once the first time the component is included (must be added to the DOM the first time), and we expect the 'activated' hook to run every time the component is included (also the first time).</p>\n  <button @click=\"this.activeComp = !this.activeComp\">Include component</button>\n  <div>\n    <KeepAlive>\n      <comp-one v-if=\"activeComp\"></comp-one>\n    </KeepAlive>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      activeComp: false\n    }\n  }\n}\n</script>\n\n<style scoped>\n  div {\n    border: dashed black 1px;\n    border-radius: 10px;\n    padding: 20px;\n    margin-top: 10px;\n    background-color: lightgreen;\n  }\n</style> Run Example »",
          "Example CompOne.vue : <template>\n  <h2>Component</h2>\n  <p>Below is a log with every time the 'activated', 'deactivated', 'mounted' or 'unmounted' hooks run.</p>\n  <ol ref=\"olEl\"></ol>\n  <p>You can also see when these hooks run in the console.</p>\n</template>\n  \n<script>\nexport default {\n  mounted() {\n    this.logHook(\"mounted\");\n  },\n  unmounted() {\n    this.logHook(\"unmounted\");\n  },\n  activated() {\n    this.logHook(\"activated\");\n  },\n  deactivated() {\n    this.logHook(\"deactivated\");\n  },\n  methods: {\n    logHook(hookName) {\n      console.log(hookName);\n      const liEl = document.createElement(\"li\");\n      liEl.innerHTML = hookName;\n      this.$refs.olEl.appendChild(liEl);\n    }\n  }\n}\n</script>\n\n<style>\n  li {\n    background-color: lightcoral;\n    width: 5em;\n  }\n</style> App.vue : <template>\n  <h1>The 'activated' and 'deactivated' Lifecycle Hooks</h1>\n  <p>In this example for the 'activated' and 'deactivated' hooks we also see when and if the 'mounted' and 'unmounted' hooks are run.</p>\n  <button @click=\"this.activeComp = !this.activeComp\">Include component</button>\n  <div>\n    <KeepAlive>\n      <comp-one v-if=\"activeComp\"></comp-one>\n    </KeepAlive>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      activeComp: false\n    }\n  }\n}\n</script>\n\n<style scoped>\n  div {\n    border: dashed black 1px;\n    border-radius: 10px;\n    padding: 20px;\n    margin-top: 10px;\n    background-color: lightgreen;\n  }\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_refs.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_lifecycle-hooks6_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_lifecycle-hooks7_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_lifecycle-hooks8_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_lifecycle-hooks_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_lifecycle-hooks2_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_lifecycle-hooks9_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_lifecycle-hooks4_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_lifecycle-hooks5_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_lifecycle-hooks10_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_lifecycle-hooks3_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_lifecycle-hooks11_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_lifecycle-hooks12_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_lifecycle-hooks15_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_lifecycle-hooks13_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_lifecycle-hooks14_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_refs.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_provide-inject.php",
    "cours": {
      "titre": "Vue Provide/Inject",
      "description": "Provide/Inject in Vue is used to provide data from one component to other components, particularly in large projects. Provide makes data available to other components. Inject is used to get the provided data. Provide/Inject is a way to share data as an alternative to passing data using props.",
      "lien": "https://www.w3schools.com/vue/vue_provide-inject.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "App.vue : <template>\n  <h1>Food</h1>\n  <div @click=\"this.activeComp = 'food-about'\" class=\"divBtn\">About</div>\n  <div @click=\"this.activeComp = 'food-kinds'\" class=\"divBtn\">Kinds</div>\n  <div id=\"divComp\">\n    <component :is=\"activeComp\"></component>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      activeComp: 'food-about',\n      foods: [\n        { name: 'Pizza', imgUrl: '/img_pizza.svg' },\n        { name: 'Apple', imgUrl: '/img_apple.svg' },\n        { name: 'Cake', imgUrl: '/img_cake.svg' },\n        { name: 'Fish', imgUrl: '/img_fish.svg' },\n        { name: 'Rice', imgUrl: '/img_rice.svg' }\n      ]\n    }\n  },\n  provide() {\n    return {\n      foods: this.foods\n    }\n  }\n}\n</script>",
          "Example FoodKinds.vue : <template>\n    <h2>Different Kinds of Food</h2>\n    <p><mark>In this application, food data is provided in \"App.vue\", and injected in the \"FoodKinds.vue\" component so that it can be shown here:</mark></p>\n    <div v-for=\"x in foods\">\n        <img :src=\"x.imgUrl\">\n        <p class=\"pName\">{{ x.name }}</p>\n    </div>\n</template>\n\n<script>\nexport default {\n    inject: ['foods']\n}\n</script>\n\n<style scoped>\n    div {\n        margin: 10px;\n        padding: 10px;\n        display: inline-block;\n        width: 80px;\n        background-color: #28e49f47;\n        border-radius: 10px;\n    }\n    .pName {\n        text-align: center;\n    }\n    img {\n        width: 100%;\n    }\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_lifecycle-hooks.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_provide-inject_4"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_lifecycle-hooks.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_routing.php",
    "cours": {
      "titre": "Vue Routing",
      "description": "Routing in Vue is used to navigate the Vue application, and it happens on the client side (in the browser) without full page reload, which results in a faster user experience. Routing is a way to navigate, similar to how we have used dynamic components earlier. With routing we can use the URL address to direct someone to a specific place in our Vue application.",
      "lien": "https://www.w3schools.com/vue/vue_routing.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "npm install vue-router@4",
          "Example FoodItems.vue : <template>\n    <h1>Food!</h1>\n    <p>I like most types of food.</p>\n</template> AnimalCollection.vue : <template>\n    <h1>Animals!</h1>\n    <p>I want to learn about at least one new animal every year.</p>\n</template> App.vue : <template>\n  <p>Choose what part of this page you want to see:</p>\n  <button @click=\"activeComp = 'animal-collection'\">Animals</button>\n  <button @click=\"activeComp = 'food-items'\">Food</button><br>\n  <div>\n    <component :is=\"activeComp\"></component>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n      return {\n        activeComp: ''\n      }\n    }\n}\n</script>\n\n<style scoped>\n  button {\n    padding: 5px;\n    margin: 10px;\n  }\n  div {\n    border: dashed black 1px;\n    padding: 20px;\n    margin: 10px;\n    display: inline-block;\n  }\n</style> Run Example »",
          "npm install vue-router@4",
          "main.js : import { createApp } from 'vue'\nimport { createRouter, createWebHistory } from 'vue-router'\n\nimport App from './App.vue'\nimport FoodItems from './components/FoodItems.vue'\nimport AnimalCollection from './components/AnimalCollection.vue'\n\nconst router = createRouter({\n    history: createWebHistory(),\n    routes: [\n        { path: '/animals', component: AnimalCollection },\n        { path: '/food', component: FoodItems },\n    ]\n});\n\nconst app = createApp(App)\n\napp.use(router); app.component('food-items', FoodItems); app.component('animal-collection', AnimalCollection); app.mount('#app') Lines 2, 8-14 and 18 are added to add router functionality. Lines 19-20 are deleted because the components already get included via the router on lines 11-12.",
          "App.vue : <template>\n  <p>Choose what part of this page you want to see:</p>\n  <button @click=\"activeComp = 'animal-collection'\">Animals</button>\n  <button @click=\"activeComp = 'food-items'\">Food</button><br>\n  <div>\n    <router-view></router-view> <component :is=\"activeComp\"></component> </div>\n</template>",
          "App.vue : <template>\n  <p>Choose what part of this page you want to see:</p>\n  <router-link to=\"/animals\">Animals</router-link>\n  <router-link to=\"/food\">Food</router-link><br>\n  <div>\n    <router-view></router-view>\n  </div>\n</template> <script></script>",
          "Example App.vue : <template>\n  <p>Choose what part of this page you want to see:</p>\n  <router-link to=\"/animals\">Animals</router-link>\n  <router-link to=\"/food\">Food</router-link><br>\n  <div>\n    <router-view></router-view>\n  </div>\n</template>\n\n<style scoped>\n  a {\n    display: inline-block;\n    background-color: black;\n    border: solid 1px black;\n    color: white;\n    padding: 5px;\n    margin: 10px;\n  }\n  a:hover,\n  a.router-link-active {\n    background-color: rgb(110, 79, 13);\n  }\n  div {\n    border: dashed black 1px;\n    padding: 20px;\n    margin: 10px;\n    display: inline-block;\n  }\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_provide-inject.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_routing_4"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_routing2_4"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_provide-inject.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_form-inputs.php",
    "cours": {
      "titre": "Vue Form Inputs",
      "description": "We have seen a few examples of form inputs earlier in this tutorial, on the Vue Forms and v-model pages. This page is a collection of more form input examples in Vue, like radio buttons, checkboxes, drop-down list and normal text input field.",
      "lien": "https://www.w3schools.com/vue/vue_form-inputs.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "<input type=\"color\">",
            "<input type=\"date\">",
            "<input type=\"datetime-local\">",
            "<input type=\"number\">",
            "<input type=\"password\">",
            "<input type=\"range\">",
            "<input type=\"search\">",
            "<input type=\"tel\">",
            "<input type=\"text\">",
            "<input type=\"time\">",
            "<textarea>"
          ]
        ],
        "examples": [
          "Example App.vue : <template>\n  <h1>Radio Buttons in Vue</h1>\n  <form @submit.prevent=\"registerAnswer\">\n    <p>What is your favorite animal?</p>\n    <label>\n      <input type=\"radio\" name=\"favAnimal\" v-model=\"inpVal\" value=\"Cat\"> Cat\n    </label>\n    <label>\n      <input type=\"radio\" name=\"favAnimal\" v-model=\"inpVal\" value=\"Dog\"> Dog\n    </label>\n    <label>\n      <input type=\"radio\" name=\"favAnimal\" v-model=\"inpVal\" value=\"Turtle\"> Turtle\n    </label>\n    <label>\n      <input type=\"radio\" name=\"favAnimal\" v-model=\"inpVal\" value=\"Moose\"> Moose\n    </label>\n    <button type=\"submit\">Submit</button>\n  </form>\n  <div>\n    <h3>Submitted choice:</h3>\n    <p id=\"pAnswer\">{{ inpValSubmitted }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      inpVal: '',\n      inpValSubmitted: 'Not submitted yet'\n    }\n  },\n  methods: {\n    registerAnswer() {\n      if(this.inpVal) {\n        this.inpValSubmitted = this.inpVal;\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n  div {\n    border: dashed black 1px;\n    border-radius: 10px;\n    padding: 0 20px 20px 20px;\n    margin-top: 20px;\n    display: inline-block;\n  }\n  button {\n    margin: 10px;\n  }\n  label {\n    display: block;\n    width: 80px;\n    padding: 5px;\n  }\n  label:hover {\n    cursor: pointer;\n    background-color: rgb(211, 244, 211);\n    border-radius: 5px;\n  }\n  #pAnswer {\n    background-color: lightgreen;\n    padding: 5px;\n  }\n</style> Run Example »",
          "Example App.vue : <template>\n  <h1>Checkbox Inputs in Vue</h1>\n  <form @submit.prevent=\"registerAnswer\">\n    <p>What kinds of food do you like?</p>\n    <label>\n      <input type=\"checkbox\" v-model=\"likeFoods\" value=\"Pizza\"> Pizza\n    </label>\n    <label>\n      <input type=\"checkbox\" v-model=\"likeFoods\" value=\"Rice\"> Rice\n    </label>\n    <label>\n      <input type=\"checkbox\" v-model=\"likeFoods\" value=\"Fish\"> Fish\n    </label>\n    <label>\n      <input type=\"checkbox\" v-model=\"likeFoods\" value=\"Salad\"> Salad\n    </label>\n    <button type=\"submit\">Submit</button>\n  </form>\n  <div>\n    <h3>Submitted answer:</h3>\n    <p id=\"pAnswer\">{{ inpValSubmitted }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      likeFoods: [],\n      inpValSubmitted: 'Not submitted yet'\n    }\n  },\n  methods: {\n    registerAnswer() {\n      this.inpValSubmitted = this.likeFoods;\n    }\n  }\n}\n</script>\n\n<style scoped>\n  div {\n    border: dashed black 1px;\n    border-radius: 10px;\n    padding: 0 20px 20px 20px;\n    margin-top: 20px;\n    display: inline-block;\n  }\n  button {\n    margin: 10px;\n  }\n  label {\n    display: block;\n    width: 80px;\n    padding: 5px;\n  }\n  label:hover {\n    cursor: pointer;\n    background-color: rgb(211, 244, 211);\n    border-radius: 5px;\n  }\n  #pAnswer {\n    background-color: lightgreen;\n    padding: 5px;\n  }\n</style> Run Example »",
          "Example App.vue : <template>\n  <h1>Drop-down List in Vue</h1>\n  <form @submit.prevent=\"registerAnswer\">\n    <label for=\"cars\">Choose a car:</label>\n    <select  v-model=\"carSelected\" id=\"cars\">\n      <option disabled value=\"\">Please select one</option>\n      <option>Volvo</option>\n      <option>Saab</option>\n      <option>Opel</option>\n      <option>Audi</option>\n    </select>\n    <br><br>\n    <input type=\"submit\" value=\"Submit\">\n  </form>\n  <div>\n    <h3>Submitted answer:</h3>\n    <p id=\"pAnswer\">{{ inpValSubmitted }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      carSelected: '',\n      inpValSubmitted: 'Not submitted yet'\n    }\n  },\n  methods: {\n    registerAnswer() {\n      if(this.carSelected) {\n        this.inpValSubmitted = this.carSelected;\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n  div {\n    border: dashed black 1px;\n    border-radius: 10px;\n    padding: 0 20px 20px 20px;\n    margin-top: 20px;\n    display: inline-block;\n  }\n  button {\n    margin: 10px;\n  }\n  label {\n    width: 80px;\n    padding: 5px;\n  }\n  label:hover {\n    cursor: pointer;\n    background-color: rgb(211, 244, 211);\n    border-radius: 5px;\n  }\n  #pAnswer {\n    background-color: lightgreen;\n    padding: 5px;\n  }\n</style> Run Example »",
          "Example App.vue : <template>\n  <h1>Select Multiple in Vue</h1>\n  <p>Depending on your operating system, use the 'ctrl' or the 'command' key to select multiple options.</p>\n  <form @submit.prevent=\"registerAnswer\">\n    <label for=\"cars\">Choose one or more cars:</label><br>\n    <select  v-model=\"carsSelected\" id=\"cars\" multiple>\n      <option>Volvo</option>\n      <option>Saab</option>\n      <option>Opel</option>\n      <option>Audi</option>\n      <option>Kia</option>\n    </select>\n    <button type=\"submit\">Submit</button>\n  </form>\n  <div>\n    <h3>Submitted answer:</h3>\n    <p id=\"pAnswer\">{{ inpValSubmitted }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      carsSelected: [],\n      inpValSubmitted: 'Not submitted yet'\n    }\n  },\n  methods: {\n    registerAnswer() {\n      if(this.carsSelected) {\n        this.inpValSubmitted = this.carsSelected;\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n  div {\n    border: dashed black 1px;\n    border-radius: 10px;\n    padding: 0 20px 20px 20px;\n    margin-top: 20px;\n    display: inline-block;\n  }\n  button, select {\n    margin: 10px;\n    display: block;\n  }\n  label {\n    width: 80px;\n    padding: 5px;\n  }\n  label:hover {\n    cursor: pointer;\n    background-color: rgb(211, 244, 211);\n    border-radius: 5px;\n  }\n  #pAnswer {\n    background-color: lightgreen;\n    padding: 5px;\n  }\n</style> Run Example »",
          "Example App.vue : <template>\n  <h1>Input Type File</h1>\n  <form @submit.prevent=\"registerAnswer\">\n    <label>Choose a file:\n      <input @change=\"updateVal\" type=\"file\">\n    </label>\n    <button type=\"submit\">Submit</button>\n  </form>\n  <div>\n    <h3>Submitted answer:</h3>\n    <p id=\"pAnswer\">{{ inpValSubmitted }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      fileInp: null,\n      inpValSubmitted: 'Not submitted yet'\n    }\n  },\n  methods: {\n    registerAnswer() {\n      if(this.fileInp) {\n        this.inpValSubmitted = this.fileInp;\n      }\n    },\n    updateVal(e) {\n      this.fileInp = e.target.value;\n    }\n  }\n}\n</script>\n\n<style scoped>\n  div {\n    border: dashed black 1px;\n    border-radius: 10px;\n    padding: 0 20px 20px 20px;\n    margin-top: 20px;\n    display: inline-block;\n  }\n  button {\n    margin: 10px;\n    display: block;\n  }\n  #pAnswer {\n    background-color: lightgreen;\n    padding: 5px;\n  }\n</style> Run Example »",
          "Example App.vue : <form @submit.prevent=\"registerAnswer\">\n  <label>How tall are you?<br>\n    <input v-model=\"heightInp\" type=\"range\" min=\"50\" max=\"235\"> {{ heightInp }} cm\n  </label>\n  <button type=\"submit\">Submit</button>\n</form> Run Example »",
          "Example App.vue : <form @submit.prevent=\"registerAnswer\">\n  <label>Choose a color: \n    <input v-model=\"colorInp\" type=\"color\">\n  </label>\n  <button type=\"submit\">Submit</button>\n</form> Run Example »",
          "Example App.vue : <form @submit.prevent=\"registerAnswer\">\n  <label>\n    <p>What do you think about our product?</p> \n    <textarea v-model=\"txtInp\" placeholder=\"Write something..\" rows=\"4\" cols=\"35\"></textarea>\n  </label>\n  <button type=\"submit\">Submit</button>\n</form> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_routing.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_form-inputs_rbtn_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_form-inputs_rbtn2_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_form-inputs_sel_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_form-inputs_selMul_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_form-inputs_file_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_form-inputs_range_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_form-inputs_color_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_form-inputs_textarea_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_routing.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_animations.php",
    "cours": {
      "titre": "Vue Animations",
      "description": "The built-in <Transition> component in Vue helps us to do animations when elements are added or removed with v-if , v-show or with dynamic components. There is nothing wrong with using plain CSS transitions and animations in other cases.",
      "lien": "https://www.w3schools.com/vue/vue_animations.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "v-enter-from",
            "v-enter-active",
            "v-enter-to"
          ],
          [
            "v-leave-from",
            "v-leave-active",
            "v-leave-to"
          ],
          [
            "swirl -enter-from",
            "swirl -enter-active",
            "swirl -enter-to",
            "swirl -leave-from",
            "swirl -leave-active",
            "swirl -leave-to"
          ]
        ],
        "examples": [
          "Example App.vue : <template>\n  <h1>Basic CSS Transition</h1>\n  <button @click=\"this.doesRotate = true\">Rotate</button>\n  <div :class=\"{ rotate: doesRotate }\"></div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      doesRotate: false\n    }\n  }\n}\n</script>\n\n<style scoped>\n  .rotate {\n    rotate: 160deg;\n    transition: rotate 1s;\n  }\n  div {\n    border: solid black 2px;\n    background-color: lightcoral;\n    width: 60px;\n    height: 60px;\n  }\n  h1, button, div {\n    margin: 10px;\n  }\n</style> Run Example »",
          "Example App.vue : <template>\n  <h1>Basic CSS Animation</h1>\n  <button @click=\"this.doesMove = true\">Start</button>\n  <div :class=\"{ move: doesMove }\"></div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      doesMove: false\n    }\n  }\n}\n</script>\n\n<style scoped>\n  .move {\n    animation: move .5s alternate 4 ease-in-out;\n  }\n  @keyframes move {\n    from {\n      translate: 0 0;\n    }\n    to {\n      translate: 70px 0;\n    }\n  }\n  div {\n    border: solid black 2px;\n    background-color: lightcoral;\n    border-radius: 50%;\n    width: 60px;\n    height: 60px;\n  }\n  h1, button, div {\n    margin: 10px;\n  }\n</style> Run Example »",
          "Example App.vue : <template>\n  <h1>Add/Remove <p> Tag</h1>\n  <button @click=\"this.exists = !this.exists\">{{btnText}}</button><br>\n  <p v-if=\"exists\">Hello World!</p>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      exists: false\n    }\n  },\n  computed: {\n    btnText() {\n      if(this.exists) {\n        return 'Remove';\n      }\n      else {\n        return 'Add';\n      }\n    }\n  }\n}\n</script>\n\n<style>\n  p {\n    background-color: lightgreen;\n    display: inline-block;\n    padding: 10px;\n  }\n</style> Run Example »",
          "Example App.vue : <template>\n  <h1>Add/Remove <p> Tag</h1>\n  <button @click=\"this.exists = !this.exists\">{{btnText}}</button><br>\n  <Transition>\n    <p v-if=\"exists\">Hello World!</p>\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      exists: false\n    }\n  },\n  computed: {\n    btnText() {\n      if(this.exists) {\n        return 'Remove';\n      }\n      else {\n        return 'Add';\n      }\n    }\n  }\n}\n</script>\n\n<style>\n  .v-leave-from {\n    opacity: 1;\n  }\n  .v-leave-to {\n    opacity: 0;\n  }\n  p {\n    background-color: lightgreen;\n    display: inline-block;\n    padding: 10px;\n    transition: opacity 0.5s;\n  }\n</style> Run Example »",
          "Example App.vue : <template>\n  <h1>Add/Remove <p> Tag</h1>\n  <button @click=\"this.exists = !this.exists\">{{btnText}}</button><br>\n  <Transition>\n    <p v-if=\"exists\">Hello World!</p>\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      exists: false\n    }\n  },\n  computed: {\n    btnText() {\n      if(this.exists) {\n        return 'Remove';\n      }\n      else {\n        return 'Add';\n      }\n    }\n  }\n}\n</script>\n\n<style>\n  .v-enter-from {\n    opacity: 0;\n    translate: -100px 0;\n  }\n  .v-enter-to {\n    opacity: 1;\n    translate: 0 0;\n  }\n  .v-leave-from {\n    opacity: 1;\n    translate: 0 0;\n  }\n  .v-leave-to {\n    opacity: 0;\n    translate: 100px 0;\n  }\n  p {\n    background-color: lightgreen;\n    display: inline-block;\n    padding: 10px;\n    transition: all 0.5s;\n  }\n</style> Run Example »",
          "Example App.vue : <template>\n  <h1>Add/Remove <p> Tag</h1>\n  <button @click=\"this.exists = !this.exists\">{{btnText}}</button><br>\n  <Transition>\n    <p v-if=\"exists\">Hello World!</p>\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      exists: false\n    }\n  },\n  computed: {\n    btnText() {\n      if(this.exists) {\n        return 'Remove';\n      }\n      else {\n        return 'Add';\n      }\n    }\n  }\n}\n</script>\n\n<style>\n  .v-enter-active {\n    background-color: lightgreen;\n    animation: added 1s;\n  }\n  .v-leave-active {\n    background-color: lightcoral;\n    animation: added 1s reverse;\n  }\n  @keyframes added {\n    from {\n      opacity: 0;\n      translate: -100px 0;\n    }\n    to {\n      opacity: 1;\n      translate: 0 0;\n    }\n  }\n  p {\n    display: inline-block;\n    padding: 10px;\n    border: dashed black 1px;\n  }\n</style> Run Example »",
          "<Transition name=\"swirl\">",
          "Example App.vue : <template>\n  <h1>Add/Remove <p> Tag</h1>\n  <p>The second transition in this example has the name prop \"swirl\", so that we can keep the transitions apart with different class names.</p>\n  <hr>\n  <button @click=\"this.p1Exists = !this.p1Exists\">{{btn1Text}}</button><br>\n  <Transition>\n    <p v-if=\"p1Exists\" id=\"p1\">Hello World!</p>\n  </Transition>\n  <hr>\n  <button @click=\"this.p2Exists = !this.p2Exists\">{{btn2Text}}</button><br>\n  <Transition name=\"swirl\">\n    <p v-if=\"p2Exists\" id=\"p2\">Hello World!</p>\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      p1Exists: false,\n      p2Exists: false\n    }\n  },\n  computed: {\n    btn1Text() {\n      if(this.p1Exists) {\n        return 'Remove';\n      }\n      else {\n        return 'Add';\n      }\n    },\n    btn2Text() {\n      if(this.p2Exists) {\n        return 'Remove';\n      }\n      else {\n        return 'Add';\n      }\n    }\n  }\n}\n</script>\n\n<style>\n  .v-enter-active {\n    background-color: lightgreen;\n    animation: added 1s;\n  }\n  .v-leave-active {\n    background-color: lightcoral;\n    animation: added 1s reverse;\n  }\n  @keyframes added {\n    from {\n      opacity: 0;\n      translate: -100px 0;\n    }\n    to {\n      opacity: 1;\n      translate: 0 0;\n    }\n  }\n  .swirl-enter-active {\n    animation: swirlAdded 1s;\n  }\n  .swirl-leave-active {\n    animation: swirlAdded 1s reverse;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 360deg;\n      scale: 1;\n    }\n  }\n  #p1, #p2 {\n    display: inline-block;\n    padding: 10px;\n    border: dashed black 1px;\n  }\n  #p2 {\n    background-color: lightcoral;\n  }\n</style> Run Example »",
          "Example App.vue : <template>\n  <h1>JavaScript Transition Hooks</h1>\n  <p>This code hooks into \"after-enter\" so that after the initial animation is done, a method runs that displays a red div.</p>\n  <button @click=\"pVisible=true\">Create p-tag!</button><br>\n  <Transition @after-enter=\"onAfterEnter\">\n    <p v-show=\"pVisible\" id=\"p1\">Hello World!</p>\n  </Transition>\n  <br>\n  <div v-show=\"divVisible\">This appears after the \"enter-active\" phase of the transition.</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      pVisible: false,\n      divVisible: false\n    }\n  },\n  methods: {\n    onAfterEnter() {\n      this.divVisible = true;\n    }\n  }\n}\n</script>\n\n<style scoped>\n  .v-enter-active {\n    animation: swirlAdded 1s;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 360deg;\n      scale: 1;\n    }\n  }\n  #p1, div {\n    display: inline-block;\n    padding: 10px;\n    border: dashed black 1px;\n  }\n  #p1 {\n    background-color: lightgreen;\n  }\n  div {\n    background-color: lightcoral;\n  }\n</style> Run Example »",
          "Example App.vue : <template>\n  <h1>The 'enter-cancelled' Event</h1>\n  <p>Click the toggle button again before the enter animation is finished to trigger the 'enter-cancelled' event.</p>\n  <button @click=\"pVisible=!pVisible\">Toggle</button><br>\n  <Transition @enter-cancelled=\"onEnterCancelled\">\n    <p v-if=\"pVisible\" id=\"p1\">Hello World!</p>\n  </Transition>\n  <br>\n  <div v-if=\"divVisible\">You interrupted the \"enter-active\" transition.</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      pVisible: false,\n      divVisible: false\n    }\n  },\n  methods: {\n    onEnterCancelled() {\n      this.divVisible = true;\n    }\n  }\n}\n</script>\n\n<style scoped>\n  .v-enter-active {\n    animation: swirlAdded 2s;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 720deg;\n      scale: 1;\n    }\n  }\n  #p1, div {\n    display: inline-block;\n    padding: 10px;\n    border: dashed black 1px;\n  }\n  #p1 {\n    background-color: lightgreen;\n  }\n  div {\n    background-color: lightcoral;\n  }\n</style> Run Example »",
          "<Transition appear>\n  ...\n</Transition>",
          "Example App.vue : <template>\n  <h1>The 'appear' Prop</h1>\n  <p>The 'appear' prop starts the animation when the p tag below is rendered for the first time as the page opens. Without the 'appear' prop, this example would have had no animation.</p>\n  <Transition appear>\n    <p id=\"p1\">Hello World!</p>\n  </Transition>\n</template>\n\n<style>\n  .v-enter-active {\n    animation: swirlAdded 1s;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 360deg;\n      scale: 1;\n    }\n  }\n  #p1 {\n    display: inline-block;\n    padding: 10px;\n    border: dashed black 1px;\n    background-color: lightgreen;\n  }\n</style> Run Example »",
          "Example App.vue : <template>\n  <h1>Transition Between Elements</h1>\n  <p>Click the button to get a new image.</p>\n  <p>The new image is added before the previous is removed. We will fix this in the next example with mode=\"out-in\".</p>\n  <button @click=\"newImg\">Next image</button><br>\n  <Transition>\n    <img src=\"/img_pizza.svg\" v-if=\"imgActive === 'pizza'\">\n    <img src=\"/img_apple.svg\" v-else-if=\"imgActive === 'apple'\">\n    <img src=\"/img_cake.svg\" v-else-if=\"imgActive === 'cake'\">\n    <img src=\"/img_fish.svg\" v-else-if=\"imgActive === 'fish'\">\n    <img src=\"/img_rice.svg\" v-else-if=\"imgActive === 'rice'\">\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      imgActive: 'pizza',\n      imgs: ['pizza', 'apple', 'cake', 'fish', 'rice'],\n      indexNbr: 0\n    }\n  },\n  methods: {\n    newImg() {\n      this.indexNbr++;\n      if(this.indexNbr >= this.imgs.length) {\n        this.indexNbr = 0;\n      }\n      this.imgActive = this.imgs[this.indexNbr];\n    }\n  }\n}\n</script>\n\n<style>\n  .v-enter-active {\n    animation: swirlAdded 1s;\n  }\n  .v-leave-active {\n    animation: swirlAdded 1s reverse;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 360deg;\n      scale: 1;\n    }\n  }\n  img {\n    width: 100px;\n    margin: 20px;\n  }\n  img:hover {\n    cursor: pointer;\n  }\n</style> Run Example »",
          "Example In addition to mode=\"out-in\" , this example also uses a computed value 'imgActive' instead of the 'newImg' method we used in the previous example. App.vue : <template>\n  <h1>mode=\"out-in\"</h1>\n  <p>Click the button to get a new image.</p>\n  <p>With mode=\"out-in\", the next image is not added until the current image is removed. Another difference from the previous example, is that here we use computed prop instead of a method.</p>\n  <button @click=\"indexNbr++\">Next image</button><br>\n  <Transition mode=\"out-in\">\n    <img src=\"/img_pizza.svg\" v-if=\"imgActive === 'pizza'\">\n    <img src=\"/img_apple.svg\" v-else-if=\"imgActive === 'apple'\">\n    <img src=\"/img_cake.svg\" v-else-if=\"imgActive === 'cake'\">\n    <img src=\"/img_fish.svg\" v-else-if=\"imgActive === 'fish'\">\n    <img src=\"/img_rice.svg\" v-else-if=\"imgActive === 'rice'\">\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      imgs: ['pizza', 'apple', 'cake', 'fish', 'rice'],\n      indexNbr: 0\n    }\n  },\n  computed: {\n    imgActive() {\n      if(this.indexNbr >= this.imgs.length) {\n        this.indexNbr = 0;\n      }\n      return this.imgs[this.indexNbr];\n    }\n  }\n}\n</script>\n\n<style>\n  .v-enter-active {\n    animation: swirlAdded 0.7s;\n  }\n  .v-leave-active {\n    animation: swirlAdded 0.7s reverse;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 360deg;\n      scale: 1;\n    }\n  }\n  img {\n    width: 100px;\n    margin: 20px;\n  }\n  img:hover {\n    cursor: pointer;\n  }\n</style> Run Example »",
          "Example App.vue : <template>\n  <h1>Transition with Dynamic Components</h1>\n  <p>The Transition component wraps around the dynamic component so that the switching can be animated.</p>\n  <button @click=\"toggleValue = !toggleValue\">Switch component</button>\n  <Transition mode=\"out-in\">\n    <component :is=\"activeComp\"></component>\n  </Transition>\n</template>\n\n<script>\n  export default {\n    data () {\n      return {\n        toggleValue: true\n      }\n    },\n    computed: {\n      activeComp() {\n        if(this.toggleValue) {\n          return 'comp-one'\n        }\n        else {\n          return 'comp-two'\n        }\n      }\n    }\n  }\n</script>\n\n<style>\n  .v-enter-active {\n    animation: slideIn 0.5s;\n  }\n  @keyframes slideIn {\n    from {\n      translate: -200px 0;\n      opacity: 0;\n    }\n    to {\n      translate: 0 0;\n      opacity: 1;\n    }\n  }\n  .v-leave-active {\n    animation: slideOut 0.5s;\n  }\n  @keyframes slideOut {\n    from {\n      translate: 0 0;\n      opacity: 1;\n    }\n    to {\n      translate: 200px 0;\n      opacity: 0;\n    }\n  }\n  #app {\n    width: 350px;\n    margin: 10px;\n  }\n  #app > div {\n    border: solid black 2px;\n    padding: 10px;\n    margin-top: 10px;\n  }\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_form-inputs.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition2_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition3_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition4_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition5_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition6_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition7_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition9_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition10_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition8_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition11_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition12_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition13_4"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_form-inputs.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_animations_v-for.php",
    "cours": {
      "titre": "Vue Animations with v-for",
      "description": "The built-in <TransitionGroup> component in Vue helps us to animate elements that are added to our page with v-for .",
      "lien": "https://www.w3schools.com/vue/vue_animations_v-for.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Remove items by clicking on them",
            "Sort the items",
            "Add new items at a random place in the list"
          ]
        ],
        "examples": [
          "<TransitionGroup tag=\"ol\">\n  <li v-for=\"x in products\" :key=\"x\">\n    {{ x }}\n  </li>\n</TransitionGroup>",
          "<ol>\n  <li>Apple</li>\n  <li>Pizza</li>\n  <li>Rice</li>\n</ol>",
          "<style>\n  .v-enter-from {\n    opacity: 0;\n    rotate: 180deg;\n  }\n  .v-enter-to {\n    opacity: 1;\n    rotate: 0deg;\n  }\n  .v-enter-active {\n    transition: all 0.7s;\n  }\n</style>",
          "Example App.vue : <template>\n  <h3>The <TransitionGroup> Component</h3>\n  <p>New products are given animations using the <TransitionGroup> component.</p>\n  <input type=\"text\" v-model=\"inpName\"> \n  <button @click=\"addEl\">Add</button>\n  <TransitionGroup tag=\"ol\">\n    <li v-for=\"x in products\" :key=\"x\">\n      {{ x }}\n    </li>\n  </TransitionGroup>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        products: ['Apple','Pizza','Rice'],\n        inpName: ''\n      }\n    },\n    methods: {\n      addEl() {\n        const el = this.inpName;\n        this.products.push(el);\n        this.inpName = null;\n      }\n    }\n  }\n</script>\n\n<style>\n  .v-enter-from {\n    opacity: 0;\n    rotate: 180deg;\n  }\n  .v-enter-to {\n    opacity: 1;\n    rotate: 0deg;\n  }\n  .v-enter-active {\n    transition: all 0.7s;\n  }\n</style> Run Example »",
          "Example App.vue : <template>\n  <h3>The <TransitionGroup> Component</h3>\n  <p>New products are given animations using the <TransitionGroup> component.</p>\n  <button @click=\"addDie\">Roll</button>\n  <button @click=\"removeDie\">Remove random</button><br>\n  <TransitionGroup>\n    <div v-for=\"x in dice\" :key=\"x\" class=\"diceDiv\" :style=\"{ backgroundColor: 'hsl('+x*40+',85%,85%)' }\">\n      {{ x }}\n    </div>\n  </TransitionGroup>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        dice: [],\n        inpName: ''\n      }\n    },\n    methods: {\n      addDie() {\n        const newDie = Math.ceil(Math.random()*6);\n        this.dice.push(newDie);\n      },\n      removeDie() {\n        if(this.dice.length>0){\n          this.dice.splice(Math.floor(Math.random()*this.dice.length), 1);\n        }\n      }\n    },\n    mounted() {\n      this.addDie();\n      this.addDie();\n      this.addDie();\n    }\n  }\n</script>\n\n<style>\n.v-enter-from {\n  opacity: 0;\n  translate: 200px 0;\n  rotate: 360deg;\n}\n.v-enter-to {\n  opacity: 1;\n  translate: 0 0;\n  rotate: 0deg;\n}\n.v-enter-active,\n.v-leave-active {\n  transition: all 0.7s;\n}\n.v-leave-from { opacity: 1; }\n.v-leave-to { opacity: 0; }\n.diceDiv {\n  margin: 10px;\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n  text-align: center;\n  border: solid black 1px;\n  border-radius: 5px;\n  display: inline-block;\n}\n</style> Run Example »",
          "Example App.vue : <style>\n.v-enter-from {\n  opacity: 0;\n  translate: 200px 0;\n  rotate: 360deg;\n}\n.v-enter-to {\n  opacity: 1;\n  translate: 0 0;\n  rotate: 0deg;\n}\n.v-enter-active,\n.v-leave-active,\n.v-move {\n  transition: all 0.7s;\n}\n.v-leave-active { position: absolute; }\n.v-leave-from { opacity: 1; }\n.v-leave-to { opacity: 0; }\n.diceDiv {\n  margin: 10px;\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n  text-align: center;\n  border: solid black 1px;\n  border-radius: 5px;\n  display: inline-block;\n}\n</style> Run Example »",
          "Example App.vue : <template>\n  <h3>The <TransitionGroup> Component</h3>\n  <p>Items inside the <TransitionGroup> component are animated when they are created or removed.</p>\n  <button @click=\"addDie\">Roll</button>\n  <button @click=\"addDie10\">Roll 10 dice</button>\n  <button @click=\"dice.sort(compareFunc)\">Sort</button>\n  <button @click=\"dice.sort(shuffleFunc)\">Shuffle</button><br>\n  <TransitionGroup>\n    <div \n    v-for=\"x in dice\" \n    :key=\"x.keyNmbr\" \n    class=\"diceDiv\" \n    :style=\"{ backgroundColor: 'hsl('+x.dieNmbr*60+',85%,85%)' }\"\n    @click=\"removeDie(x.keyNmbr)\">\n      {{ x.dieNmbr }}\n    </div>\n  </TransitionGroup>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        dice: [],\n        keyNumber: 0\n      }\n    },\n    methods: {\n      addDie() {\n        const newDie = {\n          dieNmbr: Math.ceil(Math.random()*6),\n          keyNmbr: this.keyNumber\n        };\n        this.dice.splice(Math.floor(Math.random()*this.dice.length),0,newDie);\n        this.keyNumber++;\n      },\n      addDie10() {\n        for(let i=0; i<10; i++) {\n          this.addDie();\n        }\n      },\n      compareFunc(a,b){\n        return a.dieNmbr - b.dieNmbr;\n      },\n      shuffleFunc(a,b){\n        return Math.random()-0.5;\n      },\n      removeDie(key) {\n        const pos = this.dice.map(e => e.keyNmbr).indexOf(key);\n        this.dice.splice(pos, 1);\n      }\n    },\n    mounted() {\n      this.addDie10();\n    }\n  }\n</script>\n\n<style>\n.v-enter-from {\n  opacity: 0;\n  scale: 0;\n  rotate: 360deg;\n}\n.v-enter-to {\n  opacity: 1;\n  scale: 1;\n  rotate: 0deg;\n}\n.v-enter-active,\n.v-leave-active,\n.v-move {\n  transition: all 0.7s;\n}\n.v-leave-active { position: absolute; }\n.v-leave-from { opacity: 1; }\n.v-leave-to { opacity: 0; }\n.diceDiv {\n  margin: 10px;\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n  text-align: center;\n  border: solid black 1px;\n  border-radius: 5px;\n  display: inline-block;\n}\n.diceDiv:hover {\n  cursor: pointer;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n#app {\n  position: relative;\n}\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_animations.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transitionGroup_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transitionGroup2_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transitionGroup3_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transitionGroup4_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_animations.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_build.php",
    "cours": {
      "titre": "Build Your Project",
      "description": "When a Vue project is finished, it should move from being in \"development mode\" into \"build\" mode. The build command compiles our Vue project into .html, .js and .css files that are optimized to run directly in the browser. We build our Vue project to create files on a server for others to access.",
      "lien": "https://www.w3schools.com/vue/vue_build.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "npm run build",
          "npm run preview",
          "npm run build",
          "npm run preview"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_animations_v-for.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_animations_v-for.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_composition-api.php",
    "cours": {
      "titre": "Vue Composition API",
      "description": "The Composition API is an alternative way of writing Vue applications to the Options API that is used elsewhere in this tutorial. In Composition API we can write code more freely, but it requires a deeper understanding, and it is considered to be less beginner-friendly.",
      "lien": "https://www.w3schools.com/vue/vue_composition-api.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example App.vue : <template>\n  <h1>Example</h1>\n  <img src=\"/img_typewriter.jpeg\" alt=\"Typewriter\">\n  <p>Typewriters left in storage: {{ typeWriters }}</p>\n  <button @click=\"remove\">Remove one</button>\n  <p style=\"font-style: italic;\">\"{{ storageComment }}\"</p>\n</template>\n\n<script setup>\n  import { ref, computed } from 'vue'\n\n  const typeWriters = ref(10);\n\n  function remove(){\n    if(typeWriters.value>0){\n      typeWriters.value--;\n    }\n  }\n\n  const storageComment = computed(\n    function(){\n      if(typeWriters.value > 5) {\n        return \"Many left\"\n      }\n      else if(typeWriters.value > 0){\n        return \"Very few left\"\n      }\n      else {\n        return \"No typewriters left\"\n      }\n    }\n  )\n</script> Run Example »",
          "Example App.vue : <template>\n  <h1>Example</h1>\n  <img src=\"/img_typewriter.jpeg\" alt=\"Typewriter\">\n  <p>Typewriters left in storage: {{ typeWriters }}</p>\n  <button @click=\"remove\">Remove one</button>\n  <p style=\"font-style: italic;\">\"{{ storageComment }}\"</p>\n</template>\n\n<script>\nexport default {\n  data() { \n    return {\n      typeWriters: 10\n    };\n  },\n  methods: {\n    remove(){\n      if(this.typeWriters>0){\n        this.typeWriters--;\n      }\n    }\n  },\n  computed: {\n    storageComment(){\n      if(this.typeWriters > 5) {\n        return \"Many left\"\n      }\n      else if(this.typeWriters > 0){\n        return \"Very few left\"\n      }\n      else {\n        return \"No typewriters left\"\n      }\n    }\n  }\n}\n</script> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_build.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_compAPI_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_compAPI2_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_build.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_ref_builtin-attributes.php",
    "cours": {
      "titre": "Vue Built-in Attributes",
      "description": "",
      "lien": "https://www.w3schools.com/vue/vue_ref_builtin-attributes.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_composition-api.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_composition-api.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_is.php",
    "cours": {
      "titre": "Vue 'is' Attribute",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_is.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example The is attribute is connected to the computed value 'activeComp' with v-bind (shorthand : ) so that either the 'comp-one' component or the 'comp-two' component is displayed. App.vue : <template>\n  <h1>Dynamic Components</h1>\n  <p>App.vue switches between which component to show.</p>\n  <button @click=\"toggleValue = !toggleValue\">Switch component</button>\n  <component :is=\"activeComp\"></component>\n</template> Run Example »",
          "Example 1 Using the is attribute to replace an <img> tag with a Vue component. App.vue : <template>\n  <h2>Example Built-in 'is' Attribute</h2>\n  <p>The IMG tag below is set to be replaced by a component by the use of 'is=\"vue:child-comp\"'.</p>\n  <img is=\"vue:child-comp\" />\n</template> ChildComp.vue : <template>\n  <div>\n    <h3>ChildComp.vue</h3>\n    <p>This is the child component</p>\n  </div>\n</template>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  background-color: lightgreen;\n  padding: 10px;\n  max-width: 250px;\n  margin-top: 20px;\n}\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-attributes.php"
          },
          {
            "title": "Vue Built-in Attributes Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-attributes.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_dynamicComp_4"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_is_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-attributes.php"
          },
          {
            "title": "Vue Built-in Attributes Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-attributes.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_key.php",
    "cours": {
      "titre": "Vue 'key' Attribute",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_key.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example The key attribute is used on food-item components to uniquely identify each element created with v-for . <food-item\n  v-for=\"x in foods\"\n  :key=\"x.name\"\n  :food-name=\"x.name\"\n  :food-desc=\"x.desc\"\n  :is-favorite=\"x.favorite\"\n/> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_is.php"
          },
          {
            "title": "Vue Built-in Attributes Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-attributes.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_v-forKey3_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_is.php"
          },
          {
            "title": "Vue Built-in Attributes Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-attributes.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_ref.php",
    "cours": {
      "titre": "Vue 'ref' Attribute",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_ref.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "<div id=\"app\"> <p ref=\"pEl\">Initial text.</p> <button v-on:click=\"changeText\">Change text</button> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script type=\"module\"> const app = Vue.createApp({ methods: { changeText(){ this.$refs.pEl.innerHTML = \"Hello!\"; } } }) app.mount('#app') </script>",
          "Example Using the ref attribute to change the text inside the <p> tag: <div id=\"app\"> <p ref=\"pEl\">Initial text.</p> <button v-on:click=\"changeText\">Change text</button> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script type=\"module\"> const app = Vue.createApp({ methods: { changeText(){ this.$refs.pEl.innerHTML = \"Hello!\"; } } }) app.mount('#app') </script> Try it Yourself »",
          "Example <ul>\n  <li v-for=\"x in liTexts\" ref=\"liEl\">{{ x }}</li>\n</ul> Run Example »",
          "Example 1 The text inside a <p> element is changed. <template>\n  <h1>Example</h1>\n  <p>Click the button to put \"Hello!\" as the text in the green p element.</p>\n  <button @click=\"changeVal\">Change Text</button><br>\n  <p ref=\"pEl\" id=\"pEl\">This is the initial text</p>\n</template>\n\n<script>\n  export default {\n    methods: {\n      changeVal() { \n        this.$refs.pEl.innerHTML = \"Hello!\";\n      }\n    }\n  };\n</script>\n\n<style>\n#pEl {\n  background-color: lightgreen;\n  display: inline-block;\n}\n</style> Run Example »",
          "Example 2 The text from the first <p> tag is copied into the second <p> tag. <template>\n  <h1>Example</h1>\n  <p ref=\"p1\">Click the button to copy this text into the paragraph below.</p>\n  <button @click=\"transferText\">Transfer text</button>\n  <p ref=\"p2\">...</p>\n</template>\n\n<script>\n  export default {\n    methods: {\n      transferText() { \n        this.$refs.p2.innerHTML = this.$refs.p1.innerHTML;\n      }\n    }\n  };\n</script> Run Example »",
          "Example 3 A <p> element gets the same content as what's being written in the input field. <template>\n  <h1>Example</h1>\n  <p>Start writing inside the input element, and the text will be copied into the last paragraph by the use of the '$refs' object.</p>\n  <input ref=\"inputEl\" @input=\"getRefs\" placeholder=\"Write something..\">\n  <p ref=\"pEl\"></p>\n</template>\n\n<script>\n  export default {\n    methods: {\n      getRefs() { \n        this.$refs.pEl.innerHTML = this.$refs.inputEl.value;\n      }\n    }\n  };\n</script> Run Example »",
          "Example 4 The button reveals the the third list element stored as an array element inside the $refs object. <template>\n  <h1>Example</h1>\n  <p>Click the button to reveal the 3rd list element stored as an array element in the $refs object.</p>\n  <button @click=\"getValue\">Get the 3rd list element</button><br>\n  <ul>\n    <li v-for=\"x in liTexts\" ref=\"liEl\">{{ x }}</li>\n  </ul>\n  <pre>{{ thirdEl }}</pre>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        thirdEl: ' ',\n        liTexts: ['Apple','Banana','Kiwi','Tomato','Lichi']\n      }\n    },\n    methods: {\n      getValue() { \n        this.thirdEl = this.$refs.liEl[2].innerHTML;\n        console.log(\"this.$refs.liEl = \",this.$refs.liEl);\n      }\n    }\n  };\n</script>\n\n<style>\npre {\n  background-color: lightgreen;\n  display: inline-block;\n}\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_key.php"
          },
          {
            "title": "Vue Built-in Attributes Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-attributes.php"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_ref-attribute"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_refs4_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_refs3_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_refs0_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_refs2_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_refs4_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_key.php"
          },
          {
            "title": "Vue Built-in Attributes Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-attributes.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_ref_builtin-components.php",
    "cours": {
      "titre": "Vue Built-in Components",
      "description": "",
      "lien": "https://www.w3schools.com/vue/vue_ref_builtin-components.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_ref.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_ref.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_keep-alive.php",
    "cours": {
      "titre": "Vue <KeepAlive> Component",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_keep-alive.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the built-in <KeepAlive> component to make the components keep the previously entered user inputs: <KeepAlive>\n  <component :is=\"activeComp\"></component>\n</KeepAlive> Run Example »",
          "Example Using the include prop to specify which components that will cache the values: <KeepAlive include=\"CompOne,CompThree\">\n  <component :is=\"activeComp\"></component>\n</KeepAlive> Run Example »",
          "Example Using the exclude prop to specify which components that will not cache the values: <KeepAlive exclude=\"CompOne\">\n  <component :is=\"activeComp\"></component>\n</KeepAlive> Run Example »",
          "Example Using the max prop to specify how many of the last visited components that will cache the values: <KeepAlive :max=\"2\">\n  <component :is=\"activeComp\"></component>\n</KeepAlive> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-components.php"
          },
          {
            "title": "Vue Built-in Components Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-components.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_dynamicComp3_4"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_dynamicComp3_4"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_dynamicComp_5"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_dynamicComp5_4"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_dynamicComp2_5"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_dynamicComp_5"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_dynamicComp5_4"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_dynamicComp2_5"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-components.php"
          },
          {
            "title": "Vue Built-in Components Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-components.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_teleport.php",
    "cours": {
      "titre": "Vue <Teleport> Component",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_teleport.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the built-in <Teleport> component to move a <div> element to the root of the <body> : <Teleport to=\"body\">\n  <div id=\"redDiv\">Hello!</div>\n</Teleport> Run Example »",
          "Example Relevant code from the <style> and <script> tags still works for the teleported <div> tag even though it is no longer inside the component after compilation. CompOne.vue : <template>\n  <div>\n    <h2>Component</h2>\n    <p>This is the inside of the component.</p>\n    <Teleport to=\"body\">\n      <div \n        id=\"redDiv\" \n        @click=\"toggleVal = !toggleVal\" \n        :style=\"{ backgroundColor: bgColor }\"\n      >\n        Hello!<br>\n        Click me!\n      </div>\n    </Teleport>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      toggleVal: true\n    }\n  },\n  computed: {\n    bgColor() {\n      if (this.toggleVal) {\n        return 'lightpink'\n      }\n      else {\n        return 'lightgreen'\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n#redDiv {\n  margin: 10px;\n  padding: 10px;\n  display: inline-block;\n}\n\n#redDiv:hover {\n  cursor: pointer;\n}\n</style> Run Example »",
          "Example The boolean disabled prop is toggled with a button so that the <div> element is either teleported, or not. CompOne.vue : <template>\n  <div>\n    <h2>Component</h2>\n    <p>This is the inside of the component.</p>\n    <button @click=\"teleportOn = !teleportOn\">Teleport on/off</button>\n    <Teleport to=\"body\" :disabled=\"teleportOn\">\n      <div id=\"redDiv\">Hello!</div>\n    </Teleport>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      teleportOn: true\n    }\n  }\n}\n</script>\n\n<style scoped>\n  #redDiv {\n    background-color: lightcoral;\n    margin: 10px;\n    padding: 10px;\n    width: 100px;\n  }\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_keep-alive.php"
          },
          {
            "title": "Vue Built-in Components Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-components.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_teleport_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_teleport_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_teleport_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_teleport2_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_teleport_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_keep-alive.php"
          },
          {
            "title": "Vue Built-in Components Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-components.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_transition.php",
    "cours": {
      "titre": "Vue <Transition> Component",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_transition.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the built-in <Transition> component to animate a <p> element as it is removed with v-if : <Transition>\n  <p v-if=\"exists\">Hello World!</p>\n</Transition> Run Example »",
          "Example 1 A <p> element slides in and out when it is toggled. <template>\n  <h1>Add/Remove <p> Tag</h1>\n  <button @click=\"this.exists = !this.exists\">{{btnText}}</button><br>\n  <Transition>\n    <p v-if=\"exists\">Hello World!</p>\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      exists: false\n    }\n  },\n  computed: {\n    btnText() {\n      if(this.exists) {\n        return 'Remove';\n      }\n      else {\n        return 'Add';\n      }\n    }\n  }\n}\n</script>\n\n<style>\n  .v-enter-from {\n    opacity: 0;\n    translate: -100px 0;\n  }\n  .v-enter-to {\n    opacity: 1;\n    translate: 0 0;\n  }\n  .v-leave-from {\n    opacity: 1;\n    translate: 0 0;\n  }\n  .v-leave-to {\n    opacity: 0;\n    translate: 100px 0;\n  }\n  p {\n    background-color: lightgreen;\n    display: inline-block;\n    padding: 10px;\n    transition: all 0.5s;\n  }\n</style> Run Example »",
          "Example 2 A <p> element has separate background colors during 'enter' and 'leave' <template>\n  <h1>Add/Remove <p> Tag</h1>\n  <button @click=\"this.exists = !this.exists\">{{btnText}}</button><br>\n  <Transition>\n    <p v-if=\"exists\">Hello World!</p>\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      exists: false\n    }\n  },\n  computed: {\n    btnText() {\n      if(this.exists) {\n        return 'Remove';\n      }\n      else {\n        return 'Add';\n      }\n    }\n  }\n}\n</script>\n\n<style>\n  .v-enter-active {\n    background-color: lightgreen;\n    animation: added 1s;\n  }\n  .v-leave-active {\n    background-color: lightcoral;\n    animation: added 1s reverse;\n  }\n  @keyframes added {\n    from {\n      opacity: 0;\n      translate: -100px 0;\n    }\n    to {\n      opacity: 1;\n      translate: 0 0;\n    }\n  }\n  p {\n    display: inline-block;\n    padding: 10px;\n    border: dashed black 1px;\n  }\n</style> Run Example »",
          "Example 3 <p> elements are animated differently, using the name prop to differentiate the <Transition> components. <template>\n  <h1>Add/Remove <p> Tag</h1>\n  <p>The second transition in this example has the name prop \"swirl\", so that we can keep the transitions apart with different class names.</p>\n  <hr>\n  <button @click=\"this.p1Exists = !this.p1Exists\">{{btn1Text}}</button><br>\n  <Transition>\n    <p v-if=\"p1Exists\" id=\"p1\">Hello World!</p>\n  </Transition>\n  <hr>\n  <button @click=\"this.p2Exists = !this.p2Exists\">{{btn2Text}}</button><br>\n  <Transition name=\"swirl\">\n    <p v-if=\"p2Exists\" id=\"p2\">Hello World!</p>\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      p1Exists: false,\n      p2Exists: false\n    }\n  },\n  computed: {\n    btn1Text() {\n      if(this.p1Exists) {\n        return 'Remove';\n      }\n      else {\n        return 'Add';\n      }\n    },\n    btn2Text() {\n      if(this.p2Exists) {\n        return 'Remove';\n      }\n      else {\n        return 'Add';\n      }\n    }\n  }\n}\n</script>\n\n<style>\n  .v-enter-active {\n    background-color: lightgreen;\n    animation: added 1s;\n  }\n  .v-leave-active {\n    background-color: lightcoral;\n    animation: added 1s reverse;\n  }\n  @keyframes added {\n    from {\n      opacity: 0;\n      translate: -100px 0;\n    }\n    to {\n      opacity: 1;\n      translate: 0 0;\n    }\n  }\n  .swirl-enter-active {\n    animation: swirlAdded 1s;\n  }\n  .swirl-leave-active {\n    animation: swirlAdded 1s reverse;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 360deg;\n      scale: 1;\n    }\n  }\n  #p1, #p2 {\n    display: inline-block;\n    padding: 10px;\n    border: dashed black 1px;\n  }\n  #p2 {\n    background-color: lightcoral;\n  }\n</style> Run Example »",
          "Example 4 The after-enter event triggers a <div> element to be displayed. <template>\n  <h1>JavaScript Transition Hooks</h1>\n  <p>This code hooks into \"after-enter\" so that after the initial animation is done, a method runs that displays a red div.</p>\n  <button @click=\"pVisible=true\">Create p-tag!</button><br>\n  <Transition @after-enter=\"onAfterEnter\">\n    <p v-show=\"pVisible\" id=\"p1\">Hello World!</p>\n  </Transition>\n  <br>\n  <div v-show=\"divVisible\">This appears after the \"enter-active\" phase of the transition.</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      pVisible: false,\n      divVisible: false\n    }\n  },\n  methods: {\n    onAfterEnter() {\n      this.divVisible = true;\n    }\n  }\n}\n</script>\n\n<style>\n  .v-enter-active {\n    animation: swirlAdded 1s;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 360deg;\n      scale: 1;\n    }\n  }\n  #p1, div {\n    display: inline-block;\n    padding: 10px;\n    border: dashed black 1px;\n  }\n  #p1 {\n    background-color: lightgreen;\n  }\n  div {\n    background-color: lightcoral;\n  }\n</style> Run Example »",
          "Example 5 A toggle button triggers the enter-cancelled event. <template>\n  <h1>The 'enter-cancelled' Event</h1>\n  <p>Click the toggle button again before the enter animation is finished to trigger the 'enter-cancelled' event.</p>\n  <button @click=\"pVisible=!pVisible\">Toggle</button><br>\n  <Transition @enter-cancelled=\"onEnterCancelled\">\n    <p v-if=\"pVisible\" id=\"p1\">Hello World!</p>\n  </Transition>\n  <br>\n  <div v-if=\"divVisible\">You interrupted the \"enter-active\" transition.</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      pVisible: false,\n      divVisible: false\n    }\n  },\n  methods: {\n    onEnterCancelled() {\n      this.divVisible = true;\n    }\n  }\n}\n</script>\n\n<style>\n  .v-enter-active {\n    animation: swirlAdded 2s;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 720deg;\n      scale: 1;\n    }\n  }\n  #p1, div {\n    display: inline-block;\n    padding: 10px;\n    border: dashed black 1px;\n  }\n  #p1 {\n    background-color: lightgreen;\n  }\n  div {\n    background-color: lightcoral;\n  }\n</style> Run Example »",
          "Example 6 The appear prop starts the <p> element animation right after the page is loaded. <template>\n  <h1>The 'appear' Prop</h1>\n  <p>The 'appear' prop starts the animation when the p tag below is rendered for the first time as the page opens. Without the 'appear' prop, this example would have had no animation.</p>\n  <Transition appear>\n    <p id=\"p1\">Hello World!</p>\n  </Transition>\n</template>\n\n<style>\n  .v-enter-active {\n    animation: swirlAdded 1s;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 360deg;\n      scale: 1;\n    }\n  }\n  #p1 {\n    display: inline-block;\n    padding: 10px;\n    border: dashed black 1px;\n    background-color: lightgreen;\n  }\n</style> Run Example »",
          "Example 7 Flip through images with animation on 'enter' and 'leave'. A new image is added before the old image is removed. <template>\n  <h1>Transition Between Elements</h1>\n  <p>Click the button to get a new image.</p>\n  <p>The new image is added before the previous is removed. We will fix this in the next example with mode=\"out-in\".</p>\n  <button @click=\"newImg\">Next image</button><br>\n  <Transition>\n    <img src=\"/img_pizza.svg\" v-if=\"imgActive === 'pizza'\">\n    <img src=\"/img_apple.svg\" v-else-if=\"imgActive === 'apple'\">\n    <img src=\"/img_cake.svg\" v-else-if=\"imgActive === 'cake'\">\n    <img src=\"/img_fish.svg\" v-else-if=\"imgActive === 'fish'\">\n    <img src=\"/img_rice.svg\" v-else-if=\"imgActive === 'rice'\">\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      imgActive: 'pizza',\n      imgs: ['pizza', 'apple', 'cake', 'fish', 'rice'],\n      indexNbr: 0\n    }\n  },\n  methods: {\n    newImg() {\n      this.indexNbr++;\n      if(this.indexNbr >= this.imgs.length) {\n        this.indexNbr = 0;\n      }\n      this.imgActive = this.imgs[this.indexNbr];\n    }\n  }\n}\n</script>\n\n<style>\n  .v-enter-active {\n    animation: swirlAdded 1s;\n  }\n  .v-leave-active {\n    animation: swirlAdded 1s reverse;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 360deg;\n      scale: 1;\n    }\n  }\n  img {\n    width: 100px;\n    margin: 20px;\n  }\n  img:hover {\n    cursor: pointer;\n  }\n</style> Run Example »",
          "Example 8 Flip through images with animation on 'enter' and 'leave'. The mode=\"out-in\" prevents new images to be added until the old image is removed. <template>\n  <h1>mode=\"out-in\"</h1>\n  <p>Click the button to get a new image.</p>\n  <p>With mode=\"out-in\", the next image is not added until the current image is removed. Another difference from the previous example, is that here we use computed prop instead of a method.</p>\n  <button @click=\"indexNbr++\">Next image</button><br>\n  <Transition mode=\"out-in\">\n    <img src=\"/img_pizza.svg\" v-if=\"imgActive === 'pizza'\">\n    <img src=\"/img_apple.svg\" v-else-if=\"imgActive === 'apple'\">\n    <img src=\"/img_cake.svg\" v-else-if=\"imgActive === 'cake'\">\n    <img src=\"/img_fish.svg\" v-else-if=\"imgActive === 'fish'\">\n    <img src=\"/img_rice.svg\" v-else-if=\"imgActive === 'rice'\">\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      imgs: ['pizza', 'apple', 'cake', 'fish', 'rice'],\n      indexNbr: 0\n    }\n  },\n  computed: {\n    imgActive() {\n      if(this.indexNbr >= this.imgs.length) {\n        this.indexNbr = 0;\n      }\n      return this.imgs[this.indexNbr];\n    }\n  }\n}\n</script>\n\n<style>\n  .v-enter-active {\n    animation: swirlAdded 0.7s;\n  }\n  .v-leave-active {\n    animation: swirlAdded 0.7s reverse;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 360deg;\n      scale: 1;\n    }\n  }\n  img {\n    width: 100px;\n    margin: 20px;\n  }\n  img:hover {\n    cursor: pointer;\n  }\n</style> Run Example »",
          "Example 9 Switching between components is animated. <template>\n  <h1>Transition with Dynamic Components</h1>\n  <p>The Transition component wraps around the dynamic component so that the switching can be animated.</p>\n  <button @click=\"toggleValue = !toggleValue\">Switch component</button>\n  <Transition mode=\"out-in\">\n    <component :is=\"activeComp\"></component>\n  </Transition>\n</template>\n\n<script>\n  export default {\n    data () {\n      return {\n        toggleValue: true\n      }\n    },\n    computed: {\n      activeComp() {\n        if(this.toggleValue) {\n          return 'comp-one'\n        }\n        else {\n          return 'comp-two'\n        }\n      }\n    }\n  }\n</script>\n\n<style>\n  .v-enter-active {\n    animation: slideIn 0.5s;\n  }\n  @keyframes slideIn {\n    from {\n      translate: -200px 0;\n      opacity: 0;\n    }\n    to {\n      translate: 0 0;\n      opacity: 1;\n    }\n  }\n  .v-leave-active {\n    animation: slideOut 0.5s;\n  }\n  @keyframes slideOut {\n    from {\n      translate: 0 0;\n      opacity: 1;\n    }\n    to {\n      translate: 200px 0;\n      opacity: 0;\n    }\n  }\n  #app {\n    width: 350px;\n    margin: 10px;\n  }\n  #app > div {\n    border: solid black 2px;\n    padding: 10px;\n    margin-top: 10px;\n  }\n</style> Run Example »",
          "Example 10 Switching between components is animated. <template>\n  <h1>The :css=\"false\" Prop</h1>\n  <p>With the 'css' prop set to 'false', we tell the compiler that JavaScript hooks are used instead of CSS transition classes.</p>\n  <p>When we use :css=\"false\", we must call done() inside the 'enter' and the 'leave' hooks, to tell the browser when those transitions are finished.</p>\n  <button @click=\"pVisible=!pVisible\">Toggle</button>\n  <div>\n    <Transition\n      :css=\"false\" \n      @enter=\"onEnter\"\n      @after-enter=\"onAfterEnter\"\n      @before-leave=\"onBeforeLeave\"\n      @leave=\"onLeave\"\n    >\n      <p \n        v-if=\"pVisible\"\n        id=\"p1\">\n        Hello World!\n      </p>\n    </Transition>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      pVisible: false\n    }\n  },\n  methods: {\n    onEnter(el,done) {\n      let pos = 0;\n      window.requestAnimationFrame(frame);\n      function frame() {\n        if (pos > 150) {\n          done();\n        } else {\n          pos++; \n          el.style.left = pos + \"px\"; \n          window.requestAnimationFrame(frame);\n        }\n      }\n    },\n    onAfterEnter(el) {\n      el.style.backgroundColor = \"yellow\";\n    },\n    onBeforeLeave(el) {\n      el.style.backgroundColor = \"lightgreen\";\n    },\n    onLeave(el,done) {\n      let pos = 150;\n      window.requestAnimationFrame(frame);\n      function frame() {\n        if (pos < 0) {\n          done();\n        }\n        else {\n          pos--;\n          el.style.left = pos + \"px\"; \n          window.requestAnimationFrame(frame);\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style>\n  #p1 {\n    position: absolute;\n    padding: 10px;\n    border: dashed black 1px;\n    background-color: lightgreen;\n  }\n  #app > div {\n    position: relative;\n    background-color: coral;\n    width: 300px;\n    height: 300px;\n    border: dashed black 1px;\n    margin-top: 20px;\n  }\n</style> Run Example »",
          "Example 11 Using the enterActiveClass prop to rename the 'v-enter-active' CSS class to 'entering'. <template>\n  <h1>The 'enterActiveClass' Prop</h1>\n  <button @click=\"this.exists = !this.exists\">{{btnText}}</button><br>\n  <Transition enter-active-class=\"entering\">\n    <p v-if=\"exists\">Hello World!</p>\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      exists: false\n    }\n  },\n  computed: {\n    btnText() {\n      if(this.exists) {\n        return 'Remove';\n      }\n      else {\n        return 'Add';\n      }\n    }\n  }\n}\n</script>\n\n<style>\n  .entering {\n    background-color: lightgreen;\n    animation: added 1s;\n  }\n  .v-leave-active {\n    background-color: lightcoral;\n    animation: added 1s reverse;\n  }\n  @keyframes added {\n    from {\n      opacity: 0;\n      translate: -100px 0;\n    }\n    to {\n      opacity: 1;\n      translate: 0 0;\n    }\n  }\n  p {\n    display: inline-block;\n    padding: 10px;\n    border: dashed black 1px;\n  }\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_teleport.php"
          },
          {
            "title": "Vue Built-in Components Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-components.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition4_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition4_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition8_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition12_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition7_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_transition15_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_transition6_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition5_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition6_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition5_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition4_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition6_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition4_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_transition15_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition9_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition10_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_transition15_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_transition15_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition5_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition6_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition7_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition9_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition10_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition8_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition11_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition12_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition13_4"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_transition15_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_transition6_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_teleport.php"
          },
          {
            "title": "Vue Built-in Components Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-components.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_transition-group.php",
    "cours": {
      "titre": "Vue <TransitionGroup> Component",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_transition-group.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the built-in <TransitionGroup> component to create an <ol> tag with animated <li> tags inside. <TransitionGroup tag=\"ol\">\n  <li v-for=\"x in products\" :key=\"x\">\n    {{ x }}\n  </li>\n</TransitionGroup> Run Example »",
          "Example 1 Dice can be added or removed, added dice are animated using <TransitionGroup> . <template>\n  <h3>The <TransitionGroup> Component</h3>\n  <p>New products are given animations using the <TransitionGroup> component.</p>\n  <button @click=\"addDie\">Roll</button>\n  <button @click=\"removeDie\">Remove random</button><br>\n  <TransitionGroup>\n    <div v-for=\"x in dice\" :key=\"x\" class=\"diceDiv\" :style=\"{ backgroundColor: 'hsl('+x*40+',85%,85%)' }\">\n      {{ x }}\n    </div>\n  </TransitionGroup>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        dice: [],\n        inpName: ''\n      }\n    },\n    methods: {\n      addDie() {\n        const newDie = Math.ceil(Math.random()*6);\n        this.dice.push(newDie);\n      },\n      removeDie() {\n        if(this.dice.length>0){\n          this.dice.splice(Math.floor(Math.random()*this.dice.length), 1);\n        }\n      }\n    },\n    mounted() {\n      this.addDie();\n      this.addDie();\n      this.addDie();\n    }\n  }\n</script>\n\n<style>\n.v-enter-from {\n  opacity: 0;\n  translate: 200px 0;\n  rotate: 360deg;\n}\n.v-enter-to {\n  opacity: 1;\n  translate: 0 0;\n  rotate: 0deg;\n}\n.v-enter-active,\n.v-leave-active {\n  transition: all 0.7s;\n}\n.v-leave-from { opacity: 1; }\n.v-leave-to { opacity: 0; }\n.diceDiv {\n  margin: 10px;\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n  text-align: center;\n  border: solid black 1px;\n  border-radius: 5px;\n  display: inline-block;\n}\n</style> Run Example »",
          "Example 2 Dice can be added or removed, both added and removed dice are animated using <TransitionGroup> . <template>\n  <h3>The <TransitionGroup> Component</h3>\n  <p>When an item is removed inside the <TransitionGroup> component, other items are animated as they fall into their new positions.</p>\n  <button @click=\"addDie\">Roll</button>\n  <button @click=\"removeDie\">Remove random</button><br>\n  <TransitionGroup>\n    <div v-for=\"x in dice\" :key=\"x\" class=\"diceDiv\" :style=\"{ backgroundColor: 'hsl('+x*40+',85%,85%)' }\">\n      {{ x }}\n    </div>\n  </TransitionGroup>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        dice: [],\n        inpName: ''\n      }\n    },\n    methods: {\n      addDie() {\n        const newDie = Math.ceil(Math.random()*6);\n        this.dice.push(newDie);\n      },\n      removeDie() {\n        if(this.dice.length>0){\n          this.dice.splice(Math.floor(Math.random()*this.dice.length), 1);\n        }\n      }\n    },\n    mounted() {\n      this.addDie();\n      this.addDie();\n      this.addDie();\n    }\n  }\n</script>\n\n<style>\n.v-enter-from {\n  opacity: 0;\n  translate: 200px 0;\n  rotate: 360deg;\n}\n.v-enter-to {\n  opacity: 1;\n  translate: 0 0;\n  rotate: 0deg;\n}\n.v-enter-active,\n.v-leave-active,\n.v-move {\n  transition: all 0.7s;\n}\n.v-leave-active { position: absolute; }\n.v-leave-from { opacity: 1; }\n.v-leave-to { opacity: 0; }\n.diceDiv {\n  margin: 10px;\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n  text-align: center;\n  border: solid black 1px;\n  border-radius: 5px;\n  display: inline-block;\n}\n</style> Run Example »",
          "Example 3 Dice can be added, removed shuffled or sorted, all animated using <TransitionGroup> . <template>\n  <h3>The <TransitionGroup> Component</h3>\n  <p>Items inside the <TransitionGroup> component are animated when they are created or removed.</p>\n  <button @click=\"addDie\">Roll</button>\n  <button @click=\"addDie10\">Roll 10 dice</button>\n  <button @click=\"dice.sort(compareFunc)\">Sort</button>\n  <button @click=\"dice.sort(shuffleFunc)\">Shuffle</button><br>\n  <TransitionGroup>\n    <div \n    v-for=\"x in dice\" \n    :key=\"x.keyNmbr\" \n    class=\"diceDiv\" \n    :style=\"{ backgroundColor: 'hsl('+x.dieNmbr*60+',85%,85%)' }\"\n    @click=\"removeDie(x.keyNmbr)\">\n      {{ x.dieNmbr }}\n    </div>\n  </TransitionGroup>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        dice: [],\n        keyNumber: 0\n      }\n    },\n    methods: {\n      addDie() {\n        const newDie = {\n          dieNmbr: Math.ceil(Math.random()*6),\n          keyNmbr: this.keyNumber\n        };\n        this.dice.splice(Math.floor(Math.random()*this.dice.length),0,newDie);\n        this.keyNumber++;\n      },\n      addDie10() {\n        for(let i=0; i<10; i++) {\n          this.addDie();\n        }\n      },\n      compareFunc(a,b){\n        return a.dieNmbr - b.dieNmbr;\n      },\n      shuffleFunc(a,b){\n        return Math.random()-0.5;\n      },\n      removeDie(key) {\n        const pos = this.dice.map(e => e.keyNmbr).indexOf(key);\n        this.dice.splice(pos, 1);\n      }\n    },\n    mounted() {\n      this.addDie10();\n    }\n  }\n</script>\n\n<style>\n.v-enter-from {\n  opacity: 0;\n  scale: 0;\n  rotate: 360deg;\n}\n.v-enter-to {\n  opacity: 1;\n  scale: 1;\n  rotate: 0deg;\n}\n.v-enter-active,\n.v-leave-active,\n.v-move {\n  transition: all 0.7s;\n}\n.v-leave-active { position: absolute; }\n.v-leave-from { opacity: 1; }\n.v-leave-to { opacity: 0; }\n.diceDiv {\n  margin: 10px;\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n  text-align: center;\n  border: solid black 1px;\n  border-radius: 5px;\n  display: inline-block;\n}\n.diceDiv:hover {\n  cursor: pointer;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n#app {\n  position: relative;\n}\n</style> Run Example »",
          "Example 4 The move class is renamed using the moveClass prop. <template>\n  <h3>The <TransitionGroup> Component</h3>\n  <p>When an item is removed inside the <TransitionGroup> component, other items are animated as they fall into their new positions.</p>\n  <button @click=\"addDie\">Roll</button>\n  <button @click=\"removeDie\">Remove random</button><br>\n  <TransitionGroup moveClass=\"good-slide\">\n    <div \n    v-for=\"x in dice\" \n    :key=\"x\" \n    class=\"diceDiv\" \n    :style=\"{ backgroundColor: 'hsl('+x*40+',85%,85%)' }\"\n    >\n      {{ x }}\n    </div>\n  </TransitionGroup>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        dice: [],\n        inpName: ''\n      }\n    },\n    methods: {\n      addDie() {\n        const newDie = Math.ceil(Math.random()*6);\n        this.dice.push(newDie);\n      },\n      removeDie() {\n        if(this.dice.length>0){\n          this.dice.splice(Math.floor(Math.random()*this.dice.length), 1);\n        }\n      }\n    },\n    mounted() {\n      this.addDie();\n      this.addDie();\n      this.addDie();\n    }\n  }\n</script>\n\n<style>\n.v-enter-from {\n  opacity: 0;\n  translate: 200px 0;\n  rotate: 360deg;\n}\n.v-enter-to {\n  opacity: 1;\n  translate: 0 0;\n  rotate: 0deg;\n}\n.v-enter-active,\n.v-leave-active,\n.good-slide {\n  transition: all 0.7s;\n}\n.v-leave-active { position: absolute; }\n.v-leave-from { opacity: 1; }\n.v-leave-to { opacity: 0; }\n.diceDiv {\n  margin: 10px;\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n  text-align: center;\n  border: solid black 1px;\n  border-radius: 5px;\n  display: inline-block;\n}\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_transition.php"
          },
          {
            "title": "Vue Built-in Components Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-components.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transitionGroup_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transitionGroup2_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transitionGroup_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_transitionGroup7_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transitionGroup2_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transitionGroup3_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transitionGroup4_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_transitionGroup7_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_transition.php"
          },
          {
            "title": "Vue Built-in Components Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-components.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_ref_builtin-elements.php",
    "cours": {
      "titre": "Vue Built-in Elements",
      "description": "",
      "lien": "https://www.w3schools.com/vue/vue_ref_builtin-elements.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_transition-group.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_transition-group.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_component.php",
    "cours": {
      "titre": "Vue <component> Element",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_component.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the built-in <component> element with the is attribute to create a dynamic component. <template>\n  <h1>Dynamic Components</h1>\n  <p>App.vue switches between which component to show.</p>\n  <button @click=\"toggleValue = !toggleValue\">Switch component</button>\n  <component :is=\"activeComp\"></component>\n</template> Run Example »",
          "Example 1 Using the built-in <component> element to create a <div> element. <template>\n  <h2>Example Built-in 'component' Element</h2>\n  <p>The component element is rendered as a div element with is=\"div\":</p>\n  <component is=\"div\">This is a DIV element</component>\n</template>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  background-color: lightgreen;\n}\n</style> Run Example »",
          "Example 2 Using the built-in <component> element to toggle between an ordered list and an unordered list. <template>\n  <h2>Example Built-in 'component' Element</h2>\n  <p>Using the component element to toggle between an ordered list (ol), and an unordered list (ul):</p>\n  <button v-on:click=\"toggleValue = !toggleValue\">Toggle</button>\n  <p>Animals from around the world</p>\n  <component :is=\"tagType\">\n    <li>Kiwi</li>\n    <li>Jaguar</li>\n    <li>Bison</li>\n    <li>Snow Leopard</li>\n  </component>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      toggleValue: true\n    }\n  },\n  computed: {\n    tagType() {\n      if (this.toggleValue) {\n        return 'ol'\n      }\n      else {\n        return 'ul'\n      }\n    }\n  }\n}\n</script> Run Example »",
          "Example 3 Using the built-in <component> element to render a component by providing the name of the component to the is attribute. App.vue : <template>\n  <h2>Example Built-in 'is' Attribute</h2>\n  <p>The component element below is set to be a component by the use of 'is=\"child-comp\"'.</p>\n  <component is=\"child-comp\"></component>\n</template> ChildComp.vue : <template>\n  <div>\n    <h3>ChildComp.vue</h3>\n    <p>This is the child component</p>\n  </div>\n</template>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  background-color: lightgreen;\n  padding: 10px;\n  max-width: 250px;\n  margin-top: 20px;\n}\n</style> Run Example »",
          "Example 4 Using the built-in <component> element to create a dynamic component, where we can switch between two components. <template>\n  <h1>Dynamic Components</h1>\n  <p>App.vue switches between which component to show.</p>\n  <button @click=\"toggleValue = !toggleValue\">Switch component</button>\n  <component :is=\"activeComp\"></component>\n</template>\n\n<script>\n  export default {\n    data () {\n      return {\n        toggleValue: true\n      }\n    },\n    computed: {\n      activeComp() {\n        if(this.toggleValue) {\n          return 'comp-one'\n        }\n        else {\n          return 'comp-two'\n        }\n      }\n    }\n  }\n</script>\n\n<style>\n  #app {\n    width: 350px;\n    margin: 10px;\n  }\n  #app > div {\n    border: solid black 2px;\n    padding: 10px;\n    margin-top: 10px;\n  }\n</style> Run Example »",
          "Example 5 The built-in <KeepAlive> component is used around the <component> element to remember the inputs when the components are switched between. <template>\n  <h1>Dynamic Components</h1>\n  <p>App.vue switches between which component to show.</p>\n  <p>With the <KeepAlive> tag the components now remember the user inputs.</p>\n  <button @click=\"toggleValue = !toggleValue\">Switch component</button>\n  <KeepAlive>\n    <component :is=\"activeComp\"></component>\n  </KeepAlive>\n</template>\n\n<script>\n  export default {\n    data () {\n      return {\n        toggleValue: true\n      }\n    },\n    computed: {\n      activeComp() {\n        if(this.toggleValue) {\n          return 'comp-one'\n        }\n        else {\n          return 'comp-two'\n        }\n      }\n    }\n  }\n</script>\n\n<style>\n  #app {\n    width: 350px;\n    margin: 10px;\n  }\n  #app > div {\n    border: solid black 2px;\n    padding: 10px;\n    margin-top: 10px;\n  }\n  h2 {\n    text-decoration: underline;\n  }\n</style> Run Example »",
          "Example 6 Using the <component> element with the is attribute and a ternary expression to toggle which component should be active. <template>\n  <h1>Dynamic Components</h1>\n  <p>Refresh the page and there is a chance the dynamic component will toggle.</p>\n  <component :is=\"Math.random() > 0.5 ? 'comp-one' : 'comp-two'\"></component>\n</template>\n\n<style>\n  #app {\n    width: 350px;\n    margin: 10px;\n  }\n  #app > div {\n    border: solid black 2px;\n    padding: 10px;\n    margin-top: 10px;\n  }\n</style> Run Example »",
          "Example 7 Demonstrating that the v-model directive does not work with <input> elements created using the <component> element. <template>\n  <h1>Dynamic Components</h1>\n  <p><mark>The v-model directive does not work with input element created with the component element.</mark></p>\n  <hr>\n  <p>Does not work, not updating:</p>\n  <component is=\"input\" type=\"number\" v-model=\"inpVal1\"></component> (try to change value)\n  <p class=\"pResult1\">inpVal1: {{ inpVal1 }}</p>\n  <hr>\n  <p>How it should work, updates:</p>\n  <input type=\"number\" v-model=\"inpVal2\"> (try to change value)\n  <p class=\"pResult2\">inpVal2: {{ inpVal2 }}</p>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      inpVal1: 4,\n      inpVal2: 7,\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  width: 350px;\n  margin: 10px;\n}\n.pResult1 {\n  background-color: lightpink;\n  font-family: 'Courier New', Courier, monospace;\n  font-weight: bold;\n  padding: 5px;\n}\n.pResult2 {\n  background-color: lightgreen;\n  font-family: 'Courier New', Courier, monospace;\n  font-weight: bold;\n  padding: 5px;\n}\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-elements.php"
          },
          {
            "title": "Vue Built-in Elements Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-elements.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_dynamicComp_4"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_component_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_component2_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_component3_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_dynamicComp_4"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_dynamicComp3_4"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_component4_4"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_component5_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-elements.php"
          },
          {
            "title": "Vue Built-in Elements Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-elements.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_slot.php",
    "cours": {
      "titre": "Vue <slot> Element",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_slot.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the built-in <slot> element to place content from the parent component in the <template> of the child component. <template>\n  <div>  \n    <p>SlotComp.vue</p>\n    <slot></slot>\n  </div>\n</template> Run Example »",
          "Example 1 Using slots to wrap around larger chunks of dynamic HTML content to get a card-like appearance. App.vue : <template>\n  <h3>Slots in Vue</h3>  \n  <p>We create card-like div boxes from the foods array.</p>\n  <div id=\"wrapper\">\n    <slot-comp v-for=\"x in foods\">\n      <img v-bind:src=\"x.url\">\n      <h4>{{x.name}}</h4>\n      <p>{{x.desc}}</p>\n    </slot-comp>\n  </div>\n</template> As the content enters the component where the <slot> is, we use a div around the <slot> and style the <div> locally to create a card-like appearance around the content without affecting other divs in our application. SlotComp.vue : <template>\n  <div> <!-- This div makes the card-like appearance -->\n    <slot></slot>\n  </div>\n</template>\n\n<script></script>\n\n<style scoped>\n  div {\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\n    border-radius: 10px;\n    margin: 10px;\n  }\n</style> Run Example »",
          "Example 2 Using a slot to create a footer. App.vue : <template>\n  <h3>Reusable Slot Cards</h3>\n  <p>We create card-like div boxes from the foods array.</p>\n  <p>We also create a card-like footer by reusing the same component.</p>\n  <div id=\"wrapper\">\n    <slot-comp v-for=\"x in foods\">\n      <img v-bind:src=\"x.url\">\n      <h4>{{x.name}}</h4>\n    </slot-comp>\n  </div> <footer>\n    <slot-comp>\n      <h4>Footer</h4>\n    </slot-comp>\n  </footer> </template> Run Example »",
          "Example 3 Using slot names, content can be sent to a specific slot. SlotComp.vue : <h3>Component</h3>\n<div>\n  <slot name=\"topSlot\" ></slot>\n</div>\n<div>\n  <slot name=\"bottomSlot\" ></slot>\n</div> App.vue : <h1>App.vue</h1>\n<p>The component has two div tags with one slot in each.</p>\n<slot-comp v-slot:bottomSlot >'Hello!'</slot-comp> Run Example »",
          "Example 4 With two slots in a component, content sent to the component will end up in both slots. App.vue : <h1>App.vue</h1>\n<p>The component has two div tags with one slot in each.</p>\n<slot-comp>'Hello!'</slot-comp> SlotComp.vue : <h3>Component</h3>\n<div>\n  <slot></slot>\n</div>\n<div>\n  <slot></slot>\n</div> Run Example »",
          "Example 5 Using fallback content in a slot so that something is rendered when no content is provided from the parent. App.vue : <template>\n  <h3>Slots Fallback Content</h3>\n  <p>A component without content provided can have fallback content in the slot tag.</p>\n  <slot-comp> <!-- Empty --> </slot-comp>\n  <slot-comp>\n    <h4>This content is provided from App.vue</h4>\n  </slot-comp>\n</template> SlotComp.vue : <template>\n  <div>\n    <slot>\n      <h4>This is fallback content</h4>\n    </slot>\n  </div>\n</template> Run Example »",
          "Example 6 The slot without a name will be the default slot for content from the parent. SlotComp.vue : <h3>Component</h3>\n<div>\n  <slot></slot>\n</div>\n<div>\n  <slot name=\"bottomSlot\"></slot>\n</div> App.vue : <h1>App.vue</h1>\n<p>The component has two div tags with one slot in each.</p>\n<slot-comp>'Hello!'</slot-comp> Run Example »",
          "Example 7 Using v-slot:default to explicitly define a slot as the default slot. SlotComp.vue : <h3>Component</h3>\n<div>\n  <slot></slot>\n</div>\n<div>\n  <slot name=\"bottomSlot\"></slot>\n</div> App.vue : <h1>App.vue</h1>\n<p>The component has two div tags with one slot in each.</p>\n<slot-comp v-slot:default >'Default slot'</slot-comp> Run Example »",
          "Example 8 Scoped slot: Using the 'foodName' prop in the slot to communicate the food name to the parent. SlotComp.vue : <template>\n  <slot\n    v-for=\"x in foods\"\n    :key=\"x\" :foodName=\"x\" ></slot>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        foods: ['Apple','Pizza','Rice','Fish','Cake']\n      }\n    }\n  }\n</script> App.vue : <slot-comp v-slot=\"food\" >\n  <h2>{{ food.foodName }}</h2>\n</slot-comp> Run Example »",
          "Example 9 Scoped slot: Using props in the slot to communicate the several things to the parent, based on an array with objects. SlotComp.vue : <template>\n  <slot\n    v-for=\"x in foods\"\n    :key=\"x.name\" :foodName=\"x.name\" :foodDesc=\"x.desc\" :foodUrl=\"x.url\" ></slot>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        foods: [\n          { name: 'Apple', desc: 'Apples are a type of fruit that grow on trees.', url: 'img_apple.svg' },\n          { name: 'Pizza', desc: 'Pizza has a bread base with tomato sauce, cheese, and toppings on top.', url: 'img_pizza.svg' },\n          { name: 'Rice', desc: 'Rice is a type of grain that people like to eat.', url: 'img_rice.svg' },\n          { name: 'Fish', desc: 'Fish is an animal that lives in water.', url: 'img_fish.svg' },\n          { name: 'Cake', desc: 'Cake is something sweet that tastes good but is not considered healthy.', url: 'img_cake.svg' }\n       ]\n      }\n    }\n  }\n</script> App.vue : <slot-comp v-slot=\"food\">\n  <hr>\n  <h2>{{ food.foodName }}<img :src= food.foodUrl ></h2>\n  <p>{{ food.foodDesc }}</p>\n</slot-comp> Run Example »",
          "Example 10 Using named scoped slots to put one text into the \"leftSlot\", and another text into the \"rightSlot\". SlotComp.vue : <template>\n  <slot\n    name=\"leftSlot\"\n    :text=\"leftText\"\n  ></slot>\n  <slot\n    name=\"rightSlot\"\n    :text=\"rightText\"\n  ></slot>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        leftText: 'This text belongs to the LEFT slot.',\n        rightText: 'This text belongs to the RIGHT slot.'\n      }\n    }\n  }\n</script> App.vue : <slot-comp #leftSlot=\"leftProps\">\n  <div>{{ leftProps.text }}</div>\n</slot-comp>\n<slot-comp #rightSlot=\"rightProps\">\n  <div>{{ rightProps.text }}</div>\n</slot-comp> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_component.php"
          },
          {
            "title": "Vue Built-in Elements Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-elements.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slots_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slotsScoped2_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slots6_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slots2_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slots4_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slots6_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slots5_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slots3_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slots7_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slots9_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slotsScoped2_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slotsScoped3_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slotsScoped5_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_component.php"
          },
          {
            "title": "Vue Built-in Elements Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-elements.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_template.php",
    "cours": {
      "titre": "Vue <template> Element",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_template.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "<div id=\"app\"> <template v-if=\"text.includes('pizza')\"> <p>The text includes the word 'pizza'</p> <img src=\"img_pizza.svg\"> </template> <p v-else>The word 'pizza' is not found in the text</p> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { text: 'I like taco, pizza, Thai beef salad, pho soup and tagine.' } } }) app.mount('#app') </script>",
          "Example Using the built-in <template> element to toggle a section of HTML code with the v-if directive. <ul>\n  <li>Trolltunga</li>\n  <template v-if=\"display\">\n    <li>Potato Point</li>\n    <li>The souks of Marrakech</li>\n    <li>Dry Tortugas</li>\n    <li>Halong Bay</li>\n  </template>\n  <li>...</li>\n</ul> Run Example »",
          "Example 1 Using the built-in <template> element to encapsulate more than one element and send them to a specific named slot with the v-slot directive. <template>\n  <h1>App.vue</h1>\n  <p>The component has two div tags with one slot in each.</p>\n  <slot-comp>\n    <template v-slot:bottomSlot>\n      <h4>To the bottom slot!</h4>\n      <p>This p tag and the h4 tag above are directed to the bottom slot with the v-slot directive used on the template tag.</p>\n    </template>\n    <p>This goes into the default slot</p>\n  </slot-comp>\n</template> Run Example »",
          "Example 2 Using the <template> element, more than one element can be rendered with the v-if directive. <div id=\"app\"> <template v-if=\"text.includes('pizza')\"> <p>The text includes the word 'pizza'</p> <img src=\"img_pizza.svg\"> </template> <p v-else>The word 'pizza' is not found in the text</p> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { text: 'I like taco, pizza, Thai beef salad, pho soup and tagine.' } } }) app.mount('#app') </script> Try it Yourself »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_slot.php"
          },
          {
            "title": "Vue Built-in Elements Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-elements.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_template_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slots8_3"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_ref_v-if_template"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_slot.php"
          },
          {
            "title": "Vue Built-in Elements Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_builtin-elements.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php",
    "cours": {
      "titre": "Vue Component Instance",
      "description": "",
      "lien": "https://www.w3schools.com/vue/vue_ref_component-instance.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_template.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_template.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_objAttrs.php",
    "cours": {
      "titre": "Vue $attrs Object",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_objAttrs.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the $attrs object to direct the id fallthrough attribute to the <p> tag. <template>\n  <h3>Tigers</h3>\n  <img src=\"/img_tiger_small.jpg\" alt=\"tiger\">\n  <p v-bind=\"$attrs\">Tigers eat meat and not plants, so they are called carnivores.</p>\n</template> Run Example »",
          "Example 1 Using the the $attrs object to display the fallthrough attributes id and title , and their values. <template>\n  <h3>Tigers</h3>\n  <img src=\"/img_tiger_small.jpg\" alt=\"tiger\">\n  <p v-bind=\"$attrs\">Tigers eat meat and not plants, so they are called carnivores.</p>\n  <hr>\n  <p><strong>Below is the content of the $attrs object:</strong></p>\n  <pre>{{ attrsObject }}</pre>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      attrsObject: null\n    }\n  },\n  mounted() {\n    console.log(this.$attrs);\n    this.attrsObject = this.$attrs;\n  }\n}\n</script>\n\n<style>\n#pink {\n  background-color: pink;\n  border-radius: 15px;\n  padding: 10px;\n}\nimg {\n  width: 100%;\n  border-radius: 15px;\n}\n</style> Run Example »",
          "Example 2 Using the $attrs object on the <img> tag to receive an event listener from the parent component. <template>\n  <h3>Toggle Image Size</h3>\n  <p>Click the image to toggle the image size.</p>\n  <img v-bind=\"$attrs\" src=\"/img_tiger_small.jpg\" class=\"imgSmall\">\n</template>\n\n<style>\n.imgSmall {\n  width: 60%;\n}\n.imgLarge {\n  width: 100%;\n}\nimg {\n  border-radius: 15px;\n  cursor: pointer;\n}\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "Vue Component Instance Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_attrs_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_attrs2_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_attrs3_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "Vue Component Instance Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_objData.php",
    "cours": {
      "titre": "Vue $data Object",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_objData.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the $data object to change the color of a <div> element when it is clicked. export default {\n  data() {\n    return {\n      color: 'lightgreen'\n    }\n  },\n  methods: {\n    changeColor() {\n      this.$data.color = 'pink';\n    }\n  }\n} Run Example »",
          "Example Using the $data object to change the color of a <div> element every time it is clicked. <div \n  v-on:click=\"$data.color+=100\"\n  v-bind:style=\"{backgroundColor:'hsl('+$data.color+',80%,80%)'}\"\n>\n  <p>Click here</p>\n</div> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_objAttrs.php"
          },
          {
            "title": "Vue Component Instance Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_objData2_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_objData_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_objAttrs.php"
          },
          {
            "title": "Vue Component Instance Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_objEl.php",
    "cours": {
      "titre": "Vue $el Object",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_objEl.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "the $el object will be that root element.",
            "the DOM can be manipulated directly using the $el object (see the example above), but it is not recommended.",
            "it is better to use the Vue ref attribute and other Vue functionality to change the DOM declaratively, because it leads to code that is more consistent and easier to maintain (see Example 1 below)."
          ],
          [
            "the $el object will just be a placeholder DOM text node that Vue uses internally (not the actual DOM element).",
            "the DOM cannot be manipulated using the $el object when there are multiple root elements (see Example 2 below)."
          ]
        ],
        "examples": [
          "Example Using the $el object to change the background color of a <div> tag on root level. methods: {\n  changeColor() {\n    this.$el.style.backgroundColor = 'lightgreen';\n  }\n} Run Example »",
          "Example 1 Using the ref attribute to change the background color of a <div> tag declaratively as recommended, instead of using the $el object. <template>\n  <div ref=\"rootDiv\">\n    <h2>Example $el Object</h2>\n    <p>It is recommended, and more consistent, to use the ref attribute instead of the $el object to change the background color root DIV tag.</p>\n    <button v-on:click=\"changeColor\">Click here</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  methods: {\n    changeColor() {\n      this.$refs.rootDiv.style.backgroundColor = 'lightgreen';\n    }\n  }\n}\n</script> Run Example »",
          "Example 2 With more than one element in the root of the <template> , the $el object will just be a text node representation (not the actual DOM element) of the first element of the root elements, used internally by Vue. We cannot manipulate the DOM with the $el object is such cases. <template>\n  <div>\n    <h2>Example $el Object</h2>\n    <p>We are not able to use the $el object to change the background color of the root DIV tag when there are other tags on the root level. Open browser console to see the error generated.</p>\n    <button v-on:click=\"changeColor\">Click here</button>\n  </div>\n  <p>With this extra p-tag there are two tags on the root level.</p>\n</template>\n\n<script>\nexport default {\n  methods: {\n    changeColor() {\n      this.$el.style.backgroundColor = 'lightgreen';\n    }\n  }\n}\n</script>\n\n<style>\n#app > div, #app > p {\n  border: solid black 1px;\n  padding: 10px;\n}\n</style> Run Example »",
          "Example 3 Using the $el object to change the background color of a <h2> child element. <template>\n  <div>\n    <h2>Example $el Object</h2>\n    <p>Using the $el object to change the background color of the H2 child element.</p>\n    <button v-on:click=\"changeColor\">Click here</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  methods: {\n    changeColor() {\n      this.$el.children[0].style.backgroundColor = 'lightblue';\n    }\n  }\n}\n</script> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_objData.php"
          },
          {
            "title": "Vue Component Instance Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_objEl_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_objEl2_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_objEl3_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_objEl4_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_objData.php"
          },
          {
            "title": "Vue Component Instance Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_objParent.php",
    "cours": {
      "titre": "Vue $parent Object",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_objParent.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the $parent object in the child component, to change the 'text' data property in the parent component. <template>\n  <div>\n    <h3>Change Text</h3>\n    <p>Click the button to toggle the text in the PRE tag of the parent component.</p>\n    <button v-on:click=\"this.$parent.text='Hello!'\">Change text in parent</button>\n  </div>\n</template> Run Example »",
          "Example Using the $parent object in the child component, to refer to a method in the parent component. <template>\n  <div>\n    <h3>Toggle Color</h3>\n    <p>Click the button to toggle the color in the P tag of the parent component.</p>\n    <button v-on:click=\"this.$parent.toggleColor\">Toggle</button>\n    <p>The 'toggleColor' method is also in the parent component.</p>\n  </div>\n</template> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_objEl.php"
          },
          {
            "title": "Vue Component Instance Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_objParent2_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_objParent_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_objEl.php"
          },
          {
            "title": "Vue Component Instance Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_objProps.php",
    "cours": {
      "titre": "Vue $props Object",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_objProps.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the $props object to display the received props. <template>\n  <div>\n    <h3>Received Props</h3>\n    <p>This is the $props object:</p>\n    <pre>{{ this.$props }}</pre>\n  </div>\n</template> Run Example »",
          "Example 1 Using the $props object to pass the props on to the next child component. <template>\n  <div>\n    <h3>InfoBox.vue</h3>\n    <p>This is the $props object that is received from App.vue and passed down to the next child component:</p>\n    <pre>{{ this.$props }}</pre>\n    <grand-child v-bind=\"$props\" />\n  </div>\n</template>\n\n<script>\nexport default {\n  props: [\n    'bagOwner',\n    'bagWeight'\n  ]\n}\n</script>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  padding: 10px;\n  margin-top: 20px;\n  max-width: 370px;\n}\n</style> Run Example »",
          "Example 2 Using the $props object in a computed property to create a feedback message based on the weight of the bag. <template>\n  <div>\n    <h3>InfoBox.vue</h3>\n    <p>The $props object is used in a computed value to create a message based on the weight of the bag:</p>\n    <span>{{ this.bagWeightStatus }}</span>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: [\n    'bagWeight'\n  ],\n  computed: {\n    bagWeightStatus() {\n      if(this.$props.bagWeight>10) {\n        return 'Puh, this bag is heavy!'\n      }\n      else {\n        return 'This bag is not so heavy.'\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  padding: 10px;\n  max-width: 350px;\n  margin-top: 20px;\n}\nspan {\n  background-color: lightgreen;\n  padding: 5px 10px;\n  font-weight: bold;\n}\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_objParent.php"
          },
          {
            "title": "Vue Component Instance Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_objProps_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_objProps_4"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_objProps2_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_objParent.php"
          },
          {
            "title": "Vue Component Instance Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_objRefs.php",
    "cours": {
      "titre": "Vue $refs Object",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_objRefs.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the $refs object inside a method to change the text inside a <p> tag. methods: {\n  changeVal() {\n    this.$refs.pEl.innerHTML = \"Hello!\";\n  }\n} Run Example »",
          "Example 1 The text from the first <p> tag is copied into the second <p> tag. <template>\n  <h1>Example</h1>\n  <p ref=\"p1\">Click the button to copy this text into the paragraph below.</p>\n  <button @click=\"transferText\">Transfer text</button>\n  <p ref=\"p2\">...</p>\n</template>\n\n<script>\n  export default {\n    methods: {\n      transferText() { \n        this.$refs.p2.innerHTML = this.$refs.p1.innerHTML;\n      }\n    }\n  };\n</script> Run Example »",
          "Example 2 A <p> element gets the same content as what's being written in the input field. <template>\n  <h1>Example</h1>\n  <p>Start writing inside the input element, and the text will be copied into the last paragraph by the use of the '$refs' object.</p>\n  <input ref=\"inputEl\" @input=\"getRefs\" placeholder=\"Write something..\">\n  <p ref=\"pEl\"></p>\n</template>\n\n<script>\n  export default {\n    methods: {\n      getRefs() { \n        this.$refs.pEl.innerHTML = this.$refs.inputEl.value;\n      }\n    }\n  };\n</script> Run Example »",
          "Example 3 The button reveals the the third list element stored as an array element inside the $refs object. <template>\n  <h1>Example</h1>\n  <p>Click the button to reveal the 3rd list element stored as an array element in the $refs object.</p>\n  <button @click=\"getValue\">Get the 3rd list element</button><br>\n  <ul>\n    <li v-for=\"x in liTexts\" ref=\"liEl\">{{ x }}</li>\n  </ul>\n  <pre>{{ thirdEl }}</pre>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        thirdEl: ' ',\n        liTexts: ['Apple','Banana','Kiwi','Tomato','Lichi']\n      }\n    },\n    methods: {\n      getValue() { \n        this.thirdEl = this.$refs.liEl[2].innerHTML;\n        console.log(\"this.$refs.liEl = \",this.$refs.liEl);\n      }\n    }\n  };\n</script>\n\n<style>\npre {\n  background-color: lightgreen;\n  display: inline-block;\n}\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_objProps.php"
          },
          {
            "title": "Vue Component Instance Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_refs3_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_refs0_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_refs2_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_refs4_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_objProps.php"
          },
          {
            "title": "Vue Component Instance Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_objRoot.php",
    "cours": {
      "titre": "Vue $root Object",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_objRoot.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the $root object in a child component, to change the 'text' data property in the root component of the Vue application. <template>\n  <div>\n    <h3>Change Text</h3>\n    <p>Click the button to toggle the text in the PRE tag of the root component.</p>\n    <button v-on:click=\"this.$root.text='Hello!'\">Change text in root</button>\n  </div>\n</template> Run Example »",
          "Example Using the $root object in a child component, to change the color of a <p> tag in the root component, more than one level up in the component tree structure. <template>\n  <div>\n    <h4>Grand Child Component</h4>\n    <p>Click the button to toggle the color of the P tag in the root component.</p>\n    <button v-on:click=\"this.$root.color='lightgreen'\">Change color in root</button>\n  </div>\n</template> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_objRefs.php"
          },
          {
            "title": "Vue Component Instance Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_objRoot_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_objRoot_4"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_objRefs.php"
          },
          {
            "title": "Vue Component Instance Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_objSlots.php",
    "cours": {
      "titre": "Vue $slots Object",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_objSlots.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the $slots object to check if the parent has provided content for the 'topSlot'. mounted(){\n  if(this.$slots.topSlot){\n    this.slotsText = \"Content for the 'topSlot' slot is provided by the parent.\"\n  }\n  else {\n    this.slotsText = \"Content for the 'topSlot' slot is NOT provided by the parent.\"\n  }\n} Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_objRoot.php"
          },
          {
            "title": "Vue Component Instance Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_slots9_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_objRoot.php"
          },
          {
            "title": "Vue Component Instance Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_metEmit.php",
    "cours": {
      "titre": "Vue $emit() Method",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_metEmit.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the $emit() method to trigger a custom event to the parent component when the button is clicked. <template>\n  <div>\n    <h3>ChildComp.vue</h3>\n    <p>Click the button to trigger the custom event up to the parent component using the $emit() method.</p>\n    <button v-on:click=\"this.$emit('custom-event')\">Trigger</button>\n  </div>\n</template> Run Example »",
          "Example 1 Using the $emit() method to send a message to the parent component, with the 'message-sent' custom event. <template>\n  <div>\n    <h3>ChildComp.vue</h3>\n    <p>Write something, and send the message up to the parent component using the $emit() method.</p>\n    <input type=\"text\" v-model=\"message\" placeholder=\"write something..\">\n    <button v-on:click=\"send\">Send</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: null\n    }\n  },\n  methods: {\n    send() {\n      this.$emit('message-sent',this.message);\n    }\n  }\n}\n</script>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  padding: 10px;\n  max-width: 350px;\n  margin-top: 20px;\n}\ninput {\n  display: block;\n  margin-bottom: 15px;\n}\n</style> Run Example »",
          "Example 2 Using the $emit() method to send a product name and rating to the parent component. <template>\n  <div>\n    <h3>ChildComp.vue</h3>\n    <p>Rate a product:</p>\n    <input type=\"text\" v-model=\"productName\" placeholder=\"Product name..\" ref=\"inpName\">\n    <input type=\"number\" v-model=\"productRating\" placeholder=\"Rating 1 to 10..\">\n    <button v-on:click=\"send\">Register</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      productName: null,\n      productRating: null\n    }\n  },\n  methods: {\n    send() {\n      this.$emit('message-sent',this.productName,this.productRating);\n      this.productName = null;\n      this.productRating = null;\n      this.$refs.inpName.focus();\n    }\n  },\n  mounted() {\n    this.$refs.inpName.focus();\n  }\n}\n</script>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  padding: 10px;\n  max-width: 350px;\n  margin-top: 20px;\n}\ninput {\n  display: block;\n  margin-bottom: 15px;\n}\n</style> Run Example »",
          "Example 3 Using the emits option to document what the component emits with the $emit() method. This not required, but it improves readability. <template>\n  <div>\n    <h3>ChildComp.vue</h3>\n    <p>Click the button to trigger the custom event up to the parent component using the $emit() method.</p>\n    <button v-on:click=\"this.$emit('custom-event')\">Trigger</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  emits: ['custom-event']\n}\n</script>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  padding: 10px;\n  max-width: 350px;\n  margin-top: 20px;\n}\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_objSlots.php"
          },
          {
            "title": "Vue Component Instance Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_metEmit2_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_metEmit_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_metEmit3_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_metEmit4_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_objSlots.php"
          },
          {
            "title": "Vue Component Instance Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_metForceUpdate.php",
    "cours": {
      "titre": "Vue $forceUpdate() Method",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_metForceUpdate.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_metEmit.php"
          },
          {
            "title": "Vue Component Instance Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_metEmit.php"
          },
          {
            "title": "Vue Component Instance Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_metNextTick.php",
    "cours": {
      "titre": "Vue $nextTick() Method",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_metNextTick.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the $nextTick() method to wait for the DOM to update before we get the message inside the <p> tag. methods: {\n  updateMsg() {\n    this.message = '\"Hello! This is a new message.\"';\n    this.results.push(this.$refs.pEl.textContent);\n    this.$nextTick(() => {\n      this.results.push(this.$refs.pEl.textContent + ' (using $nextTick())');\n    });\n  }\n} Run Example »",
          "Example The same result as in the first example can be achieved by calling the $nextTick() method with the await prefix in an asynchronous method. This causes the next lines of code to be put on hold until the 'next tick' happens. <template>\n  <h2>Example $nextTick() Method</h2>\n  <p>Using \"await $nextTick()\", the next lines of code will also wait until the 'next tick' happens.\n  </p>\n  <div>\n    <p ref=\"messageEl\">{{ message }}</p>\n    <button v-on:click.once=\"updateMsg\">Update Message</button>\n    <ol>\n      <li v-for=\"x in results\">{{ x }}</li>\n    </ol>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: \"Initial Message\",\n      results: []\n    };\n  },\n  methods: {\n    async updateMsg() {\n      this.message = \"Hello! This message is now updated.\";\n      this.results.push(this.$refs.messageEl.textContent);\n      await this.$nextTick();\n      this.results.push(this.$refs.messageEl.textContent + ' (after await $nextTick())');\n    }\n  }\n};\n</script>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  padding: 10px;\n}\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_metForceUpdate.php"
          },
          {
            "title": "Vue Component Instance Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_metNextTick_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_metNextTick2_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_metForceUpdate.php"
          },
          {
            "title": "Vue Component Instance Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_metWatch.php",
    "cours": {
      "titre": "Vue $watch() Method",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_metWatch.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the $watch() method to create a watcher that writes a new message every time the 'value' data property changes. mounted() {\n  this.$watch('value', function() {\n    this.results.push('$watch() method')\n  })\n} Run Example »",
          "Example 1 Using the $watch() method to write a new message with the old and new values every time the 'value' data property changes. <template>\n  <h2>Example $watch() Method</h2>\n  <p>Drag the slider to change the value so that the $watch() method is triggered. The callback function writes a message with the new and old values.</p>\n  <div>\n    <p><input type=\"range\" min=\"0\" max=\"10\" v-model=\"value\"> Current value: {{ value }}</p>\n    <ol>\n      <li v-for=\"x in results\">{{ x }}</li>\n    </ol>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      value: 4,\n      results: []\n    };\n  },\n  mounted() {\n    this.$watch('value', function(newVal, oldVal) {\n      this.results.push('Old value:'+oldVal+', new value: '+newVal)\n    })\n  }\n};\n</script>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  padding: 10px;\n}\n</style> Run Example »",
          "Example 2 Using the $watch() method with the deep watch option set to 'true'. The watcher can now detect changes further inside the 'value' object. <template>\n  <h2>Example $watch() Method</h2>\n  <p>Register an extra hobby for Stuart. The hobbies are stored in an array inside the 'value' object. The $watch() method\n    is triggered because the 'deep' option is set to 'true' so that the watcher also detects changes further inside the\n    object.</p>\n  <div>\n    <p>Register an extra hobby for Stuart:</p>\n    <p><input type=\"text\" ref=\"inpText\"></p>\n    <button v-on:click=\"regHobby\">Register</button>\n    <ol>\n      <li v-for=\"x in watchMessages\">{{ x }}</li>\n    </ol>\n  </div>\n  <p>Current 'value' object:</p>\n  <pre>{{ this.value }}</pre>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      value: {\n        owner: 'Stuart',\n        address: 'Faraway Lane',\n        hobbies: ['Bird watching', 'Trail running']\n      },\n      watchMessages: []\n    };\n  },\n  methods: {\n    regHobby() {\n      this.value.hobbies.push(this.$refs.inpText.value);\n      this.$refs.inpText.value = null;\n      this.$refs.inpText.focus();\n    }\n  },\n  mounted() {\n    this.$watch('value', function () {\n      this.watchMessages.push('watcher triggered')\n    }, {\n      deep: true\n    });\n  }\n};\n</script>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  padding: 10px;\n}\n\nli {\n  background-color: lightgreen;\n}</style> Run Example »",
          "Example 3 Using the $watch() method with the immediate watch option set to 'true'. The watcher is now also triggered right after it is created. <template>\n  <h2>Example $watch() Method</h2>\n  <p>With the 'immediate' option set to 'true' the watcher is also triggered right after it is created.</p>\n  <div>\n    <input type=\"range\" min=\"0\" max=\"10\" v-model=\"value\"> Current value: {{ value }}\n    <p>Messages from the watcher:</p>\n    <ol>\n      <li v-for=\"x in watchMessages\">{{ x }}</li>\n    </ol>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      value: 4,\n      watchMessages: []\n    };\n  },\n  mounted() {\n    this.$watch('value', (newVal, oldVal) => {\n      this.watchMessages.push('Old value: '+oldVal+' New value: '+newVal)\n    }, {\n      immediate: true\n    });\n  }\n};\n</script>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  padding: 10px;\n}\n\nli:first-child {\n  background-color: lightgreen;\n}</style> Run Example »",
          "Example 4 Using the stop function returned by the $watch() method to stop the watcher. <template>\n  <h2>Example $watch() Method</h2>\n  <p>Drag the slider to see the watcher work, click the stop button, and drag the slider again to confirm that the watcher has now stopped.</p>\n  <div>\n    <p><input type=\"range\" min=\"0\" max=\"10\" v-model=\"value\"> Current value: {{ value }}</p>\n    <button v-on:click=\"stopFunc\">Stop Watcher</button>\n    <ol>\n      <li v-for=\"x in results\">{{ x }}</li>\n    </ol>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      value: 4,\n      results: [],\n      stopFunc: null\n    };\n  },\n  mounted() {\n    this.stopFunc = this.$watch('value', function() {\n      this.results.push('$watch() method')\n    })\n  }\n};\n</script>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  padding: 10px;\n}\n</style> Run Example »",
          "Example 5 Using a dot-delimited path string so that the $watch() method can listen to the 'country' property inside the 'value' object. <template>\n  <h2>Example $watch() Method</h2>\n  <p>The watcher is set up to watch 'value.country' and will therefore detect when the country is changed inside the 'value' object.</p>\n  <div>\n    <p>Register a new country for Stuart to live in:</p>\n    <p><input type=\"text\" v-model=\"inpVal\"></p>\n    <button v-on:click=\"regHobby\">Register</button>\n    <ol>\n      <li v-for=\"x in watchMessages\">{{ x }}</li>\n    </ol>\n  </div>\n  <p>Current 'value' object:</p>\n  <pre>{{ this.value }}</pre>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      inpVal: null,\n      value: {\n        owner: 'Stuart',\n        address: 'Faraway Lane',\n        country: 'Mexico'\n      },\n      watchMessages: []\n    };\n  },\n  methods: {\n    regHobby() {\n      this.value.country = this.inpVal;\n      this.inpVal = null;\n    }\n  },\n  mounted() {\n    this.$watch('value.country', function () {\n      this.watchMessages.push('watcher triggered')\n    });\n  }\n};\n</script>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  padding: 10px;\n}\n</style> Run Example »",
          "Example 6 Using a function in the $watch() method to listen to changes in more than one value. <template>\n  <h2>Example $watch() Method</h2>\n  <p>Using a function as the first argument in the watcher to watch for changes in the sum of value A and value B.</p>\n  <div>\n    <p>Register a new country for Stuart to live in:</p>\n    <p>Value A: <input type=\"range\" min=\"-10\" max=\"20\" v-model=\"inpValA\"> {{ inpValA }}</p>\n    <p>Value B: <input type=\"range\" min=\"-10\" max=\"20\" v-model=\"inpValB\"> {{ inpValB }}</p>\n    <ol>\n      <li v-for=\"x in watchMessages\">{{ x }}</li>\n    </ol>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      inpValA: 2,\n      inpValB: 4,\n      watchMessages: []\n    };\n  },\n  mounted() {\n    this.$watch( \n      ()=> Number(this.inpValA) + Number(this.inpValB), \n      function (newVal,oldVal) {\n        this.watchMessages.push('watcher triggered. A + B = ' + newVal)\n      }\n    );\n  }\n};\n</script>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  padding: 10px;\n}\nli {\n  background-color: lightgreen;\n}\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_metNextTick.php"
          },
          {
            "title": "Vue Component Instance Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_metWatcher2_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_metWatcher3_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_metWatcher4_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_metWatcher5_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_metWatcher6_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_metWatcher7_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_metWatcher8_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_metNextTick.php"
          },
          {
            "title": "Vue Component Instance Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_component-instance.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_ref_directives.php",
    "cours": {
      "titre": "Vue Directives",
      "description": "",
      "lien": "https://www.w3schools.com/vue/vue_ref_directives.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_metWatch.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_metWatch.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_v-bind.php",
    "cours": {
      "titre": "Vue v-bind Directive",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_v-bind.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the v-bind directive to change the background color of a <div> element. <template>\n  <h2>Example v-bind Directive</h2>\n  <p>The v-bind directive connects the style attribute of the DIV element to the 'colorVal' data property.</p>\n  <div v-bind:style=\"{ backgroundColor: colorVal }\">DIV element</div>\n  <p>Use the input type=\"color\" box below to change the color.</p>\n  <p><input type=\"color\" v-model=\"colorVal\"> <pre>colorVal: '{{ colorVal }}'</pre></p>\n</template> Run Example »",
          "Example 1 Using v-bind to send the 'img' prop, with data type boolean (true/false). <template>\n  <h2>Example v-bind Directive</h2>\n  <p>Two props are sent to the component. We must use v-bind for the prop with 'boolean' data type.</p>\n  <button v-on:click=\"this.img = !this.img\">Toggle 'img' prop value</button> {{ img }}\n  <info-box \n    turtle-text=\"Turtles can hold their breath for a long time.\"\n    v-bind:turtle-img=\"img\"\n  />\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      img: true\n    }\n  }\n}\n</script> Run Example »",
          "Example 2 Using the ' v-bind: ' shorthand ' : '. <template>\n  <h2>Example v-bind Directive</h2>\n  <p>Two props are sent to the component. We must use v-bind for the prop with 'boolean' data type.</p>\n  <button v-on:click=\"this.img = !this.img\">Toggle 'img' prop value</button> {{ img }}\n  <info-box \n    turtle-text=\"Turtles can hold their breath for a long time.\"\n    :turtle-img=\"img\"\n  />\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      img: true\n    }\n  }\n}\n</script> Run Example »",
          "Example 3 Using the .prop modifier to change the indeterminate DOM property of the checkbox. <template>\n  <p>Using the '.prop' modifier to toggle the 'indeterminate' appearance of the checkbox:</p>\n  <button v-on:click=\"indetVal = !indetVal\">Toggle</button>\n  <p>\n    <input type=\"checkbox\" v-bind:indeterminate.prop=\"indetVal\"> Checkbox\n  </p>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      indetVal: false\n    };\n  }\n};\n</script>\n\n<style>\ninput {\n  margin: 20px;\n  scale: 2;\n}\n</style> Run Example »",
          "Example 4 Using the .prop modifier shorthand, and the v-bind shorthand, so that ' v-bind:indeterminate.prop ' becomes ' .indeterminate '. <template>\n  <p>Using the '.prop' shorthand so that 'v-bind:indeterminate.prop' becomes '.indeterminate':</p>\n  <button v-on:click=\"indetVal = !indetVal\">Toggle</button>\n  <p>\n    <input type=\"checkbox\" .indeterminate=\"indetVal\"> Checkbox\n  </p>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      indetVal: false\n    };\n  }\n};\n</script>\n\n<style scoped>\ninput {\n  margin: 10px;\n  scale: 2;\n}\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-bind_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-bind2_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-bind3_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-bind4_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-bind6_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_v-cloak.php",
    "cours": {
      "titre": "Vue v-cloak Directive",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_v-cloak.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "<div id=\"app\"  v-cloak> {{ message }} </div>",
          "<!DOCTYPE html> <html> <head> <title>Vue v-cloak Directive</title> <style> [v-cloak] { color: red; } #app { padding: 10px; font-size: x-large; background-color: lightgreen; } </style> </head> <body> <h1>Vue v-cloak Example</h1> <p>The v-cloak directive is used to make the text red until the compilation is complete. Refresh the page, or click the \"Run\" button, to see the pre-compilation phase better.</p> <div id=\"app\" v-cloak> {{ message }} </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { message: \"Hello World!\" } } }) app.mount('#app') </script> </body> </html>",
          "<!DOCTYPE html> <html> <head> <title>Vue v-cloak Directive</title> <style> [v-cloak] { opacity: 0.5; } #app { padding: 10px; font-size: x-large; background-color: lightgreen; } </style> </head> <body> <h1>Vue v-cloak Example</h1> <p>Using the JavaScript setTimeout function to delay the Vue compilation to make the pre-compilation phase even more clear.</p> <div id=\"app\" v-cloak> {{ message }} </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> setTimeout(() => { const app = Vue.createApp({ data() { return { message: \"Hello World!\" } } }) app.mount('#app') }, 1000); </script> </body> </html>",
          "Example Using v-cloak to hide precompiled content. <div id=\"app\"  v-cloak> {{ message }} </div> Try it Yourself »",
          "Example 1 Using v-cloak to display red text before the compilation is finished, so that we can see the pre-compilation phase more clearly. <!DOCTYPE html> <html> <head> <title>Vue v-cloak Directive</title> <style> [v-cloak] { color: red; } #app { padding: 10px; font-size: x-large; background-color: lightgreen; } </style> </head> <body> <h1>Vue v-cloak Example</h1> <p>The v-cloak directive is used to make the text red until the compilation is complete. Refresh the page, or click the \"Run\" button, to see the pre-compilation phase better.</p> <div id=\"app\" v-cloak> {{ message }} </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { message: \"Hello World!\" } } }) app.mount('#app') </script> </body> </html> Try it Yourself »",
          "Example 2 Using the JavaScript setTimeout() function to delay the compilation by one second so that the effect from v-cloak becomes more clear. <!DOCTYPE html> <html> <head> <title>Vue v-cloak Directive</title> <style> [v-cloak] { opacity: 0.5; } #app { padding: 10px; font-size: x-large; background-color: lightgreen; } </style> </head> <body> <h1>Vue v-cloak Example</h1> <p>Using the JavaScript setTimeout function to delay the Vue compilation to make the pre-compilation phase even more clear.</p> <div id=\"app\" v-cloak> {{ message }} </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> setTimeout(() => { const app = Vue.createApp({ data() { return { message: \"Hello World!\" } } }) app.mount('#app') }, 1000); </script> </body> </html> Try it Yourself »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-bind.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_ref_v-cloak"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_ref_v-cloak2"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_ref_v-cloak3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-bind.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_v-for.php",
    "cours": {
      "titre": "Vue v-for Directive",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_v-for.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "The \"item\" alias represents an element inside the \"dataSource\" .",
            "The \"key\" alias can be used to get the property names if the data source is an object.",
            "The \"index\" alias can be used if the data source is an array or an object.",
            "The \"dataSource\" must be the name of the actual data source you are looping through."
          ]
        ],
        "examples": [
          "Example Using the v-for directive to create a list of mammals, based on an array: <template>\n  <h2>Example v-for Directive</h2>\n  <p>Using the v-for directive to create a list of mammals based on an array.</p>\n  <ul>\n    <li v-for=\"x in animals\">{{ x }}</li>\n  </ul>\n</template> Run Example »",
          "Example 1 Using the v-for directive to render a list of mammals, based on an array, and also picking the index of each element in the array: <template>\n  <h2>Example v-for Directive</h2>\n  <p>Using the v-for directive to create a list of mammals, and the index of each mammal, based on an array.</p>\n  <ul>\n    <li v-for=\"(x, index) in animals\">On index {{ index }}: \"{{ x }}\"</li>\n  </ul>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      animals: ['Tiger','Zebra','Wolf','Crocodile','Seal']\n    };\n  }\n};\n</script> Run Example »",
          "Example 2 Using the v-for directive to render a list of properties, picking out the property name and value for every property in an object: <template>\n  <h2>Example v-for Directive</h2>\n  <p>Using the v-for directive on an Object to create a list of the object properties and the respective property values.</p>\n  <ul>\n    <li v-for=\"(x, key) in animal\">(Property name: value) = ({{ key }}: {{ x }})</li>\n  </ul>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      animal: {\n        name: 'Lion',\n        heightCM: 110,\n        weightKG: 150\n      }\n    };\n  }\n};\n</script> Run Example »",
          "Example 3 Using the v-for directive to render a list based on a number: <template>\n  <h2>Example v-for Directive</h2>\n  <p>Using the v-for directive with number to render a list with that number of elements.</p>\n  <ul>\n    <li v-for=\"(x, index) in 10\">Item: {{ x }}, index: {{ index }}</li>\n  </ul>\n</template> Run Example »",
          "Example 4 Using the v-for directive to loop through a string of characters: <template>\n  <h2>Example v-for Directive</h2>\n  <p>Using the v-for directive to loop through the characters in a string.</p>\n  <ul>\n    <li v-for=\"(x, index) in 'Ice cream'\">Item: \"{{ x }}\", index: {{ index }}</li>\n  </ul>\n</template> Run Example »",
          "Example 5 Using the v-for directive to loop through an object created with the Iterable Protocol: <template>\n  <h2>Example v-for Directive</h2>\n  <p>Using the v-for directive  to render a list, based on an object created with the Iterable Protocol.</p>\n  <ul>\n    <li v-for=\"value in iterableObject\">{{ value }}</li>\n  </ul>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      iterableObject: this.createIterable(['City', 'Park', 'River'])\n    };\n  },\n  methods: {\n    createIterable(array) {\n      let currentIndex = -1;\n      return {\n        [Symbol.iterator]: function () {\n          return {\n            next: () => {\n              if (currentIndex < array.length - 1) {\n                currentIndex++;\n                return { value: array[currentIndex], done: false };\n              } else {\n                return { done: true };\n              }\n            }\n          };\n        }\n      };\n    }\n  }\n};\n</script> Run Example »",
          "Example 6 Using the v-for directive to render one div element for every character in a string. It is always recommended tu use v-bind:key with the v-for directive: <template>\n  <h2>Example v-for Directive</h2>\n  <p>Using the v-for directive with 'v-bind:key' to render DIV elements, based on a string of characters.</p>\n  <div id=\"wrapper\">\n    <div v-for=\"x in text\" v-bind:key=\"x\">{{ x }}</div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      text: 'I love ice cream.'\n    };\n  }\n};\n</script>\n\n<style>\n#wrapper {\n  display: flex;\n  flex-wrap: wrap;\n  width: 280px;\n}\n#wrapper > div {\n  margin: 5px;\n  padding: 5px 10px;\n  border: solid black 1px;\n  background-color: lightgreen;\n}\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-cloak.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-for_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-for2_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-for3_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-for4_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-for5_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-for6_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-for2_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-for3_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-for4_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-for5_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-for6_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-for7_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-cloak.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_v-html.php",
    "cours": {
      "titre": "Vue v-html Directive",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_v-html.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "<div id=\"app\"> <div>{{ htmlContent }}</div> <div v-html=\"htmlContent\"></div> </div>",
          "Example Using the v-html directive to output a list containing <ol> and <li> tags. <div id=\"app\"> <div>{{ htmlContent }}</div> <div v-html=\"htmlContent\"></div> </div> Try it Yourself »",
          "Example 1 Using scoped styling, the styling does not work for HTML included with v-html . This problem is fixed in the next example. <template>\n  <h1>Example</h1>\n  <p>When using scoped styling, styling for HTML included with the 'v-html' directive does not work.</p>\n  <p><a href=\"showvue.php?filename=demo_ref_v-html2_2\">See the next example</a> for how we can fix this by using CSS Modules.</p>\n  <div v-html=\"htmlContent\" id=\"htmlContainer\"></div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      htmlContent: \"<p>Hello from v-html</p>\"\n    }\n  }\n};\n</script>\n\n<style scoped>\n  #htmlContainer {\n    border: dotted black 1px;\n    width: 200px;\n    padding: 10px;\n  }\n  #htmlContainer > p {\n    background-color: coral;\n    padding: 5px;\n    font-weight: bolder;\n    width: 150px;\n  }\n</style> Run Example »",
          "Example 2 Using CSS Modules with <style module> , instead of <style scoped> , the styling is scoped and the styling works for HTML included with v-html . This problem in the previous example is now fixed. <template>\n  <h1>Example</h1>\n  <p>Scoped styling for HTML included with the 'v-html' directive now works by using CSS Modules with 'style module', instead of 'style scoped'.</p>\n  <div v-html=\"htmlContent\" :id=\"$style.htmlContainer\"></div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      htmlContent: \"<p>Hello from v-html</p>\"\n    }\n  }\n};\n</script>\n\n<style module>\n  #htmlContainer {\n    border: dotted black 1px;\n    width: 200px;\n    padding: 10px;\n  }\n  #htmlContainer > p {\n    background-color: coral;\n    padding: 5px;\n    font-weight: bolder;\n    width: 150px;\n  }\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-for.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_ref_v-html"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-html_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-html2_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-for.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_v-if.php",
    "cours": {
      "titre": "Vue v-if Directive",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_v-if.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "If the expression evaluates to 'true', the element and all its content is created in the DOM.",
            "If the expression evaluates to 'false' the element is destroyed."
          ],
          [
            "We can use the built-in <Transition> component to animate when the element enters and leaves the DOM.",
            "Lifecycle hooks such as 'mounted' and 'unmounted' are triggered."
          ]
        ],
        "examples": [
          "<p v-if=\"typewritersInStock\"> in stock </p> <p v-else> not in stock </p>",
          "<p v-if=\"typewriterCount > 0\"> in stock </p> <p v-else> not in stock </p>",
          "<p v-if=\"typewriterCount>3\"> In stock </p> <p v-else-if=\"typewriterCount>0\"> Very few left! </p> <p v-else> Not in stock </p>",
          "<div id=\"app\"> <p v-if=\"text.includes('pizza')\">The text includes the word 'pizza'</p> <p v-else>The word 'pizza' is not found in the text</p> </div>",
          "data() { return { text: 'I like taco, pizza, Thai beef salad, pho soup and tagine.' } }",
          "Example Using the v-if directive to create a <div> element if the condition is 'true'. <div v-if=\"createImgDiv\">\n  <img src=\"/img_apple.svg\" alt=\"apple\">\n  <p>This is an apple.</p>\n</div> Run Example »",
          "Example 1 Using v-if with a data property as the conditional expression, together with v-else . <p v-if=\"typewritersInStock\"> in stock </p> <p v-else> not in stock </p> Try it Yourself »",
          "Example 2 Using v-if with a comparison check as the conditional expression, together with v-else . <p v-if=\"typewriterCount > 0\"> in stock </p> <p v-else> not in stock </p> Try it Yourself »",
          "Example 3 Using v-if together with v-else-if and v-else to display a status message based on the number of typewriters in storage. <p v-if=\"typewriterCount>3\"> In stock </p> <p v-else-if=\"typewriterCount>0\"> Very few left! </p> <p v-else> Not in stock </p> Try it Yourself »",
          "Example 4 Using v-if with a native JavaScript method as the conditional expression, together with v-else . <div id=\"app\"> <p v-if=\"text.includes('pizza')\">The text includes the word 'pizza'</p> <p v-else>The word 'pizza' is not found in the text</p> </div> data() { return { text: 'I like taco, pizza, Thai beef salad, pho soup and tagine.' } } Try it Yourself »",
          "Example 5 Using v-if to render a <div> tag when data is received from the API. <template>\n  <h1>Example</h1>\n  <p>Click the button to fetch data with an HTTP request.</p>\n  <p>Each click generates an object with a random user from <a href=\"https://random-data-api.com/\" target=\"_blank\">https://random-data-api.com/</a>.</p>\n  <p>The robot avatars are lovingly delivered by <a href=\"http://Robohash.org\" target=\"_blank\">RoboHash</a>.</p>\n  <button @click=\"fetchData\">Fetch data</button>\n  <div v-if=\"data\" id=\"dataDiv\">\n    <img :src=\"data.avatar\" alt=\"avatar\">\n    <pre>{{ data.first_name + \" \" + data.last_name }}</pre>\n    <p>\"{{ data.employment.title }}\"</p>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: null,\n      };\n    },\n    methods: {\n      async fetchData() {      \n        const response = await fetch(\"https://random-data-api.com/api/v2/users\"); \n        this.data = await response.json();\n      },    \n    }\n  };\n</script>\n\n<style>\n#dataDiv {\n  width: 240px;\n  background-color: aquamarine;\n  border: solid black 1px;\n  margin-top: 10px;\n  padding: 10px;\n}\n#dataDiv > img {\n  width: 100%;\n}\npre {\n  font-size: larger;\n  font-weight: bold;\n}\n</style> Run Example »",
          "Example 6 Using v-if to create a component so that the mounted lifecycle hook is triggered. CompOne.vue : <template>\n    <h2>Component</h2>\n    <p>Right after this component is added to the DOM, the mounted() function is called and we can add code to that mounted() function. In this example, an alert popup box appears after this component is mounted.</p>\n    <p><strong>Note:</strong> The reason that the alert is visible before the component is visible is because the alert is called before the browser gets to render the component to the screen.</p>\n  </template>\n  \n  <script>\n  export default {\n    mounted() {\n      alert(\"The component is mounted!\");\n    }\n  }\n  </script> App.vue : <template>\n  <h1>The 'mounted' Lifecycle Hook</h1>\n  <button @click=\"this.activeComp = !this.activeComp\">Create component</button>\n  <div>\n    <comp-one v-if=\"activeComp\"></comp-one>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      activeComp: false\n    }\n  }\n}\n</script>\n\n<style scoped>\n  div {\n    border: dashed black 1px;\n    border-radius: 10px;\n    padding: 20px;\n    margin: 10px;\n    width: 400px;\n    background-color: lightgreen;\n  }\n</style> Run Example »",
          "Example 7 Using v-if to toggle a <p> element so that animations are triggered. <template>\n  <h1>Add/Remove <p> Tag</h1>\n  <button @click=\"this.exists = !this.exists\">{{btnText}}</button><br>\n  <Transition>\n    <p v-if=\"exists\">Hello World!</p>\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      exists: false\n    }\n  },\n  computed: {\n    btnText() {\n      if(this.exists) {\n        return 'Remove';\n      }\n      else {\n        return 'Add';\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n  .v-enter-from {\n    opacity: 0;\n    translate: -100px 0;\n  }\n  .v-enter-to {\n    opacity: 1;\n    translate: 0 0;\n  }\n  .v-leave-from {\n    opacity: 1;\n    translate: 0 0;\n  }\n  .v-leave-to {\n    opacity: 0;\n    translate: 100px 0;\n  }\n  p {\n    background-color: lightgreen;\n    display: inline-block;\n    padding: 10px;\n    transition: all 0.5s;\n  }\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-html.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-if_2"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-if_typewriters"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-if_typewriters2"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-if_typewriters3"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-if_pizza"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_httpFetch5_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_lifecycle-hooks_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition5_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-html.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_v-else-if.php",
    "cours": {
      "titre": "Vue v-else-if Directive",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_v-else-if.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "If the expression evaluates to 'true', the element and all its content is created in the DOM.",
            "If the expression evaluates to 'false' the element is destroyed."
          ],
          [
            "We can use the built-in <Transition> component to animate when the element enters and leaves the DOM.",
            "Lifecycle hooks such as 'mounted' and 'unmounted' are triggered."
          ]
        ],
        "examples": [
          "<p v-if=\"typewriterCount>3\"> In stock </p> <p v-else-if=\"typewriterCount>0\"> Very few left! </p> <p v-else> Not in stock </p>",
          "<div id=\"app\"> <div v-if=\"text.includes('pizza')\"> <p>The text includes the word 'pizza'</p> <img src=\"img_pizza.svg\"> </div> <div v-else-if=\"text.includes('burrito')\"> <p>The text includes the word 'burrito', but not 'pizza'</p> <img src=\"img_burrito.svg\"> </div> <p v-else>The words 'pizza' or 'burrito' are not found in the text</p> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { text: 'I like taco, pizza, Thai beef salad, pho soup and tagine.' } } }) app.mount('#app') </script>",
          "Example Using the v-else-if directive to create a <div> element if the condition is 'true'. <div v-if=\"word === 'apple'\">\n  <img src=\"/img_apple.svg\" alt=\"apple\" />\n  <p>The value of the 'word' property is 'apple'.</p>\n</div>\n<div v-else-if=\"word === 'pizza'\">\n  <img src=\"/img_pizza.svg\" alt=\"pizza\" />\n  <p>The value of the 'word' property is 'pizza'</p>\n</div> Run Example »",
          "Example 1 Using v-else-if to write \"Very few left!\" in case there are only 1, 2 or 3 typewriters left in storage. <p v-if=\"typewriterCount>3\"> In stock </p> <p v-else-if=\"typewriterCount>0\"> Very few left! </p> <p v-else> Not in stock </p> Try it Yourself »",
          "Example 2 Using v-else-if to show a certain text and image if the sentence contains 'burrito'. <div id=\"app\"> <div v-if=\"text.includes('pizza')\"> <p>The text includes the word 'pizza'</p> <img src=\"img_pizza.svg\"> </div> <div v-else-if=\"text.includes('burrito')\"> <p>The text includes the word 'burrito', but not 'pizza'</p> <img src=\"img_burrito.svg\"> </div> <p v-else>The words 'pizza' or 'burrito' are not found in the text</p> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { text: 'I like taco, pizza, Thai beef salad, pho soup and tagine.' } } }) app.mount('#app') </script> Try it Yourself »",
          "Example 3 Using a chain of v-else-if to flip through images, using the <Transition> component to create animations. App.vue : <template>\n  <h1>mode=\"out-in\"</h1>\n  <p>Click the button to get a new image.</p>\n  <p>With mode=\"out-in\", the next image is not added until the current image is removed. Another difference from the previous example, is that here we use computed prop instead of a method.</p>\n  <button @click=\"indexNbr++\">Next image</button><br>\n  <Transition mode=\"out-in\">\n    <img src=\"/img_pizza.svg\" v-if=\"imgActive === 'pizza'\">\n    <img src=\"/img_apple.svg\" v-else-if=\"imgActive === 'apple'\">\n    <img src=\"/img_cake.svg\" v-else-if=\"imgActive === 'cake'\">\n    <img src=\"/img_fish.svg\" v-else-if=\"imgActive === 'fish'\">\n    <img src=\"/img_rice.svg\" v-else-if=\"imgActive === 'rice'\">\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      imgs: ['pizza', 'apple', 'cake', 'fish', 'rice'],\n      indexNbr: 0\n    }\n  },\n  computed: {\n    imgActive() {\n      if(this.indexNbr >= this.imgs.length) {\n        this.indexNbr = 0;\n      }\n      return this.imgs[this.indexNbr];\n    }\n  }\n}\n</script>\n\n<style scoped>\n  .v-enter-active {\n    animation: swirlAdded 0.7s;\n  }\n  .v-leave-active {\n    animation: swirlAdded 0.7s reverse;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 360deg;\n      scale: 1;\n    }\n  }\n  img {\n    width: 100px;\n    margin: 20px;\n  }\n  img:hover {\n    cursor: pointer;\n  }\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-if.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-else-if_2"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-if_typewriters3"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-if_pizzaLonger"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition12_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-if.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_v-else.php",
    "cours": {
      "titre": "Vue v-else Directive",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_v-else.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "We can use the built-in <Transition> component to animate when the element enters and leaves the DOM.",
            "Lifecycle hooks such as 'mounted' and 'unmounted' are triggered."
          ]
        ],
        "examples": [
          "<p v-if=\"typewriterCount>3\"> In stock </p> <p v-else-if=\"typewriterCount>0\"> Very few left! </p> <p v-else> Not in stock </p>",
          "<div id=\"app\"> <div v-if=\"text.includes('pizza')\"> <p>The text includes the word 'pizza'</p> <img src=\"img_pizza.svg\"> </div> <div v-else-if=\"text.includes('burrito')\"> <p>The text includes the word 'burrito', but not 'pizza'</p> <img src=\"img_burrito.svg\"> </div> <p v-else>The words 'pizza' or 'burrito' are not found in the text</p> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { text: 'I like Thai beef salad, pho soup and tagine.' } } }) app.mount('#app') </script>",
          "Example Using the v-else directive to create a <div> element when all conditions above are 'false'. <p v-if=\"word === 'apple'\">The word is 'apple'.</p>\n<p v-else-if=\"word === 'pizza'\">The word is 'pizza'</p>\n<div v-else>\n  <img src=\"/img_question.svg\" alt=\"question mark\">\n  <p>The word is not 'apple', and it is not 'pizza'</p>\n</div> Run Example »",
          "Example 1 Using v-else to write \"Not in stock\" when the typewriter count is 0. <p v-if=\"typewriterCount>3\"> In stock </p> <p v-else-if=\"typewriterCount>0\"> Very few left! </p> <p v-else> Not in stock </p> Try it Yourself »",
          "Example 2 Using v-else to show a certain text when the sentence does not contain 'pizza' or 'burrito'. <div id=\"app\"> <div v-if=\"text.includes('pizza')\"> <p>The text includes the word 'pizza'</p> <img src=\"img_pizza.svg\"> </div> <div v-else-if=\"text.includes('burrito')\"> <p>The text includes the word 'burrito', but not 'pizza'</p> <img src=\"img_burrito.svg\"> </div> <p v-else>The words 'pizza' or 'burrito' are not found in the text</p> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { text: 'I like Thai beef salad, pho soup and tagine.' } } }) app.mount('#app') </script> Try it Yourself »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-else-if.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-else_2"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-if_typewriters4"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-if_pizzaLonger2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-else-if.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_v-memo.php",
    "cours": {
      "titre": "Vue v-memo Directive",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_v-memo.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the v-memo directive to rerender only when the updateProp property value changes. <div \n  v-for=\"x in circle\" \n  :style=\"{ backgroundColor: x.color }\" \n  v-memo=\"[updateProp]\"\n></div> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-else.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-memo_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-else.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_v-model.php",
    "cours": {
      "titre": "Vue v-model Directive",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_v-model.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the v-model directive to create a two-way binding between an <input> element and a data property. <template>\n  <h1>v-model Example</h1>\n  <p>Write something, and see the 'inputValue' data property update automatically.</p>\n  <input type=\"text\" v-model=\"inputValue\"> \n  <p>inputValue property: \"{{ inputValue }}\"</p>\n</template> Run Example »",
          "Example 1 Using a slider ( <input type=\"range\"> ) to change the 'inputValue' property value. The <input type=\"text\"> element automatically updates because it is bound to the 'inputValue' property with v-model . <template>\n  <h1>v-model Example</h1>\n  <p>Drag the slider to change the 'inputValue' data property, and see the input text field update automatically because of the two-way binding from v-model.</p>\n  <input type=\"range\" min=\"-50\" max=\"50\" v-on:input=\"sliderChange\" value=\"4\">\n  <p>inputValue property: \"{{ inputValue }}\"</p>\n  <input type=\"text\" v-model=\"inputValue\"> \n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      inputValue: null\n    };\n  },\n  methods: {\n    sliderChange(evt) {\n      this.inputValue = evt.target.value\n    }\n  }\n}\n</script> Run Example »",
          "Example 2 Using v-model on the component with props and emits so that changes in the <input> element updates the parent's 'text' property. App.vue : <template>\n  <h2>Example v-model Directive</h2>\n  <p>App.vue 'text' property: \"{{ text }}\"</p>\n  <comp-one v-model=\"text\"/>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      text: 'Say Cheese'\n    }\n  }\n}\n</script> CompOne.vue : <template>\n  <div>\n    <h3>Component</h3>\n    <p>Write something in the text input field below to see that changes here are emitted from the component, and the parent 'text' property gets updated by the use of v-model.</p>\n    <input\n      :value=\"modelValue\"\n      @input=\"$emit('update:modelValue', $event.target.value)\"\n    />\n  </div>\n</template>\n\n<script>\n  export default {\n    props: ['modelValue'],\n    emits: ['update:modelValue']\n  }\n</script>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  padding: 10px;\n  margin: 20px 0;\n  max-width: 500px;\n}\n</style> Run Example »",
          "Example 3 Using v-model on the component to demonstrate the two-way binding more clearly. The component can update the parent 'text' property, and the component gets updated when the parent 'text' property is changed. App.vue : <template>\n  <h2>Example v-model Directive</h2>\n  <p>App.vue 'text' property: \"<pre>{{ text }}</pre>\"</p>\n  <button v-on:click=\"this.text = 'Hello!'\">text='Hello!'</button>\n  <comp-one v-model=\"text\"/>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      text: 'Say Cheese'\n    }\n  }\n}\n</script>\n\n<style>\npre {\n  display: inline;\n  background-color: yellow;\n}\n</style> CompOne.vue : <template>\n  <div>\n    <h3>Component</h3>\n    <p>Two-way binding on component with v-model:</p>\n    <ol>\n      <li>The component can update the 'text' property (using text field).</li>\n      <li>The component gets updated when the 'text' property is changed (using button).</li>\n    </ol>\n    <input\n      :value=\"modelValue\"\n      @input=\"$emit('update:modelValue', $event.target.value)\"\n    />\n  </div>\n</template>\n\n<script>\n  export default {\n    props: ['modelValue'],\n    emits: ['update:modelValue']\n  }\n</script>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  padding: 10px;\n  margin: 20px 0;\n  max-width: 600px;\n}\n</style> Run Example »",
          "Example 4 Using v-model with a computed value with get() and set() functions inside the component. CompOne.vue : <template>\n  <div>\n    <h3>Component</h3>\n    <p>Two-way binding on component with v-model:</p>\n    <ol>\n      <li>The component can update the 'text' property (using text field).</li>\n      <li>The component gets updated when the 'text' property is changed (using button).</li>\n    </ol>\n    <input v-model=\"inpVal\"/>\n  </div>\n</template>\n\n<script>\n  export default {\n    props: ['modelValue'],\n    emits: ['update:modelValue'],\n    computed: {\n      inpVal: {\n        get() {\n          return this.modelValue;\n        },\n        set(inpVal) {\n          this.$emit('update:modelValue',inpVal)\n        }\n      }\n    }\n  }\n</script>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  padding: 10px;\n  margin: 20px 0;\n  max-width: 600px;\n}\n</style> Run Example »",
          "Example 5 Using v-model:message on the component to rename the default prop name 'modelValue' to 'message'. App.vue : <template>\n  <h2>Example v-model Directive</h2>\n  <p>App.vue 'text' property: \"<pre>{{ text }}</pre>\"</p>\n  <button v-on:click=\"this.text = 'Hello!'\">text='Hello!'</button>\n  <comp-one v-model:message=\"text\"/>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      text: 'Say Cheese'\n    }\n  }\n}\n</script>\n\n<style>\npre {\n  display: inline;\n  background-color: yellow;\n}\n</style> CompOne.vue : <template>\n  <div>\n    <h3>Component</h3>\n    <p>Two-way binding on component with v-model:</p>\n    <ol>\n      <li>The component can update the 'text' property (using text field).</li>\n      <li>The component gets updated when the 'text' property is changed (using button).</li>\n    </ol>\n    <input\n      :value=\"message\"\n      @input=\"$emit('update:message', $event.target.value)\"\n    />\n  </div>\n</template>\n\n<script>\n  export default {\n    props: ['message'],\n    emits: ['update:message']\n  }\n</script>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  padding: 10px;\n  margin: 20px 0;\n  max-width: 600px;\n}\n</style> Run Example »",
          "Example 6 Using v-model two times on the component to create a two-way binding with two values. App.vue : <template>\n  <h2>Example v-model Directive</h2>\n  <p>Name: \"<pre>{{ name }}</pre>\"</p>\n  <p>Height: <pre>{{ height }}</pre> cm</p>\n  <comp-one \n    v-model:name=\"name\"\n    v-model:height=\"height\"\n  />\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      name: 'Olaf',\n      height: 120\n    }\n  }\n}\n</script>\n\n<style>\npre {\n  display: inline;\n  background-color: yellow;\n}\n</style> CompOne.vue : <template>\n  <div>\n    <h3>Component</h3>\n    <p>Two inputs are bound to the component with v-model through props and emits.</p>\n    <p>\n      <label>\n        Name: \n        <input\n          type=\"text\"\n          :value=\"name\"\n          @input=\"$emit('update:name', $event.target.value)\"\n        />\n      </label>\n    </p>\n    <p>\n      <label>\n        Height:\n        <input\n          type=\"range\"\n          :value=\"height\"\n          @input=\"$emit('update:height', $event.target.value)\"\n          min=\"50\"\n          max=\"200\"\n        />\n        {{ this.$props.height }} cm\n      </label>\n    </p>\n  </div>\n</template>\n\n<script>\n  export default {\n    props: ['name','height'],\n    emits: ['update:name','update:height']\n  }\n</script>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  padding: 10px;\n  margin: 20px 0;\n  max-width: 300px;\n}\n</style> Run Example »",
          "Example 7 Using the .lazy so that the user must first modify the input element, then change focus away from the input element before the property gets updated with v-model . <template>\n  <h1>v-model Example</h1>\n  <p>Using the '.lazy' modifier, you must first write something, then click somewhere else, or use the tab key to switch focus away from the input element, before the property get updated.</p>\n  <input type=\"text\" v-model.lazy=\"inputValue\"> \n  <p>inputValue property: \"{{ inputValue }}\"</p>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      inputValue: null\n    };\n  }\n}\n</script> Run Example »",
          "Example 8 Using the .lazy so that the user must first modify the input element, then change focus away from the input element before the property gets updated with v-model . <template>\n  <h1>v-model Example</h1>\n  <p>Using the '.trim' modifier will remove any white spaces at the start and end of the input.</p>\n  <p>Add white spaces at the start and end in the input fields below to see the difference with or with out '.trim'.</p>\n  <p>No '.trim': <input type=\"text\" v-model=\"inputVal1\"> \"<pre>{{ inputVal1 }}</pre>\"</p> \n  <p>With '.trim': <input type=\"text\" v-model.trim=\"inputVal2\"> \"<pre>{{ inputVal2 }}</pre>\"</p>\n  \n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      inputVal1: 'Hello',\n      inputVal2: 'Hi'\n    };\n  }\n}\n</script>\n\n<style>\npre {\n  display: inline;\n  background-color: lightgreen;\n\n}\n</style> Run Example »",
          "Example 9 Using the custom .allCapital modifier to convert all characters in the input to upper case if the .allCapital modifier is set. App.vue : <template>\n  <h2>Example v-model Directive</h2>\n  <p>App.vue 'text' property: \"{{ text }}\"</p>\n  <comp-one v-model.allCapital=\"text\"/>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      text: ''\n    }\n  }\n}\n</script> CompOne.vue : <template>\n  <div>\n    <h3>Component</h3>\n    <p>Write something in the text input field below. Click somewhere else or use the tab key to shift focus away from the input element to see the effect of the custom 'allCapital' modifier.</p>\n    <input \n      :value=\"modelValue\" \n      @change=\"this.emitVal\" \n    />\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    modelValue: String,\n    modelModifiers: {\n      // modelModifiers is an empty object initially.\n      // Modifiers set on the component will be stored here.\n      default: () => ({}) \n    }\n  },\n  emits: ['update:modelValue'],\n  methods: {\n    emitVal(e) {\n      let value = e.target.value\n      if (this.modelModifiers.allCapital) {\n        value = value.toUpperCase()\n      }\n      this.$emit('update:modelValue', value)\n    }\n  }\n}\n</script>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  padding: 10px;\n  margin: 20px 0;\n  max-width: 500px;\n}\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-memo.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-model_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-model2_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-model3_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-model4_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-model5_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-model6_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-model7_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-model8_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-model9_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-model10_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-memo.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_v-on.php",
    "cours": {
      "titre": "Vue v-on Directive",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_v-on.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the v-on directive to change the background color of a <div> element when when a button is clicked. <template>\n  <h1>v-on Example</h1>\n  <div v-bind:class=\"{ yelClass: bgColor }\">\n    <p>Click the button to change background color of this DIV box.</p>\n    <button v-on:click=\"bgColor = !bgColor\">Click</button>\n    <p>bgColor property: \"{{ bgColor }}\"</p>\n  </div>\n</template> Run Example »",
          "Example 1 Using the .capture modifier to capture the click event in the parent element first. <template>\n  <h1>v-on Example</h1>\n  <p>When the '.capture' modifier is used on the parent DIV element, the event is captured first in the parent element when the child element is clicked.</p>\n  <p>If the '.capture' modifier is removed from this code, the child element will capture the click event first. This is the default behavior, that the event bubbles up, first in child element, then to the parent.</p>\n  <div v-on:click.capture=\"this.msg.push('parent')\" id=\"parent\">\n    <p>This is the parent element.</p>\n    <div v-on:click=\"this.msg.push('child')\">\n      <p>This is the child element. CLICK HERE!</p>\n    </div>\n  </div>\n  <p>The order of when and where the event is captured.</p>\n  <ol>\n    <li v-for=\"x in msg\">{{ x }}</li>\n  </ol>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      msg: []\n    };\n  }\n}\n</script>\n\n<style scoped>\ndiv {\n  margin: 10px;\n  padding: 10px;\n  border: dashed black 1px;\n}\n#parent {\n  width: 250px;\n  background-color: lightpink;\n}\n#parent > div {\n  cursor: pointer;\n  background-color: lightgreen;\n}\n</style> Run Example »",
          "Example 2 Using the .stop modifier to prevent the event from propagating any further. <template>\n  <h1>v-on Example</h1>\n  <p>The '.stop' modifier stops the click event from propagating any further.</p>\n  <p>If the '.stop' modifier is removed from this code, the parent element will also capture the click event on the child element.</p>\n  <div v-on:click=\"this.msg.push('parent')\" id=\"parent\">\n    <p>This is the parent element.</p>\n    <div v-on:click.stop=\"this.msg.push('child')\">\n      <p>This is the child element. CLICK HERE!</p>\n    </div>\n  </div>\n  <p>The order of when and where the event is captured.</p>\n  <ol>\n    <li v-for=\"x in msg\">{{ x }}</li>\n  </ol>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      msg: []\n    };\n  }\n}\n</script>\n\n<style scoped>\ndiv {\n  margin: 10px;\n  padding: 10px;\n  border: dashed black 1px;\n}\n#parent {\n  width: 250px;\n  background-color: lightpink;\n}\n#parent > div {\n  cursor: pointer;\n  background-color: lightgreen;\n}\n</style> Run Example »",
          "Example 3 Using the .passive modifier to enhance performance during scrolling. <template>\n  <h1>v-on Example</h1>\n  <p>The '.passive' modifier sets the event handler as passive, and this can enhance performance.</p>\n  <div v-on:scroll.passive=\"this.scrollTimes++\" id=\"parent\">\n    <p>Scroll here.</p>\n    <p>Bladi-bladi-bladi</p>\n    <p>potato potato</p>\n    <p>Scroll-scroll-scroll</p>\n    <p>Scroll more...</p>\n  </div>\n  <p>Scroll happended {{ scrollTimes }} times.</p>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      scrollTimes: 0\n    };\n  }\n}\n</script>\n\n<style scoped>\ndiv {\n  margin: 10px;\n  padding: 10px;\n  border: dashed black 1px;\n  width: 200px;\n  height: 50px;\n  overflow: scroll;\n  background-color: lightcoral;\n}\n</style> Run Example »",
          "Example 4 Using the .once modifier to enhance performance during scrolling. <template>\n  <h1>v-on Example</h1>\n  <p>The '.once' modifier prevents the event from happening more than once.</p>\n  <button v-on:click.once=\"clickTimes++\">Click</button>\n  <p>Click event happened {{ clickTimes }} times.</p>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      clickTimes: 0\n    };\n  }\n}\n</script> Run Example »",
          "Example 5 Using the .self modifier so that the parent element only reacts to click events that happen to itself. <template>\n  <h1>v-on Example</h1>\n  <p>The '.self' modifier is set on the parent element. </p>\n  <p>Click on the child element and see how the event propagates past the parent element because the parent click event only reacts to click on the element itself.</p>\n  <div v-on:click=\"addMsg('grandParent')\" id=\"grandParent\">\n    Grandparent element\n    <div v-on:click.self=\"addMsg('parent')\">\n      Parent element.\n      <div v-on:click=\"addMsg('child')\">\n        Child element. CLICK HERE!\n      </div>\n    </div>\n  </div>\n  <p>The order of when and where the event is captured.</p>\n  <ol>\n    <li v-for=\"x in msg\">{{ x }}</li>\n  </ol>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      msg: []\n    };\n  },\n  methods: {\n    addMsg(txt) {\n      this.msg.push(txt);\n    }\n  }\n}\n</script>\n\n<style scoped>\ndiv {\n  margin: 10px;\n  padding: 10px;\n  border: dashed black 1px;\n  cursor: pointer;\n}\n#grandParent {\n  width: 250px;\n  background-color: lightpink;\n}\n#grandParent > div {\n  background-color: lightgreen;\n}\n#grandParent > div > div {\n  background-color: lightskyblue;\n}\n</style> Run Example »",
          "Example 6 Using the .prevent modifier to prevent the default drop down list from appearing when right mouse button click. <template>\n  <h1>v-on Example</h1>\n  <p>The '.prevent' modifier is set to prevent the drop down menu to appear when the user does a right mouse button click.</p>\n  <div \n    v-on:click.right.prevent=\"changeColor\" \n    v-bind:style=\"{ backgroundColor: 'hsl(' + bgColor + ',80%,80%)' }\">\n    <p>Press right mouse button here.</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      bgColor: 0\n    }\n  },\n  methods: {\n    changeColor() {\n      this.bgColor += 50\n    }\n  }\n}\n</script>\n\n<style scoped>\ndiv {\n  margin: 10px;\n  padding: 10px;\n  border: dashed black 1px;\n  width: 200px;\n}\n</style> Run Example »",
          "Example 7 Using the .left.shift modifiers to change image when the user does a left mouse button click while holding down the shift key. <template>\n  <h1>v-on Example</h1>\n  <p>Hold 'Shift' key and press left mouse button on the image:</p>\n  <img v-on:click.left.shift=\"changeImg\" v-bind:src=\"imgUrl\">\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      imgFish: true,\n      imgUrl: 'img_fish.svg'\n    }\n  },\n  methods: {\n    changeImg() {\n      this.imgFish = !this.imgFish;\n      if (this.imgFish) {\n        this.imgUrl = 'img_fish.svg'\n      }\n      else {\n        this.imgUrl = 'img_tiger.svg'\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\nimg {\n  width: 200px;\n}\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-model.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-on_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-on2_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-on5_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-on4_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-on7_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-on3_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-on6_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-on8_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-on2_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-on3_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-on4_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-on5_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-on6_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-on7_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-on8_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-model.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_v-once.php",
    "cours": {
      "titre": "Vue v-once Directive",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_v-once.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the v-once directive to render an <img> element only once. <template>\n  <h1>v-once Example</h1>\n  <p>The image is only rendered once. Changing the image source does not have any effect.</p>\n  <img v-once v-bind:src=\"imgUrl[imgIndex]\">\n  <p>Img src: '{{ imgUrl[imgIndex] }}'</p>\n  <button v-on:click=\"changeImg\">Change image</button>\n</template> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-on.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-once_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-on.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_v-pre.php",
    "cours": {
      "titre": "Vue v-pre Directive",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_v-pre.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the v-pre directive to prevent compilation of a <p> element. <img v-bind:src=\"imgUrl[imgIndex]\">\n<p v-pre>Img src: '{{ imgUrl[imgIndex] }}' <strong>(Not compiled)</strong></p>\n<p>Img src: '{{ imgUrl[imgIndex] }}' <strong>(Compiled version)</strong></p>\n<button v-on:click=\"changeImg\">Change image</button> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-once.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_v-pre_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-once.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_v-show.php",
    "cours": {
      "titre": "Vue v-show Directive",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_v-show.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "<div v-show=\"showDiv\">This div tag can be hidden</div>",
          "<div id=\"app\"> <div v-show=\"showDiv\">Div tag with v-show</div> <div v-if=\"showDiv\">Div tag with v-if</div> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { showDiv: true } } }) app.mount('#app') </script>",
          "Example Using the v-show directive to conditionally toggle the visibility of a <div> element, depending on the value of 'showDiv'. <div v-show=\"showDiv\">This div tag can be hidden</div> Try it Yourself »",
          "Example The v-show and v-if directives are used side-by-side to conditionally toggle the visibility of a <div> element. Open the example, set the condition to 'false', then right-click and inspect the page to see that the element with v-show still exists in the DOM. <div id=\"app\"> <div v-show=\"showDiv\">Div tag with v-show</div> <div v-if=\"showDiv\">Div tag with v-if</div> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script> const app = Vue.createApp({ data() { return { showDiv: true } } }) app.mount('#app') </script> Try it Yourself »",
          "Example A <p> element becomes visible with v-show and triggers the after-enter event. <template>\n  <h1>JavaScript Transition Hooks</h1>\n  <p>This code hooks into \"after-enter\" so that after the initial animation is done, a method runs that displays a red div.</p>\n  <button @click=\"pVisible=true\">Create p-tag!</button><br>\n  <Transition @after-enter=\"onAfterEnter\">\n    <p v-show=\"pVisible\" id=\"p1\">Hello World!</p>\n  </Transition>\n  <br>\n  <div v-show=\"divVisible\">This appears after the \"enter-active\" phase of the transition.</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      pVisible: false,\n      divVisible: false\n    }\n  },\n  methods: {\n    onAfterEnter() {\n      this.divVisible = true;\n    }\n  }\n}\n</script>\n\n<style scoped>\n  .v-enter-active {\n    animation: swirlAdded 1s;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 360deg;\n      scale: 1;\n    }\n  }\n  #p1, div {\n    display: inline-block;\n    padding: 10px;\n    border: dashed black 1px;\n  }\n  #p1 {\n    background-color: lightgreen;\n  }\n  div {\n    background-color: lightcoral;\n  }\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-pre.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-show_div"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_v-show_div2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_transition9_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-pre.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_v-slot.php",
    "cours": {
      "titre": "Vue v-slot Directive",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_v-slot.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the v-slot directive to direct the 'Hello!' message to the named slot 'bottomSlot', inside the <slot-comp> component. <slot-comp v-slot:bottomSlot>'Hello!'</slot-comp> Run Example »",
          "Example 1 Using v-slot on <template> elements to assign content to two different slots in the same component. App.vue : <template>\n  <h1>App.vue</h1>\n  <p>The component has two slots, and the template element is used to assign content to both.</p>\n  <slot-comp>\n    <template v-slot:topSlot>\n      <div>\n        <p>Tigers are beautiful!</p>\n        <img src=\"tiger.svg\" alt=\"tiger\" width=\"100\">\n      </div>\n    </template>\n    <template v-slot:bottomSlot>\n      <div>\n        <p>Whales can be very big</p>\n      </div>\n    </template>\n  </slot-comp>\n</template> SlotComp.vue : <template>\n  <hr>\n  <h3>Component</h3>\n  <slot name=\"topSlot\"></slot>\n  <slot name=\"bottomSlot\"></slot>\n</template> Run Example »",
          "Example 2 Using v-slot to direct content to the default slot. SlotComp.vue : <h3>Component</h3>\n<div>\n  <slot></slot>\n</div>\n<div>\n  <slot name=\"bottomSlot\"></slot>\n</div> App.vue : <h1>App.vue</h1>\n<p>The component has two div tags with one slot in each.</p>\n<slot-comp v-slot:default >'Default slot'</slot-comp> Run Example »",
          "Example 3 Using the v-slot: shorthand # . App.vue : <h1>App.vue</h1>\n<p>The component has two div tags with one slot in each.</p>\n<slot-comp #topSlot >'Hello!'</slot-comp> SlotComp.vue : <h3>Component</h3>\n<div>\n  <slot name=\"topSlot\"></slot>\n</div>\n<div>\n  <slot name=\"bottomSlot\"></slot>\n</div> Run Example »",
          "Example 4 Using v-slot to receive data from a scoped slot. App.vue : <slot-comp v-slot:\"dataFromSlot\" >\n  <h2>{{ dataFromSlot.lclData }}</h2>\n</slot-comp> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-show.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slots6_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_slots10_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slots9_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slotsShorthand_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_slotsScoped_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-show.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_v-text.php",
    "cours": {
      "titre": "Vue v-text Directive",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_v-text.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "<div id=\"app\"> <p v-text=\"pText\">Old text.</p> </div>",
          "Example Using the v-text directive to overwrite the existing text inside a paragraph. <div id=\"app\"> <p v-text=\"pText\">Old text.</p> </div> Try it Yourself »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-slot.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_ref_v-text"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-slot.php"
          },
          {
            "title": "Vue Directives Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_directives.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_ref_options.php",
    "cours": {
      "titre": "Vue Instance Options",
      "description": "",
      "lien": "https://www.w3schools.com/vue/vue_ref_options.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-text.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_v-text.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_opt_data.php",
    "cours": {
      "titre": "Vue 'data' Option",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_opt_data.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using a data property inside the data option to hold a message. export default {\n  data() {\n    return {\n      msg: 'Hello World!'\n    };\n  }\n}; Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_ref_options.php"
          },
          {
            "title": "Vue Instance Options Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_options.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_opt_data_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_ref_options.php"
          },
          {
            "title": "Vue Instance Options Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_options.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_opt_methods.php",
    "cours": {
      "titre": "Vue 'methods' Option",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_opt_methods.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using a method inside the methods option to toggle a message. export default {\n  data() {\n    return {\n      msg: 'Hello World!',\n      showMsg: false\n    };\n  },\n  methods: {\n    toggleMsg() {\n      this.showMsg = !this.showMsg;\n    }\n  }\n}; Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_opt_data.php"
          },
          {
            "title": "Vue Instance Options Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_options.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_opt_methods_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_opt_data.php"
          },
          {
            "title": "Vue Instance Options Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_options.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_opt_computed.php",
    "cours": {
      "titre": "Vue 'computed' Option",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_opt_computed.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using a computed property inside the computed option to show the appropriate button text. export default {\n  data() {\n    return {\n      msg: 'Hello World!',\n      showMsg: false\n    };\n  },\n  computed: {\n    btnText() {\n      if( this.showMsg ) {\n        return 'Hide'\n      }\n      else {\n        return 'Show'\n      }\n    }\n  }\n}; Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_opt_methods.php"
          },
          {
            "title": "Vue Instance Options Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_options.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_opt_computed_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_opt_methods.php"
          },
          {
            "title": "Vue Instance Options Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_options.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_opt_watch.php",
    "cours": {
      "titre": "Vue 'watch' Option",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_opt_watch.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using a watcher inside the watch option to make it impossible to choose values between 20 and 70 with an <input type=\"range\"> . export default {\n  data() {\n    return {\n      rangeVal: 4\n    };\n  },\n  watch: {\n    rangeVal(val) {\n      if( val>20 && val<70) {\n        if(val<40){\n          this.rangeVal = 20;\n        }\n        else {\n          this.rangeVal = 70;\n        }\n      }\n    }\n  }\n}; Run Example »",
          "Example Using a watcher with the object syntax. <template>\n  <h2>Example watch Option</h2>\n  <p>The 'rangeVal' watcher is written with the object syntax, with immediate: true, so that rangeVal is moved to '70' when the page first loads:</p>\n  <input type=\"range\" v-model=\"rangeVal\">\n  <p>rangeVal: <span>{{ rangeVal }}</span></p>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      rangeVal: 40\n    };\n  },\n  watch: {\n    rangeVal: {\n      handler(val) {\n        if (val > 20 && val < 70) {\n          if (val < 40) {\n            this.rangeVal = 20;\n          }\n          else {\n            this.rangeVal = 70;\n          }\n        }\n      },\n      immediate: true\n    }\n  }\n};\n</script>\n\n<style>\nspan {\n  padding: 3px;\n  font-weight: bold;\n  font-family: 'Courier New', Courier, monospace;\n  background-color: lightgreen;\n}\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_opt_computed.php"
          },
          {
            "title": "Vue Instance Options Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_options.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_opt_watch_2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_opt_watch2_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_opt_computed.php"
          },
          {
            "title": "Vue Instance Options Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_options.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_opt_props.php",
    "cours": {
      "titre": "Vue 'props' Option",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_opt_props.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the props option to create props for the component. export default {\n    props: [\n        'foodName',\n        'foodDesc'\n    ]\n}; Run Example »",
          "Example Defining props as objects with options. FoodItem.vue : <template>\n\t<div>\n\t\t<h2>{{ foodName }}</h2>\n\t\t<p>{{ foodDesc }}</p>\n\t</div>\n</template>\n\n<script>\nexport default {\n\tprops: {\n\t\tfoodName: {\n\t\t\ttype: String,\n\t\t\trequired: true\n\t\t},\n\t\tfoodDesc: {\n\t\t\ttype: String,\n\t\t\trequired: false,\n\t\t\tdefault: 'This is the food description...'\n\t\t}\n\t}\n};\n</script> App.vue : <template>\n  <h1>Food</h1>\n  <p>Food description is not provided for 'Pizza' and 'Rice', so the default description is used.</p>\n  <div id=\"wrapper\">\n    <food-item \n      food-name=\"Apples\" \n      food-desc=\"Apples are a type of fruit that grow on trees.\"/>\n    <food-item \n      food-name=\"Pizza\"/>\n    <food-item \n      food-name=\"Rice\"/>\n  </div> \n</template>\n\n<style>\n  #wrapper {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  #wrapper > div {\n    border: dashed black 1px;\n    flex-basis: 120px;\n    margin: 10px;\n    padding: 10px;\n    background-color: lightgreen;\n  }\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_opt_watch.php"
          },
          {
            "title": "Vue Instance Options Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_options.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_opt_props_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_opt_props2_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_opt_watch.php"
          },
          {
            "title": "Vue Instance Options Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_options.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_opt_emits.php",
    "cours": {
      "titre": "Vue 'emits' Option",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_opt_emits.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the emits option to declare which custom events that are emitted from the component. export default {\n  emits: ['custom-event'],\n  methods: {\n    notifyParent() {\n      this.$emit('custom-event','Hello! ')\n    }\n  }\n} Run Example »",
          "Example Using props as objects with options, so that the default food description is shown when it is not provided by the parent component. FoodItem.vue : <template>\n\t<div>\n\t\t<h2>{{ foodName }}</h2>\n\t\t<p>{{ foodDesc }}</p>\n\t</div>\n</template>\n\n<script>\nexport default {\n\tprops: {\n\t\tfoodName: {\n\t\t\ttype: String,\n\t\t\trequired: true\n\t\t},\n\t\tfoodDesc: {\n\t\t\ttype: String,\n\t\t\trequired: false,\n\t\t\tdefault: 'This is the food description...'\n\t\t}\n\t}\n};\n</script> App.vue : <template>\n  <h1>Food</h1>\n  <p>Food description is not provided for 'Pizza' and 'Rice', so the default description is used.</p>\n  <div id=\"wrapper\">\n    <food-item \n      food-name=\"Apples\" \n      food-desc=\"Apples are a type of fruit that grow on trees.\"/>\n    <food-item \n      food-name=\"Pizza\"/>\n    <food-item \n      food-name=\"Rice\"/>\n  </div> \n</template>\n\n<style>\n  #wrapper {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  #wrapper > div {\n    border: dashed black 1px;\n    flex-basis: 120px;\n    margin: 10px;\n    padding: 10px;\n    background-color: lightgreen;\n  }\n</style> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_opt_props.php"
          },
          {
            "title": "Vue Instance Options Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_options.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_opt_emits_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_opt_emits2_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_opt_props.php"
          },
          {
            "title": "Vue Instance Options Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_options.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_opt_expose.php",
    "cours": {
      "titre": "Vue 'expose' Option",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_opt_expose.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the expose option to make a method available for the parent component to use. export default {\n  expose: ['createMessage'],\n  data() {\n    return {\n      message: ' '\n    }\n  },\n  methods: {\n    createMessage(msg) {\n      this.message += msg + ' '\n    }\n  }\n} Run Example »",
          "Example 1 The expose option is not used in the child component, so all properties in the child component are available to the parent component. ChildComp.vue : <template>\n  <div>\n    <h3>ChildComp.vue</h3>\n    <p>Message from parent component:</p>\n    <p id=\"pEl\">{{ message }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: ' '\n    }\n  },\n  methods: {\n    createAlert() {\n      alert('This is an alert, from the child component')\n    }\n  }\n}\n</script>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  padding: 10px;\n  max-width: 350px;\n  margin-top: 20px;\n}\n#pEl {\n  background-color: lightgreen;\n  font-family: 'Courier New', Courier, monospace;\n}\n</style> App.vue : <template>\n  <h2>Example expose Option</h2>\n  <p>The 'expose' option is not used, so all child properties are available to the parent by default, both the 'message' data property, and the 'createAlert()' method:</p>\n  <button v-on:click=\"{ this.$refs.childComp.message += 'Hello! '; }\">Write 'Hello!'</button>\n  <button v-on:click=\"{ this.$refs.childComp.createAlert(); }\">Create alert</button>\n  <child-comp ref=\"childComp\"/>\n</template> Run Example »",
          "Example 2 Using the 'createMessage' method in the child component from the parent component does not work, because only the 'message' data property is listed in the expose option of the child component. ChildComp.vue : <template>\n  <div>\n    <h3>ChildComp.vue</h3>\n    <p>Message from parent component:</p>\n    <p id=\"pEl\">{{ message }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  expose: ['message'],\n  data() {\n    return {\n      message: ' '\n    }\n  },\n  methods: {\n    createMessage(msg) {\n      this.message += msg + ' '\n    }\n  }\n}\n</script>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  padding: 10px;\n  max-width: 350px;\n  margin-top: 20px;\n}\n#pEl {\n  background-color: lightgreen;\n  font-family: 'Courier New', Courier, monospace;\n}\n</style> App.vue (highlighted line does not work): <template>\n  <h2>Example expose Option</h2>\n  <p>Only the 'message' data property is listed in the 'expose' option, so the 'createMessage' method from the child component is not available, and will not work:</p>\n  <input type=\"text\" v-model=\"inpText\" placeholder=\"Write something\">\n  <button v-on:click=\"useMet\">Use exposed method</button>\n  <child-comp ref=\"childComp\"/>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      inpText: ''\n    }\n  },\n  methods: {\n    useMet() {\n      this.$refs.childComp.createMessage(this.inpText);\n    }\n  },\n  mounted() {\n    this.$refs.childComp.message = 'Initial message!';\n  }\n}\n</script> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_opt_emits.php"
          },
          {
            "title": "Vue Instance Options Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_options.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_opt_expose_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_opt_expose3_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_opt_expose2_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_opt_emits.php"
          },
          {
            "title": "Vue Instance Options Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_options.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php",
    "cours": {
      "titre": "Vue Lifecycle Hooks",
      "description": "",
      "lien": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_opt_expose.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_opt_expose.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_lh_beforeCreate.php",
    "cours": {
      "titre": "Vue 'beforeCreate' Lifecycle Hook",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_lh_beforeCreate.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the beforeCreate lifecycle hook to create an alert, write to the console, and unsuccessfully trying to change the 'text' data property. beforeCreate(){\n  console.log('beforeCreate lifecycle hook');\n  alert('beforeCreate lifecycle hook');\n  this.text = 'beforeCreate lifecycle hook'; // Does not work\n} Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_lh_beforeCreate_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_lh_created.php",
    "cours": {
      "titre": "Vue 'created' Lifecycle Hook",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_lh_created.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the created lifecycle hook to change the 'text' data property. export default {\n  data() {\n    return {\n      text: 'initial text'\n    }\n  },\n  created() {\n    this.text = 'The component is now created';\n  }\n} Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_beforeCreate.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_lh_created_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_beforeCreate.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_lh_beforeMount.php",
    "cours": {
      "titre": "Vue 'beforeMount' Lifecycle Hook",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_lh_beforeMount.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the beforeMount and mounted lifecycle hooks to demonstrate that the component's DOM elements are not available until the mounted hook. export default {\n  data() {\n    return {\n      refsObj1: '',\n      refsObj2: ''\n    }\n  },\n  beforeMount() {\n    this.refsObj1 = this.$refs; // The $refs object is empty at this point\n  },\n  mounted() {\n    this.refsObj2 = this.$refs;\n  }\n} Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_created.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_lh_beforeMount_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_created.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_lh_mounted.php",
    "cours": {
      "titre": "Vue 'mounted' Lifecycle Hook",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_lh_mounted.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the mounted lifecycle hook to put the cursor inside the input field as soon as the component is mounted. <script>\nexport default {\n\tmounted() {\n\t\tthis.$refs.inpName.focus();\n\t}\n}\n</script> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_beforeMount.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_lifecycle-hooks2_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_beforeMount.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_lh_beforeUpdate.php",
    "cours": {
      "titre": "Vue 'beforeUpdate' Lifecycle Hook",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_lh_beforeUpdate.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the beforeUpdate lifecycle hook to count how many times an update is triggered. export default {\n  data() {\n    return {\n      sliderVal: 50,\n      renderCount: 0\n    }\n  },\n  beforeUpdate() {\n    this.renderCount++;\n  }\n} Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_mounted.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_lh_beforeUpdate_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_mounted.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_lh_updated.php",
    "cours": {
      "titre": "Vue 'updated' Lifecycle Hook",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_lh_updated.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the updated lifecycle hook to write a message to the console every time the DOM tree is updated. export default {\n  data() {\n    return {\n      sliderVal: 50,\n      renderCount: 0\n    }\n  },\n  updated() {\n    this.renderCount++;\n    console.log('Updated ' + this.renderCount + ' times.')\n  }\n} Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_beforeUpdate.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_lh_updated_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_beforeUpdate.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_lh_beforeUnmount.php",
    "cours": {
      "titre": "Vue 'beforeUnmount' Lifecycle Hook",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_lh_beforeUnmount.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the beforeUnmount lifecycle hook to create an alert with text taken from inside a <p> element. <script>\nexport default {\n  beforeUnmount() {\n    alert(\"beforeUnmount: The text inside the p-tag is: \" + this.$refs.pEl.innerHTML);\n  }\n}\n</script> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_updated.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_lifecycle-hooks10_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_updated.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_lh_unmounted.php",
    "cours": {
      "titre": "Vue 'unmounted' Lifecycle Hook",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_lh_unmounted.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the unmounted lifecycle hook to create an alert when the component is removed from the DOM. <script>\nexport default {\n    unmounted() {\n        alert(\"The component is removed (unmounted)!\");\n  }\n}\n</script> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_beforeUnmount.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_lh_unmounted_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_beforeUnmount.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_lh_errorCaptured.php",
    "cours": {
      "titre": "Vue 'errorCaptured' Lifecycle Hook",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_lh_errorCaptured.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "The error",
            "The component that triggered the error",
            "The error source type"
          ]
        ],
        "examples": [
          "Example Using the errorCaptured lifecycle hook to catch an error from a child component and create an alert to the user. <script>\nexport default {\n  errorCaptured() {\n    alert(\"An error occurred\");\n  }\n}\n</script> Run Example »",
          "Example 1 Using the errorCaptured lifecycle hook to catch an error and write information about the error to the console. App.vue : <template>\n  <h1>The 'errorCaptured' Lifecycle Hook</h1>\n  <p>Whenever there is an error in a child component, the errorCaptured() function is called on the parent.</p>\n  <p>Open the browser console to see the captured error details.</p>\n  <div>\n    <comp-one></comp-one>\n  </div>\n</template>\n\n<script>\nexport default {\n  errorCaptured(error,compInst,errorInfo) {\n    console.log(\"error: \", error);\n    console.log(\"compInst: \", compInst);\n    console.log(\"errorInfo: \", errorInfo);\n  }\n}\n</script>\n\n<style>\n#app > div {\n  border: dashed black 1px;\n  border-radius: 10px;\n  padding: 10px;\n  margin-top: 10px;\n  background-color: lightgreen;\n}\n</style> ComOne.vue : <template>\n  <h2>Component</h2>\n  <p>This is the component</p>\n  <button @click=\"generateError\">Generate Error</button>\n</template>\n\n<script>\nexport default {\n  methods: {\n    generateError() {\n      this.$refs.objEl.innerHTML = \"hi\";\n    }\n  }\n}\n</script> Run Example »",
          "Example 2 Using the errorCaptured lifecycle hook with return false; to stop the error from propagating. App.vue : <template>\n  <h1>The 'errorCaptured' Lifecycle Hook</h1>\n  <p>Whenever there is an error in a child component, the errorCaptured() function is called on the parent.</p>\n  <p>Open the browser console to see the captured error details.</p>\n  <div>\n    <comp-one></comp-one>\n  </div>\n</template>\n\n<script>\nexport default {\n  errorCaptured(error,compInst,errorInfo) {\n    console.log(\"error: \", error);\n    console.log(\"compInst: \", compInst);\n    console.log(\"errorInfo: \", errorInfo);\n    return false;\n  }\n}\n</script>\n\n<style>\n#app > div {\n  border: dashed black 1px;\n  border-radius: 10px;\n  padding: 10px;\n  margin-top: 10px;\n  background-color: lightgreen;\n}\n</style> ComOne.vue : <template>\n  <h2>Component</h2>\n  <p>This is the component</p>\n  <button @click=\"generateError\">Generate Error</button>\n</template>\n\n<script>\nexport default {\n  methods: {\n    generateError() {\n      this.$refs.objEl.innerHTML = \"hi\";\n    }\n  }\n}\n</script> Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_unmounted.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_lifecycle-hooks11_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_lifecycle-hooks12_3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_lh_errorCaptured_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_unmounted.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_lh_renderTracked.php",
    "cours": {
      "titre": "Vue 'renderTracked' Lifecycle Hook",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_lh_renderTracked.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the renderTracked lifecycle hook to create an alert when the reactive component is initialized. export default {\n  data() {\n    return {\n      counter: 0\n    }\n  },\n  renderTracked(evt) {\n    console.log(\"renderTracked: \",evt);\n    alert(\"renderTracked\");\n  }\n} Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_errorCaptured.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_lh_renderTracked_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_errorCaptured.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_lh_renderTriggered.php",
    "cours": {
      "titre": "Vue 'renderTriggered' Lifecycle Hook",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_lh_renderTriggered.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the renderTriggered lifecycle hook to show an alert every time a render is triggered. export default {\n  data() {\n    return {\n      counter: 0\n    }\n  },\n  renderTriggered(evt) {\n    console.log(\"renderTriggered: \",evt)\n    alert(\"renderTriggered\");\n  }\n} Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_renderTracked.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_lh_renderTriggered_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_renderTracked.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_lh_activated.php",
    "cours": {
      "titre": "Vue 'activated' Lifecycle Hook",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_lh_activated.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the activated lifecycle hook to log every time the activated hook get called. export default {\n  mounted() {\n    console.log(\"mounted\");\n    const liEl = document.createElement(\"li\");\n    liEl.innerHTML = \"mounted\";\n    this.$refs.olEl.appendChild(liEl);\n  },\n  activated() {\n    console.log(\"activated\");\n    const liEl = document.createElement(\"li\");\n    liEl.innerHTML = \"activated\";\n    this.$refs.olEl.appendChild(liEl);\n  }\n} Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_renderTriggered.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_lifecycle-hooks13_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_renderTriggered.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_lh_deactivated.php",
    "cours": {
      "titre": "Vue 'deactivated' Lifecycle Hook",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_lh_deactivated.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the deactivated lifecycle hook to log every time the deactivated hook is called. export default {\n  data() {\n    return {\n      hookLog: []\n    }\n  },\n  deactivated() {\n    console.log(\"deactivated\")\n    this.hookLog.push(\"deactivated\");\n  }\n} Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_activated.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/vue/showvue.php?filename=demo_ref_lh_deactivated_3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_activated.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/ref_lh_serverPrefetch.php",
    "cours": {
      "titre": "Vue 'serverPrefetch' Lifecycle Hook",
      "description": "",
      "lien": "https://www.w3schools.com/vue/ref_lh_serverPrefetch.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Using the serverPrefetch lifecycle hook to fetch data on the server side. export default {\n  data() {\n    return {\n      data: null,\n    };\n  },\n  async serverPrefetch() {\n    const response = await fetch(\"https://random-data-api.com/api/v2/users\"); \n    this.data = await response.json();\n  }\n};"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_deactivated.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_deactivated.php"
          },
          {
            "title": "Vue Lifecycle Hooks Reference",
            "url": "https://www.w3schools.com/vue/vue_ref_lifecycle-hooks.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 4,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_examples.php",
    "cours": {
      "titre": "Vue Examples",
      "description": "",
      "lien": "https://www.w3schools.com/vue/vue_examples.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_serverPrefetch.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/ref_lh_serverPrefetch.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_exercises.php",
    "cours": {
      "titre": "Vue Exercises",
      "description": "",
      "lien": "https://www.w3schools.com/vue/vue_exercises.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_examples.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_examples.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_quiz.php",
    "cours": {
      "titre": "Vue Quiz",
      "description": "",
      "lien": "https://www.w3schools.com/vue/vue_quiz.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_exercises.php"
          },
          {
            "title": "Start the Vue Quiz ❯",
            "url": "https://www.w3schools.com/quiztest/quiztest.php?qtest=Vue"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_exercises.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_syllabus.php",
    "cours": {
      "titre": "Vue Syllabus",
      "description": "",
      "lien": "https://www.w3schools.com/vue/vue_syllabus.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Master fundamental Vue.js concepts and its reactive system architecture.",
            "Create and manage Vue components using Single-File Components (SFC) architecture.",
            "Apply Vue directives effectively (v-bind, v-if, v-for, v-model) and template syntax.",
            "Implement component communication and state management patterns.",
            "Develop single-page applications using Vue Router.",
            "Master component lifecycle hooks and their practical applications.",
            "Utilize Vue CLI and development tools for efficient development.",
            "Build robust forms with validation and user input handling.",
            "Design scalable and maintainable Vue applications.",
            "Create dynamic user interfaces with animations and transitions.",
            "Integrate external APIs and handle HTTP requests effectively."
          ],
          [
            "Web Development: Vue is essential for modern web applications.",
            "Front-end Development: Vue provides a complete framework for UI development.",
            "Single Page Applications: Vue excels at creating SPAs.",
            "User Interface Design: Vue offers powerful component-based UI development.",
            "Progressive Web Apps: Vue supports building PWAs out of the box.",
            "Interactive Applications: Vue enables creating dynamic user experiences.",
            "Enterprise Applications: Vue scales well for large applications."
          ],
          [
            "Lessons",
            "Exercises",
            "Quizzes"
          ],
          [
            "Learning paths",
            "Sandbox and lab environments",
            "Achievements",
            "And much more!"
          ],
          [
            "Collaboration",
            "File navigator",
            "Terminal & log",
            "Package manager",
            "Database",
            "Environment manager",
            "Analytics"
          ],
          [
            "Non-adaptive",
            "Adaptive"
          ]
        ],
        "examples": [
          "<h1>\"Hello, World!\" Example</h1> <div id=\"app\">{{ message }}</div>",
          "Example <h1>\"Hello, World!\" Example</h1> <div id=\"app\">{{ message }}</div> Try it Yourself »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_quiz.php"
          },
          {
            "title": "Try it Yourself »",
            "url": "https://www.w3schools.com/vue/tryit.php?filename=tryvue_helloWorld"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_quiz.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_study_plan.php",
    "cours": {
      "titre": "Vue Study Plan",
      "description": "",
      "lien": "https://www.w3schools.com/vue/vue_study_plan.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Essentials ($1.99 / month per student)",
            "Full Access ($5.99 / month per student)",
            "Calculate your price and order here ."
          ],
          [
            "Managing your classroom",
            "Tracking of student progress and reports",
            "Labs, assignments, and code challenges (prebuilt challenges or create your own ones)",
            "Auto-grading",
            "Teaching materials",
            "Certification exams"
          ],
          [
            "W3Schools Vue Tutorial",
            "Vue Exercises",
            "Vue Quiz",
            "Vue Challenges (Coding challenges)",
            "Vue Certification Exam (End of Pathway Exam)"
          ],
          [
            "Learning Paths You can add ready-made learning paths. The learning paths are by default ordered by our recommended order. You can change the order. You can add custom activities with text, links, or multi-media files. Drag and drop or click to make changes to the path.",
            "You can add ready-made learning paths.",
            "The learning paths are by default ordered by our recommended order.",
            "You can change the order.",
            "You can add custom activities with text, links, or multi-media files.",
            "Drag and drop or click to make changes to the path.",
            "Interactive Content Tutorials Try-its (test code snippets) Exercises Quiz Challenges Labs",
            "Tutorials",
            "Try-its (test code snippets)",
            "Exercises",
            "Quiz",
            "Challenges",
            "Labs",
            "Timeline and Pace You can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans). You can decide the learning pace for your class. Different study plans can be assigned to different students in the same class. The flexibility can help to make sure that everyone is challenged.",
            "You can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).",
            "You can decide the learning pace for your class.",
            "Different study plans can be assigned to different students in the same class.",
            "The flexibility can help to make sure that everyone is challenged.",
            "Track Student Progress There are tools to track student progress. The analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more. The challenges can be auto-graded or manually graded. The results are available to you as a teacher.",
            "There are tools to track student progress.",
            "The analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.",
            "The challenges can be auto-graded or manually graded. The results are available to you as a teacher.",
            "End of Pathway Exam The Vue study plan aligns with the Vue Certification Exam. The exam can be taken at the end of the study plan, at your selected date. The exam summarizes the Vue Tutorial. You get reports of the students' results.",
            "The Vue study plan aligns with the Vue Certification Exam.",
            "The exam can be taken at the end of the study plan, at your selected date.",
            "The exam summarizes the Vue Tutorial.",
            "You get reports of the students' results.",
            "Accessibility Study plans and learning materials are accessible on desktops, tablets, and smartphones. This ensures students can learn anytime, anywhere.",
            "Study plans and learning materials are accessible on desktops, tablets, and smartphones.",
            "This ensures students can learn anytime, anywhere."
          ],
          [
            "Week 1: Basic and Dynamic Rendering, Event Control",
            "Week 2: Data Manipulation, Component Essentials, Lifeycle, Routing and API, Vue Certification Exam"
          ]
        ],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_syllabus.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_syllabus.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_server.php",
    "cours": {
      "titre": "Vue.js Server",
      "description": "",
      "lien": "https://www.w3schools.com/vue/vue_server.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_study_plan.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_study_plan.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/vue/vue_exam.php",
    "cours": {
      "titre": "W3Schools Vue Certificate",
      "description": "How Does It Work? Study for free at W3Schools.com Study at your own speed Test your skills with W3Schools online quizzes Apply for your certificate by paying an exam fee Take your exam online, at any time, and from any location",
      "lien": "https://www.w3schools.com/vue/vue_exam.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_server.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/vue/vue_server.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://campus.w3schools.com/collections/certifications/products/vue-js-certification-exam?utm_source=w3schools&utm_medium=referral&utm_campaign=vue_exam&utm_content=get_your_certificate",
    "cours": {
      "id": "",
      "contenus": {
        "texte": "",
        "lienVideo": ""
      },
      "categories": [],
      "niveau": 1,
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  }
]