[
  {
    "url": "https://www.w3schools.com/js/default.asp",
    "cours": {
      "titre": "JavaScriptTutorial",
      "description": "JavaScript is the world's most popular programming language.JavaScript is the programming language of the Web.JavaScript is easy to learn.This tutorial will teach you JavaScript from basic to advanced.Start learning JavaScript now »",
      "lien": "https://www.w3schools.com/js/default.asp",
      "contenus": {
        "paragraphs": [
          "JavaScript is the world's most popular programming language.",
          "JavaScript is the programming language of the Web.",
          "JavaScript is easy to learn.",
          "This tutorial will teach you JavaScript from basic to advanced.",
          "With our \"Try it Yourself\" editor, you can edit the source code and view \nthe result.",
          "",
          "Try it Yourself »",
          "We recommend reading this tutorial, in the sequence listed in the menu.",
          "If you have a large screen, the menu will always be present on the left.",
          "If you have a small screen, open the menu by clicking the top menu sign☰.",
          "Examples are better than 1000 words. Examples are often easier to understand \nthan text explanations.",
          "This tutorial supplements all explanations with clarifying \"Try it Yourself\" examples.",
          "If you try all the examples, you will learn a lot about JavaScript, in a very short time!",
          "JavaScript is one of the3 languagesall web developersmustlearn:",
          "1.HTMLto define the content of web pages",
          "2.CSSto specify the layout of web pages",
          "3.JavaScriptto program the behavior of web pages",
          "This tutorial covers every version of JavaScript:",
          "In this tutorial, the learning speed is your choice.",
          "Everything is up to you.",
          "If you are struggling, take a break, or re-read the material.",
          "Alwaysmake sure you understandallthe \"Try-it-Yourself\" \nexamples.",
          "The only way to become a clever programmer is to:\nPractice. Practice. Practice. Code. Code. Code !",
          "Many chapters in this tutorial end with an exercise where you can check your level of knowledge.",
          "See all JavaScript Exercises",
          "You don't have to get or download JavaScript.",
          "JavaScript is already running in your browser on your computer,\non your tablet, and on your smart-phone.",
          "JavaScript is free to use for everyone.",
          "Track your progress with the free \"My Learning\" program here at W3Schools.",
          "Log in to your account, and start earning points!",
          "This is an optional feature. You can study at W3Schools without using My Learning.",
          "W3Schools maintains a complete JavaScript reference, including all HTML and browser objects.",
          "The reference contains examples for all properties, methods and events, and \nis continuously updated according to the latest web standards.",
          "Test your JavaScript skills at W3Schools!",
          "Start JavaScript Quiz!",
          "Get certified by completingthecourse"
        ],
        "lists": [
          [
            "The Original JavaScript ES1 ES2 ES3 (1997-1999)",
            "The First Main Revision ES5 (2009)",
            "The Second Revision ES6 (2015)",
            "The Yearly Additions (2016, 2017 ... 2021, 2022)"
          ],
          [
            "How do I get JavaScript?",
            "Where can I download JavaScript?",
            "Is JavaScript Free?"
          ]
        ],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_intro.asp",
    "cours": {
      "titre": "JavaScriptIntroduction",
      "description": "This page contains some examples of what JavaScript can do.",
      "lien": "https://www.w3schools.com/js/js_intro.asp",
      "contenus": {
        "paragraphs": [
          "This page contains some examples of what JavaScript can do.",
          "One of many JavaScript HTML methods isgetElementById().",
          "The example below \"finds\" an HTML element (with id=\"demo\"), \nand changes the element content (innerHTML) to \"Hello JavaScript\":",
          "JavaScript accepts both double and single quotes:",
          "In this example JavaScript changes the value of thesrc(source) attribute of an<img>tag:",
          "Try it Yourself »",
          "Changing the style of an HTML element, is a variant of changing an HTML \nattribute:",
          "Hiding HTML elements can be done by changing thedisplaystyle:",
          "Showing hidden HTML elements can also be done by changing thedisplaystyle:",
          "JavaScript andJavaare completely different languages, both in concept \nand design.",
          "JavaScript was invented by Brendan Eich in 1995, and became an ECMA standard  \nin 1997.",
          "ECMA-262 is the official name of the standard. ECMAScript is the official name of the language."
        ],
        "lists": [],
        "examples": [
          "document.getElementById(\"demo\").innerHTML = \"Hello JavaScript\";",
          "document.getElementById('demo').innerHTML = 'Hello JavaScript';",
          "document.getElementById(\"demo\").style.fontSize = \"35px\";",
          "document.getElementById(\"demo\").style.display = \"none\";",
          "document.getElementById(\"demo\").style.display = \"block\";"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_whereto.asp",
    "cours": {
      "titre": "JavaScriptWhere To",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_whereto.asp",
      "contenus": {
        "paragraphs": [
          "In HTML, JavaScript code is inserted between<script>and</script>tags.",
          "Try it Yourself »",
          "Old JavaScript examples may use a type attribute: <script type=\"text/javascript\">.The type attribute is not required. JavaScript is the default scripting language in HTML.",
          "A JavaScriptfunctionis a block of JavaScript code, that can be executed when \"called\" for.",
          "For example, a function can be called when aneventoccurs, like when the user clicks a button.",
          "You will learn much more about functions and events in later chapters.",
          "You can place any number of scripts in an HTML document.",
          "Scripts can be placed in the<body>, or in the<head>section of an HTML page, or in both.",
          "In this example, a JavaScriptfunctionis placed in the<head>section \nof an HTML page.",
          "The function is invoked (called) when a button is clicked:",
          "<h2>Demo JavaScript in Head</h2><p id=\"demo\">A Paragraph</p><button type=\"button\" onclick=\"myFunction()\">Try \nit</button>",
          "</body></html>",
          "In this example, a JavaScriptfunctionis placed in the<body>section of an HTML page.",
          "The function is invoked (called) when a button is clicked:",
          "Placing scripts at the bottom of the <body> element improves the display \nspeed, because script interpretation slows down the display.",
          "Scripts can also be placed in external files:",
          "External scripts are practical when the same code is used in many different web pages.",
          "JavaScript files have the file extension.js.",
          "To use an external script, put the name of the script file in thesrc(source) attribute of \na<script>tag:",
          "You can place an external script reference in<head>or<body>as you like.",
          "The script will behave as if it was located exactly where the<script>tag is located.",
          "External scripts cannot contain<script>tags.",
          "Placing scripts in external files has some advantages:",
          "To add several script files to one page  - use several script tags:",
          "An external script can be referenced in 3 different ways:",
          "This example uses afull URLto link to myScript.js:",
          "Try it Yourself »",
          "This example uses afile pathto link to myScript.js:",
          "Try it Yourself »",
          "This example uses no path to link to myScript.js:",
          "Try it Yourself »",
          "You can read more about file paths in the chapterHTML \nFile Paths."
        ],
        "lists": [
          [
            "It separates HTML and code",
            "It makes HTML and JavaScript easier to read and maintain",
            "Cached JavaScript files can speed up page loads"
          ],
          [
            "With a full URL (a full web address)",
            "With a file path (like /js/)",
            "Without any path"
          ]
        ],
        "examples": [
          "<script>document.getElementById(\"demo\").innerHTML = \"My First JavaScript\";</script>",
          "<!DOCTYPE html><html><head><script>function myFunction() {document.getElementById(\"demo\").innerHTML = \"Paragraph changed.\";}</script></head><body><h2>Demo JavaScript in Head</h2><p id=\"demo\">A Paragraph</p><button type=\"button\" onclick=\"myFunction()\">Try \nit</button></body></html>",
          "<!DOCTYPE html><html><body><h2>Demo JavaScript in Body</h2><p id=\"demo\">A Paragraph</p><button type=\"button\" onclick=\"myFunction()\">Try \nit</button><script>function myFunction() {document.getElementById(\"demo\").innerHTML = \"Paragraph changed.\";}</script></body></html>",
          "function myFunction() {document.getElementById(\"demo\").innerHTML = \"Paragraph changed.\";}",
          "<script src=\"myScript.js\"></script>",
          "<script src=\"myScript1.js\"></script><script src=\"myScript2.js\"></script>",
          "<script src=\"https://www.w3schools.com/js/myScript.js\"></script>",
          "<script src=\"/js/myScript.js\"></script>",
          "<script src=\"myScript.js\"></script>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_output.asp",
    "cours": {
      "titre": "JavaScriptOutput",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_output.asp",
      "contenus": {
        "paragraphs": [
          "JavaScript can \"display\" data in different ways:",
          "To access an HTML element, JavaScript can use thedocument.getElementById(id)method.",
          "Theidattribute defines the HTML element. TheinnerHTMLproperty defines the HTML content:",
          "Changing the innerHTML property of an HTML element\nis a common way to display data in HTML.",
          "For testing purposes, it is convenient to usedocument.write():",
          "Using document.write() after an HTML document is loaded, willdelete all existing HTML:",
          "The document.write() method should only be used for testing.",
          "You can use an alert box to display data:",
          "You can skip thewindowkeyword.",
          "In JavaScript, the window object is the global scope object. This means that variables, properties, and methods by default belong to the window object.\nThis also means that specifying thewindowkeyword is optional:",
          "For debugging purposes, you can call theconsole.log()method\nin the browser to display data.",
          "You will learn more about debugging in a later chapter.",
          "JavaScript does not have any print object or print methods.",
          "You cannot access output devices from JavaScript.",
          "The only exception is that you can call thewindow.print()method in\nthe browser to print the content of the current window."
        ],
        "lists": [
          [
            "Writing into an HTML element, usinginnerHTML.",
            "Writing into the HTML output usingdocument.write().",
            "Writing into an alert box, usingwindow.alert().",
            "Writing into the browser console, usingconsole.log()."
          ]
        ],
        "examples": [
          "<!DOCTYPE html><html><body><h1>My First Web Page</h1><p>My First Paragraph</p><p id=\"demo\"></p><script>document.getElementById(\"demo\").innerHTML = 5 + 6;</script></body></html>",
          "<!DOCTYPE html><html><body><h1>My First Web Page</h1><p>My first paragraph.</p><script>document.write(5 + 6);</script></body></html>",
          "<!DOCTYPE html><html><body><h1>My First Web Page</h1><p>My first paragraph.</p><button type=\"button\" onclick=\"document.write(5 + 6)\">Try it</button></body></html>",
          "<!DOCTYPE html><html><body><h1>My First Web Page</h1><p>My first paragraph.</p><script>window.alert(5 + 6);</script></body></html>",
          "<!DOCTYPE html><html><body><h1>My First Web Page</h1><p>My first paragraph.</p><script>alert(5 + 6);</script></body></html>",
          "<!DOCTYPE html><html><body><script>console.log(5 + 6);</script></body></html>",
          "<!DOCTYPE html><html><body><button onclick=\"window.print()\">Print this page</button></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_statements.asp",
    "cours": {
      "titre": "JavaScriptStatements",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_statements.asp",
      "contenus": {
        "paragraphs": [
          "Acomputer programis a list of \"instructions\" to be \n\"executed\" by a computer.",
          "In a programming language, these programming instructions are calledstatements.",
          "AJavaScript programis a list of programmingstatements.",
          "In HTML, JavaScript programs are executed by the web browser.",
          "JavaScript statements are composed of:",
          "Values, Operators, Expressions, Keywords, \nand Comments.",
          "This statement tells the browser to write \"Hello Dolly.\" \ninside an HTML element with id=\"demo\":",
          "Most JavaScript \nprograms contain many JavaScript statements.",
          "The statements are executed, one by one, in the \nsame order as they are written.",
          "JavaScript programs (and JavaScript statements) are often called JavaScript code.",
          "Semicolons separate JavaScript statements.",
          "Add a semicolon at the end of each executable statement:",
          "When separated by semicolons, multiple statements on one line are allowed:",
          "On the web, you might see examples without semicolons.Ending statements with semicolon is not required, but highly recommended.",
          "JavaScript ignores multiple spaces. You can add white space to your script to make it more readable.",
          "The following lines are equivalent:",
          "A good practice is to put spaces around operators ( = + - * / ):",
          "For best readability, programmers often like to avoid code lines longer than 80 \ncharacters.",
          "If a JavaScript statement does not fit on one line, the best place to break \nit is after an operator:",
          "JavaScript statements can be grouped together in code blocks, inside curly \nbrackets {...}.",
          "The purpose of code blocks is to define statements to be executed together.",
          "One place you will find statements grouped together in blocks, is in \nJavaScript functions:",
          "In this tutorial we use 2 spaces of indentation for code blocks.You will learn more about functions later in this tutorial.",
          "JavaScript statements often start with akeywordto identify the JavaScript action to be performed.",
          "OurReserved Words Referencelists all JavaScript keywords.",
          "Here is a list of some of the keywords you will learn about in \nthis tutorial:",
          "JavaScript keywords are reserved words. Reserved words cannot be used as names for variables."
        ],
        "lists": [],
        "examples": [
          "let x, y, z;    // Statement 1x = 5;          // Statement 2y = 6;          // Statement 3z = x + y;      //  Statement 4",
          "document.getElementById(\"demo\").innerHTML = \"Hello Dolly.\";",
          "let a, b, c;  // Declare 3 variablesa = 5;        // Assign the value 5 to ab = 6;        // Assign the \n  value 6 to bc = a + b;    // Assign the sum of a and b to c",
          "a = 5; b = 6; c = a + b;",
          "let person = \"Hege\";let person=\"Hege\";",
          "let x = y + z;",
          "document.getElementById(\"demo\").innerHTML =\"Hello Dolly!\";",
          "function myFunction() {document.getElementById(\"demo1\").innerHTML = \"Hello Dolly!\";document.getElementById(\"demo2\").innerHTML = \"How are you?\";}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_syntax.asp",
    "cours": {
      "titre": "JavaScriptSyntax",
      "description": "JavaScript syntax is the set of rules, how \nJavaScript programs are constructed:// How to create variables:var x;let y;// How to use variables:x = 5;y = 6;let z = x + y;",
      "lien": "https://www.w3schools.com/js/js_syntax.asp",
      "contenus": {
        "paragraphs": [
          "JavaScript syntax is the set of rules, how \nJavaScript programs are constructed:",
          "The JavaScript syntax defines two types of values:",
          "Fixed values are calledLiterals.",
          "Variable values are calledVariables.",
          "The two most important syntax rules for fixed values are:",
          "1.Numbersare written with or \nwithout decimals:",
          "2.Stringsare text, written within double or single quotes:",
          "In a programming language,variablesare used tostoredata values.",
          "JavaScript uses the keywordsvar,letandconsttodeclarevariables.",
          "Anequal signis used toassign valuesto variables.",
          "In this example, x is defined as a variable. Then, x is \nassigned (given) the value \n6:",
          "JavaScript usesarithmetic operators(+-*/) tocomputevalues:",
          "JavaScript uses anassignment operator(=) toassignvalues to variables:",
          "An expression is a combination of values, variables, and operators, \nwhich computes to a value.",
          "The computation is called an evaluation.",
          "For example, 5 * 10 evaluates to 50:",
          "Expressions can also contain variable values:",
          "The values can be of various types, such as numbers and strings.",
          "For example, \"John\" + \" \" + \"Doe\", evaluates to \"John Doe\":",
          "JavaScriptkeywordsare used to \nidentify actions to be performed.",
          "Theletkeyword tells the browser to create variables:",
          "Thevarkeyword also tells the browser to create variables:",
          "In these examples, usingvarorletwill produce the same result.",
          "You will learn more aboutvarandletlater in this tutorial.",
          "Not all JavaScript statements are \"executed\".",
          "Code after double slashes//or between/*and*/is treated as acomment.",
          "Comments are ignored, and will not be \nexecuted:",
          "You will learn more about comments in a later chapter.",
          "Identifiers are JavaScript names.",
          "Identifiers are used to name variables and keywords, and functions.",
          "The rules for legal names are the same in most programming languages.",
          "A JavaScript name must begin with:",
          "Subsequent characters may be letters, digits, underscores, or dollar signs.",
          "Numbers are not allowed as the first character in names.",
          "This way JavaScript can easily distinguish identifiers from numbers.",
          "All JavaScript identifiers arecase sensitive.",
          "The variableslastNameandlastname, \nare two different variables:",
          "JavaScript does not interpretLETorLetas the keywordlet.",
          "Historically, programmers have used different ways of joining multiple words into one variable name:",
          "Hyphens:",
          "first-name, last-name, master-card, inter-city.",
          "Hyphens are not allowed in JavaScript. They are reserved for subtractions.",
          "Underscore:",
          "first_name, last_name, master_card, inter_city.",
          "Upper Camel Case (Pascal Case):",
          "FirstName, LastName, MasterCard, InterCity.",
          "Lower Camel Case:JavaScript programmers tend to use camel case that starts with a lowercase letter:firstName, lastName, masterCard, interCity.JavaScript Character SetJavaScript uses theUnicodecharacter set.Unicode covers (almost) all the characters, punctuations, and symbols in the world.For a closer look, please study ourComplete Unicode Reference.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "Lower Camel Case:",
          "JavaScript programmers tend to use camel case that starts with a lowercase letter:",
          "firstName, lastName, masterCard, interCity.",
          "JavaScript uses theUnicodecharacter set.",
          "Unicode covers (almost) all the characters, punctuations, and symbols in the world.",
          "For a closer look, please study ourComplete Unicode Reference."
        ],
        "lists": [
          [
            "Fixed values",
            "Variable values"
          ],
          [
            "A letter (A-Z or a-z)",
            "A dollar sign ($)",
            "Or an underscore (_)"
          ]
        ],
        "examples": [
          "// How to create variables:var x;let y;// How to use variables:x = 5;y = 6;let z = x + y;",
          "10.501001",
          "\"John Doe\"'John Doe'",
          "let x;x = 6;",
          "(5 + 6) * 10",
          "let x, y;x = 5;y = 6;",
          "5 * 10",
          "x * 10",
          "\"John\" + \" \" + \"Doe\"",
          "let x, y;x = 5 + 6;y = x * 10;",
          "var x, y;x = 5 + 6;y = x * 10;",
          "let x = 5;   // I will be executed// x = 6;   I will \nNOT be executed",
          "let lastname, lastName;lastName = \"Doe\";lastname = \"Peterson\";"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_comments.asp",
    "cours": {
      "titre": "JavaScriptComments",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_comments.asp",
      "contenus": {
        "paragraphs": [
          "JavaScript comments can be used to explain JavaScript code, and \nto make it more readable.",
          "JavaScript comments can also be used to prevent execution, when \ntesting alternative code.",
          "Single line comments start with//.",
          "Any text between//and the end of the line will be ignored by JavaScript \n(will not be executed).",
          "This example uses a single-line comment before each code line:",
          "This example uses a single line comment at the end of each line \nto explain the code:",
          "Multi-line comments start with/*and end with*/.",
          "Any text between/*and*/will be ignored by JavaScript.",
          "This example uses a multi-line comment (a comment block) to explain the code:",
          "It is most common to use single line comments.Block comments are often \nused for formal documentation.",
          "Using comments to prevent execution of code is suitable for \ncode testing.",
          "Adding//in front of a code line changes the code lines from an executable line to \na comment.",
          "This example uses // to prevent execution of one of the code lines:",
          "This example uses a comment block to prevent execution of \nmultiple lines:"
        ],
        "lists": [],
        "examples": [
          "// Change heading:document.getElementById(\"myH\").innerHTML = \"My First Page\";// Change paragraph:document.getElementById(\"myP\").innerHTML = \"My first paragraph.\";",
          "let x = 5;      // Declare x, give it the value of 5let y = x + 2;  // Declare y, give it the value of x + 2",
          "/*The code below will changethe heading with id = \"myH\"and the paragraph with id = \"myP\"in my web page:*/document.getElementById(\"myH\").innerHTML = \"My First Page\";document.getElementById(\"myP\").innerHTML = \"My first paragraph.\";",
          "//document.getElementById(\"myH\").innerHTML = \"My First Page\";document.getElementById(\"myP\").innerHTML = \"My first paragraph.\";",
          "/*document.getElementById(\"myH\").innerHTML = \"My First Page\";document.getElementById(\"myP\").innerHTML = \"My first paragraph.\";*/"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_variables.asp",
    "cours": {
      "titre": "JavaScriptVariables",
      "description": "Variables are Containers for Storing DataJavaScript Variables can be declared in 4 ways:AutomaticallyUsingvarUsingletUsingconst",
      "lien": "https://www.w3schools.com/js/js_variables.asp",
      "contenus": {
        "paragraphs": [
          "JavaScript Variables can be declared in 4 ways:",
          "In this first example,x,y, andzare undeclared variables.",
          "They are automatically declared when first used:",
          "It is considered good programming practice to always declare variables before use.",
          "From the examples you can guess:",
          "Thevarkeyword was used in all JavaScript code from 1995 to 2015.",
          "Theletandconstkeywords were added to JavaScript in 2015.",
          "Thevarkeyword should only be used in code written for older browsers.",
          "The two variablesprice1andprice2are declared with theconstkeyword.",
          "These are constant values and cannot be changed.",
          "The variabletotalis declared with theletkeyword.",
          "The valuetotalcan be changed.",
          "1. Always declare variables",
          "2. Always useconstif the value should not be changed",
          "3. Always useconstif the type should not be changed (Arrays and Objects)",
          "4. Only useletif you can't useconst",
          "5. Only usevarif you MUST support old browsers.",
          "Just like in algebra, variables hold values:",
          "Just like in algebra, variables are used in expressions:",
          "From the example above, you can guess that the total is calculated to be 11.",
          "Variables are containers for storing values.",
          "All JavaScriptvariablesmust beidentifiedwithunique names.",
          "These unique names are calledidentifiers.",
          "Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).",
          "The general rules for constructing names for variables (unique identifiers) are:",
          "JavaScript identifiers are case-sensitive.",
          "In JavaScript, the equal sign (=) is an \"assignment\" operator, not an \n\"equal to\" operator.",
          "This is different from algebra. The following does not make sense in \nalgebra:",
          "In JavaScript, however, it makes perfect sense: it assigns the value of x + 5 to \nx.",
          "(It calculates the value of x + 5 and puts the result into x. The value of x \nis incremented by 5.)",
          "The \"equal to\" operator is written like==in JavaScript.",
          "JavaScript variables can hold numbers like 100 and text values like \"John \nDoe\".",
          "In programming, text values are called text strings.",
          "JavaScript can handle many types of data, but for now, just think of numbers and strings.",
          "Strings are written inside double or single quotes. Numbers are written \nwithout quotes.",
          "If you put a number in quotes, it will be treated as a text string.",
          "Creating a variable in JavaScript is called \"declaring\" a variable.",
          "You declare a JavaScript variable with thevaror theletkeyword:",
          "After the declaration, the variable has no value (technically it isundefined).",
          "Toassigna value to the variable, use the equal sign:",
          "You can also assign a value to the variable when you declare it:",
          "In the example below, we create a variable calledcarNameand assign the value \n\"Volvo\" to it.",
          "Then we \"output\" the value inside an HTML paragraph with id=\"demo\":",
          "It's a good programming practice to declare all variables at the beginning of a script.",
          "You can declare many variables in one statement.",
          "Start the statement \nwithletand separate the variables bycomma:",
          "A declaration can span multiple lines:",
          "In computer programs, variables are often declared without a value. The value \ncan be something that has to be calculated, or something that will be provided \nlater, like user input.",
          "A variable declared without a value will have the valueundefined.",
          "The variable carName will have the valueundefinedafter the execution of this statement:",
          "If you re-declare a JavaScript variable declared withvar, it will not lose its value.",
          "The variablecarNamewill still have the value \"Volvo\" after the execution of these statements:",
          "You cannot re-declare a variable declared withletorconst.",
          "This will not work:",
          "As with algebra, you can do arithmetic with JavaScript variables, using \noperators like=and+:",
          "You can also add strings, but strings will be concatenated:",
          "Also try this:",
          "If you put a number in quotes, the rest of the numbers will be treated as strings, and concatenated.",
          "Now try this:",
          "Since JavaScript treats a dollar sign as a letter, identifiers containing $ are valid variable names:",
          "Using the dollar sign is not very common in JavaScript,\nbut professional programmers often use it \nas an alias for the main function in a JavaScript library.",
          "In the JavaScript library jQuery, for instance, the main function$is used to select HTML elements.\nIn jQuery$(\"p\");means \"select all p elements\".",
          "Since JavaScript treats underscore as a letter, identifiers containing _ are valid variable names:Examplelet _lastName = \"Johnson\";let _x = 2;let _100 = 5;Try it Yourself »Using the underscore is not very common in JavaScript,\n\nbut a convention among professional programmers is to use it as an alias for\n\"private (hidden)\" variables.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "Since JavaScript treats underscore as a letter, identifiers containing _ are valid variable names:",
          "Using the underscore is not very common in JavaScript,\n\nbut a convention among professional programmers is to use it as an alias for\n\"private (hidden)\" variables."
        ],
        "lists": [
          [
            "Automatically",
            "Usingvar",
            "Usinglet",
            "Usingconst"
          ],
          [
            "x stores the value 5",
            "y stores the value 6",
            "z stores the value 11"
          ],
          [
            "Names can contain letters, digits, underscores, and dollar signs.",
            "Names must begin with a letter.",
            "Names can also begin with $ and _ (but we will not use it in this tutorial).",
            "Names are case sensitive (y and Y are different variables).",
            "Reserved words (like JavaScript keywords) cannot be used as names."
          ]
        ],
        "examples": [
          "x = 5;y = 6;z = x + y;",
          "var x = 5;var y = 6;var z = x + y;",
          "let x = 5;let y = 6;let z = x + y;",
          "const x = 5;const y = 6;const z = x + y;",
          "const price1 = 5;const price2 = 6;let total = price1 + price2;",
          "let x = 5;let y = 6;",
          "let z = x + y;",
          "x = x + 5",
          "const pi = 3.14;let person = \"John Doe\";let answer = 'Yes I am!';",
          "var carName;",
          "let carName;",
          "carName = \"Volvo\";",
          "let carName = \"Volvo\";",
          "<p id=\"demo\"></p><script>let carName = \"Volvo\";document.getElementById(\"demo\").innerHTML = carName;</script>",
          "let person = \"John Doe\", carName = \"Volvo\", price = 200;",
          "let person = \"John Doe\",carName = \"Volvo\",price = 200;",
          "let carName;",
          "var carName = \"Volvo\";var carName;",
          "let carName = \"Volvo\";let carName;",
          "let x = 5 + 2 + 3;",
          "let x = \"John\" + \" \" + \"Doe\";",
          "let x = \"5\" + 2 + 3;",
          "let x = 2 + 3 + \"5\";",
          "let $ = \"Hello World\";let $$$ = 2;let $myMoney = 5;",
          "let _lastName = \"Johnson\";let _x = 2;let _100 = 5;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_let.asp",
    "cours": {
      "titre": "JavaScript Let",
      "description": "Theletkeyword was introduced inES6 (2015)Variables declared withlethaveBlock ScopeVariables declared withletmust beDeclaredbefore useVariables declared withletcannot beRedeclaredin the same scope",
      "lien": "https://www.w3schools.com/js/js_let.asp",
      "contenus": {
        "paragraphs": [
          "Theletkeyword was introduced inES6 (2015)",
          "Variables declared withlethaveBlock Scope",
          "Variables declared withletmust beDeclaredbefore use",
          "Variables declared withletcannot beRedeclaredin the same scope",
          "Before ES6 (2015), JavaScript did not haveBlock Scope.",
          "JavaScript hadGlobal ScopeandFunction Scope.",
          "ES6 introduced the two new JavaScript keywords:letandconst.",
          "These two keywords providedBlock Scopein JavaScript:",
          "Variables declared inside a { } block cannot be accessed \nfrom outside the block:",
          "Variables declared with thevaralways haveGlobal Scope.",
          "Variables declared with thevarkeyword can NOT have block scope:",
          "Variables declared withvarinside a { } block can be accessed from \noutside the block:",
          "Variables defined withletcan notbe redeclared.",
          "You can not accidentally redeclare a variable declared withlet.",
          "Withletyoucan notdo this:",
          "Variables defined withvarcanbe redeclared.",
          "Withvaryoucando this:",
          "Redeclaring a variable using thevarkeyword can impose problems.",
          "Redeclaring a variable inside a block will also redeclare the variable \noutside the block:",
          "Redeclaring a variable using theletkeyword can solve this problem.",
          "Redeclaring a variable inside a block will not redeclare the variable outside \nthe block:",
          "letandconsthaveblock scope.",
          "letandconstcan not beredeclared.",
          "letandconstmust bedeclaredbefore use.",
          "letandconstdoesnot bindtothis.",
          "letandconstarenot hoisted.",
          "vardoes not have to be declared.",
          "varis hoisted.",
          "varbinds to this.",
          "Theletandconstkeywords are\nnot supported in Internet Explorer 11 or earlier.",
          "The following table defines the first browser versions with full support:",
          "Redeclaring a JavaScript variable withvaris allowed \nanywhere in a program:",
          "Withlet, redeclaring a variable in the same block is NOT allowed:",
          "Redeclaring a variable withlet, in another block, IS allowed:",
          "Variables defined withvararehoistedto the top \nand can be initialized at any time.Meaning: You can use the variable before it is declared:ExampleThis is OK:carName = \"Volvo\";var carName;Try it Yourself »If you want to learn more about hoisting, study the chapterJavaScript Hoisting.Variables defined withletare also hoisted to the top \nof the block, but not initialized.Meaning: Using aletvariable before it is declared will result in aReferenceError:ExamplecarName = \"Saab\";let carName = \"Volvo\";Try it Yourself »❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "Meaning: You can use the variable before it is declared:",
          "This is OK:",
          "If you want to learn more about hoisting, study the chapterJavaScript Hoisting.Variables defined withletare also hoisted to the top \nof the block, but not initialized.Meaning: Using aletvariable before it is declared will result in aReferenceError:ExamplecarName = \"Saab\";let carName = \"Volvo\";Try it Yourself »❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "Variables defined withletare also hoisted to the top \nof the block, but not initialized.",
          "Meaning: Using aletvariable before it is declared will result in aReferenceError:"
        ],
        "lists": [],
        "examples": [
          "{let x = 2;}// x can NOT be used here",
          "{var x = 2;}// x CAN be used here",
          "let x = \"John Doe\";let x = 0;",
          "var x = \"John Doe\";var x = 0;",
          "var x = 10;// Here x is 10{var x = 2;// Here x is 2}// Here x is 2",
          "let x = 10;// Here x is 10{let x = 2;// Here x is 2}// Here x is 10",
          "var x = 2;// Now x is 2var x = 3;// Now x is 3",
          "var x = 2;   // Allowedlet x = 3;   // Not allowed{let x = 2;   // Allowedlet x = 3;   // Not allowed}{let x = 2;   // Allowedvar x = 3;   // Not allowed}",
          "let x = 2;   // Allowed{let x = 3;   // Allowed}{let x = 4;    // Allowed}",
          "carName = \"Volvo\";var carName;",
          "carName = \"Saab\";let carName = \"Volvo\";"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_const.asp",
    "cours": {
      "titre": "JavaScriptConst",
      "description": "Theconstkeyword was introduced inES6 (2015)Variables defined withconstcannot beRedeclaredVariables defined withconstcannot beReassignedVariables defined withconsthaveBlock Scope",
      "lien": "https://www.w3schools.com/js/js_const.asp",
      "contenus": {
        "paragraphs": [
          "Theconstkeyword was introduced inES6 (2015)",
          "Variables defined withconstcannot beRedeclared",
          "Variables defined withconstcannot beReassigned",
          "Variables defined withconsthaveBlock Scope",
          "A variable defined with theconstkeyword cannot be reassigned:",
          "JavaScriptconstvariables must be assigned a value when they are declared:",
          "Always declare a variable withconstwhen you know that\nthe value should not be changed.",
          "Useconstwhen you declare:",
          "The keywordconstis a little misleading.",
          "It does not define a constant value. It defines a constant reference to a value.",
          "Because of this you can NOT:",
          "But you CAN:",
          "You can change the elements of a constant array:",
          "But you can NOT reassign the array:",
          "You can change the properties of a constant object:",
          "But you can NOT reassign the object:",
          "letandconsthaveblock scope.",
          "letandconstcan not beredeclared.",
          "letandconstmust bedeclaredbefore use.",
          "letandconstdoesnot bindtothis.",
          "letandconstarenot hoisted.",
          "vardoes not have to be declared.",
          "varis hoisted.",
          "varbinds to this.",
          "Theletandconstkeywords are\nnot supported in Internet Explorer 11 or earlier.",
          "The following table defines the first browser versions with full support:",
          "Declaring a variable withconstis similar toletwhen it comes toBlock Scope.",
          "The x declared in the block, in this example, is not the same as the x declared outside the block:",
          "You can learn more about block scope in the chapterJavaScript Scope.",
          "Redeclaring a JavaScriptvarvariable is allowed \nanywhere in a program:",
          "Redeclaring an existingvarorletvariable toconst, in the same scope, is not allowed:",
          "Reassigning an existingconstvariable, in the same scope, is not allowed:",
          "Redeclaring a variable withconst, in another scope, or in another block, is allowed:",
          "Variables defined withvararehoistedto the top \nand can be initialized at any time.",
          "Meaning: You can use the variable before it is declared:",
          "This is OK:",
          "If you want to learn more about hoisting, study the chapterJavaScript Hoisting.Variables defined withconstare also hoisted to the top,\nbut not initialized.Meaning: Using aconstvariable before it is declared will result in aReferenceError:Examplealert (carName);const carName = \"Volvo\";Try it Yourself »❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "Variables defined withconstare also hoisted to the top,\nbut not initialized.",
          "Meaning: Using aconstvariable before it is declared will result in aReferenceError:"
        ],
        "lists": [
          [
            "A new Array",
            "A new Object",
            "A new Function",
            "A new RegExp"
          ],
          [
            "Reassign a constant value",
            "Reassign a constant array",
            "Reassign a constant object"
          ],
          [
            "Change the elements of constant array",
            "Change the properties of constant object"
          ]
        ],
        "examples": [
          "const PI = 3.141592653589793;PI = 3.14;      // This will give an errorPI = PI + 10;   // This will also give an error",
          "const PI = 3.14159265359;",
          "const PI;PI = 3.14159265359;",
          "// You can create a constant array:const cars = [\"Saab\", \"Volvo\", \"BMW\"];// You can change an element:cars[0] = \"Toyota\";// You can add an element:cars.push(\"Audi\");",
          "const cars = [\"Saab\", \"Volvo\", \"BMW\"];cars = [\"Toyota\", \"Volvo\", \"Audi\"];    // ERROR",
          "// You can create a const object:const car = {type:\"Fiat\", model:\"500\", color:\"white\"};// You can change a property:car.color = \"red\";// You can add a property:car.owner = \"Johnson\";",
          "const car = {type:\"Fiat\", model:\"500\", color:\"white\"};car = {type:\"Volvo\", model:\"EX60\", color:\"red\"};    // \n  ERROR",
          "const x = 10;// Here x is 10{const x = 2;// Here x is 2}// Here x is 10",
          "var x = 2;     // Allowedvar x = 3;     // Allowedx = 4;         // Allowed",
          "var x = 2;     // Allowedconst x = 2;   // Not allowed{let x = 2;     // Allowedconst x = 2;   // Not allowed}{const x = 2;   // Allowedconst x = 2;   // Not allowed}",
          "const x = 2;     // Allowedx = 2;           // Not allowedvar x = 2;       // Not allowedlet x = 2;       // Not allowedconst x = 2;     // Not allowed{const x = 2;   // Allowedx = 2;         \n  // Not allowedvar x = 2;     \n  // Not allowedlet x = 2;     \n  // Not allowedconst x = 2;   // Not allowed}",
          "const x = 2;       // Allowed{const x = 3;   // Allowed}{const x = 4;   // Allowed}",
          "carName = \"Volvo\";var carName;",
          "alert (carName);const carName = \"Volvo\";"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_operators.asp",
    "cours": {
      "titre": "JavaScriptOperators",
      "description": "Javascript operators are used to perform different types of mathematical and logical computations.Examples:TheAssignment Operator=assigns valuesTheAddition Operator+adds valuesTheMultiplication Operator*multiplies valuesTheComparison Operator>compares values",
      "lien": "https://www.w3schools.com/js/js_operators.asp",
      "contenus": {
        "paragraphs": [
          "Javascript operators are used to perform different types of mathematical and logical computations.",
          "TheAssignment Operator=assigns values",
          "TheAddition Operator+adds values",
          "TheMultiplication Operator*multiplies values",
          "TheComparison Operator>compares values",
          "TheAssignment Operator(=) assigns a value to a variable:",
          "TheAddition Operator(+) adds numbers:",
          "TheMultiplication Operator(*) multiplies numbers:",
          "There are different types of JavaScript operators:",
          "Arithmetic Operatorsare used to perform arithmetic on numbers:",
          "Arithmetic operators are fully described in theJS Arithmeticchapter.",
          "Assignment operators assign values to JavaScript variables.",
          "TheAddition Assignment Operator(+=) adds a value to a variable.",
          "Assignment operators are fully described in theJS Assignmentchapter.",
          "Comparison operators are fully described in theJS Comparisonschapter.",
          "All the comparison operators above can also be used on strings:",
          "Note that strings are compared alphabetically:",
          "The+can also be used to add (concatenate) strings:",
          "The+=assignment operator can also be used to add (concatenate) strings:",
          "The result of text1 will be:",
          "When used on strings, the + operator is called the concatenation operator.",
          "Adding two numbers, will return the sum, but adding a number and a string will return a string:",
          "The result ofx,y, andzwill be:",
          "If you add a number and a string, the result will be a string!",
          "Logical operators are fully described in theJS Comparisonschapter.",
          "Type operators are fully described in theJS Type Conversionchapter.",
          "Bit operators work on 32 bits numbers.",
          "The examples above uses 4 bits unsigned examples. But JavaScript uses 32-bit signed numbers.Because of this, in JavaScript, ~ 5 will not return 10. It will return -6.~00000000000000000000000000000101 will return 11111111111111111111111111111010",
          "Bitwise operators are fully described in theJS \nBitwisechapter."
        ],
        "lists": [
          [
            "Arithmetic Operators",
            "Assignment Operators",
            "Comparison Operators",
            "String Operators",
            "Logical Operators",
            "Bitwise Operators",
            "Ternary Operators",
            "Type Operators"
          ]
        ],
        "examples": [
          "let x = 10;",
          "// Assign the value 5 to xlet x = 5;// Assign the value 2 to ylet y = 2;// Assign the value x + y to z:let z = x + y;",
          "let x = 5;let y = 2;let z = x + y;",
          "let x = 5;let y = 2;let z = x * y;",
          "let a = 3;let x = (100 + 50) * a;",
          "let x = 10;x += 5;",
          "let text1 = \"A\";let text2 = \"B\";let result = text1 < text2;",
          "let text1 = \"20\";let text2 = \"5\";let result = text1 < text2;",
          "let text1 = \"John\";let text2 = \"Doe\";let text3 = text1 + \" \" + text2;",
          "let text1 = \"What a very \";text1 += \"nice day\";",
          "let x = 5 + 5;let y = \"5\" + 5;let z = \"Hello\" + 5;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_arithmetic.asp",
    "cours": {
      "titre": "JavaScriptArithmetic",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_arithmetic.asp",
      "contenus": {
        "paragraphs": [
          "Arithmetic operators perform arithmetic on numbers (literals or variables).",
          "A typical arithmetic operation operates on two numbers.",
          "The two numbers can be literals:",
          "or variables:",
          "or expressions:",
          "The numbers (in an arithmetic operation) are calledoperands.",
          "The operation (to be performed between the two operands) is defined by anoperator.",
          "Theadditionoperator (+) adds numbers:",
          "Thesubtractionoperator (-) subtracts numbers.",
          "Themultiplicationoperator (*) multiplies numbers.",
          "Thedivisionoperator (/) divides numbers.",
          "Themodulusoperator (%) returns the division remainder.",
          "In arithmetic, the division of two integers produces aquotientand aremainder.",
          "In mathematics, the result of amodulo operationis theremainderof an arithmetic division.",
          "Theincrementoperator (++) increments numbers.",
          "Thedecrementoperator (--) decrements numbers.",
          "Theexponentiationoperator (**) raises the first operand to the power of the second operand.",
          "x ** y produces the same result asMath.pow(x,y):",
          "Operator precedence describes the order in which operations are performed in \nan arithmetic expression.",
          "Is the result of example above the same as 150 * 3, or is it the same as 100 \n+ 150?",
          "Is the addition or the multiplication done first?",
          "As in traditional school mathematics, the multiplication is done first.",
          "Multiplication (*) and division (/) have higherprecedencethan \naddition (+) and subtraction (-).",
          "And (as in school mathematics) the precedence can be changed by using \nparentheses.",
          "When using parentheses, the operations inside the parentheses are computed \nfirst:",
          "When many operations have the same precedence (like addition and \nsubtraction or multiplication and division), they are computed from left to \nright:",
          "For a full list of operator precedence values go to:",
          "JavaScript Operator Precedence Values."
        ],
        "lists": [],
        "examples": [
          "let x = 100 + 50;",
          "let x = a + b;",
          "let x = (100 + 50) * a;",
          "let x = 5;let y = 2;let z = x + y;",
          "let x = 5;let y = 2;let z = x - y;",
          "let x = 5;let y = 2;let z = x * y;",
          "let x = 5;let y = 2;let z = x / y;",
          "let x = 5;let y = 2;let z = x % y;",
          "let x = 5;x++;let z = x;",
          "let x = 5;x--;let z = x;",
          "let x = 5;let z =\n x ** 2;",
          "let x = 5;let z =\n  Math.pow(x,2);",
          "let x = 100 + 50 * 3;",
          "let x = (100 + 50) * 3;",
          "let x = 100 + 50 - 3;",
          "let x = 100 / 50 * 3;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_assignment.asp",
    "cours": {
      "titre": "JavaScriptAssignment",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_assignment.asp",
      "contenus": {
        "paragraphs": [
          "Assignment operators assign values to JavaScript variables.",
          "The Logical assignment operators areES2020.",
          "TheSimple Assignment Operatorassigns a value to a variable.",
          "TheAddition Assignment Operatoradds a value to a variable.",
          "TheSubtraction Assignment Operatorsubtracts a value from a variable.",
          "TheMultiplication Assignment Operatormultiplies a variable.",
          "TheExponentiation Assignment Operatorraises a variable to the power of the operand.",
          "TheDivision Assignment Operatordivides a variable.",
          "TheRemainder Assignment Operatorassigns a remainder to a variable.",
          "TheLeft Shift Assignment Operatorleft shifts a variable.",
          "TheRight Shift Assignment Operatorright shifts a variable (signed).",
          "TheUnsigned Right Shift Assignment Operatorright shifts a variable (unsigned).",
          "TheBitwise AND Assignment Operatordoes a bitwise AND operation on two operands\nand assigns the result to the the variable.",
          "TheBitwise OR Assignment Operatordoes a bitwise OR operation on two operands\nand assigns the result to the variable.",
          "TheBitwise XOR Assignment Operatordoes a bitwise XOR operation on two operands\nand assigns the result to the variable.",
          "TheLogical AND assignment operatoris used between two values.",
          "If the first value is true, the second value is assigned.",
          "The&&=operator is anES2020 feature.",
          "TheLogical OR assignment operatoris used between two values.",
          "If the first value is false, the second value is assigned.",
          "The||=operator is anES2020 feature.",
          "TheNullish coalescing assignment operatoris used between two values.",
          "If the first value is undefined or null, the second value is assigned.",
          "The??=operator is anES2020 feature."
        ],
        "lists": [],
        "examples": [
          "let x = 10;",
          "let x = 10 + y;",
          "let x = 10;x += 5;",
          "let text = \"Hello\";\ntext += \" World\";",
          "let x = 10;x -= 5;",
          "let x = 10;x *= 5;",
          "let x = 10;x **= 5;",
          "let x = 10;x /= 5;",
          "let x = 10;x %= 5;",
          "let x = -100;x <<= 5;",
          "let x = -100;x >>= 5;",
          "let x = -100;x >>>= 5;",
          "let x = 10;x &= 5;",
          "let x = 10;x |= 5;",
          "let x = 10;x ^= 5;",
          "let x = 10;x &&= 5;",
          "let x = 10;x ||= 5;",
          "let x;x ??= 5;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_datatypes.asp",
    "cours": {
      "titre": "JavaScriptData Types",
      "description": "JavaScript has 8 DatatypesStringNumberBigintBooleanUndefinedNullSymbolObjectThe Object DatatypeThe object data type can contain bothbuilt-in objects, anduser defined objects:Built-in object types can be:objects, arrays, dates, maps, sets, intarrays, floatarrays, promises, and more.",
      "lien": "https://www.w3schools.com/js/js_datatypes.asp",
      "contenus": {
        "paragraphs": [
          "StringNumberBigintBooleanUndefinedNullSymbolObject",
          "The object data type can contain bothbuilt-in objects, anduser defined objects:",
          "Built-in object types can be:",
          "objects, arrays, dates, maps, sets, intarrays, floatarrays, promises, and more.",
          "A JavaScript variable can hold any type of data.",
          "In programming, data types is an important concept.",
          "To be able to operate on variables, it is important to know something about \nthe type.",
          "Without data types, a computer cannot safely solve this:",
          "Does it make any sense to add \"Volvo\" to sixteen? Will it produce an \nerror or will it produce a result?",
          "JavaScript will treat the example above as:",
          "When adding a number and a string, JavaScript will treat the number as a \nstring.",
          "JavaScript evaluates expressions from left to right. Different sequences can \nproduce different results:",
          "Result:",
          "Result:",
          "In the first example, JavaScript treats 16 and 4 as numbers, until it reaches \"Volvo\".",
          "In the second example, since the first operand is a string, all operands are \ntreated as strings.",
          "JavaScript has dynamic types. This means that the same variable can be used \nto hold \ndifferent data types:",
          "A string (or a text string) is a series of characters like \"John Doe\".",
          "Strings are written with quotes. You can use single or double quotes:",
          "You can use quotes inside a string, as long as they don't match the quotes \nsurrounding the string:",
          "You will learn more aboutstringslater in this tutorial.",
          "All JavaScript numbers are stored as decimal numbers (floating point).",
          "Numbers can be written with, or without decimals:",
          "Extra large or extra small numbers can be written with scientific \n(exponential) notation:",
          "Most programming languages have many number types:",
          "Whole numbers (integers):byte (8-bit), short (16-bit), int (32-bit), long (64-bit)",
          "Real numbers (floating-point):float (32-bit), double (64-bit).",
          "Javascript numbers are always one type:double (64-bit floating point).",
          "You will learn more aboutnumberslater in this tutorial.",
          "All JavaScript numbers are stored in a 64-bit floating-point format.",
          "JavaScript BigInt is a new datatype (ES2020) that can be used to store integer values that are too big to be represented\nby a normal JavaScript Number.",
          "You will learn more aboutBigIntlater in this tutorial.",
          "Booleans can only have two values:trueorfalse.",
          "Booleans are often used in conditional testing.",
          "You will learn more aboutbooleanslater in this tutorial.",
          "JavaScript arrays are written with square brackets.",
          "Array items are separated by commas.",
          "The following code declares (creates) an array calledcars, containing three \nitems (car names):",
          "Array indexes are zero-based, which means the first item is [0], second is \n[1], and so on.",
          "You will learn more aboutarrayslater in this tutorial.",
          "JavaScript objects are written with curly braces{}.",
          "Object \nproperties are written as name:value pairs, separated by commas.",
          "The object (person) in the example above has 4 properties: firstName, \nlastName, age, and eyeColor.",
          "You will learn more aboutobjectslater in this tutorial.",
          "You can use the JavaScripttypeofoperator to find the type \nof a JavaScript variable.",
          "Thetypeofoperator returns the type of a variable or an expression:",
          "You will learn more abouttypeoflater in this tutorial.",
          "In JavaScript, a variable without a value, has the valueundefined. \nThe type is alsoundefined.",
          "Any variable can be emptied, by setting the value toundefined. \nThe type will also beundefined.",
          "An empty value has nothing to do withundefined.",
          "An empty string has both a legal value and a type."
        ],
        "lists": [],
        "examples": [
          "// Numbers:let length = 16;let weight = 7.5;// Strings:let color = \"Yellow\";let lastName = \"Johnson\";// Booleanslet x = true;let y = false;// Object:const person = {firstName:\"John\", lastName:\"Doe\"};// Array object:const cars = [\"Saab\", \"Volvo\", \"BMW\"];// Date object:const date = new Date(\"2022-03-25\");",
          "let x = 16 + \"Volvo\";",
          "let x = \"16\" + \"Volvo\";",
          "let x = 16 + \"Volvo\";",
          "let x = \"Volvo\" + 16;",
          "let x = 16 + 4 + \"Volvo\";",
          "let x = \"Volvo\" + 16 + 4;",
          "let x;       // Now x is undefinedx = 5;       // Now x is a Numberx = \"John\";  // Now x is a String",
          "// Using double quotes:let carName1 = \"Volvo XC60\";// Using single quotes:let carName2 = 'Volvo XC60';",
          "// Single quote inside double quotes:let answer1 = \"It's alright\";// Single quotes inside double quotes:let answer2 = \"He is called 'Johnny'\";// Double quotes inside single quotes:let answer3 = 'He is called \"Johnny\"';",
          "// With decimals:let x1 = 34.00;// Without decimals:let x2 = 34;",
          "let y = 123e5;    // 12300000let z = 123e-5;   // 0.00123",
          "let x = BigInt(\"123456789012345678901234567890\");",
          "let x = 5;let y = 5;let z = 6;(x == y)       \n  // Returns true(x == z)       // Returns \n  false",
          "const cars = [\"Saab\", \"Volvo\", \"BMW\"];",
          "const person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};",
          "typeof \"\"             // Returns \n \"string\"typeof \"John\"         // Returns \n \"string\"typeof \"John Doe\"     // Returns \n \"string\"",
          "typeof 0              // Returns \n \"number\"typeof 314            // Returns \n \"number\"typeof 3.14           // Returns \n \"number\"typeof (3)            // Returns \n \"number\"typeof (3 + 4)        // Returns \n \"number\"",
          "let car;    // Value is undefined, \n    type is undefined",
          "car = undefined;    // Value is undefined, \n    type is undefined",
          "let car = \"\";    // \n    The value is \n    \"\", the typeof is \"string\""
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_functions.asp",
    "cours": {
      "titre": "JavaScriptFunctions",
      "description": "A JavaScript function is a block of code designed to perform a \nparticular task.A JavaScript function is executed when \n\"something\" invokes it (calls it).",
      "lien": "https://www.w3schools.com/js/js_functions.asp",
      "contenus": {
        "paragraphs": [
          "A JavaScript function is a block of code designed to perform a \nparticular task.",
          "A JavaScript function is executed when \n\"something\" invokes it (calls it).",
          "A JavaScript function is defined with thefunctionkeyword, \nfollowed by aname, followed by parentheses().",
          "Function names can contain letters, digits, underscores, and dollar signs \n(same rules as variables).",
          "The parentheses may include parameter names separated by commas:(parameter1, parameter2, ...)",
          "The code to be executed, by the function, is placed inside curly brackets:{}",
          "Functionparametersare listed inside the parentheses () in \nthe function definition.",
          "Functionargumentsare thevaluesreceived by the function when it is invoked.",
          "Inside the function, the arguments (the parameters) behave as local variables.",
          "The code inside the function will execute when \"something\"invokes(calls) the \nfunction:",
          "You will learn a lot more about function invocation later in this \ntutorial.",
          "When JavaScript reaches areturnstatement, \nthe function will stop executing.",
          "If the function was invoked from a statement, JavaScript will \n\"return\" to execute the code after the invoking statement.",
          "Functions often compute areturn value. The return value is \n\"returned\" back to \nthe \"caller\":",
          "Calculate the product of two numbers, and return the result:",
          "With functions you can reuse code",
          "You can write code that can be used many times.",
          "You can use the same code with different arguments, to produce different results.",
          "The () operator invokes (calls) the function:",
          "Convert Fahrenheit to Celsius:",
          "Accessing a function with incorrect parameters can return an incorrect answer:",
          "Accessing a function without () returns the function and not the function result:",
          "As you see from the examples above,toCelsiusrefers to the function object, andtoCelsius()refers to the function result.",
          "Functions can be used the same way as you use variables, in all types of formulas, assignments, and \ncalculations.",
          "Instead of using a variable to store the return value of a function:",
          "You can use the function directly, as a variable value:",
          "You will learn a lot more about functions later in this tutorial.",
          "Variables declared within a JavaScript function, becomeLOCALto \nthe function.",
          "Local variables can only be accessed \nfrom within the function.",
          "Since local variables are only recognized inside their functions, variables with the same name can be used in different functions.",
          "Local variables are created when a function starts, and deleted when the function is completed."
        ],
        "lists": [
          [
            "When an event occurs (when a user clicks a button)",
            "When it is invoked (called) from JavaScript code",
            "Automatically (self invoked)"
          ]
        ],
        "examples": [
          "//  Function to compute the product of p1 and p2function myFunction(p1, p2) {return p1 * p2;}",
          "functionname(parameter1, parameter2, parameter3) {//code to be executed}",
          "// Function is called, the return value will end up in xlet x = myFunction(4, 3);function myFunction(a, b) {// Function returns the product of a and breturn a * b;}",
          "function toCelsius(fahrenheit) {return (5/9) * (fahrenheit-32);}let value = toCelsius(77);",
          "function toCelsius(fahrenheit) {return (5/9) * (fahrenheit-32);}let value = toCelsius();",
          "function toCelsius(fahrenheit) {return (5/9) * (fahrenheit-32);}let value = toCelsius;",
          "let x = toCelsius(77);let text = \"The temperature is \" + x + \" Celsius\";",
          "let text = \"The temperature is \" + toCelsius(77) + \" Celsius\";",
          "// code here can NOT use carNamefunction myFunction() {let carName = \"Volvo\";// code here CAN use carName}// code here can NOT use carName"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_objects.asp",
    "cours": {
      "titre": "JavaScriptObjects",
      "description": "Real Life ObjectsIn real life,objectsare things like:\nhouses, cars, people, animals, or any other subjects.Here is acar objectexample:Car ObjectPropertiesMethodscar.name = Fiatcar.model = 500car.weight = 850kgcar.color = whitecar.start()car.drive()car.brake()car.stop()",
      "lien": "https://www.w3schools.com/js/js_objects.asp",
      "contenus": {
        "paragraphs": [
          "In real life,objectsare things like:\nhouses, cars, people, animals, or any other subjects.",
          "Here is acar objectexample:",
          "A real life car haspropertieslike weight and color:",
          "car.name = Fiat, car.model = 500, car.weight = 850kg, car.color = white.",
          "Car objects have the sameproperties, but thevaluesdiffer from car to car.",
          "A real life car hasmethodslike start and stop:",
          "car.start(), car.drive(), car.brake(), car.stop().",
          "Car objects have the samemethods, but the methods are performedat different times.",
          "JavaScript variables are containers for data values.",
          "This code assigns asimple value(Fiat) to avariablenamed car:",
          "Objects are variables too. But objects can contain many \nvalues.",
          "This code assignsmany values(Fiat, 500, white) to anobjectnamed car:",
          "It is a common practice to declare objects with theconstkeyword.",
          "Learn more about usingconstwith objects in the chapter:JS Const.",
          "An object literal is a list ofname:valuepairs inside curly braces{}.",
          "name:value pairsare also calledkey:value pairs.",
          "object literalsare also calledobject initializers.",
          "These examples create a JavaScript object with 4 properties:",
          "Spaces and line breaks are not important. An object initializer can span multiple lines:",
          "This example creates an empty JavaScript object, \nand then adds 4 properties:",
          "This example create a new JavaScript object usingnew Object(), \nand then adds 4 properties:",
          "The examples above do exactly the same.",
          "But, there is no need to usenew Object().",
          "For readability, simplicity and execution speed, use theobject literalmethod.",
          "Thenamed values, in JavaScript objects, are calledproperties.",
          "Objects written as name value pairs are similar to:",
          "You can access object properties in two ways:",
          "Methods areactionsthat can be performed on objects.",
          "Methods arefunction definitionsstored asproperty values.",
          "In the example above,thisrefers to theperson object:",
          "this.firstNamemeans thefirstNameproperty ofperson.",
          "this.lastNamemeans thelastNameproperty ofperson.",
          "Objectsare containers forPropertiesandMethods.",
          "Propertiesare namedValues.",
          "MethodsareFunctionsstored asProperties.",
          "Propertiescan be primitive values, functions, or even other objects.",
          "In JavaScript, almost \"everything\" is an object.",
          "All JavaScript values, except primitives, are objects.",
          "Aprimitive valueis a value that has no properties or methods.",
          "3.14is a primitive value",
          "Aprimitive data typeis data that has a primitive value.",
          "JavaScript defines 7 types of primitive data types:",
          "Primitive values are immutable (they are hardcoded and cannot be changed).",
          "if x = 3.14, you can change the value of x, but you cannot change the value of 3.14.",
          "Objects are mutable: They are addressed by reference, not by value.",
          "If person is an object, the following statement will not create a copy of person:",
          "The object x isnot a copyof person. The object xisperson.",
          "The object x and the object person share the same memory address.",
          "Any changes to x will also change person:",
          "You will learn a lot more about objects in the following chapters."
        ],
        "lists": [
          [
            "Using an Object Literal",
            "Using thenewKeyword",
            "Using an Object Constructor"
          ],
          [
            "Associative arrays in PHP",
            "Dictionaries in Python",
            "Hash tables in C",
            "Hash maps in Java",
            "Hashes in Ruby and Perl"
          ],
          [
            "Objects are objects",
            "Maths are objects",
            "Functions are objects",
            "Dates are objects",
            "Arrays are objects",
            "Maps are objects",
            "Sets are objects"
          ],
          [
            "string",
            "number",
            "boolean",
            "null",
            "undefined",
            "symbol",
            "bigint"
          ]
        ],
        "examples": [
          "let car = \"Fiat\";",
          "const car = {type:\"Fiat\", model:\"500\", color:\"white\"};",
          "{firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"}",
          "// Create an Objectconst person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};",
          "// Create an Objectconst person = {firstName: \"John\",lastName: \"Doe\",age: 50,eyeColor: \"blue\"};",
          "// Create an Objectconst person = {};// Add Propertiesperson.firstName = \"John\";person.lastName = \"Doe\";person.age = 50;person.eyeColor = \"blue\";",
          "// Create an Objectconst person = new Object();// Add Propertiesperson.firstName = \"John\";person.lastName = \"Doe\";person.age = 50;person.eyeColor = \"blue\";",
          "objectName.propertyName",
          "objectName[\"propertyName\"]",
          "person.lastName;",
          "person[\"lastName\"];",
          "const person = {firstName: \"John\",lastName : \"Doe\",id       : 5566,fullName : function() {return this.firstName + \" \" + this.lastName;}};",
          "const x = person;",
          "//Create an Objectconst person = {firstName:\"John\",lastName:\"Doe\",age:50, eyeColor:\"blue\"}// Create a copyconst x = person;// Change Age in bothx.age = 10;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_object_property.asp",
    "cours": {
      "titre": "JavaScriptObject Properties",
      "description": "An Object is an Unordered Collection of PropertiesProperties are the most important part of JavaScript objects.Properties can be changed, added, deleted, and some are read only.",
      "lien": "https://www.w3schools.com/js/js_object_property.asp",
      "contenus": {
        "paragraphs": [
          "Properties are the most important part of JavaScript objects.",
          "Properties can be changed, added, deleted, and some are read only.",
          "The syntax for accessing the property of an object is:",
          "or",
          "or",
          "You can add new properties to an existing object by simply giving it a value:",
          "Thedeletekeyword deletes a property from an object:",
          "or delete person[\"age\"];",
          "Thedeletekeyword deletes both the value of the property and the property itself.",
          "After deletion, the property cannot be used before it is added back again.",
          "Property values in an object can be other objects:",
          "You can access nested objects using the dot notation or the bracket notation:",
          "For a complete reference, go to our:",
          "Complete JavaScript Object Reference.",
          "The reference contains descriptions and examples of all Object Properties and Methods."
        ],
        "lists": [],
        "examples": [
          "//objectName.propertylet age = person.age;",
          "//objectName[\"property\"]let age = person[\"age\"];",
          "//objectName[expression]let age = person[x];",
          "person.firstname + \" is \" + person.age + \" years old.\";",
          "person[\"firstname\"] + \" is \" + person[\"age\"] + \" years old.\";",
          "let x = \"firstname\";let y = \"age\";person[x] + \" is \" + person[y] + \" years old.\";",
          "person.nationality = \"English\";",
          "const person = {firstName: \"John\",lastName: \"Doe\",age: 50,eyeColor: \"blue\"};delete person.age;",
          "const person = {firstName: \"John\",lastName: \"Doe\",age: 50,eyeColor: \"blue\"};delete person[\"age\"];",
          "myObj = {name:\"John\",age:30,myCars: {car1:\"Ford\",car2:\"BMW\",car3:\"Fiat\"}}",
          "myObj.myCars.car2;",
          "myObj.myCars[\"car2\"];",
          "myObj[\"myCars\"][\"car2\"];",
          "let p1 = \"myCars\";let p2 = \"car2\";myObj[p1][p2];"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_object_method.asp",
    "cours": {
      "titre": "JavaScriptObject Methods",
      "description": "Object methodsare actions that can be performed on objects.A method is afunction definitionstored as aproperty value.",
      "lien": "https://www.w3schools.com/js/js_object_method.asp",
      "contenus": {
        "paragraphs": [
          "Object methodsare actions that can be performed on objects.",
          "A method is afunction definitionstored as aproperty value.",
          "In the example above,thisrefers to theperson object:",
          "this.firstNamemeans thefirstNameproperty ofperson.",
          "this.lastNamemeans thelastNameproperty ofperson.",
          "You access an object method with the following syntax:",
          "If you invoke thefullName propertywith (), it will execute as afunction:",
          "If you access thefullName propertywithout (), it \nwill return thefunction definition:",
          "Adding a new method to an object is easy:",
          "This example uses the JavaScripttoUpperCase()method to convert a text \nto uppercase:",
          "For a complete reference, go to our:",
          "Complete JavaScript Object Reference.",
          "The reference contains descriptions and examples of all Object Properties and Methods."
        ],
        "lists": [],
        "examples": [
          "constperson= {firstName: \"John\",lastName: \"Doe\",id: 5566,fullName: function() {returnthis.firstName + \" \" +this.lastName;}};",
          "objectName.methodName()",
          "name = person.fullName();",
          "name = person.fullName;",
          "person.name = function () {return this.firstName + \" \" + this.lastName;};",
          "person.name = function () {return (this.firstName + \" \" + this.lastName).toUpperCase();};"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_object_display.asp",
    "cours": {
      "titre": "JavaScript Display Objects",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_object_display.asp",
      "contenus": {
        "paragraphs": [
          "Displaying a JavaScript object will output[object Object].",
          "Some solutions to display JavaScript objects are:Displaying the Object Properties by nameDisplaying the Object Properties in a LoopDisplaying the Object using Object.values()Displaying the Object using JSON.stringify()",
          "The properties of an object can be displayed as a string:",
          "The properties of an object can be collected in a loop:",
          "You must useperson[x]in the loop.",
          "person.xwill not work (Becausexis the loop variable).",
          "Object.values()creates an array from the property values:",
          "Object.entries()makes it simple to use objects in loops:",
          "JavaScript objects can be converted to a string with JSON methodJSON.stringify().",
          "JSON.stringify()is included in JavaScript and supported in all major browsers.",
          "The result will be a string written in JSON notation:",
          "{\"name\":\"John\",\"age\":50,\"city\":\"New York\"}",
          "For a complete reference, go to our:",
          "Complete JavaScript Object Reference.",
          "The reference contains descriptions and examples of all Object Properties and Methods."
        ],
        "lists": [
          [
            "Displaying the Object Properties by name",
            "Displaying the Object Properties in a Loop",
            "Displaying the Object using Object.values()",
            "Displaying the Object using JSON.stringify()"
          ]
        ],
        "examples": [
          "// Create an Objectconst person = {name: \"John\",age: 30,city: \"New York\"};document.getElementById(\"demo\").innerHTML = person;",
          "// Create an Objectconst person = {name: \"John\",age: 30,city: \"New York\"};// Display Propertiesdocument.getElementById(\"demo\").innerHTML =person.name + \",\" + person.age + \",\" + person.city;",
          "// Create an Objectconst person = {name: \"John\",age: 30,city: \"New York\"};// Build a Textlet text = \"\";for (let x in person) {text += person[x] + \" \";};// Display the Textdocument.getElementById(\"demo\").innerHTML = text;",
          "// Create an Objectconst person = {name: \"John\",age: 30,city: \"New York\"};// Create an Arrayconst myArray = Object.values(person);// Display the Arraydocument.getElementById(\"demo\").innerHTML = myArray;",
          "const fruits = {Bananas:300, Oranges:200, Apples:500};let text = \"\";for (let [fruit, value] of Object.entries(fruits)) {text += fruit + \": \" + value + \"<br>\";}",
          "// Create an Objectconst person = {name: \"John\",age: 30,city: \"New York\"};// Stringify Objectlet myString = JSON.stringify(person);// Display Stringdocument.getElementById(\"demo\").innerHTML = myString;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_object_constructors.asp",
    "cours": {
      "titre": "JavaScriptObject Constructors",
      "description": "Object Constructor FunctionsSometimes we need to create many objects of the sametype.To create anobject typewe use anobject constructor function.It is considered good practice to name constructor functions with an upper-case first letter.",
      "lien": "https://www.w3schools.com/js/js_object_constructors.asp",
      "contenus": {
        "paragraphs": [
          "Sometimes we need to create many objects of the sametype.",
          "To create anobject typewe use anobject constructor function.",
          "It is considered good practice to name constructor functions with an upper-case first letter.",
          "In the constructor function,thishas no value.",
          "The value ofthiswill become the new object when \na new object is created.",
          "The JavaScriptthisTutorial",
          "Now we can usenew Person()to create many new Person objects:",
          "Avaluegiven to a property will be adefault valuefor all objects\ncreated by the constructor:",
          "Adding a property to a created object is easy:",
          "The new property will be added tomyFather. Not to any otherPerson Objects.",
          "You canNOTadd a new property to an object constructor:",
          "To add a new property, you must add it to the constructor function prototype:",
          "A constructor function can also havemethods:",
          "Adding a method to a created object is easy:",
          "The new method will be added tomyMother. Not to any otherPerson Objects.",
          "You cannot add a new method to an object constructor function.",
          "This code will produce a TypeError:",
          "TypeError: myMother.changeName is not a function",
          "Adding a new method must be done to the constructor function prototype:",
          "The changeName() function assigns the value ofnameto the person'slastNameproperty, substitutingthiswithmyMother.",
          "JavaScript has built-in constructors for all native objects:",
          "TheMath()object is not in the list.Mathis a global object. Thenewkeyword cannot be used onMath.",
          "Use object literals{}instead ofnew Object().",
          "Use array literals[]instead ofnew Array().",
          "Use pattern literals/()/instead ofnew RegExp().",
          "Use function expressions() {}instead ofnew Function().",
          "For a complete reference, go to our:",
          "Complete JavaScript Object Reference.",
          "The reference contains descriptions and examples of all Object Properties and Methods."
        ],
        "lists": [],
        "examples": [
          "function Person(first, last, age, eye) {this.firstName = first;this.lastName = last;this.age = age;this.eyeColor = eye;}",
          "const myFather = new Person(\"John\", \"Doe\", 50, \"blue\");const myMother = new Person(\"Sally\", \"Rally\", 48, \"green\");const mySister = new Person(\"Anna\", \"Rally\", 18, \"green\");const mySelf = new Person(\"Johnny\", \"Rally\", 22, \"green\");",
          "function Person(first, last, age, eyecolor) {this.firstName = first;this.lastName = last;this.age = age;this.eyeColor = eyecolor;this.nationality = \"English\";}",
          "myFather.nationality = \"English\";",
          "Person.nationality = \"English\";",
          "Person.prototype.nationality = \"English\";",
          "function Person(first, last, age, eyecolor) {this.firstName = first;this.lastName = last;this.age = age;this.eyeColor = eyecolor;this.fullName = function() {return this.firstName + \" \" + this.lastName;};}",
          "myMother.changeName = function (name) {this.lastName = name;}",
          "Person.changeName = function (name) {this.lastName = name;}myMother.changeName(\"Doe\");",
          "Person.prototype.changeName = function (name) {this.lastName = name;}myMother.changeName(\"Doe\");",
          "new Object()   // A new Object objectnew Array()    // A new Array objectnew Map()      // A new Map objectnew Set()      // A new Set objectnew Date()     // A new Date objectnew RegExp()   // A new RegExp objectnew Function() // A new Function object",
          "\"\";           // primitive string0;            // primitive numberfalse;        // primitive boolean{};           // object object[];           // array object/()/          // regexp objectfunction(){}; // function"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_events.asp",
    "cours": {
      "titre": "JavaScriptEvents",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_events.asp",
      "contenus": {
        "paragraphs": [
          "HTML events are\"things\"that happen to HTML elements.",
          "When JavaScript is used in HTML pages, JavaScript can\"react\"on \nthese events.",
          "An HTML event can be something the browser does, or something a user does.",
          "Here are some examples of HTML events:",
          "Often, when events happen, you may want to do something.",
          "JavaScript lets you execute code when events are detected.",
          "HTML allows event handler attributes,with JavaScript code, to be added to HTML elements.",
          "With single quotes:",
          "With double quotes:",
          "In the following example, anonclickattribute (with code), is added to a<button>element:",
          "In the example above, the JavaScript code changes the content of \nthe element with id=\"demo\".",
          "In the next example, the code changes the content of \nits own element (usingthis.innerHTML):",
          "JavaScript code is often several lines long. It is more common to see event attributes calling functions:",
          "Here is a list of some common HTML events:",
          "The list is much longer:W3Schools JavaScript Reference HTML DOM Events.",
          "Event handlers can be used to handle and verify user input, user actions, \nand browser actions:",
          "Many different methods can be used to let JavaScript work with events:",
          "You will learn a lot more about events and event handlers in the HTML DOM chapters."
        ],
        "lists": [
          [
            "An HTML web page has finished loading",
            "An HTML input field was changed",
            "An HTML button was clicked"
          ],
          [
            "Things that should be done every time a page loads",
            "Things that should be done when the page is closed",
            "Action that should be performed when a user clicks a button",
            "Content that should be verified when a user inputs data",
            "And more ..."
          ],
          [
            "HTML event attributes can execute JavaScript code directly",
            "HTML event attributes can call JavaScript functions",
            "You can assign your own event handler functions to HTML elements",
            "You can prevent events from being sent or being handled",
            "And more ..."
          ]
        ],
        "examples": [
          "<elementevent='some JavaScript'>",
          "<elementevent=\"some JavaScript\">",
          "<button onclick=\"document.getElementById('demo').innerHTML = Date()\">The time is?</button>",
          "<button onclick=\"this.innerHTML = Date()\">The time is?</button>",
          "<button onclick=\"displayDate()\">The time is?</button>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_strings.asp",
    "cours": {
      "titre": "JavaScriptStrings",
      "description": "Strings are forstoring textStrings are writtenwith quotes",
      "lien": "https://www.w3schools.com/js/js_strings.asp",
      "contenus": {
        "paragraphs": [
          "Strings are forstoring text",
          "Strings are writtenwith quotes",
          "A JavaScript string is zero or more characters written inside quotes.",
          "You can use single or double quotes:",
          "Strings created with single or double quotes works the same.",
          "There is no difference between the two.",
          "You can use quotes inside a string, as long as they don't match the quotes \nsurrounding the string:",
          "Templates were introduced with ES6 (JavaScript 2016).",
          "Templates are strings enclosed in backticks (`This is a template string`).",
          "Templates allow single and double quotes inside a string:",
          "Try it Yourself »",
          "Templates are not supported in Internet Explorer.",
          "To find the length of a string, use the built-inlengthproperty:",
          "Because strings must be written within quotes, JavaScript will misunderstand this string:",
          "The string will be chopped to \"We are the so-called \".",
          "To solve this problem, you can use anbackslash escape character.",
          "The backslash escape character (\\) turns special characters into string characters:",
          "\\\" inserts a double quote in a string:let text = \"We are the so-called \\\"Vikings\\\" from the north.\";Try it Yourself »\\' inserts a single quote in a string:let text= 'It\\'s alright.';Try it Yourself »\\\\ inserts a backslash in a string:let text = \"The character \\\\ is called backslash.\";Try it Yourself »",
          "let text = \"We are the so-called \\\"Vikings\\\" from the north.\";Try it Yourself »\\' inserts a single quote in a string:let text= 'It\\'s alright.';Try it Yourself »\\\\ inserts a backslash in a string:let text = \"The character \\\\ is called backslash.\";Try it Yourself »",
          "\\' inserts a single quote in a string:let text= 'It\\'s alright.';Try it Yourself »\\\\ inserts a backslash in a string:let text = \"The character \\\\ is called backslash.\";Try it Yourself »",
          "let text= 'It\\'s alright.';Try it Yourself »\\\\ inserts a backslash in a string:let text = \"The character \\\\ is called backslash.\";Try it Yourself »",
          "\\\\ inserts a backslash in a string:let text = \"The character \\\\ is called backslash.\";Try it Yourself »",
          "let text = \"The character \\\\ is called backslash.\";Try it Yourself »",
          "Six other escape sequences are valid in JavaScript:",
          "The 6 escape characters above were originally designed to control \ntypewriters, teletypes, and fax machines. They do not make any sense in HTML.",
          "For readability, programmers often like to avoid long code lines.",
          "A safe way to break up astatementis after an operator:",
          "A safe way to break up astringis by using string addition:",
          "Templates were introduced with ES6 (JavaScript 2016).",
          "Templates are strings enclosed in backticks (`This is a template string`).",
          "Templates allow multiline strings:",
          "Try it Yourself »",
          "Templates are not supported in Internet Explorer.",
          "Normally, JavaScript strings are primitive values, created from literals:",
          "But strings can also be defined as objects with the keywordnew:",
          "Do not create Strings objects.",
          "Thenewkeyword complicates the code and slows down execution speed.",
          "String objects can produce unexpected results:",
          "When using the==operator, x and y areequal:",
          "When using the===operator, x and y arenot equal:let x = \"John\";let y = new String(\"John\");Try it Yourself »",
          "Note the difference between(x==y)and(x===y).",
          "(x == y)true or false?",
          "(x === y)true or false?",
          "Comparing two JavaScript objectsalwaysreturnsfalse.",
          "For a complete String reference, go to our:",
          "Complete JavaScript String Reference.",
          "The reference contains descriptions and examples of all string properties and methods."
        ],
        "lists": [],
        "examples": [
          "let text = \"John Doe\";",
          "let carName1 = \"Volvo XC60\";  \n  // Double quoteslet carName2 = 'Volvo XC60';  // Single quotes",
          "let answer1 = \"It's alright\";let answer2 = \"He is called 'Johnny'\";let answer3 = 'He is called \"Johnny\"';",
          "let text = `He's often called \"Johnny\"`;",
          "let text = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";let length = text.length;",
          "let text = \"We are the so-called \"Vikings\" from the north.\";",
          "let text = \"We are the so-called \\\"Vikings\\\" from the north.\";",
          "let text= 'It\\'s alright.';",
          "let text = \"The character \\\\ is called backslash.\";",
          "document.getElementById(\"demo\").innerHTML =\"Hello Dolly!\";",
          "document.getElementById(\"demo\").innerHTML = \"Hello \" +\"Dolly!\";",
          "let text =`The quickbrown foxjumps overthe lazy dog`;",
          "let x = \"John\";",
          "let y = new String(\"John\");",
          "let x = \"John\";let y = new String(\"John\");",
          "let x = \"John\";let y = new String(\"John\");",
          "let x = \"John\";let y = new String(\"John\");",
          "let x = new String(\"John\");let y = new String(\"John\");",
          "let x = new String(\"John\");let y = new String(\"John\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_string_methods.asp",
    "cours": {
      "titre": "JavaScriptString Methods",
      "description": "Basic String MethodsJavascript strings are primitive and immutable:\nAll string methods produce a new string without altering the original string.String lengthString charAt()String charCodeAt()String at()String [ ]String slice()String substring()String substr()See Also:String Search MethodsString TemplatesString toUpperCase()String toLowerCase()String concat()String trim()String trimStart()String trimEnd()String padStart()String padEnd()String repeat()String replace()String replaceAll()String split()",
      "lien": "https://www.w3schools.com/js/js_string_methods.asp",
      "contenus": {
        "paragraphs": [
          "Javascript strings are primitive and immutable:\nAll string methods produce a new string without altering the original string.",
          "Thelengthproperty returns the length of a string:",
          "There are 4 methods for extracting string characters:",
          "ThecharAt()method returns the character at a specified \nindex (position) in a string:",
          "ThecharCodeAt()method returns the code of the character \nat a specified index in a string:",
          "The method returns a UTF-16 code (an integer between 0 and 65535).",
          "ES2022introduced the string methodat():",
          "Get the third letter of name:",
          "Get the third letter of name:",
          "Theat()method returns the character at a specified index (position) in a string.",
          "Theat()method is supported in all modern browsers since March 2022:",
          "Theat()method is a new addition to JavaScript.",
          "It allows the use of negative indexes whilecharAt()do not.",
          "at()is an ES2022 feature.",
          "JavaScript 2022 (ES2022) is supported in all modern browsers since March 2023:",
          "Property access might be a littleunpredictable:",
          "There are 3 methods for extracting a part of a string:",
          "slice()extracts a part of a string and returns the \nextracted part in a new string.",
          "The method takes 2 parameters: start position, and end position (end not included).",
          "Slice out a portion of a string from position 7 to position 13:",
          "JavaScript counts positions from zero.",
          "First position is 0.",
          "Second position is 1.",
          "If you omit the second parameter, the method will slice out the rest of the string:",
          "If a parameter is negative, the position is counted from the end of the string:",
          "This example slices out a portion of a string from position -12 to position -6:",
          "substring()is similar toslice().",
          "The difference is that start and end values less than 0 are treated as 0 insubstring().",
          "If you omit the second parameter,substring()will slice out the rest of the \nstring.",
          "substr()is similar toslice().",
          "The difference is \nthat the second parameter specifies thelengthof the extracted part.",
          "If you omit the second parameter,substr()will slice out the rest of the \nstring.",
          "If the first parameter is negative, the position counts from the end of the \nstring.",
          "A string is converted to upper case withtoUpperCase():",
          "A string is converted to lower case withtoLowerCase():",
          "concat()joins two or more strings:",
          "Theconcat()method can be used instead of the plus operator. \nThese two lines do the same:",
          "All string methods return a new string. They don't modify the original string.",
          "Formally said:",
          "Strings are immutable: Strings cannot be changed, only replaced.",
          "Thetrim()method removes whitespace from both sides of a string:",
          "ECMAScript 2019added the String methodtrimStart()to JavaScript.ThetrimStart()method works liketrim(), but removes whitespace only from the start of a string.Examplelet text1 = \"     Hello World!     \";let text2 = text1.trimStart();Try it Yourself »JavaScript StringtrimStart()is supported in all modern browsers since January 2020:Chrome 66Edge 79Firefox 61Safari 12Opera 50Apr 2018Jan 2020Jun 2018Sep 2018May 2018JavaScript String trimEnd()ECMAScript 2019added the string methodtrimEnd()to JavaScript.ThetrimEnd()method works liketrim(), but removes whitespace only from the end of a string.Examplelet text1 = \"     Hello World!     \";let text2 = text1.trimEnd();Try it Yourself »JavaScript StringtrimEnd()is supported in all modern browsers since January 2020:Chrome 66Edge 79Firefox 61Safari 12Opera 50Apr 2018Jan 2020Jun 2018Sep 2018May 2018JavaScript String PaddingECMAScript 2017added two new string methods to JavaScript:padStart()andpadEnd()to support padding at the beginning and at the end of a string.JavaScript String padStart()ThepadStart()method pads a string from the start.It pads a string with another string (multiple times) until it reaches a given length.ExamplesPad a string with \"0\" until it reaches the length 4:let text = \"5\";let padded = text.padStart(4,\"0\");Try it Yourself »Pad a string with \"x\" until it reaches the length 4:let text = \"5\";let padded = text.padStart(4,\"x\");Try it Yourself »NoteThepadStart()method is a string method.To pad a number, convert the number to a string first.See the example below.Examplelet numb = 5;let text = numb.toString();let padded = text.padStart(4,\"0\");Try it Yourself »Browser SupportpadStart()is anECMAScript 2017feature.ES2017 is supported in all modern browsers since September 2017:Chrome 58Edge 15Firefox 52Safari 11Opera 45Apr 2017Apr 2017Mar 2017Sep 2017May 2017padStart()is not supported in Internet Explorer.JavaScript String padEnd()ThepadEnd()method pads a string from the end.It pads a string with another string (multiple times) until it reaches a given length.Exampleslet text = \"5\";let padded = text.padEnd(4,\"0\");Try it Yourself »let text = \"5\";let padded = text.padEnd(4,\"x\");Try it Yourself »NoteThepadEnd()method is a string method.To pad a number, convert the number to a string first.See the example below.Examplelet numb = 5;let text = numb.toString();let padded = text.padEnd(4,\"0\");Try it Yourself »Browser SupportpadEnd()is anECMAScript 2017feature.ES2017 is supported in all modern browsers since September 2017:Chrome 58Edge 15Firefox 52Safari 11Opera 45Apr 2017Apr 2017Mar 2017Sep 2017May 2017padEnd()is not supported in Internet Explorer.JavaScript String repeat()Therepeat()method returns a string with a number of copies of a string.Therepeat()method returns a new string.Therepeat()method does not change the original string.ExamplesCreate copies of a text:let text = \"Hello world!\";let result = text.repeat(2);Try it Yourself »let text = \"Hello world!\";let result = text.repeat(4);Try it Yourself »Syntaxstring.repeat(count)ParametersParameterDescriptioncountRequired.The number of copies wanted.Return ValueTypeDescriptionStringA new string containing the copies.Browser Supportrepeat()is anES6  feature(JavaScript 2015).ES6 is fully supported in all modern browsers since June 2017:Chrome 51Edge 15Firefox 54Safari 10Opera 38May 2016Apr 2017Jun 2017Sep 2016Jun 2016repeat()is not supported in Internet Explorer.Replacing String ContentThereplace()method replaces a specified value with another \nvalue in a string:Examplelet text = \"Please visit Microsoft!\";let newText = text.replace(\"Microsoft\", \"W3Schools\");Try it Yourself »NoteThereplace()method does not change the string it is called on.Thereplace()method returns a new string.Thereplace()method replacesonly the firstmatchIf you want to replace all matches, use a regular expression with the /g flag set. See examples below.By default, thereplace()method replacesonly the firstmatch:Examplelet text = \"Please visit Microsoft and Microsoft!\";let newText = text.replace(\"Microsoft\", \"W3Schools\");Try it Yourself »By default, thereplace()method is case sensitive. Writing MICROSOFT (with \nupper-case) will not work:Examplelet text = \"Please visit Microsoft!\";let newText = text.replace(\"MICROSOFT\", \"W3Schools\");Try it Yourself »To replace case insensitive, use aregular expressionwith an/iflag (insensitive):Examplelet text = \"Please visit Microsoft!\";let newText = text.replace(/MICROSOFT/i, \"W3Schools\");Try it Yourself »NoteRegular expressions are written without quotes.To replace all matches, use aregular expressionwith a/gflag (global match):Examplelet text = \"Please visit Microsoft and Microsoft!\";let newText = text.replace(/Microsoft/g, \"W3Schools\");Try it Yourself »NoteYou will learn a lot more about regular expressions in the chapterJavaScript Regular \nExpressions.JavaScript String ReplaceAll()In 2021, JavaScript introduced the string methodreplaceAll():Exampletext = text.replaceAll(\"Cats\",\"Dogs\");text = text.replaceAll(\"cats\",\"dogs\");Try it Yourself »ThereplaceAll()method allows you to specify a\nregular expression instead of a string to be replaced.If the parameter is a regular expression, the global flag (g) must be set, otherwise\na TypeError is thrown.Exampletext = text.replaceAll(/Cats/g,\"Dogs\");text = text.replaceAll(/cats/g,\"dogs\");Try it Yourself »NotereplaceAll()is anES2021feature.replaceAll()does not work in Internet Explorer.Converting a String to an ArrayIf you want to work with a string as an array, you can convert it to an array.JavaScript String split()A string can be converted to an array with thesplit()method:Exampletext.split(\",\")    // Split on commastext.split(\" \")    // Split on spacestext.split(\"|\")    // Split on pipeTry it Yourself »If the separator is omitted, the returned array will contain the whole string \nin index [0].If the separator is \"\", the returned array will be an array of single \ncharacters:Exampletext.split(\"\")Try it Yourself »Complete String ReferenceFor a complete String reference, go to our:Complete JavaScript String Reference.The reference contains descriptions and examples of all string properties and methods.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "ThetrimStart()method works liketrim(), but removes whitespace only from the start of a string.",
          "JavaScript StringtrimStart()is supported in all modern browsers since January 2020:",
          "ECMAScript 2019added the string methodtrimEnd()to JavaScript.ThetrimEnd()method works liketrim(), but removes whitespace only from the end of a string.Examplelet text1 = \"     Hello World!     \";let text2 = text1.trimEnd();Try it Yourself »JavaScript StringtrimEnd()is supported in all modern browsers since January 2020:Chrome 66Edge 79Firefox 61Safari 12Opera 50Apr 2018Jan 2020Jun 2018Sep 2018May 2018JavaScript String PaddingECMAScript 2017added two new string methods to JavaScript:padStart()andpadEnd()to support padding at the beginning and at the end of a string.JavaScript String padStart()ThepadStart()method pads a string from the start.It pads a string with another string (multiple times) until it reaches a given length.ExamplesPad a string with \"0\" until it reaches the length 4:let text = \"5\";let padded = text.padStart(4,\"0\");Try it Yourself »Pad a string with \"x\" until it reaches the length 4:let text = \"5\";let padded = text.padStart(4,\"x\");Try it Yourself »NoteThepadStart()method is a string method.To pad a number, convert the number to a string first.See the example below.Examplelet numb = 5;let text = numb.toString();let padded = text.padStart(4,\"0\");Try it Yourself »Browser SupportpadStart()is anECMAScript 2017feature.ES2017 is supported in all modern browsers since September 2017:Chrome 58Edge 15Firefox 52Safari 11Opera 45Apr 2017Apr 2017Mar 2017Sep 2017May 2017padStart()is not supported in Internet Explorer.JavaScript String padEnd()ThepadEnd()method pads a string from the end.It pads a string with another string (multiple times) until it reaches a given length.Exampleslet text = \"5\";let padded = text.padEnd(4,\"0\");Try it Yourself »let text = \"5\";let padded = text.padEnd(4,\"x\");Try it Yourself »NoteThepadEnd()method is a string method.To pad a number, convert the number to a string first.See the example below.Examplelet numb = 5;let text = numb.toString();let padded = text.padEnd(4,\"0\");Try it Yourself »Browser SupportpadEnd()is anECMAScript 2017feature.ES2017 is supported in all modern browsers since September 2017:Chrome 58Edge 15Firefox 52Safari 11Opera 45Apr 2017Apr 2017Mar 2017Sep 2017May 2017padEnd()is not supported in Internet Explorer.JavaScript String repeat()Therepeat()method returns a string with a number of copies of a string.Therepeat()method returns a new string.Therepeat()method does not change the original string.ExamplesCreate copies of a text:let text = \"Hello world!\";let result = text.repeat(2);Try it Yourself »let text = \"Hello world!\";let result = text.repeat(4);Try it Yourself »Syntaxstring.repeat(count)ParametersParameterDescriptioncountRequired.The number of copies wanted.Return ValueTypeDescriptionStringA new string containing the copies.Browser Supportrepeat()is anES6  feature(JavaScript 2015).ES6 is fully supported in all modern browsers since June 2017:Chrome 51Edge 15Firefox 54Safari 10Opera 38May 2016Apr 2017Jun 2017Sep 2016Jun 2016repeat()is not supported in Internet Explorer.Replacing String ContentThereplace()method replaces a specified value with another \nvalue in a string:Examplelet text = \"Please visit Microsoft!\";let newText = text.replace(\"Microsoft\", \"W3Schools\");Try it Yourself »NoteThereplace()method does not change the string it is called on.Thereplace()method returns a new string.Thereplace()method replacesonly the firstmatchIf you want to replace all matches, use a regular expression with the /g flag set. See examples below.By default, thereplace()method replacesonly the firstmatch:Examplelet text = \"Please visit Microsoft and Microsoft!\";let newText = text.replace(\"Microsoft\", \"W3Schools\");Try it Yourself »By default, thereplace()method is case sensitive. Writing MICROSOFT (with \nupper-case) will not work:Examplelet text = \"Please visit Microsoft!\";let newText = text.replace(\"MICROSOFT\", \"W3Schools\");Try it Yourself »To replace case insensitive, use aregular expressionwith an/iflag (insensitive):Examplelet text = \"Please visit Microsoft!\";let newText = text.replace(/MICROSOFT/i, \"W3Schools\");Try it Yourself »NoteRegular expressions are written without quotes.To replace all matches, use aregular expressionwith a/gflag (global match):Examplelet text = \"Please visit Microsoft and Microsoft!\";let newText = text.replace(/Microsoft/g, \"W3Schools\");Try it Yourself »NoteYou will learn a lot more about regular expressions in the chapterJavaScript Regular \nExpressions.JavaScript String ReplaceAll()In 2021, JavaScript introduced the string methodreplaceAll():Exampletext = text.replaceAll(\"Cats\",\"Dogs\");text = text.replaceAll(\"cats\",\"dogs\");Try it Yourself »ThereplaceAll()method allows you to specify a\nregular expression instead of a string to be replaced.If the parameter is a regular expression, the global flag (g) must be set, otherwise\na TypeError is thrown.Exampletext = text.replaceAll(/Cats/g,\"Dogs\");text = text.replaceAll(/cats/g,\"dogs\");Try it Yourself »NotereplaceAll()is anES2021feature.replaceAll()does not work in Internet Explorer.Converting a String to an ArrayIf you want to work with a string as an array, you can convert it to an array.JavaScript String split()A string can be converted to an array with thesplit()method:Exampletext.split(\",\")    // Split on commastext.split(\" \")    // Split on spacestext.split(\"|\")    // Split on pipeTry it Yourself »If the separator is omitted, the returned array will contain the whole string \nin index [0].If the separator is \"\", the returned array will be an array of single \ncharacters:Exampletext.split(\"\")Try it Yourself »Complete String ReferenceFor a complete String reference, go to our:Complete JavaScript String Reference.The reference contains descriptions and examples of all string properties and methods.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "ThetrimEnd()method works liketrim(), but removes whitespace only from the end of a string.",
          "JavaScript StringtrimEnd()is supported in all modern browsers since January 2020:",
          "ECMAScript 2017added two new string methods to JavaScript:padStart()andpadEnd()to support padding at the beginning and at the end of a string.",
          "ThepadStart()method pads a string from the start.",
          "It pads a string with another string (multiple times) until it reaches a given length.",
          "Pad a string with \"0\" until it reaches the length 4:",
          "Pad a string with \"x\" until it reaches the length 4:",
          "ThepadStart()method is a string method.",
          "To pad a number, convert the number to a string first.",
          "See the example below.",
          "padStart()is anECMAScript 2017feature.",
          "ES2017 is supported in all modern browsers since September 2017:",
          "padStart()is not supported in Internet Explorer.",
          "ThepadEnd()method pads a string from the end.",
          "It pads a string with another string (multiple times) until it reaches a given length.",
          "ThepadEnd()method is a string method.",
          "To pad a number, convert the number to a string first.",
          "See the example below.",
          "padEnd()is anECMAScript 2017feature.",
          "ES2017 is supported in all modern browsers since September 2017:",
          "padEnd()is not supported in Internet Explorer.",
          "Therepeat()method returns a string with a number of copies of a string.",
          "Therepeat()method returns a new string.",
          "Therepeat()method does not change the original string.",
          "Create copies of a text:",
          "repeat()is anES6  feature(JavaScript 2015).",
          "ES6 is fully supported in all modern browsers since June 2017:",
          "repeat()is not supported in Internet Explorer.",
          "Thereplace()method replaces a specified value with another \nvalue in a string:",
          "Thereplace()method does not change the string it is called on.",
          "Thereplace()method returns a new string.",
          "Thereplace()method replacesonly the firstmatch",
          "If you want to replace all matches, use a regular expression with the /g flag set. See examples below.",
          "By default, thereplace()method replacesonly the firstmatch:",
          "Try it Yourself »",
          "By default, thereplace()method is case sensitive. Writing MICROSOFT (with \nupper-case) will not work:",
          "Try it Yourself »",
          "To replace case insensitive, use aregular expressionwith an/iflag (insensitive):",
          "Try it Yourself »",
          "Regular expressions are written without quotes.",
          "To replace all matches, use aregular expressionwith a/gflag (global match):",
          "Try it Yourself »",
          "You will learn a lot more about regular expressions in the chapterJavaScript Regular \nExpressions.",
          "In 2021, JavaScript introduced the string methodreplaceAll():",
          "ThereplaceAll()method allows you to specify a\nregular expression instead of a string to be replaced.",
          "If the parameter is a regular expression, the global flag (g) must be set, otherwise\na TypeError is thrown.",
          "replaceAll()is anES2021feature.",
          "replaceAll()does not work in Internet Explorer.",
          "If you want to work with a string as an array, you can convert it to an array.",
          "A string can be converted to an array with thesplit()method:",
          "If the separator is omitted, the returned array will contain the whole string \nin index [0].",
          "If the separator is \"\", the returned array will be an array of single \ncharacters:",
          "For a complete String reference, go to our:",
          "Complete JavaScript String Reference.",
          "The reference contains descriptions and examples of all string properties and methods."
        ],
        "lists": [
          [
            "Theat(position)Method",
            "ThecharAt(position)Method",
            "ThecharCodeAt(position)Method",
            "Using property access [] like in arrays"
          ],
          [
            "It makes strings look like arrays (but they are not)",
            "If no character is found, [ ] returns undefined, while charAt() returns an empty string.",
            "It is read only. str[0] = \"A\" gives no error (but does not work!)"
          ],
          [
            "slice(start,end)",
            "substring(start,end)",
            "substr(start,length)"
          ]
        ],
        "examples": [
          "let text = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";let length = text.length;",
          "let text = \"HELLO WORLD\";let char = text.charAt(0);",
          "let text = \"HELLO WORLD\";let char = text.charCodeAt(0);",
          "const name = \"W3Schools\";let letter = name.at(2);",
          "const name = \"W3Schools\";let letter = name[2];",
          "let text = \"HELLO WORLD\";let char = text[0];",
          "let text = \"HELLO WORLD\";text[0] = \"A\";    // Gives no error, but does not work",
          "let text = \"Apple, Banana, Kiwi\";let part = text.slice(7, 13);",
          "let text = \"Apple, Banana, Kiwi\";let part = text.slice(7);",
          "let text = \"Apple, Banana, Kiwi\";let part = text.slice(-12);",
          "let text = \"Apple, Banana, Kiwi\";let part = text.slice(-12, -6);",
          "let str = \"Apple, Banana, Kiwi\";let part = str.substring(7, 13);",
          "let str = \"Apple, Banana, Kiwi\";let part = str.substr(7, 6);",
          "let str = \"Apple, Banana, Kiwi\";let part = str.substr(7);",
          "let str = \"Apple, Banana, Kiwi\";let part = str.substr(-4);",
          "let text1 = \"Hello World!\";let text2 = text1.toUpperCase();",
          "let text1 = \"Hello World!\";       // Stringlet text2 = text1.toLowerCase();  // text2 is text1 \nconverted to lower",
          "let text1 = \"Hello\";let text2 = \"World\";let text3 = text1.concat(\" \", text2);",
          "text = \"Hello\" + \" \" + \"World!\";text = \"Hello\".concat(\" \", \"World!\");",
          "let text1 = \"      Hello World!      \";let text2 = text1.trim();",
          "let text1 = \"     Hello World!     \";let text2 = text1.trimStart();",
          "let text1 = \"     Hello World!     \";let text2 = text1.trimEnd();",
          "let text = \"5\";let padded = text.padStart(4,\"0\");",
          "let text = \"5\";let padded = text.padStart(4,\"x\");",
          "let numb = 5;let text = numb.toString();let padded = text.padStart(4,\"0\");",
          "let text = \"5\";let padded = text.padEnd(4,\"0\");",
          "let text = \"5\";let padded = text.padEnd(4,\"x\");",
          "let numb = 5;let text = numb.toString();let padded = text.padEnd(4,\"0\");",
          "let text = \"Hello world!\";let result = text.repeat(2);",
          "let text = \"Hello world!\";let result = text.repeat(4);",
          "string.repeat(count)",
          "let text = \"Please visit Microsoft!\";let newText = text.replace(\"Microsoft\", \"W3Schools\");",
          "let text = \"Please visit Microsoft and Microsoft!\";let newText = text.replace(\"Microsoft\", \"W3Schools\");",
          "let text = \"Please visit Microsoft!\";let newText = text.replace(\"MICROSOFT\", \"W3Schools\");",
          "let text = \"Please visit Microsoft!\";let newText = text.replace(/MICROSOFT/i, \"W3Schools\");",
          "let text = \"Please visit Microsoft and Microsoft!\";let newText = text.replace(/Microsoft/g, \"W3Schools\");",
          "text = text.replaceAll(\"Cats\",\"Dogs\");text = text.replaceAll(\"cats\",\"dogs\");",
          "text = text.replaceAll(/Cats/g,\"Dogs\");text = text.replaceAll(/cats/g,\"dogs\");",
          "text.split(\",\")    // Split on commastext.split(\" \")    // Split on spacestext.split(\"|\")    // Split on pipe",
          "text.split(\"\")"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_string_search.asp",
    "cours": {
      "titre": "JavaScript String Search",
      "description": "String Search MethodsString indexOf()String lastIndexOf()String search()See Also:Basic String MethodsString TemplatesString match()String matchAll()String includes()String startsWith()String endsWith()",
      "lien": "https://www.w3schools.com/js/js_string_search.asp",
      "contenus": {
        "paragraphs": [
          "TheindexOf()method returns theindex(position)\nof thefirstoccurrence of a string in a string, or it returns -1 if the string is not found:",
          "JavaScript counts positions from zero.",
          "0 is the first position in a \nstring, 1 is the second, 2 is the third, ...",
          "ThelastIndexOf()method returns theindexof thelastoccurrence of a specified text in a string:",
          "BothindexOf(), andlastIndexOf()return -1\nif the text is not found:",
          "Both methods accept a second parameter as the starting position for the \nsearch:",
          "ThelastIndexOf()methods searches backwards \n(from the end to the beginning), meaning:\nif the second parameter is15, the search starts at position \n15, and searches to the beginning of the string.",
          "Thesearch()method searches a string for a string (or a regular expression)\nand returns the position of the match:",
          "The two methods,indexOf()andsearch(), areequal?",
          "They accept the same arguments (parameters), and return the same value?",
          "The two methods areNOTequal. These are the differences:",
          "You will learn more about \nregular expressions in a later chapter.",
          "Thematch()method returns an array containing the results of matching\na string against a string (or a regular expression).",
          "Perform a search for \"ain\":",
          "Perform a search for \"ain\":",
          "Perform a global search for \"ain\":",
          "Perform a global, case-insensitive search for \"ain\":",
          "If a regular expression does not include thegmodifier (global search),match()will return only the first match in the string.",
          "Read more about regular expressions in the chapterJS RegExp.",
          "ThematchAll()method returns an iterator containing the results of matching\na string against a string (or a regular expression).",
          "If the parameter is a regular expression, the global flag (g) must be set, otherwise\na TypeError is thrown.",
          "If you want to search case insensitive, the insensitive flag (i) must be set:",
          "matchAll()is anES2020feature.",
          "matchAll()does not work in Internet Explorer.",
          "Theincludes()method returns true if a string contains a specified value.",
          "Otherwise it returnsfalse.",
          "Check if a string includes \"world\":",
          "Check if a string includes \"world\". Start at position 12:",
          "includes()is case sensitive.",
          "includes()is anES6 feature.",
          "includes()is not supported in Internet Explorer.",
          "ThestartsWith()method returnstrueif a string begins with a specified value.",
          "Otherwise it returnsfalse:",
          "Returns true:",
          "Returns false:",
          "A start position for the search can be specified:",
          "Returns false:",
          "Returns true:",
          "startsWith()is case sensitive.",
          "startsWith()is anES6 feature.",
          "startsWith()is not supported in Internet Explorer.",
          "TheendsWith()method returnstrueif a string ends with a specified value.",
          "Otherwise it returnsfalse:",
          "Check if a string ends with \"Doe\":",
          "Check if the 11 first characters of a string ends with \"world\":",
          "Try it Yourself »",
          "endsWith()is case sensitive.",
          "endsWith()is anES6 feature.",
          "endsWith()is not supported in Internet Explorer.",
          "For a complete String reference, go to our:",
          "Complete JavaScript String Reference.",
          "The reference contains descriptions and examples of all string properties and methods."
        ],
        "lists": [
          [
            "Thesearch()method cannot take a second start position argument.",
            "TheindexOf()method cannot take \npowerful search values (regular expressions)."
          ]
        ],
        "examples": [
          "let text = \"Please locate where 'locate' occurs!\";let index = text.indexOf(\"locate\");",
          "let text = \"Please locate where 'locate' occurs!\";let index = text.lastIndexOf(\"locate\");",
          "let text = \"Please locate where 'locate' occurs!\";let index = text.lastIndexOf(\"John\");",
          "let text = \"Please locate where 'locate' occurs!\";let index = text.indexOf(\"locate\", 15);",
          "let text = \"Please locate where 'locate' occurs!\";text.lastIndexOf(\"locate\", 15);",
          "let text = \"Please locate where 'locate' occurs!\";text.search(\"locate\");",
          "let text = \"Please locate where 'locate' occurs!\";text.search(/locate/);",
          "let text = \"The rain in SPAIN stays mainly in the plain\";text.match(\"ain\");",
          "let text = \"The rain in SPAIN stays mainly in the plain\";text.match(/ain/);",
          "let text = \"The rain in SPAIN stays mainly in the plain\";text.match(/ain/g);",
          "let text = \"The rain in SPAIN stays mainly in the plain\";text.match(/ain/gi);",
          "const iterator = text.matchAll(\"Cats\");",
          "const iterator = text.matchAll(/Cats/g);",
          "const iterator = text.matchAll(/Cats/gi);",
          "let text = \"Hello world, welcome to the universe.\";text.includes(\"world\");",
          "let text = \"Hello world, welcome to the universe.\";text.includes(\"world\", 12);",
          "let text = \"Hello world, welcome to the universe.\";text.startsWith(\"Hello\");",
          "let text = \"Hello world, welcome to the universe.\";text.startsWith(\"world\")",
          "let text = \"Hello world, welcome to the universe.\";text.startsWith(\"world\", 5)",
          "let text = \"Hello world, welcome to the universe.\";text.startsWith(\"world\", 6)",
          "let text = \"John Doe\";text.endsWith(\"Doe\");",
          "let text = \"Hello world, welcome to the universe.\";text.endsWith(\"world\", 11);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_string_templates.asp",
    "cours": {
      "titre": "JavaScript Template Strings",
      "description": "String TemplatesTemplate StringsTemplate LiteralsBeloved child has many names",
      "lien": "https://www.w3schools.com/js/js_string_templates.asp",
      "contenus": {
        "paragraphs": [
          "Beloved child has many names",
          "Template Stringsuse back-ticks (``) rather than the quotes (\"\") to define a string:",
          "Try it Yourself »",
          "Template Stringsallow both single and double quotes inside a string:",
          "Try it Yourself »",
          "Template Stringsallow multiline strings:",
          "Try it Yourself »",
          "Template Stringprovide an easy way to interpolate variables and expressions into strings.",
          "The method is called string interpolation.",
          "The syntax is:",
          "Template Stringsallow variables in strings:",
          "Try it Yourself »",
          "Automatic replacing of variables with real values is calledstring interpolation.",
          "Template Stringsallow expressions in strings:",
          "Try it Yourself »",
          "Automatic replacing of expressions with real values is calledstring interpolation.",
          "Try it Yourself »",
          "Template Stringsis anES6  feature(JavaScript 2015).",
          "ES6 is fully supported in all modern browsers since June 2017:",
          "Template Stringsis not supported in Internet Explorer.",
          "For a complete String reference, go to our:",
          "Complete JavaScript String Reference.",
          "The reference contains descriptions and examples of all string properties and methods."
        ],
        "lists": [],
        "examples": [
          "let text = `Hello World!`;",
          "let text = `He's often called \"Johnny\"`;",
          "let text =`The quickbrown foxjumps overthe lazy dog`;",
          "${...}",
          "let firstName = \"John\";let lastName = \"Doe\";let text = `Welcome ${firstName}, ${lastName}!`;",
          "let price = 10;let VAT = 0.25;let total = `Total: ${(price * (1 + VAT)).toFixed(2)}`;",
          "let header = \"Template Strings\";let tags = [\"template strings\", \"javascript\", \"es6\"];let html = `<h2>${header}</h2><ul>`;for (const x of tags) {html += `<li>${x}</li>`;}html += `</ul>`;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_numbers.asp",
    "cours": {
      "titre": "JavaScriptNumbers",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_numbers.asp",
      "contenus": {
        "paragraphs": [
          "JavaScript has only one type of number.\nNumbers can be written with or without decimals.",
          "Try it \nYourself »",
          "Extra large or extra small numbers can be written with scientific (exponent) notation:",
          "Try it \nYourself »",
          "Unlike many other programming languages, \nJavaScript does not define different types of numbers, like integers, short, long, \nfloating-point etc.",
          "JavaScript numbers are always stored as double precision floating point \nnumbers, following the international IEEE 754 standard.This format \nstores numbers in 64 bits, where the number (the fraction) is stored in bits 0 \nto 51, the exponent in bits 52 to 62, and the sign in bit 63:",
          "Integers (numbers without a period or exponent notation) are accurate up to 15 digits.",
          "The maximum number of decimals is 17.",
          "Floating point arithmetic is not always 100% accurate:",
          "Try it \nYourself »",
          "To solve the problem above, it helps to multiply and divide:",
          "WARNING !!",
          "JavaScript uses the + operator for both addition and concatenation.",
          "Numbers are added. Strings are concatenated.",
          "If you add two numbers, the result will be a number:",
          "If you add two strings, the result will be a string concatenation:",
          "If you add a number and a string, the result will be a string concatenation:",
          "If you add a string and a number, the result will be a string concatenation:",
          "A common mistake is to expect this result to be 30:",
          "A common mistake is to expect this result to be 102030:",
          "The JavaScript interpreter works from left to right.",
          "First 10 + 20 is added because x and y are both numbers.",
          "Then 30 + \"30\" is concatenated because z is a string.",
          "JavaScript strings can have numeric content:",
          "JavaScript will try to convert strings to numbers in all numeric operations:",
          "This will work:",
          "Try it Yourself »",
          "This will also work:",
          "Try it Yourself »",
          "And this will work:",
          "Try it Yourself »",
          "But this will not work:",
          "Try it Yourself »",
          "In the last example JavaScript uses the + operator to concatenate the strings.",
          "NaNis a JavaScript reserved word indicating that a number is not a legal number.",
          "Trying to do arithmetic with a non-numeric string will result inNaN(Not a \nNumber):",
          "Try it Yourself »",
          "However, if the string is numeric, the result will be a \nnumber:",
          "You can use the global JavaScript functionisNaN()to find out if a value is a not a number:",
          "Watch out forNaN. If you useNaNin a mathematical operation, the result will also beNaN:",
          "Or the result might be a concatenation like NaN5:",
          "NaNis a number:typeof NaNreturnsnumber:",
          "Infinity(or-Infinity) is the value JavaScript will return if you calculate a number outside the largest \npossible number.",
          "Division by 0 (zero) also generatesInfinity:",
          "Infinityis a number:typeof Infinityreturnsnumber.",
          "JavaScript interprets numeric constants as hexadecimal if they are preceded by \n0x.",
          "Never write a number with a leading zero (like 07).Some JavaScript versions interpret \nnumbers as octal if they are written with a leading zero.",
          "By default, JavaScript displays numbers asbase 10decimals.",
          "But you can use thetoString()method to output numbers frombase 2tobase 36.",
          "Hexadecimal isbase 16. Decimal isbase 10. \nOctal isbase 8. Binary isbase 2.",
          "Normally JavaScript numbers are primitive values created from literals:",
          "But numbers can also be defined as objects with the keywordnew:",
          "Do not create Number objects.",
          "Thenewkeyword complicates the code and slows down execution speed.",
          "Number Objects can produce unexpected results:",
          "When using the==operator, x and y areequal:",
          "When using the===operator, x and y arenot equal.",
          "Note the difference between(x==y)and(x===y).",
          "(x == y)true or false?",
          "(x === y)true or false?",
          "Comparing two JavaScript objectsalwaysreturnsfalse.",
          "For a complete Number reference, visit our:",
          "Complete JavaScript Number Reference.",
          "The reference contains descriptions and examples of all Number  properties and methods."
        ],
        "lists": [],
        "examples": [
          "let x = 3.14;    // A number with decimalslet y = 3;       // A number without decimals",
          "let x = 123e5;    // 12300000let y = 123e-5;   // 0.00123",
          "let x = 999999999999999;   // x will be 999999999999999let y = 9999999999999999;  // y will be 10000000000000000",
          "let x = 0.2 + 0.1;",
          "let x = (0.2 * 10 + 0.1 * 10) / 10;",
          "let x = 10;let y = 20;let z = x + y;",
          "let x = \"10\";let y = \"20\";let z = x + y;",
          "let x = 10;let y = \"20\";let z = x + y;",
          "let x = \"10\";let y = 20;let z = x + y;",
          "let x = 10;let y = 20;let z = \"The result is: \" + x + y;",
          "let x = 10;let y = 20;let z = \"30\";let result = x + y + z;",
          "let x = 100;         // x is a numberlet y = \"100\";       // y is a \nstring",
          "let x = \"100\";let y = \"10\";let z = x / y;",
          "let x = \"100\";let y = \"10\";let z = x * y;",
          "let x = \"100\";let y = \"10\";let z = x - y;",
          "let x = \"100\";let y = \"10\";let z = x + y;",
          "let x = 100 / \"Apple\";",
          "let x = 100 / \"10\";",
          "let x = 100 / \"Apple\";isNaN(x);",
          "let x = NaN;let y = 5;let z = x + y;",
          "let x = NaN;let y = \"5\";let z = x + y;",
          "typeof NaN;",
          "let myNumber = 2;// Execute until Infinitywhile (myNumber != Infinity) {myNumber = myNumber * myNumber;}",
          "let x =  2 / 0;let y = -2 / 0;",
          "typeof Infinity;",
          "let x = 0xFF;",
          "let myNumber = 32;myNumber.toString(32);myNumber.toString(16);myNumber.toString(12);myNumber.toString(10);myNumber.toString(8);myNumber.toString(2);",
          "let x = 123;",
          "let y = new Number(123);",
          "let x = 123;let y = new Number(123);",
          "let x = 500;let y = new Number(500);",
          "let x = 500;let y = new Number(500);",
          "let x = new Number(500);let y = new Number(500);",
          "let x = new Number(500);let y = new Number(500);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_bigint.asp",
    "cours": {
      "titre": "JavaScript BigInt",
      "description": "JavaScriptBigIntvariables are used to store big integer values\nthat are too big to be represented by a normal JavaScriptNumber.",
      "lien": "https://www.w3schools.com/js/js_bigint.asp",
      "contenus": {
        "paragraphs": [
          "JavaScriptBigIntvariables are used to store big integer values\nthat are too big to be represented by a normal JavaScriptNumber.",
          "JavaScript integers are only accurate up to 15 digits:",
          "In JavaScript, all numbers are stored in a 64-bit floating-point format (IEEE 754 standard).",
          "With this standard, large integer cannot be exactly represented and will be rounded.",
          "Because of this, JavaScript can only safely represent integers:",
          "Up to9007199254740991+(253-1)",
          "and",
          "Down to-9007199254740991-(253-1).",
          "Integer values outside this range lose precision.",
          "To create aBigInt, append n to the end of an integer or callBigInt():",
          "The JavaScripttypeofaBigIntis \"bigint\":",
          "BigIntis the second numeric data type in JavaScript\n(afterNumber).",
          "WithBigIntthe total number of supported data types in JavaScript is 8:",
          "1. String2. Number3. Bigint4. Boolean5. Undefined6. Null7. Symbol8. Object",
          "Operators that can be used on a JavaScriptNumbercan also be used on aBigInt.",
          "Arithmetic between aBigIntand aNumberis not allowed (type conversion lose information).",
          "Unsigned right shift (>>>) can not be done on aBigInt(it does not have a fixed width).",
          "ABigIntcan not have decimals.",
          "BigIntcan also be written in hexadecimal, octal, or binary notation:",
          "Rounding can compromise program security:",
          "BigIntis supported in all browsers since September 2020:",
          "ES6added max and min properties to the Number object:",
          "ES6also added 2 new methods to the Number object:",
          "TheNumber.isInteger()method returnstrueif the argument is an integer.",
          "A safe integer is an integer that can be exactly represented as a double precision number.",
          "TheNumber.isSafeInteger()method returnstrueif the argument is a safe integer.",
          "Safe integers are all integers from -(253- 1) to +(253- 1).This is safe: 9007199254740991. This is not safe: 9007199254740992."
        ],
        "lists": [
          [
            "MAX_SAFE_INTEGER",
            "MIN_SAFE_INTEGER"
          ],
          [
            "Number.isInteger()",
            "Number.isSafeInteger()"
          ]
        ],
        "examples": [
          "let x = 999999999999999;let y = 9999999999999999;",
          "let x = 9999999999999999;let y = 9999999999999999n;",
          "let x = 1234567890123456789012345n;let y = BigInt(1234567890123456789012345)",
          "let x = BigInt(999999999999999);let type = typeof x;",
          "let x = 9007199254740995n;let y = 9007199254740995n;let z = x * y;",
          "let x = 5n;let y = x / 2;// Error: Cannot mix BigInt and other types, use explicit conversion.",
          "let x = 5n;let y = Number(x) / 2;",
          "let hex = 0x20000000000003n;let oct = 0o400000000000000003n;let bin = 0b100000000000000000000000000000000000000000000000000011n;",
          "9007199254740992 === 9007199254740993; // is true !!!",
          "let x = Number.MAX_SAFE_INTEGER;",
          "let x = Number.MIN_SAFE_INTEGER;",
          "Number.isInteger(10);Number.isInteger(10.5);",
          "Number.isSafeInteger(10);Number.isSafeInteger(12345678901234567890);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_number_methods.asp",
    "cours": {
      "titre": "JavaScriptNumber Methods",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_number_methods.asp",
      "contenus": {
        "paragraphs": [
          "Thesenumber methodscan be used on all JavaScript numbers:",
          "ThetoString()method returns a number as a string.",
          "All number methods can be used on any type of numbers (literals, variables, or expressions):",
          "toExponential()returns a string, with a number rounded and written using exponential notation.",
          "A parameter defines the number of characters behind the decimal point:",
          "The parameter is optional. If you don't specify it, JavaScript will not round the number.",
          "toFixed()returns a string, with the number \nwritten with a specified number of \ndecimals:",
          "toFixed(2)is perfect for working with money.",
          "toPrecision()returns a string, with a number written with a \nspecified length:",
          "valueOf()returns a number as a number.",
          "In JavaScript, a number can be a primitive value (typeof = number) or an \nobject (typeof = object).",
          "ThevalueOf()method is used internally in JavaScript to convert Number \nobjects to primitive values.",
          "There is no reason to use it in your code.",
          "All JavaScript data types have avalueOf()and atoString()method.",
          "There are 3 JavaScript methods that can be used \nto convert a variable to a number:",
          "The methods above are notnumbermethods. They areglobalJavaScript methods.",
          "TheNumber()method can be used to convert JavaScript variables to numbers:",
          "If the number cannot be converted,NaN(Not a Number) is returned.",
          "Number()can also convert a date to a number.",
          "TheDate()method returns the number of milliseconds since 1.1.1970.",
          "The number of milliseconds between 1970-01-02 and 1970-01-01 is 86400000:",
          "parseInt()parses a string and returns a whole number. Spaces are \nallowed. Only the first number is returned:",
          "If the number cannot be converted,NaN(Not a Number) is returned.",
          "parseFloat()parses a string and returns a number. Spaces are \nallowed. Only the first number is returned:",
          "If the number cannot be converted,NaN(Not a Number) is returned.",
          "Theseobject methodsbelong to theNumberobject:",
          "The number methods above belong to the JavaScriptNumber Object.",
          "These methods can only be accessed likeNumber.isInteger().",
          "Using X.isInteger() where X is a variable, will result in an error:",
          "TypeError X.isInteger is not a function.",
          "TheNumber.isInteger()method returnstrueif the argument is an integer.",
          "A safe integer is an integer that can be exactly represented as a double precision number.",
          "TheNumber.isSafeInteger()method returnstrueif the argument is a safe integer.",
          "Safe integers are all integers from -(253- 1) to +(253- 1).This is safe: 9007199254740991. This is not safe: 9007199254740992.",
          "Number.parseFloat()parses a string and returns a number.",
          "Spaces are allowed. Only the first number is returned:",
          "If the number cannot be converted,NaN(Not a Number) is returned.",
          "TheNumbermethodsNumber.parseInt()andNumber.parseFloat()are the same as theGlobalmethodsparseInt()andparseFloat().",
          "The purpose is modularization of globals (to make it easier to use the same JavaScript code outside the browser).",
          "Number.parseInt()parses a string and returns a whole number.",
          "Spaces are allowed. Only the first number is returned:",
          "If the number cannot be converted,NaN(Not a Number) is returned.",
          "For a complete Number reference, visit our:",
          "Complete JavaScript Number Reference.",
          "The reference contains descriptions and examples of all Number  properties and methods."
        ],
        "lists": [],
        "examples": [
          "let x = 123;x.toString();(123).toString();(100 + 23).toString();",
          "let x = 9.656;x.toExponential(2);x.toExponential(4);x.toExponential(6);",
          "let x = 9.656;x.toFixed(0);x.toFixed(2);x.toFixed(4);x.toFixed(6);",
          "let x = 9.656;x.toPrecision();x.toPrecision(2);x.toPrecision(4);x.toPrecision(6);",
          "let x = 123;x.valueOf();(123).valueOf();(100 + 23).valueOf();",
          "Number(true);Number(false);Number(\"10\");Number(\"  10\");Number(\"10  \");Number(\" 10  \");Number(\"10.33\");Number(\"10,33\");Number(\"10 33\");Number(\"John\");",
          "Number(new Date(\"1970-01-01\"))",
          "Number(new Date(\"1970-01-02\"))",
          "Number(new Date(\"2017-09-30\"))",
          "parseInt(\"-10\");parseInt(\"-10.33\");parseInt(\"10\");parseInt(\"10.33\");parseInt(\"10 20 30\");parseInt(\"10 years\");parseInt(\"years 10\");",
          "parseFloat(\"10\");parseFloat(\"10.33\");parseFloat(\"10 20 30\");parseFloat(\"10 years\");parseFloat(\"years 10\");",
          "Number.isInteger(10);Number.isInteger(10.5);",
          "Number.isSafeInteger(10);Number.isSafeInteger(12345678901234567890);",
          "Number.parseFloat(\"10\");Number.parseFloat(\"10.33\");Number.parseFloat(\"10 20 30\");Number.parseFloat(\"10 years\");Number.parseFloat(\"years 10\");",
          "Number.parseInt(\"-10\");Number.parseInt(\"-10.33\");Number.parseInt(\"10\");Number.parseInt(\"10.33\");Number.parseInt(\"10 20 30\");Number.parseInt(\"10 years\");Number.parseInt(\"years 10\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_number_properties.asp",
    "cours": {
      "titre": "JavaScriptNumber Properties",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_number_properties.asp",
      "contenus": {
        "paragraphs": [
          "Number.EPSILONis the difference between\nthe smallest floating point number greater than 1 and 1.",
          "Number.EPSILONis anES6feature.",
          "It does not work in Internet Explorer.",
          "Number.MAX_VALUEis a constant representing the largest possible number in JavaScript.",
          "Number properties belong to the JavaScriptNumber Object.",
          "These properties can only be accessed asNumber.MAX_VALUE.",
          "Using x.MAX_VALUE, where x is a variable or a value,\nwill returnundefined:",
          "Number.MIN_VALUEis a constant representing the lowest possible number in JavaScript.",
          "Number.MAX_SAFE_INTEGERrepresents the maximum safe integer in JavaScript.",
          "Number.MAX_SAFE_INTEGERis (253- 1).",
          "Number.MIN_SAFE_INTEGERrepresents the minimum safe integer in JavaScript.",
          "Number.MIN_SAFE_INTEGERis -(253- 1).",
          "MAX_SAFE_INTEGERandMIN_SAFE_INTEGERareES6features.",
          "They do not work in Internet Explorer.",
          "POSITIVE_INFINITYis returned on overflow:",
          "NEGATIVE_INFINITYis returned on overflow:",
          "NaNis a JavaScript reserved word for a number that is not a legal number.",
          "Trying to do arithmetic with a non-numeric string will result inNaN(Not a \nNumber):",
          "Try it Yourself »",
          "For a complete Number reference, visit our:",
          "Complete JavaScript Number Reference.",
          "The reference contains descriptions and examples of all Number  properties and methods."
        ],
        "lists": [],
        "examples": [
          "let x = Number.EPSILON;",
          "let x = Number.MAX_VALUE;",
          "let x = 6;x.MAX_VALUE",
          "let x = Number.MIN_VALUE;",
          "let x = Number.MAX_SAFE_INTEGER;",
          "let x = Number.MIN_SAFE_INTEGER;",
          "let x = Number.POSITIVE_INFINITY;",
          "let x = 1 / 0;",
          "let x = Number.NEGATIVE_INFINITY;",
          "let x = -1 / 0;",
          "let x = Number.NaN;",
          "let x = 100 / \"Apple\";"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_arrays.asp",
    "cours": {
      "titre": "JavaScriptArrays",
      "description": "An array is a special variable, which can hold more than one value:const cars = [\"Saab\", \"Volvo\", \"BMW\"];Try it Yourself »",
      "lien": "https://www.w3schools.com/js/js_arrays.asp",
      "contenus": {
        "paragraphs": [
          "An array is a special variable, which can hold more than one value:",
          "If you have a list of items (a list of car names, for example), storing the \ncars in single variables could look like this:",
          "However, what if you want to loop through the cars and find a specific one? \nAnd what if you had not 3 cars, but 300?",
          "The solution is an array!",
          "An array can hold many values under a single name, and you can \naccess the values by referring to an index number.",
          "Using an array literal is the easiest way to create a JavaScript Array.",
          "Syntax:",
          "It is a common practice to declare arrays with theconstkeyword.",
          "Learn more aboutconstwith arrays in the chapter:JS Array Const.",
          "Spaces and line breaks are not important. A declaration can span multiple lines:",
          "You can also create an array, and then provide the elements:",
          "The following example also creates an Array, and assigns values to it:",
          "The two examples above do exactly the same.",
          "There is no need to usenew Array().",
          "For simplicity, readability and execution speed, use the array literal method.",
          "You access an array element by referring to theindex number:",
          "Note:Array indexes start with 0.",
          "[0] is the first element.\n[1] is the second element.",
          "This statement changes the value of the first element incars:",
          "The JavaScript methodtoString()converts an array to a \nstring of (comma separated) array values.",
          "Result:",
          "With JavaScript, the full array can be accessed by referring to the array \nname:",
          "Arrays are a special type of objects. Thetypeofoperator in JavaScript returns \"object\" for \narrays.",
          "But, JavaScript arrays are best described as arrays.",
          "Arrays usenumbersto access its \"elements\". In this \nexample,person[0]returns John:",
          "Objects usenamesto access its \"members\". In this example,person.firstNamereturns John:",
          "JavaScript variables can be objects. Arrays are special kinds of objects.",
          "Because of this, you can have variables of different types in the \nsame Array.",
          "You can have objects in an Array. You can have functions in an Array. You can \nhave arrays in an Array:",
          "The real strength of JavaScript arrays are the built-in array properties and \nmethods:",
          "Array methods are covered in the next chapters.",
          "Thelengthproperty of an array returns the length of an array (the number of array \nelements).",
          "Thelengthproperty is always one more than the highest array index.",
          "One way to loop through an array, is using aforloop:",
          "You can also use theArray.forEach()function:",
          "The easiest way to add a new element to an array is using thepush()method:",
          "New element can also be added to an array using thelengthproperty:",
          "WARNING !Adding elements with high indexes can create undefined \"holes\" in an array:",
          "Adding elements with high indexes can create undefined \"holes\" in an array:",
          "Many programming languages support arrays with named indexes.",
          "Arrays with named indexes are called associative \narrays (or hashes).",
          "JavaScript doesnotsupport arrays with named indexes.",
          "In JavaScript,arraysalways usenumbered indexes.",
          "WARNING !!If you use named indexes, JavaScript will redefine the array to an object.",
          "After that, some array methods and properties will produceincorrect \nresults.",
          "In JavaScript,arraysusenumbered indexes.",
          "In JavaScript,objectsusenamed indexes.",
          "Arrays are a special kind of objects, with numbered indexes.",
          "JavaScript has a built-in array constructornew Array().",
          "But you can safely use[]instead.",
          "These two different statements both create a new empty array named points:",
          "These two different statements both create a new array containing 6 numbers:",
          "Thenewkeyword can produce some unexpected results:",
          "is not the same as:",
          "A common question is: How do I know if a variable is an array?",
          "The problem is that the JavaScript operatortypeofreturns \n\"object\":",
          "The typeof operator returns object because a JavaScript array is an \nobject.",
          "To solve this problem ECMAScript 5 (JavaScript 2009) defined a new methodArray.isArray():",
          "Theinstanceofoperator returns true if an object is created \nby a given constructor:",
          "Values in objects can be arrays, and values in arrays can be objects:",
          "To access arrays inside arrays, use a for-in loop for each array:",
          "For a complete Array reference, go to our:",
          "Complete JavaScript Array Reference.",
          "The reference contains descriptions and examples of all Array \nproperties and methods."
        ],
        "lists": [
          [
            "JavaScript does not support associative arrays.",
            "You should useobjectswhen you want the element names to bestrings (text).",
            "You should usearrayswhen you want the element names to benumbers."
          ]
        ],
        "examples": [
          "const cars = [\"Saab\", \"Volvo\", \"BMW\"];",
          "let car1 = \"Saab\";let car2 = \"Volvo\";let car3 = \"BMW\";",
          "constarray_name= [item1,item2, ...];",
          "const cars = [\"Saab\", \"Volvo\", \"BMW\"];",
          "const cars = [\"Saab\",\"Volvo\",\"BMW\"];",
          "const cars = [];cars[0]= \"Saab\";cars[1]= \"Volvo\";cars[2]= \"BMW\";",
          "const cars = new Array(\"Saab\", \"Volvo\", \"BMW\");",
          "const cars = [\"Saab\", \"Volvo\", \"BMW\"];let car = cars[0];",
          "cars[0] = \"Opel\";",
          "const cars = [\"Saab\", \"Volvo\", \"BMW\"];cars[0] = \"Opel\";",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];document.getElementById(\"demo\").innerHTML = fruits.toString();",
          "const cars = [\"Saab\", \"Volvo\", \"BMW\"];document.getElementById(\"demo\").innerHTML = cars;",
          "const person = [\"John\", \"Doe\", 46];",
          "const person = {firstName:\"John\", lastName:\"Doe\", age:46};",
          "myArray[0] = Date.now;myArray[1] = myFunction;myArray[2] = myCars;",
          "cars.length   // Returns the number of elementscars.sort()   // Sorts the array",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];let length = fruits.length;",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];let fruit = fruits[0];",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];let fruit = fruits[fruits.length - 1];",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];let fLen = fruits.length;let text = \"<ul>\";for (let i = 0; i < fLen; i++) {text += \"<li>\" + fruits[i] + \"</li>\";}text \n  += \"</ul>\";",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];let text = \"<ul>\";fruits.forEach(myFunction);text += \"</ul>\";function \n  myFunction(value) {text += \"<li>\" + value + \"</li>\";}",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\"];fruits.push(\"Lemon\");  // Adds a new element (Lemon) to fruits",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\"];fruits[fruits.length] = \"Lemon\";  // Adds \"Lemon\" to fruits",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\"];fruits[6] = \"Lemon\";  // Creates undefined \"holes\" in fruits",
          "const person = [];person[0] = \"John\";person[1] = \"Doe\";person[2] = 46;person.length;    // Will return 3person[0];        // Will return \"John\"",
          "const person = [];person[\"firstName\"] = \"John\";person[\"lastName\"] = \"Doe\";person[\"age\"] = 46;person.length;     // Will return 0person[0];         // Will return undefined",
          "const points = new Array();const points = [];",
          "const points = new Array(40, 100, 1, 5, 25, 10);const points = [40, 100, 1, 5, 25, 10];",
          "// Create an array with three elements:const points = new Array(40, 100, 1);",
          "// Create an array with two elements:const points = new Array(40, 100);",
          "// Create an array with one element ???const points = new Array(40);",
          "const points = [40];",
          "const points = new Array(40);",
          "// Create an array with one element:const points = [40];",
          "// Create an array with 40 undefined elements:const points = new Array(40);",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\"];let type = typeof fruits;",
          "Array.isArray(fruits);",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\"];(fruits instanceof Array);",
          "const myObj =\n  {name: \"John\",age: 30,cars: [{name:\"Ford\", \n  models:[\"Fiesta\", \"Focus\", \"Mustang\"]},{name:\"BMW\", models:[\"320\", \"X3\", \"X5\"]},{name:\"Fiat\", models:[\"500\", \"Panda\"]}]}",
          "for (let i in myObj.cars) {x += \"<h1>\" + myObj.cars[i].name \n  + \"</h1>\";for (let j in myObj.cars[i].models) {x += myObj.cars[i].models[j];}}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_array_methods.asp",
    "cours": {
      "titre": "JavaScript Array Methods",
      "description": "Basic Array MethodsArray lengthArray toString()Array at()Array join()Array pop()Array push()See Also:Search MethodsSort MethodsIteration MethodsArray shift()Array unshift()Array delete()Array concat()Array copyWithin()Array flat()Array splice()Array toSpliced()Array slice()",
      "lien": "https://www.w3schools.com/js/js_array_methods.asp",
      "contenus": {
        "paragraphs": [
          "Thelengthproperty returns the length (size) of an array:",
          "The JavaScript methodtoString()converts an array to a \nstring of (comma separated) array values.",
          "Result:",
          "ES2022intoduced the array methodat():",
          "Get the third element of fruits using at():",
          "Get the third element of fruits using []:",
          "Theat()method returns an indexed element from an array.",
          "Theat()method returns the same as[].",
          "Theat()method is supported in all modern browsers since March 2022:",
          "Many languages allownegative bracket indexinglike [-1] to access elements from the end of an\nobject / array / string.",
          "This is not possible in JavaScript, because [] is used for accessing both arrays and objects.\nobj[-1] refers to the value of key -1, not to the last property of the object.",
          "Theat()method was introduced in ES2022 to solve this problem.",
          "Thejoin()method also joins all array elements into a string.",
          "It behaves just liketoString(), but in addition you can specify the separator:",
          "Result:",
          "When you work with arrays, it is easy to remove elements and add \nnew elements.",
          "This is what popping and pushing is:",
          "Popping itemsoutof an array, or pushing \nitemsintoan array.",
          "Thepop()method removes the last element from an array:",
          "Thepop()method returns the value that was \"popped out\":",
          "Thepush()method adds a new element to an array (at the end):",
          "Thepush()method returns the new array length:",
          "Shifting is equivalent to popping, but working on the first element instead of \nthe last.",
          "Theshift()method removes the first array element and \"shifts\" all \nother elements to a lower index.",
          "Theshift()method returns the value that was \"shifted out\":",
          "Theunshift()method adds a new element to an array (at the beginning), and \"unshifts\" \nolder elements:",
          "Theunshift()method returns the new array length:",
          "Array elements are accessed using theirindex number:",
          "Arrayindexesstart with 0:",
          "[0] is the first array element[1] is the second[2] is the third ...",
          "Thelengthproperty provides an easy way to append a new element to an array:",
          "Usingdelete()leavesundefinedholes in the \narray.",
          "Use pop() or shift() instead.",
          "In programming languages, concatenation means joining strings end-to-end.",
          "Concatenation \"snow\" and \"ball\" gives \"snowball\".",
          "Concatenating arrays means joining arrays end-to-end.",
          "Theconcat()method creates a new array by merging (concatenating) \nexisting arrays:",
          "Theconcat()method does not change the existing arrays. It always returns a new array.",
          "Theconcat()method can take any number of array arguments.",
          "Theconcat()method can also take strings as arguments:",
          "ThecopyWithin()method copies array elements to another position in an array:",
          "Copy to index 2, all elements from index 0:",
          "Copy to index 2, the elements from index 0 to 2:",
          "ThecopyWithin()method overwrites the existing values.",
          "ThecopyWithin()method does not add items to the array.",
          "ThecopyWithin()method does not change the length of the array.",
          "Flattening an array is the process of reducing the dimensionality of an array.",
          "Flattening is useful when you want to convert a multi-dimensional array into a one-dimensional array.",
          "ES2019Introduced the Array flat() method.",
          "Theflat()method creates a new array with sub-array elements concatenated to a specified depth.",
          "JavaScript Arrayflat()is supported in all modern browsers since January 2020:",
          "ES2019 added the ArrayflatMap()method to JavaScript.",
          "TheflatMap()method first maps all elements of an array\nand then creates a new array by flattening the array.",
          "JavaScript ArrayflatMap()is supported in all modern browsers since January 2020:",
          "Thesplice()method adds new items to an array.",
          "Theslice()method slices out a piece of an array.",
          "Thesplice()method can be used to add new items to an array:",
          "The first parameter (2) defines the positionwherenew elements should beadded(spliced in).",
          "The second parameter (0) defineshow manyelements should beremoved.",
          "The rest of the parameters (\"Lemon\" , \"Kiwi\") define the new elements to beadded.",
          "Thesplice()method returns an array with the deleted items:",
          "With clever parameter setting, you can usesplice()to remove elements without leaving \n\"holes\" in the array:",
          "The first parameter (0) defines the position where new elements should beadded(spliced in).",
          "The second parameter (1) defineshow manyelements should beremoved.",
          "The rest of the parameters are omitted. No new elements will be added.",
          "ES2023added the Array toSpliced() method as a safe way to splice an array without altering the original array.",
          "The difference between the newtoSpliced()method and the oldsplice()method is that the new method\ncreates a new array, keeping the original array unchanged, while the old method altered the original array.",
          "Theslice()method slices out a piece of an array into a new \narray:",
          "Slice out a part of an array starting from array element 1 (\"Orange\"):",
          "Theslice()method creates a new array.",
          "Theslice()method does not remove any elements from the source array.",
          "Slice out a part of an array starting from array element 3 (\"Apple\"):",
          "Theslice()method can take two arguments likeslice(1, 3).",
          "The method then selects elements from the start argument, and up to (but not \nincluding) the end argument.",
          "If the end argument is omitted, like in the first examples, theslice()method slices out the rest of the array.",
          "JavaScript automatically converts an array to a comma separated string when a \nprimitive value is expected.",
          "This is always the case when you try to output an array.",
          "These two examples will produce the same result:",
          "All JavaScript objects have a toString() method.",
          "Searching arraysare covered in the next chapter of this tutorial.",
          "Sorting arrayscovers the methods used to sort arraysg.",
          "Iterating arrayscovers methods that operate on all array elements.",
          "For a complete Array reference, go to our:",
          "Complete JavaScript Array Reference.",
          "The reference contains descriptions and examples of all Array \nproperties and methods."
        ],
        "lists": [],
        "examples": [
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];let size = fruits.length;",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];document.getElementById(\"demo\").innerHTML = fruits.toString();",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];let fruit = fruits.at(2);",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];let fruit = fruits[2];",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];document.getElementById(\"demo\").innerHTML = fruits.join(\" * \");",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits.pop();",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];let fruit = fruits.pop();",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits.push(\"Kiwi\");",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];let length = fruits.push(\"Kiwi\");",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits.shift();",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];let fruit = fruits.shift();",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits.unshift(\"Lemon\");",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits.unshift(\"Lemon\");",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits[0] = \"Kiwi\";",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits[fruits.length] = \"Kiwi\";",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];delete fruits[0];",
          "const myGirls = [\"Cecilie\", \"Lone\"];const myBoys = [\"Emil\", \"Tobias\", \"Linus\"];const myChildren = myGirls.concat(myBoys);",
          "const arr1 = [\"Cecilie\", \"Lone\"];const arr2 = [\"Emil\", \"Tobias\", \"Linus\"];const arr3 = [\"Robin\", \"Morgan\"];const myChildren = arr1.concat(arr2, arr3);",
          "const arr1 = [\"Emil\", \"Tobias\", \"Linus\"];const myChildren = arr1.concat(\"Peter\");",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits.copyWithin(2, 0);",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\", \"Kiwi\"];fruits.copyWithin(2, 0, 2);",
          "const myArr = [[1,2],[3,4],[5,6]];const newArr = myArr.flat();",
          "const myArr = [1, 2, 3, 4, 5, 6];const newArr = myArr.flatMap(x => [x, x * 10]);",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits.splice(2, 0, \"Lemon\", \"Kiwi\");",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits.splice(2, 2, \"Lemon\", \"Kiwi\");",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits.splice(0, 1);",
          "const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\"];const spliced = months.toSpliced(0, 1);",
          "const fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];const citrus = fruits.slice(1);",
          "const fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];const citrus = fruits.slice(3);",
          "const fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];const citrus = fruits.slice(1, 3);",
          "const fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];const citrus = fruits.slice(2);",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];document.getElementById(\"demo\").innerHTML = fruits.toString();",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];document.getElementById(\"demo\").innerHTML = fruits;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_array_search.asp",
    "cours": {
      "titre": "JavaScript Array Search",
      "description": "Array Find and Search MethodsArray indexOf()Array lastIndexOf()Array includes()See Also:Basic MethodsSort MethodsIteration MethodsArray find()Array findIndex()Array findLast()Array findLastIndex()",
      "lien": "https://www.w3schools.com/js/js_array_search.asp",
      "contenus": {
        "paragraphs": [
          "TheindexOf()method searches an array for an element value and returns its position.",
          "Note:The first item has position 0, the second item has position 1, and so on.",
          "Search an array for the item \"Apple\":",
          "Array.indexOf()returns -1 if the item is not found.",
          "If the item is present more than once, it returns the position of the first \noccurrence.",
          "Array.lastIndexOf()is the same asArray.indexOf(), but \nreturns the position of the last occurrence of the specified element.",
          "Search an array for the item \"Apple\":",
          "ECMAScript 2016 introducedArray.includes()to arrays.\nThis allows us to check if an element is present in an array (including NaN, unlike indexOf).",
          "Array.includes() allows to check for NaN values. Unlike Array.indexOf().",
          "includes()is anECMAScript 2016feature.",
          "ES 2016 is fully supported in all modern browsers since March 2017:",
          "includes()is not supported in Internet Explorer.",
          "Thefind()method returns the value of the first array element that passes a \ntest function.",
          "This example finds (returns the value of) the first element that is larger \nthan 18:",
          "Note that the function takes 3 arguments:",
          "find()is anES6  feature(JavaScript 2015).",
          "ES6 is fully supported in all modern browsers since June 2017:",
          "find()is not supported in Internet Explorer.",
          "ThefindIndex()method returns the index of the first array element that \npasses a test function.",
          "This example finds the index of the first element that is larger than 18:",
          "Note that the function takes 3 arguments:",
          "findIndex()is anES6  feature(JavaScript 2015).",
          "ES6 is fully supported in all modern browsers since June 2017:",
          "findIndex()is not supported in Internet Explorer.",
          "ES2023 added the findLast() method that will start from the end of an array and return\nthe value of the first element that satisfies a condition.",
          "findLast()is an ES2023 feature.",
          "It is supported in all modern browsers since July 2023:",
          "The findLastIndex() method finds the index of the last element that satisfies a condition.",
          "findLastIndex()is an ES2023 feature.",
          "It is supported in all modern browsers since July 2023:",
          "For a complete Array reference, go to our:",
          "Complete JavaScript Array Reference.",
          "The reference contains descriptions and examples of all Array \nproperties and methods."
        ],
        "lists": [
          [
            "The item value",
            "The item index",
            "The array itself"
          ],
          [
            "The item value",
            "The item index",
            "The array itself"
          ]
        ],
        "examples": [
          "const fruits = [\"Apple\", \"Orange\", \"Apple\", \"Mango\"];let position = fruits.indexOf(\"Apple\") + 1;",
          "array.indexOf(item,start)",
          "const fruits = [\"Apple\", \"Orange\", \"Apple\", \"Mango\"];let position = fruits.lastIndexOf(\"Apple\") + 1;",
          "array.lastIndexOf(item,start)",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits.includes(\"Mango\"); // is true",
          "array.includes(search-item)",
          "const numbers = [4, 9, 16, 25, 29];let first = \n  numbers.find(myFunction);function myFunction(value, index, array) {return \n  value > 18;}",
          "const numbers = [4, 9, 16, 25, 29];let first = \n  numbers.findIndex(myFunction);function myFunction(value, index, array) {return \n  value > 18;}",
          "const temp = [27, 28, 30, 40, 42, 35, 30];let high = temp.findLast(x => x > 40);",
          "const temp = [27, 28, 30, 40, 42, 35, 30];let pos = temp.findLastIndex(x => x > 40);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_array_sort.asp",
    "cours": {
      "titre": "JavaScriptSorting Arrays",
      "description": "Array Sort MethodsAlphabetic SortArray sort()Array reverse()Array toSorted()Array toReversed()Sorting ObjectsSee Also:Basic MethodsSearch MethodsIteration MethodsNumeric SortNumeric SortRandom SortMath.min()Math.max()Home made Min()Home made Max()",
      "lien": "https://www.w3schools.com/js/js_array_sort.asp",
      "contenus": {
        "paragraphs": [
          "Thesort()method sorts an array alphabetically:",
          "Thereverse()method reverses the elements in an array:",
          "By combiningsort()andreverse(),\nyou can sort an array in descending order:",
          "ES2023added thetoSorted()method as a safe way\nto sort an array without altering the original array.",
          "The difference betweentoSorted()andsort()is that the first method creates a new array, keeping the original array unchanged, while the last method alters the original array.",
          "ES2023added thetoReversed()method as a safe way\nto reverse an array without altering the original array.",
          "The difference betweentoReversed()andreverse()is that the first method\ncreates a new array, keeping the original array unchanged, while the last method alters the original array.",
          "By default, thesort()function sorts values asstrings.",
          "This works well for strings (\"Apple\" comes before \"Banana\").",
          "If numbers are sorted as strings, \"25\" is bigger than \"100\", \nbecause \"2\" is bigger than \"1\".",
          "Because of this, thesort()method will produce incorrect result when sorting \nnumbers.",
          "You can fix this by providing acompare function:",
          "Use the same trick to sort an array descending:",
          "The purpose of the compare function is to define an alternative sort \norder.",
          "The compare function should return a negative, zero, or positive value, depending on \nthe arguments:",
          "When thesort()function compares two values, it sends the values to the \ncompare function, and sorts the values according to the returned (negative, \nzero, positive) value.",
          "If the result is negative,ais sorted beforeb.",
          "If the result is positive,bis sorted \nbeforea.",
          "If the result is 0, no changes are done with the sort order of the two \nvalues.",
          "Example:",
          "The compare function compares all the values in the array, two values at a \ntime(a, b).",
          "When comparing 40 and 100, thesort()method calls the compare function(40, 100).",
          "The function calculates 40 - 100(a - b), and \nsince the result is negative (-60),  the sort function will sort 40 as a value lower than 100.",
          "You can use this code snippet to experiment with numerically and \nalphabetically sorting:",
          "Using a sort function, like explained above, you can sort an numeric array in random order",
          "Try it Yourself »",
          "The points.sort() method in the example above is not accurate. It will favor some \nnumbers over others.",
          "The most popular correct method, is called the Fisher Yates shuffle, and was \nintroduced in data science as early as 1938!",
          "In JavaScript the method can be translated to this:",
          "Try it Yourself »",
          "There are no built-in functions for finding the max or min \nvalue in an array.",
          "To find the lowest or highest value you have 3 options:",
          "After you have sorted an array, you can use the \nindex to obtain the highest and lowest values.",
          "Sorting a whole array is a very inefficient method if you only want to find the highest (or lowest) value.",
          "You can useMath.min.applyto find the lowest number in an array:",
          "Try it Yourself »",
          "Math.min.apply(null, [1, 2, 3])is equivalent toMath.min(1, 2, 3).",
          "You can useMath.max.applyto find the highest number in an array:",
          "Try it Yourself »",
          "Math.max.apply(null, [1, 2, 3])is equivalent toMath.max(1, 2, 3).",
          "There is no built-in function for finding the lowest value in a JavaScript array.",
          "The fastest code to find the lowest number is to use ahome mademethod.",
          "This function loops through an array comparing each value with the lowest value found:",
          "Try it Yourself »",
          "There is no built-in function for finding the highest value in a JavaScript array.",
          "The fastest code to find the highest number is to use ahome mademethod.",
          "This function loops through an array comparing each value with the highest value found:",
          "Try it Yourself »",
          "JavaScript arrays often contain objects:",
          "Even if objects have properties of different data types, thesort()method \ncan be used to sort the array.",
          "The solution is to write a compare function to compare the property values:",
          "Comparing string properties is a little more complex:",
          "ES2019revisedthe Arraysort()method.",
          "Before 2019, the specification allowed unstable sorting algorithms such as QuickSort.",
          "After ES2019, browsers must use a stable sorting algorithm:",
          "When sorting elements on a value, the elements must keep their relative position to other elements with the same value.",
          "In the example above, when sorting on price, the result is not allowed to come out with the names\nin an other relative position like this:",
          "For a complete Array reference, go to our:",
          "Complete JavaScript Array Reference.",
          "The reference contains descriptions and examples of all Array \nproperties and methods."
        ],
        "lists": [
          [
            "Sort the array and read the first or last element",
            "Use Math.min() or Math.max()",
            "Write a home made function"
          ]
        ],
        "examples": [
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits.sort();",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits.reverse();",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits.sort();fruits.reverse();",
          "const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\"];const sorted = months.toSorted();",
          "const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\"];const reversed = months.toReversed();",
          "const points = [40, 100, 1, 5, 25, 10];points.sort(function(a, b){return a - b});",
          "const points = [40, 100, 1, 5, 25, 10];points.sort(function(a, b){return b - a});",
          "function(a, b){return a - b}",
          "<button onclick=\"myFunction1()\">Sort Alphabetically</button><button \n onclick=\"myFunction2()\">Sort Numerically</button><p id=\"demo\"></p><script>const points = [40, 100, 1, 5, 25, 10];document.getElementById(\"demo\").innerHTML = points;function \n myFunction1() {points.sort();document.getElementById(\"demo\").innerHTML \n = points;}function myFunction2() {points.sort(function(a, b){return \n a - b});document.getElementById(\"demo\").innerHTML = points;}</script>",
          "const points = [40, 100, 1, 5, 25, 10];points.sort(function(){return 0.5 - Math.random()});",
          "const points = [40, 100, 1, 5, 25, 10];for (let i = points.length -1; i > 0; i--) {let j = Math.floor(Math.random() * (i+1));let k = points[i];points[i] = points[j];points[j] = k;}",
          "const points = [40, 100, 1, 5, 25, 10];points.sort(function(a, b){return a - b});// now points[0] contains the lowest value// and points[points.length-1] contains the highest value",
          "const points = [40, 100, 1, 5, 25, 10];points.sort(function(a, b){return b - a});// now points[0] contains the highest value// and points[points.length-1] contains the lowest value",
          "function myArrayMin(arr) {return Math.min.apply(null, arr);}",
          "function myArrayMax(arr) {return Math.max.apply(null, arr);}",
          "function myArrayMin(arr) {let len = arr.length;let min = Infinity;while (len--) {if (arr[len] < min) {min = arr[len];}}return min;}",
          "function myArrayMax(arr) {let len = arr.length;let max = -Infinity;while (len--) {if (arr[len] > max) {max = arr[len];}}return max;}",
          "const cars = [{type:\"Volvo\", year:2016},{type:\"Saab\", year:2001},{type:\"BMW\", year:2010}];",
          "cars.sort(function(a, b){return a.year - b.year});",
          "cars.sort(function(a, b){let x = a.type.toLowerCase();let y = b.type.toLowerCase();if (x < y) {return -1;}if (x > y) {return 1;}return 0;});",
          "const myArr = [{name:\"X00\",price:100 },{name:\"X01\",price:100 },{name:\"X02\",price:100 },{name:\"X03\",price:100 },{name:\"X04\",price:110 },{name:\"X05\",price:110 },{name:\"X06\",price:110 },{name:\"X07\",price:110 }];",
          "X01 100X03 100X00 100X03 100X05 110X04 110X06 110X07 110"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_array_iteration.asp",
    "cours": {
      "titre": "JavaScript Array Iteration",
      "description": "Array Iteration MethodsArray iteration methods operate on every array item:Array forEachArray map()Array flatMap()Array filter()Array reduce()Array reduceRight()See Also:Basic Array MethodsArray Search MethodsArray Sort MethodsArray every()Array some()Array from()Array keys()Array entries()Array with()Array Spread (...)",
      "lien": "https://www.w3schools.com/js/js_array_iteration.asp",
      "contenus": {
        "paragraphs": [
          "Array iteration methods operate on every array item:",
          "TheforEach()method calls a function (a callback function) once for each array element.",
          "Note that the function takes 3 arguments:",
          "The example above uses only the value parameter. The example can be rewritten \nto:",
          "Themap()method creates a new array by performing a function on each array element.",
          "Themap()method does not execute the function for array \nelements without values.",
          "Themap()method does not change the original array.",
          "This example multiplies each array value by 2:",
          "Note that the function takes 3 arguments:",
          "When a callback function uses only the value parameter, the index and array \nparameters can be omitted:",
          "ES2019added the ArrayflatMap()method to JavaScript.",
          "TheflatMap()method first maps all elements of an array\nand then creates a new array by flattening the array.",
          "JavaScript ArrayflatMap()is supported in all modern browsers since January 2020:",
          "Thefilter()method creates a new array with array elements that pass a test.",
          "This example creates a new array from elements with a value larger than 18:",
          "Note that the function takes 3 arguments:",
          "In the example above, the callback function does not use the index and array \nparameters, so they can be omitted:",
          "Thereduce()method runs a function on each array element to produce (reduce it to) a single value.",
          "Thereduce()method works from left-to-right in the array. See alsoreduceRight().",
          "Thereduce()method does not reduce the original array.",
          "This example finds the sum of all numbers in an array:",
          "Note that the function takes 4 arguments:",
          "The example above does not use the index and array parameters. It can be \nrewritten to:",
          "Thereduce()method can accept an initial value:",
          "ThereduceRight()method runs a function on each array element to produce (reduce it to) a single value.",
          "ThereduceRight()works from right-to-left in the array. See alsoreduce().",
          "ThereduceRight()method does not reduce the original array.",
          "This example finds the sum of all numbers in an array:",
          "Note that the function takes 4 arguments:",
          "The example above does not use the index and array parameters. It can be \nrewritten to:",
          "Theevery()method checks if all array values pass a test.",
          "This example checks if all array values are larger than 18:",
          "Note that the function takes 3 arguments:",
          "When a callback function uses the first parameter only (value), the other \nparameters can be omitted:",
          "Thesome()method checks if some array values pass a test.",
          "This example checks if some array values are larger than 18:",
          "Note that the function takes 3 arguments:",
          "TheArray.from()method returns an Array object from any object with a length \nproperty or any iterable object.",
          "Create an Array from a String:",
          "from()is anES6  feature(JavaScript 2015).",
          "ES6 is fully supported in all modern browsers since June 2017:",
          "from()is not supported in Internet Explorer.",
          "TheArray.keys()method returns an Array Iterator object with the keys of an array.",
          "Create an Array Iterator object, containing the keys of the array:",
          "keys()is anES6  feature(JavaScript 2015).",
          "ES6 is fully supported in all modern browsers since June 2017:",
          "keys()is not supported in Internet Explorer.",
          "Create an Array Iterator, and then iterate over the key/value pairs:",
          "Theentries()method returns an Array Iterator object with key/value pairs:",
          "[0, \"Banana\"][1, \"Orange\"][2, \"Apple\"][3, \"Mango\"]",
          "Theentries()method does not change the original array.",
          "entries()is anES6  feature(JavaScript 2015).",
          "ES6 is fully supported in all modern browsers since June 2017:",
          "entries()is not supported in Internet Explorer.",
          "ES2023added the Array with() method as a safe way to update elements in an array without altering the original array.",
          "The ... operator expands an iterable (like an array) into more elements:Exampleconst q1 = [\"Jan\", \"Feb\", \"Mar\"];const q2 = [\"Apr\", \"May\", \"Jun\"];const q3 = [\"Jul\", \"Aug\", \"Sep\"];const q4 = [\"Oct\", \"Nov\", \"May\"];const year = [...q1, ...q2, ...q3, ...q4];Try it Yourself »Browser Support...is anES6  feature(JavaScript 2015).ES6 is fully supported in all modern browsers since June 2017:Chrome 51Edge 15Firefox 54Safari 10Opera 38May 2016Apr 2017Jun 2017Sep 2016Jun 2016...is not supported in Internet Explorer.Complete Array ReferenceFor a complete Array reference, go to our:Complete JavaScript Array Reference.The reference contains descriptions and examples of all Array \nproperties and methods.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "...is anES6  feature(JavaScript 2015).",
          "ES6 is fully supported in all modern browsers since June 2017:",
          "...is not supported in Internet Explorer.",
          "For a complete Array reference, go to our:",
          "Complete JavaScript Array Reference.",
          "The reference contains descriptions and examples of all Array \nproperties and methods."
        ],
        "lists": [
          [
            "The item value",
            "The item index",
            "The array itself"
          ],
          [
            "The item value",
            "The item index",
            "The array itself"
          ],
          [
            "The item value",
            "The item index",
            "The array itself"
          ],
          [
            "The total (the initial value / previously returned value)",
            "The item value",
            "The item index",
            "The array itself"
          ],
          [
            "The total (the initial value / previously returned value)",
            "The item value",
            "The item index",
            "The array itself"
          ],
          [
            "The item value",
            "The item index",
            "The array itself"
          ],
          [
            "The item value",
            "The item index",
            "The array itself"
          ]
        ],
        "examples": [
          "const numbers = [45, 4, 9, 16, 25];let txt = \"\";numbers.forEach(myFunction);function myFunction(value, index, array) {txt += value + \"<br>\";}",
          "const numbers = [45, 4, 9, 16, 25];let txt = \"\";numbers.forEach(myFunction);function myFunction(value) {txt += value + \"<br>\";}",
          "const numbers1 = [45, 4, 9, 16, 25];const numbers2 = numbers1.map(myFunction);function myFunction(value, index, array) {return value * 2;}",
          "const numbers1 = [45, 4, 9, 16, 25];const numbers2 = numbers1.map(myFunction);function myFunction(value) {return value * 2;}",
          "const myArr = [1, 2, 3, 4, 5, 6];const newArr = myArr.flatMap((x) => x * 2);",
          "const numbers = [45, 4, 9, 16, 25];const over18 = numbers.filter(myFunction);function myFunction(value, index, array) {return value > 18;}",
          "const numbers = [45, 4, 9, 16, 25];const over18 = \n  numbers.filter(myFunction);function myFunction(value) {return value > 18;}",
          "const numbers = [45, 4, 9, 16, 25];let sum = numbers.reduce(myFunction);function myFunction(total, value, index, array) {return total + value;}",
          "const numbers = [45, 4, 9, 16, 25];let sum = numbers.reduce(myFunction);function myFunction(total, value) {return total + value;}",
          "const numbers = [45, 4, 9, 16, 25];let sum = numbers.reduce(myFunction, \n  100);function myFunction(total, value) {return total + value;}",
          "const numbers = [45, 4, 9, 16, 25];let sum = numbers.reduceRight(myFunction);function myFunction(total, value, index, array) {return total + value;}",
          "const numbers = [45, 4, 9, 16, 25];let sum = numbers.reduceRight(myFunction);function myFunction(total, value) {return total + value;}",
          "const numbers = [45, 4, 9, 16, 25];let allOver18 = \n  numbers.every(myFunction);function myFunction(value, index, array) {return \n  value > 18;}",
          "const numbers = [45, 4, 9, 16, 25];let allOver18 = \n  numbers.every(myFunction);function myFunction(value) {return \n  value > 18;}",
          "const numbers = [45, 4, 9, 16, 25];let someOver18 = numbers.some(myFunction);function myFunction(value, index, array) {return \n  value > 18;}",
          "Array.from(\"ABCDEFG\");",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];const keys = fruits.keys();for (let x of keys) {text += x + \"<br>\";}",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];const f = fruits.entries();for (let x of f) {document.getElementById(\"demo\").innerHTML += x;}",
          "const months = [\"Januar\", \"Februar\", \"Mar\", \"April\"];const myMonths = months.with(2, \"March\");",
          "const q1 = [\"Jan\", \"Feb\", \"Mar\"];const q2 = [\"Apr\", \"May\", \"Jun\"];const q3 = [\"Jul\", \"Aug\", \"Sep\"];const q4 = [\"Oct\", \"Nov\", \"May\"];const year = [...q1, ...q2, ...q3, ...q4];"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_array_const.asp",
    "cours": {
      "titre": "JavaScriptArray Const",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_array_const.asp",
      "contenus": {
        "paragraphs": [
          "In 2015, JavaScript introduced an important new keyword:const.",
          "It has become a common practice to declare arrays usingconst:",
          "An array declared withconstcannot be reassigned:",
          "The keywordconstis a little misleading.",
          "It does NOT define a constant array. It defines a constant reference to an array.",
          "Because of this, we can still change the elements of a constant array.",
          "You can change the elements of a constant array:",
          "Theconstkeyword is not supported in Internet Explorer 10 or earlier.",
          "The following table defines the first browser versions with full support for theconstkeyword:",
          "JavaScriptconstvariables must be assigned a value when they are declared:Meaning: An array declared withconstmust be initialized when it is declared.Usingconstwithout initializing the array is a syntax \nerror:ExampleThis will not work:const cars;cars = [\"Saab\", \"Volvo\", \"BMW\"];Arrays declared withvarcan be initialized at any time.You can even use the array before it is declared:ExampleThis is OK:cars = [\"Saab\", \"Volvo\", \"BMW\"];var cars;Try it Yourself »Const Block ScopeAn array declared withconsthasBlock Scope.An array declared in a block is not the same as an array declared outside the block:Exampleconst cars = [\"Saab\", \"Volvo\", \"BMW\"];// Here cars[0] is \"Saab\"{const cars = [\"Toyota\", \"Volvo\", \"BMW\"];// Here cars[0] is \"Toyota\"}// Here cars[0] is\"Saab\"Try it Yourself »An array declared withvardoes not have block scope:Examplevar cars = [\"Saab\", \"Volvo\", \"BMW\"];// Here cars[0] is \"Saab\"{var cars = [\"Toyota\", \"Volvo\", \"BMW\"];// Here cars[0] is \"Toyota\"}// Here cars[0] is\"Toyota\"Try it Yourself »You can learn more about Block Scope in the chapter:JavaScript Scope.Redeclaring ArraysRedeclaring an array declared withvaris allowed anywhere in a program:Examplevar cars = [\"Volvo\", \"BMW\"];   // Allowedvar cars = [\"Toyota\", \"BMW\"];  // Allowedcars = [\"Volvo\", \"Saab\"];      // AllowedRedeclaring or reassigning an array toconst, in the same scope, or in \nthe same block, is not allowed:Examplevar cars = [\"Volvo\", \"BMW\"];     // Allowedconst cars = [\"Volvo\", \"BMW\"];   // Not allowed{var cars = [\"Volvo\", \"BMW\"];   // Allowedconst cars = [\"Volvo\", \"BMW\"]; // Not allowed}Redeclaring or reassigning an existingconstarray, in the same scope, or in \nthe same block, is not allowed:Exampleconst cars = [\"Volvo\", \"BMW\"];   // Allowedconst cars = [\"Volvo\", \"BMW\"];   // Not allowedvar cars = [\"Volvo\", \"BMW\"];     // Not allowedcars = [\"Volvo\", \"BMW\"];         // Not allowed{const cars = [\"Volvo\", \"BMW\"]; // Allowedconst cars = [\"Volvo\", \"BMW\"]; // Not allowedvar cars = [\"Volvo\", \"BMW\"];   // Not allowedcars = [\"Volvo\", \"BMW\"];       // Not allowed}Redeclaring an array withconst, in another scope, or in another block, is allowed:Exampleconst cars = [\"Volvo\", \"BMW\"];   // Allowed{const cars = [\"Volvo\", \"BMW\"]; // Allowed}{const cars = [\"Volvo\", \"BMW\"]; // Allowed}Complete Array ReferenceFor a complete Array reference, go to our:Complete JavaScript Array Reference.The reference contains descriptions and examples of all Array \nproperties and methods.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "Meaning: An array declared withconstmust be initialized when it is declared.",
          "Usingconstwithout initializing the array is a syntax \nerror:",
          "This will not work:",
          "Arrays declared withvarcan be initialized at any time.",
          "You can even use the array before it is declared:",
          "This is OK:",
          "An array declared withconsthasBlock Scope.",
          "An array declared in a block is not the same as an array declared outside the block:",
          "An array declared withvardoes not have block scope:",
          "You can learn more about Block Scope in the chapter:JavaScript Scope.",
          "Redeclaring an array declared withvaris allowed anywhere in a program:",
          "Redeclaring or reassigning an array toconst, in the same scope, or in \nthe same block, is not allowed:",
          "Redeclaring or reassigning an existingconstarray, in the same scope, or in \nthe same block, is not allowed:",
          "Redeclaring an array withconst, in another scope, or in another block, is allowed:",
          "For a complete Array reference, go to our:",
          "Complete JavaScript Array Reference.",
          "The reference contains descriptions and examples of all Array \nproperties and methods."
        ],
        "lists": [],
        "examples": [
          "const cars = [\"Saab\", \"Volvo\", \"BMW\"];",
          "const cars = [\"Saab\", \"Volvo\", \"BMW\"];cars = [\"Toyota\", \"Volvo\", \"Audi\"];    // ERROR",
          "// You can create a constant array:const cars = [\"Saab\", \"Volvo\", \"BMW\"];// You can change an element:cars[0] = \"Toyota\";// You can add an element:cars.push(\"Audi\");",
          "const cars;cars = [\"Saab\", \"Volvo\", \"BMW\"];",
          "cars = [\"Saab\", \"Volvo\", \"BMW\"];var cars;",
          "const cars = [\"Saab\", \"Volvo\", \"BMW\"];// Here cars[0] is \"Saab\"{const cars = [\"Toyota\", \"Volvo\", \"BMW\"];// Here cars[0] is \"Toyota\"}// Here cars[0] is\"Saab\"",
          "var cars = [\"Saab\", \"Volvo\", \"BMW\"];// Here cars[0] is \"Saab\"{var cars = [\"Toyota\", \"Volvo\", \"BMW\"];// Here cars[0] is \"Toyota\"}// Here cars[0] is\"Toyota\"",
          "var cars = [\"Volvo\", \"BMW\"];   // Allowedvar cars = [\"Toyota\", \"BMW\"];  // Allowedcars = [\"Volvo\", \"Saab\"];      // Allowed",
          "var cars = [\"Volvo\", \"BMW\"];     // Allowedconst cars = [\"Volvo\", \"BMW\"];   // Not allowed{var cars = [\"Volvo\", \"BMW\"];   // Allowedconst cars = [\"Volvo\", \"BMW\"]; // Not allowed}",
          "const cars = [\"Volvo\", \"BMW\"];   // Allowedconst cars = [\"Volvo\", \"BMW\"];   // Not allowedvar cars = [\"Volvo\", \"BMW\"];     // Not allowedcars = [\"Volvo\", \"BMW\"];         // Not allowed{const cars = [\"Volvo\", \"BMW\"]; // Allowedconst cars = [\"Volvo\", \"BMW\"]; // Not allowedvar cars = [\"Volvo\", \"BMW\"];   // Not allowedcars = [\"Volvo\", \"BMW\"];       // Not allowed}",
          "const cars = [\"Volvo\", \"BMW\"];   // Allowed{const cars = [\"Volvo\", \"BMW\"]; // Allowed}{const cars = [\"Volvo\", \"BMW\"]; // Allowed}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_dates.asp",
    "cours": {
      "titre": "JavaScript Date Objects",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_dates.asp",
      "contenus": {
        "paragraphs": [
          "JavaScriptDate Objectslet us work with dates:",
          "",
          "Date objects are static. The \"clock\" is not \"running\".",
          "The computer clock is ticking, date objects are not.",
          "By default, JavaScript will use the browser's time zone and display a date as a full text string:",
          "",
          "You will learn much more about how to display dates, later in this tutorial.",
          "Date objects are created with thenew Date()constructor.",
          "There are9 waysto create a new date object:",
          "new Date()creates a date object with thecurrent date and time:",
          "new Date(date string)creates a date object from adate string:",
          "Date string formats are described in the next chapter.",
          "new Date(year, month, ...)creates a date object with aspecified date and time.",
          "7 numbers specify year, month, day, hour, minute, second, and millisecond (in that order):",
          "JavaScript counts months from0to11:",
          "January = 0.",
          "December = 11.",
          "Specifying a month higher than 11, will not result in an error but add the overflow to the next year:",
          "Specifying:",
          "Is the same as:",
          "Specifying a day higher than max, will not result in an error but add the overflow to the next month:",
          "Specifying:",
          "Is the same as:",
          "6 numbers specify year, month, day, hour, minute, second:",
          "5 numbers specify year, month, day, hour, and minute:",
          "4 numbers specify year, month, day, and hour:",
          "3 numbers specify year, month, and day:",
          "2 numbers specify year and month:",
          "You cannot omit month. If you supply only one parameter it will be treated as milliseconds.",
          "One and two digit years will be interpreted as 19xx:",
          "JavaScript stores dates as number of milliseconds since January 01, 1970.",
          "Zero time is January 01, 1970 00:00:00 UTC.",
          "One day (24 hours) is 86 400 000 milliseconds.",
          "Now the time is:milliseconds past January 01, 1970",
          "new Date(milliseconds)creates a new date object asmillisecondsplus zero time:",
          "01 January 1970plus100 000 000 000 milliseconds is:",
          "January 01 1970minus100 000 000 000 milliseconds is:",
          "January 01 1970plus24 hours is:",
          "01 January 1970plus0 milliseconds is:",
          "When a date object is created, a number ofmethodsallow you to operate on \nit.",
          "Date methods allow you to get and set the year, month, day, hour, \nminute, second, and millisecond of date objects, using either local time or UTC \n(universal, or GMT) time.",
          "Date methods and time zones are covered in the next chapters.",
          "JavaScript will (by default) output dates using thetoString()method.\nThis is a string representation of the date, including the time zone.\nThe format is specified in the ECMAScript specification:",
          "When you display a date object in HTML, it is automatically converted to a \nstring, with thetoString()method.",
          "ThetoDateString()method converts a date to a more readable \nformat:",
          "ThetoUTCString()method converts a date to a string using the UTC standard:",
          "ThetoISOString()method converts a date to a string using the ISO standard:",
          "For a complete Date reference, go to our:",
          "Complete JavaScript Date Reference.",
          "The reference contains descriptions and examples of all Date properties and \nmethods."
        ],
        "lists": [],
        "examples": [
          "const d = new Date();",
          "const d = new Date(\"2022-03-25\");",
          "new Date()new Date(date string)new Date(year,month)new Date(year,month,day)new Date(year,month,day,hours)new Date(year,month,day,hours,minutes)new Date(year,month,day,hours,minutes,seconds)new Date(year,month,day,hours,minutes,seconds,ms)new Date(milliseconds)",
          "const d = new Date();",
          "const d = new Date(\"October 13, 2014 11:13:00\");",
          "const d = new Date(\"2022-03-25\");",
          "const d = new Date(2018, 11, 24, 10, 33, 30, 0);",
          "const d = new Date(2018, 15, 24, 10, 33, 30);",
          "const d = new Date(2019, 3, 24, 10, 33, 30);",
          "const d = new Date(2018, 5, 35, 10, 33, 30);",
          "const d = new Date(2018, 6, 5, 10, 33, 30);",
          "const d = new Date(2018, 11, 24, 10, 33, 30);",
          "const d = new Date(2018, 11, 24, 10, 33);",
          "const d = new Date(2018, 11, 24, 10);",
          "const d = new Date(2018, 11, 24);",
          "const d = new Date(2018, 11);",
          "const d = new Date(2018);",
          "const d = new Date(99, 11, 24);",
          "const d = new Date(9, 11, 24);",
          "const d = new Date(100000000000);",
          "const d = new Date(-100000000000);",
          "const d = new Date(24 * 60 * 60 * 1000);// orconst d = new Date(86400000);",
          "const d = new Date(0);",
          "",
          "const d = new Date();d.toString();",
          "const d = new Date();d.toDateString();",
          "const d = new Date();d.toUTCString();",
          "const d = new Date();d.toISOString();"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_date_formats.asp",
    "cours": {
      "titre": "JavaScriptDate Formats",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_date_formats.asp",
      "contenus": {
        "paragraphs": [
          "There are generally 3 types of JavaScript date input formats:",
          "The ISO format follows a strict standard in JavaScript.",
          "The other formats are not \n so well defined and might be browser specific.",
          "Independent of input format, JavaScript will (by default) output dates in full \ntext string format:",
          "ISO 8601 is the international standard for the representation of dates and \ntimes.",
          "The ISO 8601 syntax (YYYY-MM-DD) is also the preferred JavaScript date format:",
          "The computed date will be relative to your time zone.Depending on your time zone, the result above \nwill vary between March 24 and March 25.",
          "ISO dates can be written without specifying the day (YYYY-MM):",
          "Time zones will vary the result above between February 28 and March 01.",
          "ISO dates can be written without month and day (YYYY):",
          "Time zones will vary the result above between December 31 2014 and January 01 2015.",
          "ISO dates can be written with added hours, minutes, and seconds \n(YYYY-MM-DDTHH:MM:SSZ):",
          "Date and time is separated with a capital T.",
          "UTC time is defined with a capital letter Z.",
          "If you want to modify the time relative to UTC, remove the Z and add +HH:MM or -HH:MM \ninstead:",
          "UTC (Universal Time Coordinated)  is the same as GMT (Greenwich Mean Time).",
          "Omitting T or Z in a date-time string can give different results in different browsers.",
          "When setting a date, without specifying the time zone, JavaScript will use \nthe browser's time zone.",
          "When getting a date, without specifying the time zone, the result is \nconverted to the browser's time zone.",
          "In other words: If a date/time is created in GMT (Greenwich Mean Time), the \ndate/time will be converted to CDT (Central US Daylight Time) if a user browses \nfrom central US.",
          "Short dates are written with an \"MM/DD/YYYY\" syntax like this:",
          "In some browsers, months or days with no leading zeroes may produce an error:",
          "The behavior of \"YYYY/MM/DD\" is undefined.Some browsers will \ntry to guess the format. Some will return NaN.",
          "The behavior of  \"DD-MM-YYYY\" is also undefined.Some browsers will \ntry to guess the format. Some will return NaN.",
          "Long dates are most often written with a \"MMM DD YYYY\" syntax like this:",
          "Month and day can be in any order:",
          "And, month can be written in full (January), or abbreviated (Jan):",
          "Commas are ignored. Names are case insensitive:",
          "If you have a valid date string, you can use theDate.parse()method to convert it to milliseconds.",
          "Date.parse()returns the number of milliseconds between the date and January \n1, 1970:",
          "You can then use the number of milliseconds toconvert it to a dateobject:",
          "For a complete Date reference, go to our:",
          "Complete JavaScript Date Reference.",
          "The reference contains descriptions and examples of all Date properties and \nmethods."
        ],
        "lists": [],
        "examples": [
          "",
          "const d = new Date(\"2015-03-25\");",
          "const d = new Date(\"2015-03\");",
          "const d = new Date(\"2015\");",
          "const d = new Date(\"2015-03-25T12:00:00Z\");",
          "const d = new Date(\"2015-03-25T12:00:00-06:30\");",
          "const d = new Date(\"03/25/2015\");",
          "const d = new Date(\"2015-3-25\");",
          "const d = new Date(\"2015/03/25\");",
          "const d = new Date(\"25-03-2015\");",
          "const d = new Date(\"Mar 25 2015\");",
          "const d = new Date(\"25 Mar 2015\");",
          "const d = new Date(\"January 25 2015\");",
          "const d = new Date(\"Jan 25 2015\");",
          "const d = new Date(\"JANUARY, 25, 2015\");",
          "let msec = Date.parse(\"March 21, 2012\");",
          "let msec = Date.parse(\"March 21, 2012\");const d = new Date(msec);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_date_methods.asp",
    "cours": {
      "titre": "JavaScriptGet Date Methods",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_date_methods.asp",
      "contenus": {
        "paragraphs": [
          "In JavaScript, date objects are created withnew Date().",
          "new Date()returns a date object with the current date and time.",
          "The get methods above returnLocal time.",
          "Universal time(UTC) is documented at the bottom of this page.",
          "The get methods return information from existing date objects.",
          "In a date object, the time is static. The \"clock\" is not \"running\".",
          "The time in a date object is NOT the same as current time.",
          "ThegetFullYear()method returns the year of a date as a four digit number:",
          "Old JavaScript code might use the non-standard method getYear().",
          "getYear() is supposed to return a 2-digit year.",
          "getYear() is deprecated. Do not use it!",
          "ThegetMonth()method returns the month of a date as a number (0-11).",
          "In JavaScript, January is month number 0, February is number 1, ...",
          "Finally, December is month number 11.",
          "You can use an array of names to return the month as a name:",
          "ThegetDate()method returns the day of a date as a number (1-31):",
          "ThegetHours()method returns the hours of a date as a number (0-23):",
          "ThegetMinutes()method returns the minutes of a date as a number (0-59):",
          "ThegetSeconds()method returns the seconds of a date as a number (0-59):",
          "ThegetMilliseconds()method returns the milliseconds of a date as a number (0-999):",
          "ThegetDay()method returns the weekday of a date as a number (0-6).",
          "In JavaScript, the first day of the week (day 0) is Sunday.",
          "Some countries in the world consider the first day of the week to be Monday.",
          "You can use an array of names, andgetDay()to return weekday as a name:",
          "ThegetTime()method returns the number of milliseconds since January 1, 1970:",
          "Date.now()returns the number of milliseconds since January 1, 1970.",
          "Calculate the number of years since 1970/01/01:",
          "Date.now()is a static method of the Date object.",
          "You cannot use it on a date object likemyDate.now().",
          "The syntax is alwaysDate.now().",
          "UTC methods use UTC time (Coordinated Universal Time).",
          "UTC time is the same as GMT (Greenwich Mean Time).",
          "The difference between Local time and UTC time can be up to 24 hours.",
          "ThegetTimezoneOffset()method returns the difference (in minutes)\nbetween local time an UTC time:",
          "For a complete Date reference, go to our:",
          "Complete JavaScript Date Reference.",
          "The reference contains descriptions and examples of all Date properties and \nmethods."
        ],
        "lists": [],
        "examples": [
          "const date = new Date();",
          "const d = new Date(\"2021-03-25\");d.getFullYear();",
          "const d = new Date();d.getFullYear();",
          "const d = new Date(\"2021-03-25\");d.getMonth();",
          "const d = new Date();d.getMonth();",
          "const months = [\"January\", \"February\", \"March\", \"April\", \"May\",\n\"June\", \"July\", \"August\", \"September\", \"October\",\n\"November\", \"December\"];const d = new Date(\"2021-03-25\");let month = months[d.getMonth()];",
          "const months = [\"January\", \"February\", \"March\", \"April\", \"May\",\n\"June\", \"July\", \"August\", \"September\", \"October\",\n\"November\", \"December\"];const d = new Date();let month = months[d.getMonth()];",
          "const d = new Date(\"2021-03-25\");d.getDate();",
          "const d = new Date();d.getDate();",
          "const d = new Date(\"2021-03-25\");d.getHours();",
          "const d = new Date();d.getHours();",
          "const d = new Date(\"2021-03-25\");d.getMinutes();",
          "const d = new Date();d.getMinutes();",
          "const d = new Date(\"2021-03-25\");d.getSeconds();",
          "const d = new Date();d.getSeconds();",
          "const d = new Date(\"2021-03-25\");d.getMilliseconds();",
          "const d = new Date();d.getMilliseconds();",
          "const d = new Date(\"2021-03-25\");d.getDay();",
          "const d = new Date();d.getDay();",
          "const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\",\n\"Thursday\", \"Friday\", \"Saturday\"];const d = new Date(\"2021-03-25\");let day = days[d.getDay()];",
          "const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\",\n\"Thursday\", \"Friday\", \"Saturday\"];const d = new Date();let day = days[d.getDay()];",
          "const d = new Date(\"1970-01-01\");d.getTime();",
          "const d = new Date(\"2021-03-25\");d.getTime();",
          "const d = new Date();d.getTime();",
          "let ms = Date.now();",
          "const minute = 1000 * 60;const hour = minute * 60;const day = hour * 24;const year = day * 365;let years = Math.round(Date.now() / year);",
          "let diff = d.getTimezoneOffset();"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_date_methods_set.asp",
    "cours": {
      "titre": "JavaScriptSet Date Methods",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_date_methods_set.asp",
      "contenus": {
        "paragraphs": [
          "Set Date methods let you set date values (years, \nmonths, days, hours, minutes, seconds, milliseconds) for a Date Object.",
          "Set Date methods are used for setting a part of a date:",
          "ThesetFullYear()method sets the year of a date object. In this example to 2020:",
          "ThesetFullYear()method canoptionallyset month and day:",
          "ThesetMonth()method sets the month of a date object (0-11):",
          "ThesetDate()method sets the day of a date object (1-31):",
          "ThesetDate()method can also be used toadd daysto a date:",
          "If adding days shifts the month or year, the changes are handled automatically by the Date object.",
          "ThesetHours()method sets the hours of a date object (0-23):",
          "ThesetMinutes()method sets the minutes of a date object (0-59):",
          "ThesetSeconds()method sets the seconds of a date object (0-59):",
          "Dates can easily be compared.",
          "The following example compares today's date with January 14, 2100:",
          "JavaScript counts months from 0 to 11. January is 0. December is 11.",
          "For a complete Date reference, go to our:",
          "Complete JavaScript Date Reference.",
          "The reference contains descriptions and examples of all Date properties and \nmethods."
        ],
        "lists": [],
        "examples": [
          "const d = new Date();d.setFullYear(2020);",
          "const d = new Date();d.setFullYear(2020, 11, 3);",
          "const d = new Date();d.setMonth(11);",
          "const d = new Date();d.setDate(15);",
          "const d = new Date();d.setDate(d.getDate() + 50);",
          "const d = new Date();d.setHours(22);",
          "const d = new Date();d.setMinutes(30);",
          "const d = new Date();d.setSeconds(30);",
          "let text = \"\";const today = new Date();const someday = new Date();someday.setFullYear(2100, 0, 14);if (someday > today) {text = \"Today is before January 14, 2100.\";} else {text = \"Today is after January 14, 2100.\";}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_math.asp",
    "cours": {
      "titre": "JavaScriptMath Object",
      "description": "The JavaScript Math object allows you to perform mathematical tasks on \nnumbers.",
      "lien": "https://www.w3schools.com/js/js_math.asp",
      "contenus": {
        "paragraphs": [
          "The JavaScript Math object allows you to perform mathematical tasks on \nnumbers.",
          "Unlike other objects, the Math object has no constructor.",
          "The Math object is static.",
          "All methods and properties can be used without creating a Math object first.",
          "The syntax for any Math property is :Math.property.",
          "JavaScript provides 8 mathematical constants that can be accessed as Math properties:",
          "The syntax for Math any methods is :Math.method(number)",
          "There are 4 common methods to round a number to an integer:",
          "Math.round(x)returns the nearest integer:",
          "Math.ceil(x)returns the value of x roundedupto its nearest integer:",
          "Math.floor(x)returns the value of x roundeddownto its nearest integer:",
          "Math.trunc(x)returns the integer part of x:",
          "Math.sign(x)returns if x is negative, null or positive:",
          "Math.trunc() and Math.sign() were added toJavaScript 2015 - ES6.",
          "Math.pow(x, y)returns the value of x to the power of y:",
          "Math.sqrt(x)returns the square root of x:",
          "Math.abs(x)returns the absolute (positive) value of x:",
          "Math.sin(x)returns the sine (a value between -1 and 1) of the angle x (given in radians).",
          "If you want to use degrees instead of radians, you have to convert degrees to radians:",
          "Angle in radians = Angle in degrees x PI / 180.",
          "Math.cos(x)returns the cosine (a value between -1 and 1) of the angle x (given in radians).",
          "If you want to use degrees instead of radians, you have to convert degrees to radians:",
          "Angle in radians = Angle in degrees x PI / 180.",
          "Math.min()andMath.max()can be used to find the lowest or highest value in a list of arguments:",
          "Math.random()returns a random number between 0 (inclusive), and 1 \n(exclusive):",
          "You will learn more aboutMath.random()in the next chapter of this tutorial.",
          "Math.log(x)returns the natural logarithm of x.",
          "The natural logarithm returns the time needed to reach a certain level of growth:",
          "Math.E and Math.log() are twins.",
          "How many times must we multiply Math.E to get 10?",
          "Math.log2(x)returns the base 2 logarithm of x.",
          "How many times must we multiply 2 to get 8?",
          "Math.log10(x)returns the base 10 logarithm of x.",
          "How many times must we multiply 10 to get 1000?",
          "For a complete reference, go to ourComplete Math Object Reference.",
          "The reference contains descriptions and examples of all Math properties and methods."
        ],
        "lists": [],
        "examples": [
          "Math.PI;",
          "Math.E        // returns Euler's numberMath.PI       // returns PIMath.SQRT2    // returns the square root of 2Math.SQRT1_2  // returns the square root of 1/2Math.LN2      // returns the natural logarithm of 2Math.LN10     // returns the natural logarithm of 10Math.LOG2E    // returns base 2 logarithm of EMath.LOG10E   // returns base 10 logarithm of E",
          "Math.round(4.6);",
          "Math.round(4.5);",
          "Math.round(4.4);",
          "Math.ceil(4.9);Math.ceil(4.7);Math.ceil(4.4);Math.ceil(4.2);Math.ceil(-4.2);",
          "Math.floor(4.9);Math.floor(4.7);Math.floor(4.4);Math.floor(4.2);Math.floor(-4.2);",
          "Math.trunc(4.9);Math.trunc(4.7);Math.trunc(4.4);Math.trunc(4.2);Math.trunc(-4.2);",
          "Math.sign(-4);Math.sign(0);Math.sign(4);",
          "Math.pow(8, 2);",
          "Math.sqrt(64);",
          "Math.abs(-4.7);",
          "Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)",
          "Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)",
          "Math.min(0, 150, 30, 20, -8, -200);",
          "Math.max(0, 150, 30, 20, -8, -200);",
          "Math.random();",
          "Math.log(1);",
          "Math.log(2);",
          "Math.log(3);",
          "Math.log(10);",
          "Math.log2(8);",
          "Math.log10(1000);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_random.asp",
    "cours": {
      "titre": "JavaScript Random",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_random.asp",
      "contenus": {
        "paragraphs": [
          "Math.random()returns a random number between 0 (inclusive),  and 1 \n(exclusive):",
          "Math.random()always returns a number lower than 1.",
          "Math.random()used withMath.floor()can be used to return random integers.",
          "There is no such thing as JavaScript integers.",
          "We are talking about numbers with no decimals here.",
          "As you can see from the examples above, it might be a good idea to create a proper random function\nto use for all random integer purposes.",
          "This JavaScript function always returns a random number between min (included) and \nmax (excluded):",
          "This JavaScript function always returns a random number between min and max (both included):"
        ],
        "lists": [],
        "examples": [
          "// Returns a random number:Math.random();",
          "// Returns a random integer from 0 to 9:Math.floor(Math.random() * 10);",
          "// Returns a random integer from 0 to 10:Math.floor(Math.random() * 11);",
          "// Returns a random integer from 0 to 99:Math.floor(Math.random() * 100);",
          "// Returns a random integer from 0 to 100:Math.floor(Math.random() * 101);",
          "// Returns a random integer from 1 to 10:Math.floor(Math.random() * 10) + 1;",
          "// Returns a random integer from 1 to 100:Math.floor(Math.random() * 100) + 1;",
          "function getRndInteger(min, max) {return Math.floor(Math.random() * (max - min) ) + min;}",
          "function getRndInteger(min, max) {return Math.floor(Math.random() * (max - min + 1) ) + min;}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_booleans.asp",
    "cours": {
      "titre": "JavaScriptBooleans",
      "description": "A JavaScript Boolean represents one of two values:trueorfalse.",
      "lien": "https://www.w3schools.com/js/js_booleans.asp",
      "contenus": {
        "paragraphs": [
          "A JavaScript Boolean represents one of two values:trueorfalse.",
          "Very often, in programming, you will need a data type that can only have one \nof two values, like",
          "For this, JavaScript has aBooleandata type. It can only \ntake the valuestrueorfalse.",
          "You can use theBoolean()function to find out if an expression (or a variable) is \ntrue:",
          "Or even easier:",
          "The chapterJS Comparisonsgives a full overview of comparison operators.",
          "The chapterJS If Elsegives a full overview of conditional statements.",
          "Here are some examples:",
          "The Boolean value of an expression is the basis for all JavaScript comparisons and conditions.",
          "The Boolean value of0(zero) isfalse:",
          "The Boolean value of-0(minus zero) isfalse:",
          "The Boolean value of\"\"(empty string) isfalse:",
          "The Boolean value ofundefinedisfalse:",
          "The Boolean value ofnullisfalse:",
          "The Boolean value offalseis (you guessed it)false:",
          "The Boolean value ofNaNisfalse:",
          "Normally JavaScript booleans are primitive values created from literals:",
          "But booleans can also be defined as objects with the keywordnew:",
          "Do not create Boolean objects.",
          "Thenewkeyword complicates the code and slows down execution speed.",
          "Boolean objects can produce unexpected results:",
          "When using the==operator, x and y areequal:",
          "When using the===operator, x and y arenot equal:",
          "Note the difference between (x==y) and (x===y).",
          "(x == y)true or false?",
          "(x === y)true or false?",
          "Comparing two JavaScript objectsalwaysreturnfalse.",
          "For a complete reference, go to ourComplete \nJavaScript Boolean Reference.",
          "The reference contains descriptions and examples of all Boolean properties and methods."
        ],
        "lists": [
          [
            "YES / NO",
            "ON / OFF",
            "TRUE / FALSE"
          ]
        ],
        "examples": [
          "Boolean(10 > 9)",
          "(10 > 9)10 > 9",
          "1003.14-15\"Hello\"\"false\"7 + 1 + 3.14",
          "let x = 0;Boolean(x);",
          "let x = -0;Boolean(x);",
          "let x = \"\";Boolean(x);",
          "let x;Boolean(x);",
          "let x = null;Boolean(x);",
          "let x = false;Boolean(x);",
          "let x = 10 / \"Hallo\";Boolean(x);",
          "let x = false;",
          "let y = new Boolean(false);",
          "let x = false;let y = new Boolean(false);//\ntypeof x returns boolean//\ntypeof y returns object",
          "let x = false;let y = new Boolean(false);",
          "let x = false;let y = new Boolean(false);",
          "let x = new Boolean(false);let y = new Boolean(false);",
          "let x = new Boolean(false);let y = new Boolean(false);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_comparisons.asp",
    "cours": {
      "titre": "JavaScript Comparison and Logical Operators",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_comparisons.asp",
      "contenus": {
        "paragraphs": [
          "Comparison and Logical operators are used to test fortrueorfalse.",
          "Comparison operators are used in logical statements to determine equality or difference between variables or values.",
          "Given thatx = 5, the table below explains the comparison operators:",
          "Comparison operators can be used in conditional statements to compare values \nand take action depending on the result:",
          "You will learn more about the use of conditional statements in the next chapter of this tutorial.",
          "Logical operators are used to determine the logic between variables or values.",
          "Given thatx = 6andy = 3, the table below explains the logical operators:",
          "JavaScript also contains a conditional operator that assigns a value to a variable based on some condition.",
          "If the variable age is a value below 18, the value of the variable voteable \nwill be \"Too young\", otherwise the value of voteable will be \"Old enough\".",
          "Comparing data of different types may give unexpected results.",
          "When comparing a string with a number, JavaScript will convert the string to \na number when doing the comparison. An empty string converts to 0. A non-numeric \nstring converts toNaNwhich is alwaysfalse.",
          "When comparing two strings, \"2\" will be greater than \"12\", because \n(alphabetically) 1 is less than 2.",
          "To secure a proper result, variables should be converted to the proper type \nbefore comparison:",
          "The??operator returns the first argument if it is notnullish(nullorundefined).",
          "Otherwise it returns the second argument.",
          "The nullish operator is supported in all browsers since March 2020:",
          "The?.operator returnsundefinedif an object isundefinedornull(instead of throwing an error).",
          "The optional chaining operator is supported in all browsers since March 2020:"
        ],
        "lists": [],
        "examples": [
          "if (age < 18) text = \"Too young to buy alcohol\";",
          "variablename= (condition) ?value1:value2",
          "let voteable = (age < 18) ? \"Too young\":\"Old enough\";",
          "age = Number(age);if (isNaN(age)) {voteable = \"Input is not a number\";} else {voteable = (age < 18) ? \"Too young\" : \"Old enough\";}",
          "let name = null;let text = \"missing\";let result = name ?? text;",
          "// Create an object:const car = {type:\"Fiat\", model:\"500\", color:\"white\"};// Ask for car name:document.getElementById(\"demo\").innerHTML = car?.name;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_if_else.asp",
    "cours": {
      "titre": "JavaScript if, else, and else if",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_if_else.asp",
      "contenus": {
        "paragraphs": [
          "Conditional statements are used to perform different actions based on different conditions.",
          "Very often when you write code, you want to perform different actions for different decisions.",
          "You can use conditional statements in your code to do this.",
          "In JavaScript we have the following conditional statements:",
          "Theswitchstatement is described in the next chapter.",
          "Use theifstatement to specify a block of JavaScript code to \nbe executed if a condition is true.",
          "Note thatifis in lowercase letters. Uppercase letters (If or IF) will generate a JavaScript error.",
          "Make a \"Good day\" greeting if the hour is less than \n18:00:",
          "The result of greeting will be:",
          "Use theelsestatement to specify a block of code to be \nexecuted if the condition is \nfalse.",
          "If the hour is less than 18, create a \"Good day\" \ngreeting, otherwise \"Good evening\":",
          "The result of greeting will be:",
          "Use theelse ifstatement to specify a new condition if the first condition is false.",
          "If time is less than 10:00, create a \"Good \nmorning\" \ngreeting, if not, but time is less than 20:00, create a \"Good day\" greeting, \notherwise a \"Good evening\":",
          "The result of greeting will be:",
          "Random linkThis example will write a link to either W3Schools or to the World Wildlife \nFoundation (WWF). By using a random number, there is a 50% chance for each of the \nlinks."
        ],
        "lists": [
          [
            "Useifto specify a block of code to be executed, if a specified condition is true",
            "Useelseto specify a block of code to be executed, if the same condition is \n  false",
            "Useelse ifto specify a new condition to test, if the first condition is false",
            "Useswitchto specify many alternative blocks of code to be executed"
          ]
        ],
        "examples": [
          "if (condition) {//block of code to be executed if the condition is true}",
          "if (hour < 18) {greeting = \"Good day\";}",
          "if (condition) {//block of code to be executed if the condition is true}\nelse {//block of code to be executed if the condition is false}",
          "if (hour < 18) {greeting = \"Good day\";}\nelse {greeting = \"Good evening\";}",
          "if (condition1) {//block of code to be executed if condition1 is true}\nelse if (condition2) {//block of code to be executed if the condition1 is false and condition2 is true} else {//block of code to be executed if the condition1 is false and condition2 is false}",
          "if (time < 10) {greeting = \"Good morning\";}\nelse if (time < 20) {greeting = \"Good day\";}\nelse {greeting = \"Good evening\";}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_switch.asp",
    "cours": {
      "titre": "JavaScriptSwitchStatement",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_switch.asp",
      "contenus": {
        "paragraphs": [
          "Theswitchstatement is used to perform different actions based on different conditions.",
          "Use theswitchstatement to select one of many code blocks to be executed.",
          "This is how it works:",
          "ThegetDay()method returns the weekday as a number between \n 0 and 6.",
          "(Sunday=0, Monday=1, Tuesday=2 ..)",
          "This example uses the weekday number to calculate the weekday name:",
          "The result of day will be:",
          "When JavaScript reaches abreakkeyword, it breaks out of the switch block.",
          "This will stop the execution inside the switch block.",
          "It is not necessary to break the last case in a switch block. The block breaks (ends) there anyway.",
          "Note:If you omit the break statement, the next case will be executed even if \nthe evaluation does not match the case.",
          "Thedefaultkeyword specifies the code to run if there is no \ncase match:",
          "ThegetDay()method returns the weekday as a number between \n 0 and 6.",
          "If today is neither Saturday (6) nor Sunday (0), write a default message:",
          "The result of text will be:",
          "Thedefaultcase does not have to be the last case in a switch \nblock:",
          "Ifdefaultis not the last case in the switch block, remember to end the default case with a break.",
          "Sometimes you will want different \nswitch cases to use the same \ncode.",
          "In this example case 4 and 5 share the same code block, and 0 and 6 share \nanother code block:",
          "If multiple cases matches a case value, thefirstcase is selected.",
          "If no matching cases are found, the program continues to thedefaultlabel.",
          "If no default label is found, the program continues to the statement(s)after the switch.",
          "Switch cases usestrictcomparison (===).",
          "The values must be of the same type to match.",
          "A strict comparison can only be true if the operands are of the same type.",
          "In this example there will be no match for x:"
        ],
        "lists": [
          [
            "The switch expression is evaluated once.",
            "The value of the expression is compared with the values of each case.",
            "If there is a match, the associated block of code is executed.",
            "If there is no match, the default code block is executed."
          ]
        ],
        "examples": [
          "switch(expression) {casex:// code blockbreak;casey:// code blockbreak;default://code block}",
          "switch (new Date().getDay()) {case 0:day = \"Sunday\";break;case 1:day = \"Monday\";break;case 2:day = \"Tuesday\";break;case 3:day = \"Wednesday\";break;case 4:day = \"Thursday\";break;case 5:day = \"Friday\";break;case 6:day = \"Saturday\";}",
          "switch (new Date().getDay()) {case 6:text = \"Today is Saturday\";break;case 0:text = \"Today is Sunday\";break;default:text = \"Looking forward to the Weekend\";}",
          "switch (new Date().getDay()) {default:text = \"Looking forward to the Weekend\";break;case 6:text = \"Today is Saturday\";break;case 0:text = \"Today is Sunday\";}",
          "switch (new Date().getDay()) {case 4:case 5:text = \"Soon it is Weekend\";break;case 0:case 6:text = \"It is Weekend\";break;default:text = \"Looking forward to the Weekend\";}",
          "let x = \"0\";switch (x) {case 0:text = \"Off\";break;case 1:text = \"On\";break;default:text = \"No value found\";}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_loop_for.asp",
    "cours": {
      "titre": "JavaScriptFor Loop",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_loop_for.asp",
      "contenus": {
        "paragraphs": [
          "Loops can execute a block of code a number of times.",
          "Loops are handy, if you want to run the same code over and over again, each \ntime with a different value.",
          "Often this is the case when working with arrays:",
          "JavaScript supports different kinds of loops:",
          "Theforstatement creates a loop with 3 optional expressions:",
          "Expression 1is executed (one time) before the execution of the code block.",
          "Expression 2defines the condition for executing the code block.",
          "Expression 3is executed (every time) after the code block has been executed.",
          "From the example above, you can read:",
          "Expression 1 sets a variable before the loop starts (let i = 0).",
          "Expression 2 defines the condition for the loop to run (i must be less than \n5).",
          "Expression 3 increases a value (i++) each time the code block in the loop has \nbeen executed.",
          "Normally you will use expression 1 to initialize the variable used in the loop (let i = 0).",
          "This is not always the case. JavaScript doesn't care. Expression 1 is \noptional.",
          "You can initiate many values in expression 1 (separated by comma):",
          "And you can omit expression 1 (like when your values are set \nbefore the loop starts):",
          "Often expression 2 is used to evaluate the condition of the initial variable.",
          "This is not always the case. JavaScript doesn't care. Expression 2 is \nalso optional.",
          "If expression 2 returns true, the loop will start over again. If it returns false, the \nloop will end.",
          "If you omit expression 2, you must provide abreakinside the \nloop. Otherwise the loop will never end. This will crash your browser.\nRead about breaks in a later chapter of this tutorial.",
          "Often expression 3 increments the value of the initial variable.",
          "This is not always the case. JavaScript doesn't care. Expression 3 is \noptional.",
          "Expression 3 can do anything like negative increment (i--), positive \nincrement (i = i + 15), or anything else.",
          "Expression 3 can also be omitted (like when you increment your values inside the loop):",
          "Usingvarin a loop:",
          "Usingletin a loop:",
          "In the first example, usingvar, the variable declared in \nthe loop redeclares the variable outside the loop.",
          "In the second example, usinglet, the variable declared in \nthe loop does not redeclare the variable outside the loop.",
          "Whenletis used to declare the i variable in a loop, the i \nvariable will only be visible within the loop.",
          "Thefor/inloop and thefor/ofloop are explained in the next chapter.",
          "Thewhileloop and thedo/whileare explained in the next chapters."
        ],
        "lists": [
          [
            "for- loops through a block of code a number of times",
            "for/in- loops through the properties of an object",
            "for/of- loops through the values of an \n  iterable object",
            "while- loops through a block of code while a specified condition is true",
            "do/while- also loops through a block of code while a specified condition is true"
          ]
        ],
        "examples": [
          "text += cars[0] + \"<br>\";text += cars[1] + \"<br>\";text += cars[2] + \"<br>\";text += cars[3] + \"<br>\";text += cars[4] + \"<br>\";text += cars[5] + \"<br>\";",
          "for (let i = 0; i < cars.length; i++) {text += cars[i] + \"<br>\";}",
          "for (expression 1;expression 2;expression 3) {//code block to be executed}",
          "for (let i = 0; i < 5; i++) {text += \"The number is \" + i + \"<br>\";}",
          "for (let i = 0, len = cars.length, text = \"\"; i < len; i++) {text += cars[i] + \"<br>\";}",
          "let i = 2;let len = cars.length;let text = \"\";for (; i < len; i++) {text += cars[i] + \"<br>\";}",
          "let i = 0;let len = cars.length;let text = \"\";for (; i < len; ) {text += cars[i] + \"<br>\";i++;}",
          "var i = 5;for (var i = 0; i < 10; i++) {// some code}// Here i is 10",
          "let i = 5;for (let i = 0; i < 10; i++) {// some code}// Here i is 5"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_loop_forin.asp",
    "cours": {
      "titre": "JavaScript For In",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_loop_forin.asp",
      "contenus": {
        "paragraphs": [
          "The JavaScriptfor instatement loops through the properties of an Object:",
          "The JavaScriptfor instatement can also loop over the properties of an Array:",
          "Do not usefor inover an Array if the indexorderis important.",
          "The index order is implementation-dependent, and array values may not be accessed in the order you expect.",
          "It is better to use aforloop, afor ofloop, orArray.forEach()when the order is important.",
          "TheforEach()method calls a function (a callback function) once for each array element.",
          "Note that the function takes 3 arguments:",
          "The example above uses only the value parameter. It can be rewritten to:"
        ],
        "lists": [
          [
            "Thefor inloop iterates over apersonobject",
            "Each iteration returns akey(x)",
            "The key is used to access thevalueof the key",
            "The value of the key isperson[x]"
          ],
          [
            "The item value",
            "The item index",
            "The array itself"
          ]
        ],
        "examples": [
          "for (key in object) {//code block to be executed}",
          "const person = {fname:\"John\", lname:\"Doe\", age:25};let text = \"\";for (let x in person) {text += person[x];}",
          "for (variable in array) {code}",
          "const numbers = [45, 4, 9, 16, 25];let txt = \"\";for (let x in numbers) {txt += numbers[x];}",
          "const numbers = [45, 4, 9, 16, 25];let txt = \"\";numbers.forEach(myFunction);function myFunction(value, index, array) {txt += value;}",
          "const numbers = [45, 4, 9, 16, 25];let txt = \"\";numbers.forEach(myFunction);function myFunction(value) {txt += value;}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_loop_forof.asp",
    "cours": {
      "titre": "JavaScript For Of",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_loop_forof.asp",
      "contenus": {
        "paragraphs": [
          "The JavaScriptfor ofstatement loops \nthrough the values of an iterable object.",
          "It lets you loop over iterable data structures \nsuch as Arrays, Strings, Maps, NodeLists, and more:",
          "variable- For every iteration the value of the next property is \nassigned to the variable.Variablecan be declared withconst,let, orvar.",
          "iterable- An object that has iterable properties.",
          "For/ofwas added to JavaScript in 2015 (ES6)",
          "Safari 7 was the first browser to support for of:",
          "For/ofis not supported in Internet Explorer.",
          "Thewhileloop and thedo/whileloop are explained in the next chapter."
        ],
        "lists": [],
        "examples": [
          "for (variable of iterable) {//code block to be executed}",
          "const cars = [\"BMW\", \"Volvo\", \"Mini\"];let text = \"\";for (let x of cars) {text += x;}",
          "let language = \"JavaScript\";let text = \"\";for (let x of language) {text += x;}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_loop_while.asp",
    "cours": {
      "titre": "JavaScriptWhile Loop",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_loop_while.asp",
      "contenus": {
        "paragraphs": [
          "Loops can execute a block of code\nas long as a specified condition is true.",
          "Thewhileloop loops through a block of code as long as a specified condition is true.",
          "In the following example, the code in the loop will run, over and over again, as long as \na variable (i) is less than 10:",
          "If you forget to increase the variable used in the condition, the loop will never end.\nThis will crash your browser.",
          "Thedo whileloop is a variant of the while loop. This loop will \nexecute the code block once, before checking if the condition is true, then it will\nrepeat the loop as long as the condition is true.",
          "The example below uses ado whileloop. The loop will always be \nexecuted at least once, even if the condition is false, because the code block \nis executed before the condition is tested:",
          "Do not forget to increase the variable used in the condition, otherwise \nthe loop will never end!",
          "If you have read the previous chapter, about the for loop, you will discover that a while loop is \nmuch the same as a for loop, with statement 1 and statement 3 omitted.",
          "The loop in this example uses aforloop to collect the car \nnames from the cars array:",
          "The loop in this example uses awhileloop to collect the \ncar names from the cars array:"
        ],
        "lists": [],
        "examples": [
          "while (condition) {// code block to be executed}",
          "while (i < 10) {text += \"The number is \" + i;i++;}",
          "do {// code block to be executed}while (condition);",
          "do {text += \"The number is \" + i;i++;}while (i < 10);",
          "const cars = [\"BMW\", \"Volvo\", \"Saab\", \"Ford\"];let i = 0;let text = \"\";for (;cars[i];) {text += cars[i];i++;}",
          "const cars = [\"BMW\", \"Volvo\", \"Saab\", \"Ford\"];let i = 0;let text = \"\";while (cars[i]) {text += cars[i];i++;}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_break.asp",
    "cours": {
      "titre": "JavaScriptBreak and Continue",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_break.asp",
      "contenus": {
        "paragraphs": [
          "Thebreakstatement \"jumps out\" of a loop.",
          "Thecontinuestatement \"jumps over\" one iteration in \nthe loop.",
          "You have already seen thebreakstatement used in an earlier \nchapter of this tutorial. It was used to \"jump out\" of aswitch()statement.",
          "Thebreakstatement can also be used to jump out of a loop:",
          "In the example above, thebreakstatement ends the loop (\"breaks\" the loop)\nwhen the loop counter (i) is 3.",
          "Thecontinuestatement breaks one iteration (in the loop), if a specified \ncondition occurs, and continues with the next iteration in the loop.",
          "This example skips the value of 3:",
          "To label JavaScript statements you precede the statements with a label name \nand a colon:",
          "Thebreakand thecontinuestatements are the only JavaScript statements that \ncan \"jump out of\" a code block.",
          "Syntax:",
          "Thecontinuestatement (with or without a label reference) can only be used toskip one \nloop iteration.",
          "Thebreakstatement, without a label reference, can only be used tojump out of a loop \nor a switch.",
          "With a label reference, the break statement can be used tojump out \nof any code block:",
          "A code block is a block of code between { and }."
        ],
        "lists": [],
        "examples": [
          "for (let i = 0; i < 10; i++) {if (i === 3) { break; }text += \"The number is \" + i + \"<br>\";}",
          "for (let i = 0; i < 10; i++) {if (i === 3) { continue; }text += \"The number is \" + i + \"<br>\";}",
          "label:statements",
          "breaklabelname;continuelabelname;",
          "const cars = [\"BMW\", \"Volvo\", \"Saab\", \"Ford\"];list: {text += cars[0] + \"<br>\";text += cars[1] + \"<br>\";break list;text += cars[2] + \"<br>\";text += cars[3] + \"<br>\";}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_iterables.asp",
    "cours": {
      "titre": "JavaScript Iterables",
      "description": "Iterables are iterable objects (like Arrays).Iterables can be accessed with simple and efficient code.Iterables can be iterated over withfor..ofloops",
      "lien": "https://www.w3schools.com/js/js_iterables.asp",
      "contenus": {
        "paragraphs": [
          "Iterables are iterable objects (like Arrays).",
          "Iterables can be accessed with simple and efficient code.",
          "Iterables can be iterated over withfor..ofloops",
          "The JavaScriptfor..ofstatement loops \nthrough the elements of an iterable object.",
          "Iterating is easy to understand.",
          "It simply means looping over a sequence of elements.",
          "Here are some easy examples:",
          "You can use afor..ofloop to iterate over the elements of a string:",
          "You can use afor..ofloop to iterate over the elements of an Array:",
          "You can use afor..ofloop to iterate over the elements of a Set:",
          "Sets and Maps are covered in the next chapters.",
          "You can use afor..ofloop to iterate over the elements of a Map:",
          "Theiterator protocoldefines how to produce asequence of valuesfrom an object.",
          "An object becomes aniteratorwhen it implements anext()method.",
          "Thenext()method must return an object with two properties:value (the next value)done (true or false)valueThe value returned by the iterator(Can be omitted if done is true)donetrueif the iterator has completedfalseif the iterator has produced a new valueNoteTechnically, iterables must implement theSymbol.iteratormethod.String, Array, TypedArray, Map and Set are all iterables, because their prototype objects have a Symbol.iterator method.Home Made IterableThis iterable returns never ending: 10,20,30,40,.... Everytimenext()is called:Example// Home Made Iterablefunction myNumbers() {let n = 0;return {next: function() {n += 10;return {value:n, done:false};}};}// Create Iterableconst n = myNumbers();n.next(); // Returns 10n.next(); // Returns 20n.next(); // Returns 30Try it Yourself »The problem with a home made iterable:It does not support the JavaScriptfor..ofstatement.A JavaScript iterable is an object that has aSymbol.iterator.TheSymbol.iteratoris a function that returns anext()function.An iterable can be iterated over with the code:for (const x of iterable) { }Example// Create an ObjectmyNumbers = {};// Make it IterablemyNumbers[Symbol.iterator] = function() {let n = 0;done = false;return {next() {n += 10;if (n == 100) {done = true}return {value:n, done:done};}};}Now you can usefor..offor (const num of myNumbers) {// Any Code Here}Try it Yourself »The Symbol.iterator method is called automatically byfor..of.But we can also do it \"manually\":Examplelet iterator = myNumbers[Symbol.iterator]();while (true) {const result = iterator.next();if (result.done) break;// Any Code Here}Try it Yourself »❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "Technically, iterables must implement theSymbol.iteratormethod.",
          "String, Array, TypedArray, Map and Set are all iterables, because their prototype objects have a Symbol.iterator method.",
          "This iterable returns never ending: 10,20,30,40,.... Everytimenext()is called:",
          "The problem with a home made iterable:",
          "It does not support the JavaScriptfor..ofstatement.",
          "A JavaScript iterable is an object that has aSymbol.iterator.",
          "TheSymbol.iteratoris a function that returns anext()function.",
          "An iterable can be iterated over with the code:for (const x of iterable) { }Example// Create an ObjectmyNumbers = {};// Make it IterablemyNumbers[Symbol.iterator] = function() {let n = 0;done = false;return {next() {n += 10;if (n == 100) {done = true}return {value:n, done:done};}};}Now you can usefor..offor (const num of myNumbers) {// Any Code Here}Try it Yourself »The Symbol.iterator method is called automatically byfor..of.But we can also do it \"manually\":Examplelet iterator = myNumbers[Symbol.iterator]();while (true) {const result = iterator.next();if (result.done) break;// Any Code Here}Try it Yourself »❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "Now you can usefor..of",
          "The Symbol.iterator method is called automatically byfor..of.But we can also do it \"manually\":Examplelet iterator = myNumbers[Symbol.iterator]();while (true) {const result = iterator.next();if (result.done) break;// Any Code Here}Try it Yourself »❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "But we can also do it \"manually\":Examplelet iterator = myNumbers[Symbol.iterator]();while (true) {const result = iterator.next();if (result.done) break;// Any Code Here}Try it Yourself »❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up"
        ],
        "lists": [
          [
            "Iterating over a String",
            "Iterating over an Array"
          ],
          [
            "value (the next value)",
            "done (true or false)"
          ]
        ],
        "examples": [
          "for (variable of iterable) {//code block to be executed}",
          "const name = \"W3Schools\";for (const x of name) {//code block to be executed}",
          "const letters = [\"a\",\"b\",\"c\"];for (const x of letters) {//code block to be executed}",
          "const numbers = [2,4,6,8];for (const x of numbers) {//code block to be executed}",
          "const letters = new Set([\"a\",\"b\",\"c\"]);for (const x of letters) {//code block to be executed}",
          "const fruits = new Map([[\"apples\", 500],[\"bananas\", 300],[\"oranges\", 200]]);for (const x of fruits) {//code block to be executed}",
          "// Home Made Iterablefunction myNumbers() {let n = 0;return {next: function() {n += 10;return {value:n, done:false};}};}// Create Iterableconst n = myNumbers();n.next(); // Returns 10n.next(); // Returns 20n.next(); // Returns 30",
          "// Create an ObjectmyNumbers = {};// Make it IterablemyNumbers[Symbol.iterator] = function() {let n = 0;done = false;return {next() {n += 10;if (n == 100) {done = true}return {value:n, done:done};}};}",
          "for (const num of myNumbers) {// Any Code Here}",
          "let iterator = myNumbers[Symbol.iterator]();while (true) {const result = iterator.next();if (result.done) break;// Any Code Here}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_sets.asp",
    "cours": {
      "titre": "JavaScript Sets",
      "description": "A JavaScript Set is a collection of unique values.Each value can only occur once in a Set.The values can be of any type, primitive values or objects.",
      "lien": "https://www.w3schools.com/js/js_sets.asp",
      "contenus": {
        "paragraphs": [
          "A JavaScript Set is a collection of unique values.",
          "Each value can only occur once in a Set.",
          "The values can be of any type, primitive values or objects.",
          "You can create a JavaScript Set by:",
          "Pass an array to thenew Set()constructor:",
          "Create a Set and add values:",
          "Create a Set and add variables:",
          "If you add equal elements, only the first will be saved:",
          "You can list all Set elements (values) with afor..ofloop:",
          "typeofreturns object:",
          "instanceof Setreturns true:",
          "For a complete reference, go to our:",
          "Complete JavaScript Set Reference.",
          "The reference contains descriptions and examples of all Set Properties and Methods.",
          "Setis anES6  feature(JavaScript 2015).",
          "ES6 is fully supported in all modern browsers since June 2017:",
          "Setis not supported in Internet Explorer."
        ],
        "lists": [
          [
            "Passing an array tonew Set()",
            "Create an empty set and useadd()to add values"
          ]
        ],
        "examples": [
          "// Create a Setconst letters = new Set([\"a\",\"b\",\"c\"]);",
          "// Create a Setconst letters = new Set();// Add Values to the Setletters.add(\"a\");letters.add(\"b\");letters.add(\"c\");",
          "// Create a Setconst letters = new Set();// Create Variablesconst a = \"a\";const b = \"b\";const c = \"c\";// Add Variables to the Setletters.add(a);letters.add(b);letters.add(c);",
          "letters.add(\"d\");letters.add(\"e\");",
          "letters.add(\"a\");letters.add(\"b\");letters.add(\"c\");letters.add(\"c\");letters.add(\"c\");letters.add(\"c\");letters.add(\"c\");letters.add(\"c\");",
          "// Create a Setconst letters = new Set([\"a\",\"b\",\"c\"]);// List all Elementslet text = \"\";for (const x of letters) {text += x;}",
          "typeof letters;      // Returns object",
          "letters instanceof Set;  // Returns true"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_set_methods.asp",
    "cours": {
      "titre": "JavaScript Set Methods",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_set_methods.asp",
      "contenus": {
        "paragraphs": [
          "Pass an array to thenew Set()constructor:",
          "If you add equal elements, only the first will be saved:",
          "You can list all Set elements (values) with afor..ofloop:",
          "Thehas()method returnstrueif a specified value exists in a set.",
          "TheforEach()method invokes a function for each Set element:",
          "Thevalues()method returns an Iterator object with the values in a Set:",
          "Thekeys()method returns an Iterator object with the values in a Set:",
          "A Set has no keys, sokeys()returns the same asvalues().",
          "This makes Sets compatible with Maps.",
          "Theentries()method returns an Iterator with [value,value] pairs from a Set.",
          "Theentries()method is supposed to return a [key,value] pair from an object.",
          "A Set has no keys, so theentries()method returns [value,value].",
          "This makes Sets compatible with Maps.",
          "For a complete reference, go to our:",
          "Complete JavaScript Set Reference.",
          "The reference contains descriptions and examples of all Set Properties and Methods."
        ],
        "lists": [],
        "examples": [
          "// Create a Setconst letters = new Set([\"a\",\"b\",\"c\"]);",
          "letters.add(\"d\");letters.add(\"e\");",
          "letters.add(\"a\");letters.add(\"b\");letters.add(\"c\");letters.add(\"c\");letters.add(\"c\");letters.add(\"c\");letters.add(\"c\");letters.add(\"c\");",
          "// Create a Setconst letters = new Set([\"a\",\"b\",\"c\"]);// List all Elementslet text = \"\";for (const x of letters) {text += x;}",
          "// Create a Setconst letters = new Set([\"a\",\"b\",\"c\"]);// Does the Set contain \"d\"?answer = letters.has(\"d\");",
          "// Create a Setconst letters = new Set([\"a\",\"b\",\"c\"]);// List all entrieslet text = \"\";letters.forEach (function(value) {text += value;})",
          "// Create a Setconst letters = new Set([\"a\",\"b\",\"c\"]);// Get all Valuesconst myIterator = letters.values();// List all Valueslet text = \"\";for (const entry of myIterator) {text += entry;}",
          "// Create a Setconst letters = new Set([\"a\",\"b\",\"c\"]);// List all Valueslet text = \"\";for (const entry of letters.values()) {text += entry;}",
          "// Create a Setconst letters = new Set([\"a\",\"b\",\"c\"]);// Create an Iteratorconst myIterator = letters.keys();// List all Elementslet text = \"\";for (const x of myIterator) {text += x;}",
          "// Create a Setconst letters = new Set([\"a\",\"b\",\"c\"]);// List all Elementslet text = \"\";for (const x of letters.keys()) {text += x;}",
          "// Create a Setconst letters = new Set([\"a\",\"b\",\"c\"]);// Get all Entriesconst myIterator = letters.entries();// List all Entrieslet text = \"\";for (const entry of myIterator) {text += entry;}",
          "// Create a Setconst letters = new Set([\"a\",\"b\",\"c\"]);// List all Entrieslet text = \"\";for (const entry of letters.entries()) {text += entry;}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_maps.asp",
    "cours": {
      "titre": "JavaScript Maps",
      "description": "A Map holds key-value pairs where the keys can be any datatype.A Map remembers the original insertion order of the keys.",
      "lien": "https://www.w3schools.com/js/js_maps.asp",
      "contenus": {
        "paragraphs": [
          "A Map holds key-value pairs where the keys can be any datatype.",
          "A Map remembers the original insertion order of the keys.",
          "You can create a JavaScript Map by:",
          "You can create a Map by passing an Array to thenew Map()constructor:",
          "You can add elements to a Map with theset()method:",
          "Theset()method can also be used to change existing Map values:",
          "Theget()method gets the value of a key in a Map:",
          "typeofreturns object:",
          "instanceofMap returns true:",
          "For a complete reference, go to our:",
          "Complete JavaScript Map Reference.",
          "The reference contains descriptions and examples of all Map Properties and Methods.",
          "Mapis anES6  feature(JavaScript 2015).",
          "ES6 is fully supported in all modern browsers since June 2017:",
          "Mapis not supported in Internet Explorer."
        ],
        "lists": [
          [
            "Passing an Array tonew Map()",
            "Create a Map and useMap.set()"
          ]
        ],
        "examples": [
          "// Create a Mapconst fruits = new Map([[\"apples\", 500],[\"bananas\", 300],[\"oranges\", 200]]);",
          "// Create a Mapconst fruits = new Map();// Set Map Valuesfruits.set(\"apples\", 500);fruits.set(\"bananas\", 300);fruits.set(\"oranges\", 200);",
          "fruits.set(\"apples\", 200);",
          "fruits.get(\"apples\");    // Returns 500",
          "// Returns object:typeof fruits;",
          "// Returns true:fruits instanceof Map;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_map_methods.asp",
    "cours": {
      "titre": "JavaScript Map Methods",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_map_methods.asp",
      "contenus": {
        "paragraphs": [
          "You can create a map by passing an array to thenew Map()constructor:",
          "You get the value of a key in a map with theget()method",
          "You can add elements to a map with theset()method:",
          "Theset()method can also be used to change existing map values:",
          "Thesizeproperty returns the number of elements in a map:",
          "Thedelete()method removes a map element:",
          "Theclear()method removes all the elements from a map:",
          "Thehas()method returns true if a key exists in a map:",
          "TheforEach()method invokes a callback for each key/value pair in a map:",
          "Theentries()method returns an iterator object with the [key,values] in a map:",
          "Thekeys()method returns an iterator object with the keys in a map:",
          "Thevalues()method returns an iterator object with the values in a map:",
          "You can use thevalues()method to sum the values in a map:",
          "Being able to use objects as keys is an important Map feature.",
          "Remember: The key is an object (apples), not a string (\"apples\"):",
          "ES2024 added theMap.groupBy()method to JavaScript.",
          "TheMap.groupBy()method groups elements of an object\naccording to string values returned from a callback function.",
          "TheMap.groupBy()method does not change the original object.",
          "Map.groupby()is an ES2024 feature.",
          "It is supported in new browsers since March 2024:",
          "ES2024 features are relatively new.",
          "Older browsers may need an alternative code (Polyfill)",
          "The difference between Object.groupBy() and Map.groupBy() is:",
          "Object.groupBy() groups elements into a JavaScript object.",
          "Map.groupBy() groups elements into a Map object.",
          "For a complete reference, go to our:",
          "Complete JavaScript Map Reference.",
          "The reference contains descriptions and examples of all Map Properties and Methods."
        ],
        "lists": [],
        "examples": [
          "// Create a Mapconst fruits = new Map([[\"apples\", 500],[\"bananas\", 300],[\"oranges\", 200]]);",
          "fruits.get(\"apples\");",
          "// Create a Mapconst fruits = new Map();// Set Map Valuesfruits.set(\"apples\", 500);fruits.set(\"bananas\", 300);fruits.set(\"oranges\", 200);",
          "fruits.set(\"apples\", 500);",
          "fruits.size;",
          "fruits.delete(\"apples\");",
          "fruits.clear();",
          "fruits.has(\"apples\");",
          "fruits.delete(\"apples\");fruits.has(\"apples\");",
          "// List all entrieslet text = \"\";fruits.forEach (function(value, key) {text += key + ' = ' + value;})",
          "// List all entrieslet text = \"\";for (const x of fruits.entries()) {text += x;}",
          "// List all keyslet text = \"\";for (const x of fruits.keys()) {text += x;}",
          "// List all valueslet text = \"\";for (const x of fruits.values()) {text += x;}",
          "// Sum all valueslet total = 0;for (const x of fruits.values()) {total += x;}",
          "// Create Objectsconst apples = {name: 'Apples'};const bananas = {name: 'Bananas'};const oranges = {name: 'Oranges'};// Create a Mapconst fruits = new Map();// Add new Elements to the Mapfruits.set(apples, 500);fruits.set(bananas, 300);fruits.set(oranges, 200);",
          "fruits.get(\"apples\");  // Returns undefined",
          "// Create an Arrayconst fruits = [{name:\"apples\", quantity:300},{name:\"bananas\", quantity:500},{name:\"oranges\", quantity:200},{name:\"kiwi\", quantity:150}];// Callback function to Group Elementsfunction myCallback({ quantity }) {return quantity > 200 ? \"ok\" : \"low\";}// Group by Quantityconst result = Map.groupBy(fruits, myCallback);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_typeof.asp",
    "cours": {
      "titre": "JavaScript typeof",
      "description": "The typeof OperatorThetypeofoperator returns thedata typeof a JavaScript variable.",
      "lien": "https://www.w3schools.com/js/js_typeof.asp",
      "contenus": {
        "paragraphs": [
          "Thetypeofoperator returns thedata typeof a JavaScript variable.",
          "In JavaScript, a primitive value is a single value with no properties or methods.",
          "JavaScript has 7 primitive data types:",
          "Thetypeofoperator returns the type of a variable or an expression.",
          "In JavaScript,nullis  a primitive value.\nHowever,typeofreturns \"object\".",
          "This is a well-known bug in JavaScript and has historical reasons.",
          "A complex data type can store multiple values\nand/or different data types together.",
          "JavaScript has one complex data type:",
          "All other complex types like arrays, functions, sets, and maps are just different types of objects.",
          "Thetypeofoperator returns only two types:",
          "Thetypeofoperator returns object for all types of objects:objectsarrayssetsmapsYou cannot usetypeofto determine if a JavaScript object is an array or a date.",
          "You cannot usetypeofto determine if a JavaScript object is an array or a date.",
          "How to know if a variable is an array?",
          "ECMAScript 5 (2009) defined a new method for this:Array.isArray():",
          "Theinstanceofoperator returnstrueif an object is an instance of a specified object type:",
          "Thetypeofof an undefined variable isundefined.Exampletypeof car;Try it Yourself »Thetypeofof a variable with no value isundefined. The value is alsoundefined.Examplelet car;typeof car;Try it Yourself »Any variable can be emptied, by setting the value toundefined.The type will also beundefined.Examplelet car = \"Volvo\";car = undefined;Try it Yourself »Empty ValuesAn empty value has nothing to do withundefined.An empty string has both a legal value and a type.Examplelet car = \"\";typeof car;Try it Yourself »NullIn JavaScriptnullis \"nothing\". It is supposed to be something that doesn't exist.Unfortunately, in JavaScript, the data type ofnullis an object.You can empty an object by setting it tonull:Example// Create an Objectlet person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};person = null;// Now value is null, but type is still an objectTry it Yourself »You can also empty an object by setting it toundefined:Examplelet person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};person = undefined;// Now both value and type is undefinedTry it Yourself »Difference Between Undefined and Nullundefinedandnullare equal in value but different in type:typeof undefined     \n    // undefinedtypeof null          \n    // objectnull === undefined   \n    // falsenull == undefined    \n    // trueTry it Yourself »The constructor PropertyTheconstructorproperty returns the constructor \nfunction for all JavaScript variables.Example// Returns function Object() {[native code]}:{name:'John',age:34}.constructor// Returns function Array() {[native code]}:[1,2,3,4].constructor// Returns function Date() {[native code]}:new Date().constructor// Returns function Set() {[native code]}:new Set().constructor// Returns function Map() {[native code]}:new Map().constructor// Returns function Function() {[native code]}:function () {}.constructorTry it Yourself »With the constructor, you can check if an object is anArray:Example(myArray.constructor === Array);Try it Yourself »With the constructor, you can check if an object is aDate:Example(myDate.constructor === Date);Try it Yourself »All Togethertypeof \"John\"          \n// Returns \"string\"typeof (\"John\"+\"Doe\")  \n// Returns \"string\"typeof 3.14            \n// Returns \"number\"typeof (33 + 66)       \n// Returns \"number\"typeof NaN             \n// Returns \"number\"typeof 1234n          \n// Returns \"bigint\"typeof true           \n// Returns \"boolean\"typeof false          \n// Returns \"boolean\"typeof {name:'John'}  \n// Returns \"object\"typeof [1,2,3,4]      \n// Returns \"object\"typeof {}             \n// Returns \"object\"typeof []             \n// Returns \"object\"typeof new Object()    \n// Returns \"object\"typeof new Array()     \n// Returns \"object\"typeof new Date()      \n// Returns \"object\"typeof new Set()       \n// Returns \"object\"typeof new Map()       \n// Returns \"object\"typeof function () {} \n// Returns \"function\"typeof x               \n// Returns \"undefined\"typeof null            \n// Returns \"object\"Try it Yourself »Note:The data type ofNaN(Not a Number) isnumber!The void OperatorThevoidoperator evaluates an expression and returnsundefined. This operator is often used to obtain the undefined \nprimitive value, using \"void(0)\" (useful when evaluating an expression without \nusing the return value).Example<a href=\"javascript:void(0);\">Useless link</a><a href=\"javascript:void(document.body.style.backgroundColor='red');\">Click me to change the background color of body to red</a>Try it Yourself »❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "Thetypeofof a variable with no value isundefined. The value is alsoundefined.",
          "Any variable can be emptied, by setting the value toundefined.",
          "The type will also beundefined.",
          "An empty value has nothing to do withundefined.",
          "An empty string has both a legal value and a type.",
          "In JavaScriptnullis \"nothing\". It is supposed to be something that doesn't exist.",
          "Unfortunately, in JavaScript, the data type ofnullis an object.",
          "You can empty an object by setting it tonull:",
          "You can also empty an object by setting it toundefined:",
          "undefinedandnullare equal in value but different in type:",
          "Theconstructorproperty returns the constructor \nfunction for all JavaScript variables.",
          "With the constructor, you can check if an object is anArray:",
          "Try it Yourself »",
          "With the constructor, you can check if an object is aDate:",
          "Try it Yourself »",
          "The data type ofNaN(Not a Number) isnumber!",
          "Thevoidoperator evaluates an expression and returnsundefined. This operator is often used to obtain the undefined \nprimitive value, using \"void(0)\" (useful when evaluating an expression without \nusing the return value)."
        ],
        "lists": [
          [
            "string",
            "number",
            "boolean",
            "bigint",
            "symbol",
            "null",
            "undefined"
          ],
          [
            "object"
          ],
          [
            "object",
            "function"
          ],
          [
            "objects",
            "arrays",
            "sets",
            "maps"
          ]
        ],
        "examples": [
          "typeof \"John\"        \n// Returns stringtypeof (\"John\"+\"Doe\")\n// Returns stringtypeof 3.14          \n// Returns numbertypeof 33            \n// Returns numbertypeof (33 + 66)     \n// Returns numbertypeof true          \n// Returns booleantypeof false         \n// Returns booleantypeof 1234n         \n// Returns biginttypeof Symbol()      \n// Returns symboltypeof x             \n// Returns undefined",
          "typeof null          \n// Returns object",
          "typeof {name:'John'}   // Returns objecttypeof [1,2,3,4]      \n// Returns objecttypeof new Map()      \n// Returns objecttypeof new Set()      \n// Returns objecttypeof function (){}   // Returns function",
          "// Create an Arrayconst fruits = [\"apples\", \"bananas\", \"oranges\"];Array.isArray(fruits);",
          "// Create a Dateconst time = new Date();(time instanceof Date);",
          "// Create an Arrayconst fruits = [\"apples\", \"bananas\", \"oranges\"];(fruits instanceof Array);",
          "// Create a Mapconst fruits = new Map([[\"apples\", 500],[\"bananas\", 300],[\"oranges\", 200]]);(fruits instanceof Map);",
          "// Create a Setconst fruits = new Set([\"apples\", \"bananas\", \"oranges\"]);(fruits instanceof Set);",
          "typeof car;",
          "let car;typeof car;",
          "let car = \"Volvo\";car = undefined;",
          "let car = \"\";typeof car;",
          "// Create an Objectlet person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};person = null;// Now value is null, but type is still an object",
          "let person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};person = undefined;// Now both value and type is undefined",
          "typeof undefined     \n    // undefinedtypeof null          \n    // objectnull === undefined   \n    // falsenull == undefined    \n    // true",
          "// Returns function Object() {[native code]}:{name:'John',age:34}.constructor// Returns function Array() {[native code]}:[1,2,3,4].constructor// Returns function Date() {[native code]}:new Date().constructor// Returns function Set() {[native code]}:new Set().constructor// Returns function Map() {[native code]}:new Map().constructor// Returns function Function() {[native code]}:function () {}.constructor",
          "(myArray.constructor === Array);",
          "(myDate.constructor === Date);",
          "typeof \"John\"          \n// Returns \"string\"typeof (\"John\"+\"Doe\")  \n// Returns \"string\"typeof 3.14            \n// Returns \"number\"typeof (33 + 66)       \n// Returns \"number\"typeof NaN             \n// Returns \"number\"typeof 1234n          \n// Returns \"bigint\"typeof true           \n// Returns \"boolean\"typeof false          \n// Returns \"boolean\"typeof {name:'John'}  \n// Returns \"object\"typeof [1,2,3,4]      \n// Returns \"object\"typeof {}             \n// Returns \"object\"typeof []             \n// Returns \"object\"typeof new Object()    \n// Returns \"object\"typeof new Array()     \n// Returns \"object\"typeof new Date()      \n// Returns \"object\"typeof new Set()       \n// Returns \"object\"typeof new Map()       \n// Returns \"object\"typeof function () {} \n// Returns \"function\"typeof x               \n// Returns \"undefined\"typeof null            \n// Returns \"object\"",
          "<a href=\"javascript:void(0);\">Useless link</a><a href=\"javascript:void(document.body.style.backgroundColor='red');\">Click me to change the background color of body to red</a>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_type_conversion.asp",
    "cours": {
      "titre": "JavaScriptType Conversion",
      "description": "Converting Strings to NumbersConverting Numbers to StringsConverting Dates to NumbersConverting Numbers to DatesConverting Booleans to NumbersConverting Numbers to Booleans",
      "lien": "https://www.w3schools.com/js/js_type_conversion.asp",
      "contenus": {
        "paragraphs": [
          "JavaScript variables can be converted to a new variable and another data type:",
          "The global methodNumber()converts a variable (or a value) into a number.",
          "A numeric string (like \"3.14\") converts to a number (like 3.14).",
          "An empty string (like \"\") converts to 0.",
          "A non numeric string (like \"John\") converts toNaN(Not a Number).",
          "These will convert:",
          "These will not convert:",
          "In the chapterNumber Methods, you \nwill find more methods that can be used to convert strings to \nnumbers:",
          "Theunary + operatorcan be used to \nconvert a variable to a number:",
          "If the \nvariable cannot be converted, it will still become a number, but with the valueNaN(Not a Number):",
          "The global methodString()can convert numbers to strings.",
          "It can be used on any type of numbers, literals, variables, or expressions:",
          "The Number methodtoString()does the same.",
          "In the chapterNumber Methods, you \nwill find more methods that can be used to convert numbers to \nstrings:",
          "The global methodNumber()can be used to convert dates to \nnumbers.",
          "The date methodgetTime()does the same.",
          "The global methodString()can convert dates to \nstrings.",
          "The Date methodtoString()does the same.",
          "In the chapterDate Methods, you \nwill find more methods that can be used to convert dates to \nstrings:",
          "The global methodNumber()can also convert booleans to numbers.",
          "The global methodString()can convert booleans to \nstrings.",
          "The Boolean methodtoString()does the same.",
          "When JavaScript tries to operate on a \"wrong\" data type, it will try to \nconvert the value to a \"right\" type.",
          "The result is not always what you expect:",
          "JavaScript automatically calls the variable'stoString()function when you try \nto \"output\" an object or a variable:",
          "Numbers and booleans are also converted, but this is not very visible:",
          "This table shows the result of converting different JavaScript values to Number, String, and Boolean:",
          "Values in quotes indicate string values.",
          "Red valuesindicate values (some) programmers might not expect."
        ],
        "lists": [
          [
            "Converting Strings to Numbers",
            "Converting Numbers to Strings",
            "Converting Dates to Numbers",
            "Converting Numbers to Dates",
            "Converting Booleans to Numbers",
            "Converting Numbers to Booleans"
          ],
          [
            "By the use of a JavaScript function",
            "Automaticallyby JavaScript itself"
          ]
        ],
        "examples": [
          "Number(\"3.14\")Number(Math.PI)Number(\" \")Number(\"\")",
          "Number(\"99 88\")Number(\"John\")",
          "let y = \"5\";     \n// y is a stringlet x = + y;      \n// x is a number",
          "let y = \"John\";  \n// y is a stringlet x = + y;      // x is a number (NaN)",
          "String(x)         // returns a string from a number variable xString(123)       // returns a string from a number literal 123String(100 + 23)  // returns a string from a number from an expression",
          "x.toString()(123).toString()(100 + 23).toString()",
          "d = new Date();Number(d)          // returns 1404568027739",
          "d = new Date();d.getTime()        // returns 1404568027739",
          "String(Date())  // returns \"Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)\"",
          "Date().toString()  // returns \"Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)\"",
          "Number(false)     // returns 0Number(true)      // returns 1",
          "String(false)      // returns \"false\"String(true)       // returns \"true\"",
          "false.toString()   // returns \"false\"true.toString()    // returns \"true\"",
          "5 + null    // returns 5         because null is converted to 0\"5\" + null  // returns \"5null\"   because null is converted to \"null\"\"5\" + 2     // returns \n    \"52\"      because 2 is converted to \"2\"\"5\" - 2     // returns 3         because \"5\" is converted to 5\"5\" * \"2\"   // returns \n    10        because \"5\" and \"2\" are \n    converted to 5 and 2",
          "document.getElementById(\"demo\").innerHTML = myVar;// if myVar = {name:\"Fjohn\"}  // toString converts to \"[object Object]\"// if myVar = [1,2,3,4]       // toString converts to \"1,2,3,4\"// if myVar = new Date()      // toString converts to \"Fri Jul 18 2014 09:08:55 GMT+0200\"",
          "// if myVar = 123             // toString converts to \"123\"// if myVar = true            // toString converts to \"true\"// if myVar = false           // toString converts to \"false\""
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_destructuring.asp",
    "cours": {
      "titre": "JavaScript Destructuring",
      "description": "Destructuring Assignment SyntaxThe destructuring assignment syntax unpack object properties into variables:let {firstName, lastName} = person;It can also unpack arrays and any other iterables:let [firstName, lastName] = person;",
      "lien": "https://www.w3schools.com/js/js_destructuring.asp",
      "contenus": {
        "paragraphs": [
          "The destructuring assignment syntax unpack object properties into variables:",
          "It can also unpack arrays and any other iterables:",
          "The order of the properties does not matter:",
          "Destructuring is not destructive.",
          "Destructuring does not change the original object.",
          "For potentially missing properties we can set default values:",
          "One use for destructuring is unpacking string characters.",
          "Destructuring can be used with any iterables.",
          "We can pick up array variables into our own variables:",
          "We can skip array values using two or more commas:",
          "We can pick up values from specific index locations of an array:",
          "You can end a destructuring syntax with a rest property.",
          "This syntax will store all remaining values into a new array:",
          "You can swap the values of two variables using a destructuring assignment:"
        ],
        "lists": [],
        "examples": [
          "let {firstName, lastName} = person;",
          "let [firstName, lastName] = person;",
          "// Create an Objectconst person = {firstName: \"John\",lastName: \"Doe\",age: 50};// Destructuringlet {firstName, lastName} = person;",
          "// Create an Objectconst person = {firstName: \"John\",lastName: \"Doe\",age: 50};// Destructuringlet {lastName, firstName} = person;",
          "// Create an Objectconst person = {firstName: \"John\",lastName: \"Doe\",age: 50};// Destructuringlet {firstName, lastName, country = \"US\"} = person;",
          "// Create an Objectconst person = {firstName: \"John\",lastName: \"Doe\",age: 50};// Destructuringlet {lastName : name} = person;",
          "// Create a Stringlet name = \"W3Schools\";// Destructuringlet [a1, a2, a3, a4, a5] = name;",
          "// Create an Arrayconst fruits = [\"Bananas\", \"Oranges\", \"Apples\", \"Mangos\"];// Destructuringlet [fruit1, fruit2] = fruits;",
          "// Create an Arrayconst fruits = [\"Bananas\", \"Oranges\", \"Apples\", \"Mangos\"];// Destructuringlet [fruit1,,,fruit2] = fruits;",
          "// Create an Arrayconst fruits = [\"Bananas\", \"Oranges\", \"Apples\", \"Mangos\"];// Destructuringlet {[0]:fruit1 ,[1]:fruit2} = fruits;",
          "// Create an Arrayconst numbers = [10, 20, 30, 40, 50, 60, 70];// Destructuringconst [a,b, ...rest] = numbers",
          "// Create a Mapconst fruits = new Map([[\"apples\", 500],[\"bananas\", 300],[\"oranges\", 200]]);// Destructinglet text = \"\";for (const [key, value] of fruits) {text += key + \" is \" + value;}",
          "let firstName = \"John\";let lastName = \"Doe\";// Destructing[firstName, lastName] = [lastName, firstName];"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_bitwise.asp",
    "cours": {
      "titre": "JavaScriptBitwise Operations",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_bitwise.asp",
      "contenus": {
        "paragraphs": [
          "JavaScript stores numbers as 64 bits floating point numbers, but all bitwise \noperations are performed on 32 bits binary numbers.",
          "Before a bitwise operation is performed, JavaScript converts numbers to 32 bits \nsigned integers.",
          "After the bitwise operation is performed, the result is converted back to 64 bits JavaScript \nnumbers.",
          "The examples above uses 4 bits unsigned binary numbers. Because of this ~ 5 returns 10.",
          "Since JavaScript uses 32 bits signed integers, it will not return 10. It will return -6.",
          "00000000000000000000000000000101 (5)",
          "11111111111111111111111111111010 (~5 = -6)",
          "A signed integer uses the leftmost bit as the minus sign.",
          "When a bitwise AND is performed on a pair of bits, it returns 1 if both bits are 1.",
          "When a bitwise OR is performed on a pair of bits, it returns 1 if one of the bits is 1:",
          "When a bitwise XOR is performed on a pair of bits, it returns 1 if the bits are different:",
          "Bitwise AND returns 1 only if both bits are 1:",
          "Bitwise OR returns 1 if one of the bits is 1:",
          "Bitwise XOR returns 1 if the bits are different:",
          "This is a zero fill left shift. One or more zero bits are pushed in from the right,\nand the leftmost bits fall off:",
          "This is a sign preserving right shift. Copies of the leftmost bit are pushed \nin from the left, and the rightmost bits fall off:",
          "This is a zero fill right shift. One or more zero bits are pushed in from the left,\nand the rightmost bits fall off:",
          "Binary numbers with only one bit set are easy to understand:",
          "Setting a few more bits reveals the binary pattern:",
          "JavaScript binary numbers are stored in two's complement format.",
          "This means that a negative number is the bitwise NOT of the number plus 1:",
          "There are only 10 types of people in the world: those who understand binary and those who don't."
        ],
        "lists": [],
        "examples": [
          "let x = 5 & 1;",
          "let x = 5 | 1;",
          "let x = 5 ^ 1;",
          "let x = ~5;",
          "let x = 5 << 1;",
          "let x = -5 >> 1;",
          "let x = 5 >>> 1;",
          "function dec2bin(dec){return (dec >>> 0).toString(2);}",
          "function bin2dec(bin){return parseInt(bin, 2).toString(10);}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_regexp.asp",
    "cours": {
      "titre": "JavaScriptRegular Expressions",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_regexp.asp",
      "contenus": {
        "paragraphs": [
          "A regular expression is a sequence of characters that forms a \nsearch pattern.",
          "The search pattern can be used for text search and text replace \noperations.",
          "A regular expression is a sequence of characters that forms asearch \npattern.",
          "When you search for data in a text, you can use this search pattern to describe what you are searching for.",
          "A regular expression can be a single character, or a more complicated pattern.",
          "Regular expressions can be used to perform all types oftext searchandtext replaceoperations.",
          "Example explained:",
          "/w3schools/iis a regular expression.",
          "w3schoolsis a pattern (to be used in a search).",
          "iis a modifier (modifies the search to be case-insensitive).",
          "In JavaScript, regular expressions are often used with the twostring \nmethods:search()andreplace().",
          "Thesearch()method uses an expression to search for a \nmatch, and returns the position of the match.",
          "Thereplace()method returns a modified string where the \npattern is replaced.",
          "Thesearch()method searches a string for a specified value and returns the position of the match:",
          "Use a string to do a search for \"W3schools\" in a string:",
          "The result innwill be:",
          "Try it Yourself »",
          "Use a regular expression to do a case-insensitive search for \"w3schools\" in a string:",
          "The result innwill be:",
          "Try it Yourself »",
          "Thereplace()method replaces a specified value with another value in a string:",
          "Use a case insensitive regular expression to replace Microsoft with W3Schools \nin a string:",
          "The result inreswill be:",
          "Regular expression arguments (instead of string arguments) can be used in the methods above.Regular expressions can make your search much more powerful (case insensitive for example).",
          "Modifierscan be used to perform case-insensitive more global searches:",
          "Bracketsare used to find a range of characters:",
          "Metacharactersare characters with a special meaning:",
          "Quantifiersdefine quantities:",
          "In JavaScript, the RegExp object is a regular expression object with \npredefined properties and methods.",
          "Thetest()method is a RegExp expression method.",
          "It searches a string for a pattern, and returns true \nor false, depending on the result.",
          "The following example searches a string for the character \"e\":",
          "Since there is an \"e\" in the string, the output of the code above will be:",
          "Try it Yourself »",
          "You don't have to put the regular expression in a variable first. The two \nlines above can be shortened to one:",
          "Theexec()method is a RegExp expression method.",
          "It searches a string for a specified pattern, and returns the found text as \nan object.",
          "If no match is found, it returns an empty(null)object.",
          "The following example searches a string for the character \"e\":",
          "For a complete reference, go to ourComplete \nJavaScript RegExp Reference.",
          "The reference contains descriptions and examples of all RegExp \nproperties and methods."
        ],
        "lists": [],
        "examples": [
          "/pattern/modifiers;",
          "/w3schools/i;",
          "let text = \"Visit W3Schools!\";let n = text.search(\"W3Schools\");",
          "let text = \"Visit W3Schools\";let n = text.search(/w3schools/i);",
          "let text = \"Visit Microsoft!\";let result = text.replace(\"Microsoft\", \"W3Schools\");",
          "let text = \"Visit Microsoft!\";let result = text.replace(/microsoft/i, \"W3Schools\");",
          "const pattern = /e/;pattern.test(\"The best things in life are free!\");",
          "/e/.test(\"The best things in life are free!\");",
          "/e/.exec(\"The best things in life are free!\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_precedence.asp",
    "cours": {
      "titre": "JavaScript Operator Precedence",
      "description": "Operator precedence describes the order in which operations are performed in \nan arithmetic expression.Multiplication (*) and division (/) have higherprecedencethan \naddition (+) and subtraction (-).",
      "lien": "https://www.w3schools.com/js/js_precedence.asp",
      "contenus": {
        "paragraphs": [
          "Operator precedence describes the order in which operations are performed in \nan arithmetic expression.",
          "Multiplication (*) and division (/) have higherprecedencethan \naddition (+) and subtraction (-).",
          "As in traditional mathematics, multiplication is done first:",
          "When using parentheses, operations inside the parentheses are computed first:",
          "Operations with the same precedence (like * and /) are computed from left to right:"
        ],
        "lists": [],
        "examples": [
          "let x = 100 + 50 * 3;",
          "let x = (100 + 50) * 3;",
          "let x = 100 / 50 * 3;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_errors.asp",
    "cours": {
      "titre": "JavaScript Errors",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_errors.asp",
      "contenus": {
        "paragraphs": [
          "Thetrystatement defines a code block to run (to try).",
          "Thecatchstatement defines a code block to handle any error.",
          "Thefinallystatement defines a code block to run regardless of the result.",
          "Thethrowstatement defines a custom error.",
          "When executing JavaScript code, different errors can \noccur.",
          "Errors can be coding errors made by the programmer, errors due to wrong \ninput, and other unforeseeable things.",
          "In this example we misspelled \"alert\" as \"adddlert\" to deliberately produce an error:",
          "JavaScript catchesadddlertas an error, and executes the \ncatch code to \nhandle it.",
          "Thetrystatement allows you to define a block of code to be \ntested for errors while it is being executed.",
          "Thecatchstatement allows you to define a block of code to \nbe executed, if an error occurs in the try block.",
          "The JavaScript statementstryandcatchcome in pairs:",
          "When an error occurs, JavaScript will \nnormally stop and generate an error message.",
          "The technical term for this is: JavaScript willthrow an \nexception (throw an error).",
          "JavaScript will actually create anError objectwith two properties:nameandmessage.",
          "Thethrowstatement allows you to create a custom error.",
          "Technically you canthrow an exception (throw an error).",
          "The exception can be a JavaScriptString, aNumber, aBooleanor anObject:",
          "If you usethrowtogether withtryandcatch, you can control program \nflow and generate custom error messages.",
          "This example examines input. If the value is wrong, \nan exception (err) is thrown.",
          "The exception (err) is caught by the catch statement and a custom error message is displayed:",
          "The code above is just an example.",
          "Modern browsers will often use a combination of JavaScript and built-in HTML \nvalidation, using predefined validation rules defined in HTML attributes:",
          "You can read more about forms validation in a later chapter of this tutorial.",
          "Thefinallystatement lets you execute code, after try and \ncatch, regardless of the result:",
          "JavaScript has a built in error object that provides error information when \nan error occurs.",
          "The error object provides two useful properties: name and message.",
          "Six different values can be returned by the error name property:",
          "The six different values are described below.",
          "AnEvalErrorindicates an error in the eval() function.",
          "Newer versions of JavaScript do not throw EvalError. Use SyntaxError instead.",
          "ARangeErroris thrown if you use a number that is outside \nthe range of legal values.",
          "For example: You cannot set the number of significant digits of a number to \n500.",
          "AReferenceErroris thrown if you use (reference) a variable \nthat has not been declared:",
          "ASyntaxErroris thrown if you try to evaluate code with a \nsyntax error.",
          "ATypeErroris thrown if an operand or argument \nis incompatible with the type expected by an operator or function.",
          "AURIErroris thrown if you use illegal characters in a URI function:",
          "Mozilla and Microsoft define some non-standard error object properties:",
          "fileName (Mozilla)lineNumber (Mozilla)columnNumber (Mozilla)stack (Mozilla)description (Microsoft)number (Microsoft)",
          "Do not use these properties in public web sites. They will not work in all browsers.",
          "For a complete reference of the Error object, go to ourComplete \nJavaScript Error Reference."
        ],
        "lists": [],
        "examples": [
          "<p id=\"demo\"></p><script>try {adddlert(\"Welcome guest!\");}catch(err) {document.getElementById(\"demo\").innerHTML = err.message;}</script>",
          "try {Block of code to try}catch(err) {Block of code to handle errors}",
          "throw \"Too big\";    // throw a textthrow 500;          // throw a number",
          "<!DOCTYPE html><html><body><p>Please input a number between \n5 and 10:</p><input id=\"demo\" type=\"text\"><button type=\"button\" \nonclick=\"myFunction()\">Test Input</button><p id=\"p01\"></p><script>function myFunction() {const message = \ndocument.getElementById(\"p01\");message.innerHTML = \"\";let x = \ndocument.getElementById(\"demo\").value;try {if(x.trim() == \"\") throw \"empty\";if(isNaN(x)) throw \"not a number\";x = Number(x);if(x < 5) throw \n \"too low\";if(x > 10) throw \"too \n high\";}catch(err) {message.innerHTML = \n\"Input is \" + err;}}</script></body></html>",
          "<input id=\"demo\" type=\"number\" min=\"5\" max=\"10\" step=\"1\">",
          "try {Block of code to try}catch(err) {Block of code to handle errors}finally {Block of code to be executed regardless of the try / catch result}",
          "function myFunction() {const message = \ndocument.getElementById(\"p01\");message.innerHTML = \"\";let x = \ndocument.getElementById(\"demo\").value;try {if(x.trim() == \"\") throw \"is empty\";if(isNaN(x)) \nthrow \"is not a number\";x = Number(x);if(x > \n10) throw \"is too high\";if(x < \n5) throw \"is too low\";}catch(err) \n{message.innerHTML = \"Error: \" + \nerr + \".\";}finally {document.getElementById(\"demo\").value = \"\";}}",
          "let num = 1;try {num.toPrecision(500);   // A number cannot have 500 \n significant digits}catch(err) {document.getElementById(\"demo\").innerHTML = err.name;}",
          "let x = 5;try {x = y + 1;   // y cannot be used (referenced)}catch(err) {document.getElementById(\"demo\").innerHTML = err.name;}",
          "try {eval(\"alert('Hello)\");   // \n Missing ' will produce an error}catch(err) {document.getElementById(\"demo\").innerHTML = err.name;}",
          "let num = 1;try {num.toUpperCase();   // You cannot convert a number \n to upper case}catch(err) {document.getElementById(\"demo\").innerHTML = err.name;}",
          "try {decodeURI(\"%%%\");   // You cannot URI decode \n  percent signs}catch(err) {document.getElementById(\"demo\").innerHTML = err.name;}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_scope.asp",
    "cours": {
      "titre": "JavaScriptScope",
      "description": "Scope determines the accessibility (visibility) of variables.JavaScript variables have 3 types of scope:Block scopeFunction scopeGlobal scope",
      "lien": "https://www.w3schools.com/js/js_scope.asp",
      "contenus": {
        "paragraphs": [
          "Scope determines the accessibility (visibility) of variables.",
          "JavaScript variables have 3 types of scope:",
          "Before ES6 (2015), JavaScript variables had onlyGlobal ScopeandFunction Scope.",
          "ES6 introduced two important new JavaScript keywords:letandconst.",
          "These two keywords provideBlock Scopein JavaScript.",
          "Variables declared inside a { } block cannot be accessed \nfrom outside the block:",
          "Variables declared with thevarkeyword can NOT have block scope.",
          "Variables declared inside a { } block can be accessed from \noutside the block.",
          "Variables declared within a JavaScript function, areLOCALto the function:",
          "Localvariables haveFunction Scope:",
          "They can only be accessed from within the function.",
          "Since local variables are only recognized inside their functions, variables with the same name can be used in different functions.",
          "Local variables are created when a function starts, and deleted when the function is completed.",
          "JavaScript has function scope: Each function creates a new scope.",
          "Variables defined inside a function are not accessible (visible) from outside the \nfunction.",
          "Variables declared withvar,letandconstare \nquite similar when declared inside a function.",
          "They all haveFunction Scope:",
          "A variable declared outside a function, becomesGLOBAL.",
          "A global variable hasGlobal Scope:",
          "All scripts and functions on a web page can access it.",
          "Variables declaredGlobally(outside any function) haveGlobal Scope.",
          "Globalvariables can be accessed from anywhere in a JavaScript program.",
          "Variables declared withvar,letandconstare \nquite similar when declared outside a block.",
          "They all haveGlobal Scope:",
          "In JavaScript, objects and functions are also variables.",
          "Scope determines the accessibility of variables, objects, and functions from \ndifferent parts of the code.",
          "If you assign a value to a variable that has not been declared, it will automatically become aGLOBALvariable.",
          "This code example will declare a global variablecarName, even if \nthe value is assigned inside a function.",
          "All modern browsers support running JavaScript in \"Strict Mode\".",
          "You will learn more about how to use strict mode in a later chapter of this tutorial.",
          "In \"Strict Mode\", undeclared variables are not automatically global.",
          "With JavaScript, the global scope is the JavaScript environment.",
          "In HTML, the global scope is the window object.",
          "Global variables defined with thevarkeyword belong to the window object:",
          "Global variables defined with theletkeyword do not belong to the window object:",
          "Do NOT create global variables unless you intend to.",
          "Your global variables (or functions) can overwrite window variables (or \nfunctions).Any function, including the window object, can overwrite your global \nvariables and functions.",
          "The lifetime of a JavaScript variable starts when it is declared.",
          "Function (local) variables are deleted when the function is completed.",
          "In a web browser, global variables are deleted when you close the browser \nwindow (or tab).",
          "Function arguments (parameters) work as local variables inside functions."
        ],
        "lists": [
          [
            "Block scope",
            "Function scope",
            "Global scope"
          ]
        ],
        "examples": [
          "{let x = 2;}// x can NOT be used here",
          "{var x = 2;}// x CAN be used here",
          "// code here can NOT use carNamefunction myFunction() {let carName = \"Volvo\";// code here CAN use carName}// code here can NOT use carName",
          "function myFunction() {var carName = \"Volvo\";   \n  // Function Scope}",
          "function myFunction() {let carName = \"Volvo\";   // \n  Function Scope}",
          "function myFunction() {const carName = \"Volvo\";   // \n  Function Scope}",
          "let carName = \"Volvo\";// code here can use carNamefunction myFunction() {// code here can also use carName}",
          "var x = 2;       \n  // Global scope",
          "let x = 2;       // \n  Global scope",
          "const x = 2;       // \n  Global scope",
          "myFunction();// code here can use carNamefunction myFunction() {carName = \"Volvo\";}",
          "var carName = \"Volvo\";// code here \n can use window.carName",
          "let carName = \"Volvo\";// code here can not use window.carName"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_hoisting.asp",
    "cours": {
      "titre": "JavaScriptHoisting",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_hoisting.asp",
      "contenus": {
        "paragraphs": [
          "Hoisting is JavaScript's default behavior of moving declarations to the \ntop.",
          "In JavaScript, a variable can be declared after it has been used.",
          "In other words; a variable can be used before it has been declared.",
          "Example 1gives the same result asExample 2:",
          "To understand this, you have to understand the term \"hoisting\".",
          "Hoisting is JavaScript's default behavior of moving all declarations to the \ntop of the current scope (to the top of the current script or the current function).",
          "Variables defined withletandconstare hoisted to the top \nof the block, but notinitialized.Meaning: The block of code is aware of the \nvariable, but it cannot be used until it has been declared.Using aletvariable before it is declared will result in aReferenceError.The variable is in a \"temporal dead zone\" from the start \nof the block until it is declared:ExampleThis will result in aReferenceError:carName = \"Volvo\";let carName;Try it Yourself »Using aconstvariable before it is declared, is a syntax error,\nso the code will simply not run.ExampleThis code will not run.carName = \"Volvo\";const carName;Try it Yourself »Read more about let and const inJS Let / Const.JavaScript Initializations are Not HoistedJavaScript only hoists declarations, not initializations.Example 1doesnotgive the same result asExample 2:Example 1var x = 5; // Initialize xvar y = 7; // Initialize yelem = document.getElementById(\"demo\"); // Find an elementelem.innerHTML = x + \" \" + y;           // Display x and yTry it Yourself »Example 2var x = 5; // Initialize xelem = document.getElementById(\"demo\"); // Find an elementelem.innerHTML = x + \" \" + y;           // Display x and yvar y = 7; // Initialize yTry it Yourself »Does it make sense that y is undefined in the last example?This is because only the declaration (var y), not the initialization (=7) is hoisted to the top.Because of hoisting, y has been declared before it is used, but because \ninitializations are not hoisted, the value of y is undefined.Example 2 is the same as writing:Examplevar x = 5; // Initialize xvar y;     // Declare yelem = document.getElementById(\"demo\"); // Find an elementelem.innerHTML = x + \" \" + y;           // Display x and yy = 7;    // Assign 7 to yTry it Yourself »Declare Your Variables At the Top !Hoisting is (to many developers) an unknown or overlooked behavior of  \nJavaScript.If a developer doesn't understand hoisting, programs may contain bugs (errors).To avoid bugs, always declare all variables at the beginning of \nevery scope.Since this is how JavaScript interprets the \ncode, it is always a good rule.JavaScript in strict mode does not allow variables to be used if they are \nnot declared.Study\"use strict\"in the next chapter.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "Meaning: The block of code is aware of the \nvariable, but it cannot be used until it has been declared.Using aletvariable before it is declared will result in aReferenceError.The variable is in a \"temporal dead zone\" from the start \nof the block until it is declared:ExampleThis will result in aReferenceError:carName = \"Volvo\";let carName;Try it Yourself »Using aconstvariable before it is declared, is a syntax error,\nso the code will simply not run.ExampleThis code will not run.carName = \"Volvo\";const carName;Try it Yourself »Read more about let and const inJS Let / Const.JavaScript Initializations are Not HoistedJavaScript only hoists declarations, not initializations.Example 1doesnotgive the same result asExample 2:Example 1var x = 5; // Initialize xvar y = 7; // Initialize yelem = document.getElementById(\"demo\"); // Find an elementelem.innerHTML = x + \" \" + y;           // Display x and yTry it Yourself »Example 2var x = 5; // Initialize xelem = document.getElementById(\"demo\"); // Find an elementelem.innerHTML = x + \" \" + y;           // Display x and yvar y = 7; // Initialize yTry it Yourself »Does it make sense that y is undefined in the last example?This is because only the declaration (var y), not the initialization (=7) is hoisted to the top.Because of hoisting, y has been declared before it is used, but because \ninitializations are not hoisted, the value of y is undefined.Example 2 is the same as writing:Examplevar x = 5; // Initialize xvar y;     // Declare yelem = document.getElementById(\"demo\"); // Find an elementelem.innerHTML = x + \" \" + y;           // Display x and yy = 7;    // Assign 7 to yTry it Yourself »Declare Your Variables At the Top !Hoisting is (to many developers) an unknown or overlooked behavior of  \nJavaScript.If a developer doesn't understand hoisting, programs may contain bugs (errors).To avoid bugs, always declare all variables at the beginning of \nevery scope.Since this is how JavaScript interprets the \ncode, it is always a good rule.JavaScript in strict mode does not allow variables to be used if they are \nnot declared.Study\"use strict\"in the next chapter.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "Using aletvariable before it is declared will result in aReferenceError.",
          "The variable is in a \"temporal dead zone\" from the start \nof the block until it is declared:",
          "Using aconstvariable before it is declared, is a syntax error,\nso the code will simply not run.",
          "This code will not run.",
          "Read more about let and const inJS Let / Const.",
          "JavaScript only hoists declarations, not initializations.",
          "Example 1doesnotgive the same result asExample 2:",
          "Does it make sense that y is undefined in the last example?",
          "This is because only the declaration (var y), not the initialization (=7) is hoisted to the top.",
          "Because of hoisting, y has been declared before it is used, but because \ninitializations are not hoisted, the value of y is undefined.",
          "Example 2 is the same as writing:",
          "Hoisting is (to many developers) an unknown or overlooked behavior of  \nJavaScript.",
          "If a developer doesn't understand hoisting, programs may contain bugs (errors).To avoid bugs, always declare all variables at the beginning of \nevery scope.Since this is how JavaScript interprets the \ncode, it is always a good rule.JavaScript in strict mode does not allow variables to be used if they are \nnot declared.Study\"use strict\"in the next chapter.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "To avoid bugs, always declare all variables at the beginning of \nevery scope.Since this is how JavaScript interprets the \ncode, it is always a good rule.JavaScript in strict mode does not allow variables to be used if they are \nnot declared.Study\"use strict\"in the next chapter.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "Since this is how JavaScript interprets the \ncode, it is always a good rule.",
          "JavaScript in strict mode does not allow variables to be used if they are \nnot declared.Study\"use strict\"in the next chapter."
        ],
        "lists": [],
        "examples": [
          "x = 5; // Assign 5 to xelem = document.getElementById(\"demo\"); // Find an elementelem.innerHTML = x;                     \n// Display x in the elementvar x; // Declare x",
          "var x; // Declare xx = 5; // Assign 5 to xelem = document.getElementById(\"demo\"); // Find an elementelem.innerHTML = x;                     \n// Display x in the element",
          "carName = \"Volvo\";let carName;",
          "carName = \"Volvo\";const carName;",
          "var x = 5; // Initialize xvar y = 7; // Initialize yelem = document.getElementById(\"demo\"); // Find an elementelem.innerHTML = x + \" \" + y;           // Display x and y",
          "var x = 5; // Initialize xelem = document.getElementById(\"demo\"); // Find an elementelem.innerHTML = x + \" \" + y;           // Display x and yvar y = 7; // Initialize y",
          "var x = 5; // Initialize xvar y;     // Declare yelem = document.getElementById(\"demo\"); // Find an elementelem.innerHTML = x + \" \" + y;           // Display x and yy = 7;    // Assign 7 to y"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_strict.asp",
    "cours": {
      "titre": "JavaScriptUse Strict",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_strict.asp",
      "contenus": {
        "paragraphs": [
          "\"use strict\";Defines that \nJavaScript code should be executed in \n\"strict mode\".",
          "The\"use strict\"directive was new in ECMAScript version 5.",
          "It is not a statement, but a literal expression, ignored by earlier versions \nof JavaScript.",
          "The purpose of\"use strict\"is to indicate that the code should be executed in \"strict mode\".",
          "With strict mode, you can not, for example, use undeclared variables.",
          "All modern browsers support \"use strict\" except Internet Explorer 9 and lower:",
          "The numbers in the table specify the first browser version that fully supports the directive.",
          "You can use strict mode in all your programs. It helps you to write cleaner code,\nlike preventing you from using undeclared variables.",
          "\"use strict\"is just a string, so IE 9 will not throw an error even if it does not understand it.",
          "Strict mode is declared by adding\"use strict\";to the beginning of a \nscript or a function.",
          "Declared at the beginning of a script, it has global scope (all code \nin the script will execute in strict mode):",
          "Declared inside a function, it has local scope (only the code inside the function is \nin strict mode):",
          "The syntax, for declaring strict mode, was designed to be compatible with \nolder versions of JavaScript.",
          "Compiling a numeric literal (4 + 5;) or a string literal (\"John Doe\";) in a \nJavaScript program has no side effects. It simply compiles to a non existing \nvariable and dies.",
          "So\"use strict\";only matters to new compilers that \"understand\" the meaning \nof it.",
          "Strict mode makes it easier to write \"secure\" JavaScript.",
          "Strict mode changes previously accepted \"bad syntax\" into real errors.",
          "As an example, in normal JavaScript, mistyping a variable name creates a new \nglobal variable. In strict mode, this will throw an error, making it impossible \nto accidentally create a global variable.",
          "In normal JavaScript, a developer will not receive any error feedback \nassigning values to non-writable properties.",
          "In strict mode, any assignment to a non-writable property, a getter-only \nproperty, a non-existing property, a non-existing variable, or a non-existing \nobject, will throw an error.",
          "Using a variable, without declaring it, is not allowed:",
          "Try it Yourself »",
          "Objects are variables too.",
          "Using an object, without declaring it, is not allowed:",
          "Try it Yourself »",
          "Deleting a variable (or object) is not allowed.",
          "Try it Yourself »",
          "Deleting a function is not allowed.",
          "Try it Yourself »",
          "Duplicating a parameter name is not allowed:",
          "Try it Yourself »",
          "Octal numeric literals are not allowed:",
          "Try it Yourself »",
          "Octal escape characters are not allowed:",
          "Try it Yourself »",
          "Writing to a read-only property is not allowed:",
          "Try it Yourself »",
          "Writing to a get-only property is not allowed:",
          "Try it Yourself »",
          "Deleting an undeletable property is not allowed:",
          "Try it Yourself »",
          "The wordevalcannot be used as a variable:",
          "Try it Yourself »",
          "The wordargumentscannot be used as a variable:",
          "Try it Yourself »",
          "Thewithstatement is not allowed:",
          "Try it Yourself »",
          "For security reasons,eval()is not allowed to create  \nvariables in the scope from which it was called.",
          "In strict mode, a variable can not be used before it is declared:",
          "Try it Yourself »",
          "In strict mode, eval() can not declare a variable using the var keyword:",
          "Try it Yourself »",
          "eval() can not declare a variable using the let keyword:",
          "Try it Yourself »",
          "Thethiskeyword in functions behaves \ndifferently in strict mode.",
          "Thethiskeyword refers to the object that \ncalled the function.",
          "If the object is not specified, functions in strict mode \nwill returnundefinedand functions in normal \nmode will return the global object (window):",
          "Try it Yourself »",
          "Keywords reserved for future JavaScript versions can NOT be used as variable \nnames in strict mode.",
          "These are:",
          "Try it Yourself »",
          "The \"use strict\" directive is only recognized at thebeginningof a script \nor a function."
        ],
        "lists": [
          [
            "implements",
            "interface",
            "let",
            "package",
            "private",
            "protected",
            "public",
            "static",
            "yield"
          ]
        ],
        "examples": [
          "\"use strict\";x = 3.14;       // This will cause an error \n because x is not declared",
          "\"use strict\";myFunction();function myFunction() {y = 3.14;   // This will also cause an error \n because y is not declared}",
          "x = 3.14;       // This will not cause an error.myFunction();function \n myFunction() {\"use strict\";y = 3.14;   // This will cause an error}",
          "\"use strict\";x = 3.14;                // This will cause an error",
          "\"use strict\";x = {p1:10, p2:20};      // This will cause an error",
          "\"use strict\";let x = 3.14;delete x;                // This \nwill cause an error",
          "\"use strict\";function x(p1, p2) {};delete x;                \n // This will cause an error",
          "\"use strict\";function x(p1, p1) {};   // This will cause an error",
          "\"use strict\";let x = 010;             // This \nwill cause an error",
          "\"use strict\";let x = \"\\010\";            // This will cause an error",
          "\"use strict\";const obj = {};Object.defineProperty(obj, \"x\", {value:0, writable:false});obj.x = 3.14;            // This \nwill cause an error",
          "\"use strict\";const obj = {get x() \n{return 0} };obj.x = 3.14;            // This \nwill cause an error",
          "\"use strict\";delete Object.prototype; // This will cause an error",
          "\"use strict\";let eval = 3.14;         // This will cause an error",
          "\"use strict\";let arguments = 3.14;    // This will cause an error",
          "\"use strict\";with (Math){x = cos(2)}; // This will cause an error",
          "\"use strict\";eval (\"x = 2\");alert (x);      // This \nwill cause an error",
          "\"use strict\";eval (\"var x = 2\");alert (x);    // This \nwill cause an error",
          "eval (\"let x = 2\");alert (x);        // This \nwill cause an error",
          "\"use strict\";function myFunction() {alert(this); // will alert \"undefined\"}myFunction();",
          "\"use strict\";let public = 1500;      // This will cause an error"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_this.asp",
    "cours": {
      "titre": "The JavaScriptthisKeyword",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_this.asp",
      "contenus": {
        "paragraphs": [
          "In JavaScript, thethiskeyword refers to anobject.",
          "Thethiskeyword refers todifferent objectsdepending on how it is used:",
          "thisis not a variable. It is a keyword.\nYou cannot change the value ofthis.",
          "When used in an object method,thisrefers to theobject.",
          "In the example on top of this page,thisrefers to thepersonobject.",
          "Because thefullNamemethod is a method of thepersonobject.",
          "When used alone,thisrefers to theglobal object.",
          "Becausethisis running in the global scope.",
          "In a browser window the global object is[object Window]:",
          "Instrict mode, when used alone,thisalso refers to theglobal object:",
          "In a function, theglobal objectis the default binding forthis.",
          "In a browser window the global object is[object Window]:",
          "JavaScriptstrict modedoes not allow default binding.",
          "So, when used in a function, in strict mode,thisisundefined.",
          "In HTML event handlers,thisrefers to the HTML element that received the \nevent:",
          "Try it Yourself »",
          "In these examples,thisis theperson object:",
          "i.e.this.firstNameis thefirstNameproperty ofthis(the person object).",
          "Thecall()andapply()methods are predefined JavaScript methods.",
          "They can both be used to call an object method with another object as argument.",
          "The Function call() Method",
          "The Function apply() Method",
          "The Function bind() Method",
          "The example below calls person1.fullName with person2 as an argument,thisrefers to person2,\neven if fullName is a method of person1:",
          "Try it Yourself »",
          "With thebind()method, an object can borrow a method from another object.",
          "This example creates 2 objects (person and member).",
          "The member object borrows the fullname method from the person object:",
          "To determine which objectthisrefers to; use the following precedence of order.",
          "Isthisin a function being called using bind()?",
          "Isthisin a function being called using apply()?",
          "Isthisin a function being called using call()?",
          "Isthisin an object function (method)?Isthisin a function in the global scope.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "Isthisin a function in the global scope."
        ],
        "lists": [],
        "examples": [
          "constperson= {firstName: \"John\",lastName : \"Doe\",id       : 5566,fullName : function() {returnthis.firstName + \" \" +this.lastName;}};",
          "fullName : function() {returnthis.firstName + \" \" +this.lastName;}",
          "let x = this;",
          "\"use strict\";let x = this;",
          "function myFunction() {return this;}",
          "\"use strict\";function myFunction() {return this;}",
          "<button onclick=\"this.style.display='none'\">Click to \n  Remove Me!</button>",
          "constperson= {firstName  : \"John\",lastName   : \"Doe\",id         : 5566,myFunction : function() {returnthis;}};",
          "constperson= {firstName: \"John\",lastName : \"Doe\",id       : 5566,fullName : function() {returnthis.firstName + \" \" +this.lastName;}};",
          "const person1 = {fullName: function() {return this.firstName + \" \" + this.lastName;}}const person2 = {firstName:\"John\",lastName: \"Doe\",}// Return \"John Doe\":person1.fullName.call(person2);",
          "const person = {firstName:\"John\",lastName: \"Doe\",fullName: function () {return this.firstName + \" \" + this.lastName;}}const member = {firstName:\"Hege\",lastName: \"Nilsen\",}let fullName = person.fullName.bind(member);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_arrow_function.asp",
    "cours": {
      "titre": "JavaScript Arrow Function",
      "description": "Arrow functions were introduced in ES6.Arrow functions allow us to write shorter function syntax:let myFunction = (a, b) => a * b;Try it Yourself »",
      "lien": "https://www.w3schools.com/js/js_arrow_function.asp",
      "contenus": {
        "paragraphs": [
          "Arrow functions were introduced in ES6.",
          "Arrow functions allow us to write shorter function syntax:",
          "",
          "Try it Yourself »",
          "Try it Yourself »",
          "Try it Yourself »",
          "It gets shorter! If the function has only one statement, and the statement \nreturns a value, you can remove the bracketsandthereturnkeyword:",
          "Try it Yourself »",
          "Note:This works only if the function has only one \nstatement.",
          "If you have parameters, you pass them inside the parentheses:",
          "Try it Yourself »",
          "In fact, if you have only one parameter, you can skip the parentheses as well:",
          "Try it Yourself »",
          "The handling ofthisis also different in arrow functions compared to regular \nfunctions.",
          "In short, with arrow functions there are no binding ofthis.",
          "In regular functions thethiskeyword represented the object that called the \nfunction, which could be the window, the document, a button or whatever.",
          "With arrow functions thethiskeywordalwaysrepresents the \nobject that \ndefined the arrow function.",
          "Let us take a look at two examples to understand the difference.",
          "Both examples call a method twice, first when the page loads, and once again \nwhen the user clicks a button.",
          "The first example uses a regular function, and the second example uses an \narrow function.",
          "The result shows that the first example returns two different objects (window and button), \nand the \nsecond example returns the window object twice, because the window object is the \n\"owner\" of the function.",
          "With a regular functionthisrepresents the \nobject thatcallsthe function:",
          "Try it Yourself »",
          "With an arrow functionthisrepresents theownerof the function:",
          "Try it Yourself »",
          "Remember these differences when you are working with functions. Sometimes the \nbehavior of regular functions is what you want, if not, use arrow functions.",
          "The following table defines the first browser versions with full support for \nArrow Functions in JavaScript:"
        ],
        "lists": [],
        "examples": [
          "let myFunction = (a, b) => a * b;",
          "hello = function() {return \"Hello World!\";}",
          "hello = () => {return \"Hello World!\";}",
          "hello = () => \"Hello World!\";",
          "hello = (val) => \"Hello \" + val;",
          "hello = val => \"Hello \" + val;",
          "// Regular Function:hello = function() {document.getElementById(\"demo\").innerHTML \n  += this;}// The window object calls the function:window.addEventListener(\"load\", hello);// A button object calls the \n  function:document.getElementById(\"btn\").addEventListener(\"click\", hello);",
          "// Arrow Function:hello = () => {document.getElementById(\"demo\").innerHTML \n  += this;}// The window object calls the function:window.addEventListener(\"load\", hello);// A button object calls the \n  function:document.getElementById(\"btn\").addEventListener(\"click\", hello);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_classes.asp",
    "cours": {
      "titre": "JavaScript Classes",
      "description": "ECMAScript 2015, also known as ES6, introduced JavaScript Classes.JavaScript Classes are templates for JavaScript Objects.",
      "lien": "https://www.w3schools.com/js/js_classes.asp",
      "contenus": {
        "paragraphs": [
          "ECMAScript 2015, also known as ES6, introduced JavaScript Classes.",
          "JavaScript Classes are templates for JavaScript Objects.",
          "Use the keywordclassto create a class.",
          "Always add a method namedconstructor():",
          "The example above creates a class named \"Car\".",
          "The class has two initial properties: \"name\" and \"year\".",
          "A JavaScript class isnotan object.",
          "It is atemplatefor JavaScript objects.",
          "When you have a class, you can use the class to create objects:",
          "Try it Yourself »",
          "The example above uses theCar classto create twoCar objects.",
          "The constructor method is called automatically when a new object is created.",
          "The constructor method is a special method:",
          "If you do not define a constructor method, JavaScript \nwill add an empty constructor method.",
          "Class methods are created with the same syntax as object methods.",
          "Use the keywordclassto create a class.",
          "Always add aconstructor()method.",
          "Then add any number of methods.",
          "Create a Class method named \"age\", that returns the Car age:",
          "Try it Yourself »",
          "You can send parameters to Class methods:",
          "Try it Yourself »",
          "The following table defines the first browser version with full support for \nClasses in JavaScript:",
          "You will learn a lot more about JavaScript Classes later in this tutorial."
        ],
        "lists": [
          [
            "It has to have the exact name \"constructor\"",
            "It is executed automatically when a new object is created",
            "It is used to initialize object properties"
          ]
        ],
        "examples": [
          "class ClassName {constructor() { ... }}",
          "class Car {constructor(name, year) {this.name = name;this.year = year;}}",
          "const myCar1 = new Car(\"Ford\", 2014);const myCar2 = new Car(\"Audi\", 2019);",
          "class ClassName {constructor() { ... }method_1() { ... }method_2() { ... }method_3() { ... }}",
          "class Car {constructor(name, year) {this.name = name;this.year = year;}age() {const date = new Date();return date.getFullYear() - this.year;}}const myCar = new Car(\"Ford\", 2014);document.getElementById(\"demo\").innerHTML =\"My car is \" + myCar.age() + \" years old.\";",
          "class Car {constructor(name, year) {this.name = name;this.year = year;}age(x) {return x - this.year;}}const date = new Date();let year = date.getFullYear();const myCar = new \n  Car(\"Ford\", 2014);document.getElementById(\"demo\").innerHTML=\"My car is \n  \" + myCar.age(year) + \" years old.\";"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_modules.asp",
    "cours": {
      "titre": "JavaScript Modules",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_modules.asp",
      "contenus": {
        "paragraphs": [
          "JavaScript modules allow you to break up your code into separate files.",
          "This makes it easier to maintain a code-base.",
          "Modules are imported from external files with theimportstatement.",
          "Modules also rely ontype=\"module\"in the <script> tag.",
          "Try it Yourself »",
          "Modules withfunctionsorvariablescan be stored in any external file.",
          "There are two types of exports:Named ExportsandDefault Exports.",
          "Let us create a file namedperson.js, and \nfill it with the things we want to export.",
          "You can create named exports two ways. In-line individually, or all at once at the bottom.",
          "person.js",
          "person.js",
          "Let us create another file, namedmessage.js, and \nuse it for demonstrating default export.",
          "You can only have one default export in a file.",
          "message.js",
          "You can import modules into a file in two ways, based on if they are named \nexports or default exports.",
          "Named exports are constructed using curly braces. Default exports are not.",
          "Import named exports from the file person.js:",
          "Try it Yourself »",
          "Import a default export from the file message.js:",
          "Try it Yourself »",
          "Modules only work with the HTTP(s) protocol.",
          "A web-page opened via the file:// protocol cannot use import / export."
        ],
        "lists": [],
        "examples": [
          "<script type=\"module\">import message from \"./message.js\";</script>",
          "export const name = \"Jesse\";export const age = 40;",
          "const name = \"Jesse\";const age = 40;export {name, age};",
          "const message = () => {const name = \"Jesse\";const age = 40;return name + ' is ' + age + 'years old.';};export default message;",
          "import { name, age } from \"./person.js\";",
          "import message from \"./message.js\";"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_json.asp",
    "cours": {
      "titre": "JavaScriptJSON",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_json.asp",
      "contenus": {
        "paragraphs": [
          "JSON is a format for storing and transporting data.",
          "JSON is often used when data is sent from a server to a web \npage.",
          "* The JSON syntax is derived from JavaScript object notation syntax, but the JSON format is text only. \nCode for reading and generating JSON data can be written in any programming \nlanguage.",
          "This JSON syntax defines an employees object: an array of 3 employee records (objects):",
          "The JSON format is syntactically identical to the code for creating \nJavaScript objects.",
          "Because of this similarity, a JavaScript program \ncan easily convert JSON data into native \nJavaScript objects.",
          "JSON data is written as name/value pairs, just like JavaScript object \nproperties.",
          "A name/value pair consists of a field name (in double quotes), \nfollowed by a colon, followed by a value:",
          "JSON names require double quotes. JavaScript names do not.",
          "JSON objects are written inside curly braces.",
          "Just like in JavaScript, objects can contain multiple name/value pairs:",
          "JSON arrays are written inside square brackets.",
          "Just like in JavaScript, an array can contain objects:",
          "In the example above, the object \"employees\" is an array. It contains three \nobjects.",
          "Each object is a record of a person (with a first name and a last name).",
          "A common use of JSON is to read data from a web server, \nand display the data in a web page.",
          "For simplicity, this can be demonstrated using a string as input.",
          "First, create a JavaScript string containing JSON syntax:",
          "Then, use the JavaScript built-in functionJSON.parse()to convert the string into a JavaScript object:",
          "Finally, use the new JavaScript object in your page:",
          "You can read more about JSON in ourJSON tutorial."
        ],
        "lists": [
          [
            "JSON stands forJavaScriptObjectNotation",
            "JSON is a lightweight data interchange format",
            "JSON is language independent*",
            "JSON is \"self-describing\" and easy to understand"
          ],
          [
            "Data is in name/value pairs",
            "Data is separated by commas",
            "Curly braces hold objects",
            "Square brackets hold arrays"
          ]
        ],
        "examples": [
          "{\"employees\":[{\"firstName\":\"John\", \"lastName\":\"Doe\"},{\"firstName\":\"Anna\", \"lastName\":\"Smith\"},{\"firstName\":\"Peter\", \"lastName\":\"Jones\"}]}",
          "\"firstName\":\"John\"",
          "{\"firstName\":\"John\", \"lastName\":\"Doe\"}",
          "\"employees\":[{\"firstName\":\"John\", \"lastName\":\"Doe\"},{\"firstName\":\"Anna\", \"lastName\":\"Smith\"},{\"firstName\":\"Peter\", \"lastName\":\"Jones\"}]",
          "let text = '{ \"employees\" : [' +'{ \"firstName\":\"John\" , \"lastName\":\"Doe\" },' +'{ \"firstName\":\"Anna\" , \"lastName\":\"Smith\" },' +'{ \"firstName\":\"Peter\" , \"lastName\":\"Jones\" } ]}';",
          "const obj = JSON.parse(text);",
          "<p id=\"demo\"></p><script>document.getElementById(\"demo\").innerHTML =obj.employees[1].firstName + \" \" + obj.employees[1].lastName;</script>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_debugging.asp",
    "cours": {
      "titre": "JavaScriptDebugging",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_debugging.asp",
      "contenus": {
        "paragraphs": [
          "Errors can (will) happen, every time you write some new computer code.",
          "Programming code might contain syntax errors, or logical errors.",
          "Many of these errors are difficult to diagnose.",
          "Often, when programming code contains errors, nothing will happen. There are \nno error messages, and you will get no indications where to search for errors.",
          "Searching for (and fixing) errors in programming code is called code debugging.",
          "Debugging is not easy. But fortunately, all modern browsers have a built-in \nJavaScript debugger.",
          "Built-in debuggers can be turned on and off, forcing errors to be reported to \nthe user.",
          "With a debugger, you can also set breakpoints (places where code execution \ncan be stopped), and examine variables while the code is executing.",
          "Normally (otherwise follow the steps at the bottom of this page), you activate debugging in your browser with \nthe F12 key, and select \"Console\" in the debugger menu.",
          "If your browser supports debugging, you can useconsole.log()to \ndisplay JavaScript values in the debugger window:",
          "Tip:Read more about theconsole.log()method in ourJavaScript Console Reference.",
          "In the debugger window, you can set breakpoints in the JavaScript code.",
          "At each breakpoint, JavaScript will stop executing, and let you examine \nJavaScript values.",
          "After examining values, you can resume the execution of code (typically with \na play button).",
          "Thedebuggerkeyword stops the execution of JavaScript, \nand calls (if available) the debugging function.",
          "This has the same function as setting a breakpoint in the debugger.",
          "If no debugging is available, the debugger statement has no effect.",
          "With the debugger turned on, this code will stop executing before it \nexecutes the third line.",
          "Normally, you activate debugging in your browser with F12, and select \"Console\" in the debugger menu.",
          "Otherwise follow these steps:",
          "Debugging is the process of testing, finding, and reducing bugs (errors) in computer programs.The first known computer bug was a real bug (an insect) stuck in the electronics."
        ],
        "lists": [
          [
            "Open the browser.",
            "From the menu, select \"More tools\".",
            "From tools, choose \"Developer tools\".",
            "Finally, select Console."
          ],
          [
            "Open the browser.",
            "From the menu, select \"Web Developer\".",
            "Finally, select \"Web Console\"."
          ],
          [
            "Open the browser.",
            "From the menu, select \"Developer Tools\".",
            "Finally, select \"Console\"."
          ],
          [
            "Open the browser.",
            "From the menu, select \"Developer\".",
            "From \"Developer\", select \"Developer tools\".",
            "Finally, select \"Console\"."
          ],
          [
            "Go to Safari, Preferences, Advanced in the main menu.",
            "Check \"Enable Show Develop menu in menu bar\".",
            "When the new option \"Develop\" appears in the menu:Choose \"Show Error \n Console\"."
          ]
        ],
        "examples": [
          "<!DOCTYPE html><html><body><h1>My First Web Page</h1><script>a = 5;b = 6;c = a + b;console.log(c);</script></body></html>",
          "let x = 15 * 5;debugger;document.getElementById(\"demo\").innerHTML = x;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_conventions.asp",
    "cours": {
      "titre": "JavaScript Style Guide",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_conventions.asp",
      "contenus": {
        "paragraphs": [
          "Always use the same coding conventions for all your JavaScript \nprojects.",
          "Coding conventions arestyle guidelines for programming. \nThey typically cover:",
          "Coding conventionssecure quality:",
          "Coding conventions can be documented rules for teams to follow, or just be your individual coding practice.",
          "This page describes the general JavaScript code conventions used by W3Schools.You should also read the next chapter \"Best Practices\", and learn how to avoid coding pitfalls.",
          "At W3schools we usecamelCasefor identifier names (variables and functions).",
          "All names start with aletter.",
          "At the bottom of this page, you will find a wider discussion about naming \nrules.",
          "Always put spaces around operators ( = + - * / ), and after commas:",
          "Always use 2 spaces for indentation of code blocks:",
          "Do not use tabs (tabulators) for indentation. Different editors interpret tabs differently.",
          "General rules for simple statements:",
          "General rules for complex (compound) statements:",
          "General rules for object definitions:",
          "Short objects can be written compressed, on one line, using spaces only \nbetween properties, like this:",
          "For readability, avoid lines longer than 80 \ncharacters.",
          "If a JavaScript statement does not fit on one line, the best place to break \nit, is after an operator or a comma.",
          "Always use the same naming convention for all your code. For example:",
          "Should you usehyp-hens,camelCase, orunder_scoresin variable names?",
          "This is a question programmers often discuss. The answer depends on who you \nask:",
          "Hyphens in HTML and CSS:",
          "HTML5 attributes can start with data- (data-quantity, data-price).",
          "CSS uses hyphens in property-names (font-size).",
          "Hyphens can be mistaken as subtraction attempts. Hyphens are not allowed in JavaScript names.",
          "Underscores:",
          "Many programmers prefer to use underscores (date_of_birth), especially in SQL \ndatabases.",
          "Underscores are often used in PHP documentation.",
          "PascalCase:",
          "PascalCase is often preferred by C programmers.",
          "camelCase:",
          "camelCase is used by JavaScript itself, by jQuery, and other JavaScript \nlibraries.",
          "Do not start names with a $ sign. It will put you in conflict with many JavaScript library names.",
          "Use simple syntax for loading external scripts (the type attribute is not \nnecessary):",
          "A consequence of using \"untidy\" HTML styles, might result in JavaScript errors.",
          "These two JavaScript statements will produce different results:",
          "If possible, use the same naming convention (as JavaScript) in HTML.",
          "Visit the HTML Style Guide.",
          "HTML files should have a.htmlextension (.htmis allowed).CSS files should have a.cssextension.JavaScript files should have a.jsextension.Use Lower Case File NamesMost web servers (Apache, Unix) are case sensitive about file names:london.jpg cannot be accessed as London.jpg.Other web servers (Microsoft, IIS) are not case sensitive:london.jpg can be accessed as London.jpg or london.jpg.If you use a mix of upper and lower case, you have to be extremely \nconsistent.If you move from a case insensitive, to a case sensitive server, even small \nerrors can break your web site.To avoid these problems, always use lower case file names (if possible).PerformanceCoding conventions are not used by computers. Most rules have \nlittle impact on the execution of programs.Indentation and extra spaces are not significant in small scripts.For code in development, readability should be preferred. Larger production \nscripts should be minimized.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "CSS files should have a.cssextension.",
          "JavaScript files should have a.jsextension.",
          "Most web servers (Apache, Unix) are case sensitive about file names:",
          "london.jpg cannot be accessed as London.jpg.",
          "Other web servers (Microsoft, IIS) are not case sensitive:",
          "london.jpg can be accessed as London.jpg or london.jpg.",
          "If you use a mix of upper and lower case, you have to be extremely \nconsistent.",
          "If you move from a case insensitive, to a case sensitive server, even small \nerrors can break your web site.",
          "To avoid these problems, always use lower case file names (if possible).",
          "Coding conventions are not used by computers. Most rules have \nlittle impact on the execution of programs.",
          "Indentation and extra spaces are not significant in small scripts.",
          "For code in development, readability should be preferred. Larger production \nscripts should be minimized."
        ],
        "lists": [
          [
            "Naming and declaration rules for variables and functions.",
            "Rules for the use of white space, indentation, and comments.",
            "Programming practices and principles."
          ],
          [
            "Improve code readability",
            "Make code maintenance easier"
          ],
          [
            "Always end a simple statement with a semicolon."
          ],
          [
            "Put the opening bracket at the end of the first line.",
            "Use one space before the opening bracket.",
            "Put the closing bracket on a new line, without leading spaces.",
            "Do not end a complex statement with a semicolon."
          ],
          [
            "Place the opening bracket on the same line as the object name.",
            "Use colon plus one space between each property and its value.",
            "Use quotes around string values, not around numeric values.",
            "Do not add a comma after the last property-value pair.",
            "Place the closing bracket on a new line, without \n leading spaces.",
            "Always end an object definition with a semicolon."
          ],
          [
            "Variable and function names written ascamelCase",
            "Global variables written inUPPERCASE(We don't, but it's \nquite common)",
            "Constants (like PI) written inUPPERCASE"
          ]
        ],
        "examples": [
          "firstName = \"John\";lastName = \"Doe\";price = 19.90;tax = 0.20;fullPrice = price + (price * tax);",
          "let x = y + z;const myArray = [\"Volvo\", \"Saab\", \n \"Fiat\"];",
          "function toCelsius(fahrenheit) {return (5 / 9) * (fahrenheit - 32);}",
          "const cars = [\"Volvo\", \"Saab\", \n \"Fiat\"];const person = {firstName: \"John\",lastName: \"Doe\",age: 50,eyeColor: \n \"blue\"};",
          "function toCelsius(fahrenheit) {return (5 / 9) * (fahrenheit - 32);}",
          "for (let i = 0; i < 5; i++) {x += i;}",
          "if (time < 20) {greeting = \"Good day\";} else {greeting = \"Good evening\";}",
          "const person = {firstName: \"John\",lastName: \"Doe\",age: 50,eyeColor: \n \"blue\"};",
          "const person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};",
          "document.getElementById(\"demo\").innerHTML =\"Hello Dolly.\";",
          "<script src=\"myscript.js\"></script>",
          "const obj = getElementById(\"Demo\")const obj = getElementById(\"demo\")"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_best_practices.asp",
    "cours": {
      "titre": "JavaScriptBest Practices",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_best_practices.asp",
      "contenus": {
        "paragraphs": [
          "Avoid global variables, avoidnew, avoid==, avoideval()",
          "Minimize the use of global variables.",
          "This includes all data types, objects, and functions.",
          "Global variables and functions can be overwritten by other scripts.",
          "Use local variables instead, and learn how to useclosures.",
          "All variables used in a function should be declared aslocalvariables.",
          "Local variablesmustbe declared with thevar, \nthelet, or theconstkeyword,\notherwise they will become global variables.",
          "Strict mode does not allow undeclared variables.",
          "It is a good coding practice to put all declarations at the top of each script \nor function.",
          "This will:",
          "This also goes for loop variables:",
          "It is a good coding practice to initialize variables when you declare them.",
          "This will:",
          "Initializing variables provides an idea of the intended use (and intended data type).",
          "Declaring objects with const will prevent any accidental change of type:",
          "Declaring arrays with const will prevent any accidential change of type:",
          "JavaScript is loosely typed.",
          "A variable can contain all data types.",
          "A variable can change its data type:",
          "Beware that numbers can accidentally be converted to strings orNaN(Not a \nNumber).",
          "When doing mathematical operations, JavaScript can convert numbers to strings:",
          "Subtracting a string from a string, does not \ngenerate an error but returnsNaN(Not a Number):",
          "The==comparison operator always converts (to matching types) before \ncomparison.",
          "The===operator forces comparison of values and type:",
          "If a function is called with a missing argument, the value of the missing \nargument is set toundefined.",
          "Undefined values can break your code. It is a good habit to assign default \nvalues to arguments.",
          "ECMAScript 2015allows default parameters in the function definition:function (a=1, b=1) { /*function code*/  }",
          "Read more about function parameters and arguments atFunction Parameters",
          "Always end yourswitchstatements with adefault. Even if you think there is \nno need for it.",
          "Always treat numbers, strings, or booleans as primitive values. Not as \nobjects.",
          "Declaring these types as objects, slows down execution speed, \nand produces nasty side effects:",
          "Or even worse:",
          "Theeval()function is used to run text as code. In almost all cases, it \nshould not be necessary to use it.",
          "Because it allows arbitrary code to be run, it also represents a security \nproblem."
        ],
        "lists": [
          [
            "Give cleaner code",
            "Provide a single place to look for local variables",
            "Make it easier to avoid unwanted (implied) global variables",
            "Reduce the possibility of unwanted re-declarations"
          ],
          [
            "Give cleaner code",
            "Provide a single place to initialize variables",
            "Avoid undefined values"
          ],
          [
            "Use\"\"instead ofnew String()",
            "Use0instead ofnew Number()",
            "Usefalseinstead ofnew Boolean()",
            "Use{}instead ofnew Object()",
            "Use[]instead ofnew Array()",
            "Use/()/instead ofnew RegExp()",
            "Usefunction (){}instead ofnew Function()"
          ]
        ],
        "examples": [
          "// Declare at the beginninglet firstName, lastName, price, discount, fullPrice;// Use laterfirstName = \"John\";lastName = \"Doe\";price = 19.90;discount = 0.10;fullPrice = price - discount;",
          "for (let i = 0; i < 5; i++) \n {",
          "// Declare and initiate at the beginninglet firstName = \"\";let lastName = \"\";let price = 0;let discount = 0;let fullPrice = 0,const myArray = [];const myObject = {};",
          "let car = {type:\"Fiat\", model:\"500\", color:\"white\"};car = \"Fiat\";      // Changes object to string",
          "const car = {type:\"Fiat\", model:\"500\", color:\"white\"};car = \"Fiat\";      // Not possible",
          "let cars = [\"Saab\", \"Volvo\", \"BMW\"];cars = 3;    // Changes array to number",
          "const cars = [\"Saab\", \"Volvo\", \"BMW\"];cars = 3;    // Not possible",
          "let x1 = \"\";             // new primitive stringlet x2 = 0;              // new primitive numberlet x3 = false;          // new primitive booleanconst x4 = {};           // new objectconst x5 = [];           // new array objectconst x6 = /()/;         // new regexp objectconst x7 = function(){}; // new function object",
          "let x = \"Hello\";     // typeof x is a stringx = 5;               // changes typeof x to a number",
          "let x = 5 + 7;       // x.valueOf() is 12,  typeof x is a numberlet x = 5 + \"7\";     // x.valueOf() is 57,  typeof x is a stringlet x = \"5\" + 7;     // x.valueOf() is 57,  typeof x is a stringlet x = 5 - 7;       // x.valueOf() is -2,  typeof x is a numberlet x = 5 - \"7\";     // x.valueOf() is -2,  typeof x is a numberlet x = \"5\" - 7;     // x.valueOf() is -2,  typeof x is a numberlet x = 5 - \"x\";     // x.valueOf() is NaN, typeof x is a number",
          "\"Hello\" - \"Dolly\"    // returns NaN",
          "0 == \"\";        // true1 == \"1\";       // true1 == true;      // true0 === \"\";       // false1 === \"1\";      // false1 === true;     \n// false",
          "function myFunction(x, y) {if (y === undefined) {y = 0;}}",
          "function (a=1, b=1) { /*function code*/  }",
          "switch (new Date().getDay()) {case 0:day = \"Sunday\";break;case 1:day = \"Monday\";break;case 2:day = \"Tuesday\";break;case 3:day = \"Wednesday\";break;case 4:day = \"Thursday\";break;case 5:day = \"Friday\";break;case 6:day = \"Saturday\";break;default:day = \n \"Unknown\";}",
          "let x = \"John\";let y = new String(\"John\");(x === y) // is false because x is a string and y is an object.",
          "let x = new String(\"John\");let y = new String(\"John\");(x == y) // is false because you cannot compare objects."
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_mistakes.asp",
    "cours": {
      "titre": "JavaScriptCommon Mistakes",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_mistakes.asp",
      "contenus": {
        "paragraphs": [
          "This chapter points out some common JavaScript mistakes.",
          "JavaScript programs may generate unexpected results if a programmer \naccidentally uses an assignment operator (=), instead of a comparison operator \n(==) in an if statement.",
          "Thisifstatement returnsfalse(as \nexpected) because x is \nnot equal to 10:",
          "Thisifstatement returnstrue(maybe not \nas expected), because 10 is  \ntrue:",
          "Thisifstatement returnsfalse(maybe not \nas expected), because 0 is  \nfalse:",
          "An assignment always returns the value of the assignment.",
          "In regular comparison, data type does not matter. Thisifstatement returns \ntrue:",
          "In strict comparison, data type does matter. Thisifstatement returns false:",
          "It is a common mistake to forget thatswitchstatements use strict \ncomparison:",
          "Thiscase switchwill display an alert:",
          "Thiscase switchwill not display an alert:",
          "Additionis about addingnumbers.",
          "Concatenationis about addingstrings.",
          "In JavaScript both operations use the same+operator.",
          "Because of this, adding a number as a number will produce a different \nresult from adding a number as a string:",
          "When adding two variables, it can be difficult to anticipate the result:",
          "All numbers in JavaScript are stored as 64-bitsFloating point numbers(Floats).",
          "All programming languages, including JavaScript, have difficulties with \nprecise floating point values:",
          "To solve the problem above, it helps to multiply and divide:",
          "JavaScript will allow you to break a statement into two lines:",
          "But, breaking a statement in the middle of a string will not work:",
          "You must use a \"backslash\" if you must break a statement in a string:",
          "Because of a misplaced semicolon, this code block will execute regardless of \nthe value of x:",
          "It is a default JavaScript behavior to close a statement automatically at the \nend of a line.",
          "Because of this, these two examples will return the same result:",
          "JavaScript will also allow you to break a statement into two lines.",
          "Because of this, example 3 will also return the same result:",
          "But, what will happen if you break the return statement in two lines like \nthis:",
          "The function will returnundefined!",
          "Why? Because JavaScript thought you meant:",
          "If a statement is incomplete like:",
          "JavaScript will try to complete the statement by reading the next line:",
          "But since this statement is complete:",
          "JavaScript will automatically close it like this:",
          "This happens because closing (ending) statements with semicolon is optional in \nJavaScript.",
          "JavaScript will close the return statement at the end of the line, because \nit is a complete statement.",
          "Never break a return statement.",
          "Many programming languages support arrays with named indexes.",
          "Arrays with named indexes are called associative \narrays (or hashes).",
          "JavaScript doesnotsupport arrays with named indexes.",
          "In JavaScript,arraysusenumbered indexes:",
          "In JavaScript,objectsusenamed indexes.",
          "If you use a named index, when accessing an array, JavaScript will redefine \nthe array to a standard object.",
          "After the automatic redefinition, array methods and properties will produce undefined or \nincorrect results:",
          "Trailing commas in object and array definition are legal in ECMAScript 5.",
          "WARNING !!",
          "Internet Explorer 8 will crash.",
          "JSON does not allow trailing commas.",
          "JavaScript objects, variables, properties, and methods can beundefined.",
          "In addition, empty JavaScript objects can have the valuenull.",
          "This can make it a little bit difficult to test if an object is empty.",
          "You can test if an object exists by testing if the type isundefined:",
          "But you cannot test if an object isnull, because this will throw an error if the \nobject isundefined:",
          "To solve this problem, you must test if an object is notnull, \nand notundefined.",
          "But this can still throw an error:",
          "Because of this, you must test for notundefinedbefore you can \ntest for notnull:"
        ],
        "lists": [],
        "examples": [
          "let x = 0;if (x == 10)",
          "let x = 0;if (x = 10)",
          "let x = 0;if (x = 0)",
          "let x = 10;let y = \"10\";if (x == y)",
          "let x = 10;let y = \"10\";if (x === y)",
          "let x = 10;switch(x) {case 10: alert(\"Hello\");}",
          "let x = 10;switch(x) {case \"10\": alert(\"Hello\");}",
          "let x = 10;x = 10 + 5;       // \n    Now x is 15let y = 10;y += \"5\";        \n    // Now y is \"105\"",
          "let x = 10;let y = 5;let z = x + y;     // Now z is 15let x = 10;let y = \"5\";let z = x + y;     // Now z is \"105\"",
          "let x = 0.1;let y = 0.2;let z = x + y            \n    // the result in z will not be 0.3",
          "let z = (x * 10 + y * 10) / 10;       // z will be 0.3",
          "let x =\"Hello World!\";",
          "let x = \"HelloWorld!\";",
          "let x = \"Hello \\World!\";",
          "if (x == 19);{// code block}",
          "function myFunction(a) {let power = 10return a * power}",
          "function myFunction(a) {let power = 10;return a * power;}",
          "function myFunction(a) {letpower = 10;return a * power;}",
          "function myFunction(a) {letpower = 10;returna * power;}",
          "function myFunction(a) {letpower = 10;return;a * power;}",
          "let",
          "power = 10;",
          "return",
          "return;",
          "const person = [];person[0] = \"John\";person[1] = \"Doe\";person[2] = 46;person.length;       \n // person.length will return 3person[0];           \n // person[0] will return \"John\"",
          "const person = [];person[\"firstName\"] = \"John\";person[\"lastName\"] = \"Doe\";person[\"age\"] = 46;person.length;      // person.length will \n return 0person[0];          \n // person[0] will return undefined",
          "person = {firstName:\"John\", lastName:\"Doe\", age:46,}",
          "points = [40, 100, 1, 5, 25, 10,];",
          "person = {\"firstName\":\"John\", \"lastName\":\"Doe\", \"age\":46}",
          "points = [40, 100, 1, 5, 25, 10];",
          "if (typeof myObj === \"undefined\")",
          "if (myObj === null)",
          "if (myObj !== null && typeof myObj \n  !== \"undefined\")",
          "if (typeof myObj !== \"undefined\" && myObj !== null)"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_performance.asp",
    "cours": {
      "titre": "JavaScriptPerformance",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_performance.asp",
      "contenus": {
        "paragraphs": [
          "How to speed up your JavaScript code.",
          "Loops are often used in programming.",
          "Each statement in a loop, including the for statement, is executed for each iteration of the \nloop.",
          "Statements or assignments that can be placed outside the loop will make the \nloop run faster.",
          "The bad code accesses the length property of an array each time the loop is \niterated.",
          "The better code accesses the length property outside the loop and makes the \nloop run faster.",
          "Accessing the HTML DOM is very slow, compared to other JavaScript statements.",
          "If you expect to access a DOM element several times, access it once, and use \nit as a local variable:",
          "Keep the number of elements in the HTML DOM small.",
          "This will always \nimprove page loading, and speed up rendering (page display), especially on smaller devices.",
          "Every attempt to search the DOM (like getElementsByTagName) will benefit \nfrom a smaller DOM.",
          "Don't create new variables if you don't plan to save values.",
          "Often you can replace code like this:",
          "With this:",
          "Putting your scripts at the bottom of the page body lets the browser load the \npage first.",
          "While a script is downloading, the browser will not start any other \ndownloads. In addition all parsing and rendering activity might be blocked.",
          "The HTTP specification defines that browsers should not download more than \ntwo components in parallel.",
          "An alternative is to usedefer=\"true\"in the script tag. The \ndefer attribute specifies that the script should be executed after the page has \nfinished parsing, but it only works for external scripts.",
          "If possible, you can add your script to the page by code, after the page has loaded:",
          "Avoid using thewithkeyword. It has a negative effect on \nspeed. It also clutters up JavaScript scopes.",
          "Thewithkeyword isnot allowedin strict mode."
        ],
        "lists": [],
        "examples": [
          "for (let i = 0; i < arr.length; i++) {",
          "let l = arr.length;for (let i = 0; i < l; i++) {",
          "const obj = document.getElementById(\"demo\");obj.innerHTML = \"Hello\";",
          "let fullName = firstName + \" \" + lastName;document.getElementById(\"demo\").innerHTML = fullName;",
          "document.getElementById(\"demo\").innerHTML = firstName + \" \" + lastName;",
          "<script>window.onload = function() {const element = document.createElement(\"script\");element.src = \"myScript.js\";document.body.appendChild(element);};</script>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_reserved.asp",
    "cours": {
      "titre": "JavaScriptReserved Words",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_reserved.asp",
      "contenus": {
        "paragraphs": [
          "You can read more about the different JavaScript versions in the chapterJS Versions.",
          "Do not use these words as variables. ECMAScript 5/6 does not have full support \nin all browsers.",
          "JavaScript can be used as the programming \nlanguage in many applications.",
          "In addition you should avoid using the name of all HTML event handlers."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_versions.asp",
    "cours": {
      "titre": "JavaScriptVersions",
      "description": "JavaScript was invented by Brendan Eich in 1995, and \nbecame an ECMA standard  \nin 1997.ECMAScript is the official name of the language.ECMAScript versions have been abbreviated to ES1, ES2, ES3, ES5, and ES6.Since 2016, versions are named by year (ECMAScript 2016, 2017, 2018, 2019, 2020).",
      "lien": "https://www.w3schools.com/js/js_versions.asp",
      "contenus": {
        "paragraphs": [
          "JavaScript was invented by Brendan Eich in 1995, and \nbecame an ECMA standard  \nin 1997.",
          "ECMAScript is the official name of the language.",
          "ECMAScript versions have been abbreviated to ES1, ES2, ES3, ES5, and ES6.",
          "Since 2016, versions are named by year (ECMAScript 2016, 2017, 2018, 2019, 2020).",
          "This tutorial covers every version of JavaScript:",
          "ECMAScript 1 - 6 is fully supported in all modern browsers.",
          "* Internet Explorer 9 does not support ECMAScript 5 \"use strict\".",
          "Internet Explorer does not support ECMAScript 2015."
        ],
        "lists": [
          [
            "The Original JavaScript ES1 ES2 ES3 (1997-1999)",
            "The First Main Revision ES5 (2009)",
            "The Second Revision ES6 (2015)",
            "Yearly Additions (2016, 2017, 2018, 2019, 2020)"
          ]
        ],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_es5.asp",
    "cours": {
      "titre": "JavaScript ES5",
      "description": "ECMAScript 2009, also known as ES5, was the first major revision to JavaScript.This chapter describes the most important features of ES5.",
      "lien": "https://www.w3schools.com/js/js_es5.asp",
      "contenus": {
        "paragraphs": [
          "ECMAScript 2009, also known as ES5, was the first major revision to JavaScript.",
          "This chapter describes the most important features of ES5.",
          "ES5 (JavaScript 2009) fully supported in all modern browsers since July 2013:",
          "\"use strict\"defines that the JavaScript code should be executed in \"strict mode\".",
          "With strict mode you can, for example, not use undeclared variables.",
          "You can use strict mode in all your programs. It helps you to write cleaner code,\nlike preventing you from using undeclared variables.",
          "\"use strict\"is just a string expression. Old browsers will not throw an error if they don't understand it.",
          "Read more inJS Strict Mode.",
          "ThecharAt()method returns the character at a specified \nindex (position) in a string:",
          "ES5 allows property access on strings:",
          "Property access on string might be a little unpredictable.",
          "Read more inJS String Methods.",
          "The \\ method might not have universal support.Older browsers might treat \nthe spaces around the backslash differently.Some older browsers do \nnot allow spaces behind the \\ character.",
          "A safer way to break up a string literal, is to use string \naddition:",
          "ES5 allows reserved words as property names:",
          "Thetrim()method removes whitespace from both sides of a string.",
          "Read more inJS String Methods.",
          "TheisArray()method checks whether an object is an array.",
          "Read more inJS Arrays.",
          "TheforEach()method calls a function once for each array element.",
          "Learn more inJS Array Iteration Methods.",
          "This example multiplies each array value by 2:",
          "Learn more inJS Array Iteration Methods.",
          "This example creates a new array from elements with a value larger than 18:",
          "Learn more inJS Array Iteration Methods.",
          "This example finds the sum of all numbers in an array:",
          "Learn more inJS Array Iteration Methods.",
          "This example also finds the sum of all numbers in an array:",
          "Learn more inJS Array Iteration Methods.",
          "This example checks if all values are over 18:",
          "Learn more inJS Array Iteration Methods.",
          "This example checks if some values are over 18:",
          "Learn more inJS Array Iteration Methods.",
          "Search an array for an element value and returns its position.",
          "Learn more inJS Array Iteration Methods.",
          "lastIndexOf()is the same asindexOf(), but searches from the end of the array.",
          "Learn more inJS Array Iteration Methods.",
          "A common use of JSON is to receive data from a web server.",
          "Imagine you received this text string from a web server:",
          "The JavaScript functionJSON.parse()is used to convert the text into a JavaScript object:",
          "Read more in ourJSON Tutorial.",
          "A common use of JSON is to send data to a web server.",
          "When sending data to a web server, the data has to be \na string.",
          "Imagine we have this object in JavaScript:",
          "Use the JavaScript functionJSON.stringify()to convert it into a string.",
          "The result will be a string following the JSON notation.",
          "myJSON is now a string, and ready to be sent to a server:",
          "Read more in ourJSON Tutorial.",
          "Date.now()returns the number of milliseconds since zero date (January 1. \n1970 00:00:00 UTC).",
          "Date.now()returns the same as getTime() performed on aDateobject.",
          "Learn more inJS Dates.",
          "ThetoISOString()method converts a Date object to a string, using the ISO standard format:",
          "toJSON()converts a Date object into a string, formatted as a JSON date.",
          "JSON dates have the same format as the ISO-8601 standard: YYYY-MM-DDTHH:mm:ss.sssZ:",
          "ES5 lets you define object methods with a syntax that looks like getting or setting\na property.",
          "This example creates agetterfor a property called fullName:",
          "This example creates asetterand agetterfor the language property:",
          "This example uses a setter to secure upper case updates of language:",
          "Learn more about Gettes and Setters inJS Object Accessors",
          "Object.defineProperty()is a new Object method in ES5.",
          "It lets you define an object property and/or change a property's value and/or \nmetadata.",
          "Next example is the same code, except it hides the language property from enumeration:",
          "This example creates a setter and a getter to secure upper case updates of language:",
          "TheObject.create()method creates an object from an existing object.",
          "TheObject.keys()method returns an array with the keys of an object.",
          "ES5 added new Object management methods to JavaScript:",
          "Learn more inObject Management.",
          "ES5 added Object protection methods to JavaScript:",
          "Learn more inObject Protection.",
          "With thebind()method, an object can borrow a method from another object.",
          "This example creates 2 objects (person and member).",
          "The member object borrows the fullname method from the person object:",
          "Learn more inFunction bind().",
          "ES5 allows trailing commas in object and array definitions:",
          "WARNING !!!",
          "JSON does not allow trailing commas."
        ],
        "lists": [
          [
            "\"use strict\"",
            "String[number] access",
            "Multiline strings",
            "String.trim()",
            "Array.isArray()",
            "Array forEach()",
            "Array map()",
            "Array filter()",
            "Array reduce()",
            "Array reduceRight()",
            "Array every()",
            "Array some()",
            "Array indexOf()",
            "Array lastIndexOf()",
            "JSON.parse()",
            "JSON.stringify()",
            "Date.now()",
            "Date toISOString()",
            "Date toJSON()",
            "Property getters and setters",
            "Reserved words as property names",
            "Object.create()",
            "Object.keys()",
            "Object management",
            "Object protection",
            "Object defineProperty()",
            "Function bind()",
            "Trailing commas"
          ]
        ],
        "examples": [
          "var str = \"HELLO WORLD\";str.charAt(0);            // returns H",
          "var str = \"HELLO WORLD\";str[0];                   // returns H",
          "\"Hello \\Dolly!\";",
          "\"Hello \" +\"Dolly!\";",
          "var obj = {name: \"John\", new: \"yes\"}",
          "var str = \"       Hello World!        \";alert(str.trim());",
          "function myFunction() {var fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];var x = document.getElementById(\"demo\");x.innerHTML = Array.isArray(fruits);}",
          "var txt = \"\";var numbers = [45, 4, 9, 16, 25];numbers.forEach(myFunction);function myFunction(value) {txt = txt + value + \"<br>\";}",
          "var numbers1 = [45, 4, 9, 16, 25];var numbers2 = numbers1.map(myFunction);function myFunction(value) {return value * 2;}",
          "var numbers = [45, 4, 9, 16, 25];var over18 = \n  numbers.filter(myFunction);function myFunction(value) {return value > 18;}",
          "var numbers1 = [45, 4, 9, 16, 25];var sum = numbers1.reduce(myFunction);function myFunction(total, value) {return total + value;}",
          "var numbers1 = [45, 4, 9, 16, 25];var sum = numbers1.reduceRight(myFunction);function myFunction(total, value) {return total + value;}",
          "var numbers = [45, 4, 9, 16, 25];var allOver18 = \n  numbers.every(myFunction);function myFunction(value) {return \n  value > 18;}",
          "var numbers = [45, 4, 9, 16, 25];var allOver18 = \n  numbers.some(myFunction);function myFunction(value) {return \n  value > 18;}",
          "var fruits = [\"Apple\", \"Orange\", \"Apple\", \"Mango\"];var a = fruits.indexOf(\"Apple\");",
          "var fruits = [\"Apple\", \"Orange\", \"Apple\", \"Mango\"];var a = fruits.lastIndexOf(\"Apple\");",
          "'{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}'",
          "var obj = JSON.parse('{\"name\":\"John\", \"age\":30, \"city\":\"New \n  York\"}');",
          "var obj = {name:\"John\", age:30, city:\"New York\"};",
          "var myJSON = JSON.stringify(obj);",
          "var obj = {name:\"John\", age:30, city:\"New York\"};var myJSON = JSON.stringify(obj);document.getElementById(\"demo\").innerHTML = myJSON;",
          "var timInMSs = Date.now();",
          "const d = new Date();document.getElementById(\"demo\").innerHTML = d.toISOString();",
          "d = new Date();document.getElementById(\"demo\").innerHTML = d.toJSON();",
          "// Create an object:var person = {firstName: \n  \"John\",lastName : \"Doe\",get \n  fullName() {return this.firstName + \" \" + this.lastName;}};// Display data from the \n  object using a getter:document.getElementById(\"demo\").innerHTML = \n  person.fullName;",
          "var person = {firstName: \"John\",lastName : \"Doe\",language : \"NO\",get lang() {return this.language;},set lang(value) {this.language = value;}};// Set an object \n  property using a setter:person.lang = \"en\";// Display data from the \n  object using a getter:document.getElementById(\"demo\").innerHTML = \n  person.lang;",
          "var person = {firstName: \"John\",lastName : \"Doe\",language : \"NO\",set lang(value) {this.language = value.toUpperCase();}};// Set an object \n  property using a setter:person.lang = \"en\";// Display data from the \n  object:document.getElementById(\"demo\").innerHTML = \n  person.language;",
          "// Create an Object:const person = {firstName: \n  \"John\",lastName : \"Doe\",language : \"NO\",};// Change a Property:Object.defineProperty(person, \"language\", {value: \"EN\",writable : true,enumerable : true,configurable : true});// \n  Enumerate Propertieslet txt = \"\";for (let x in person) {txt += person[x] + \"<br>\";}// Display Propertiesdocument.getElementById(\"demo\").innerHTML = \n  txt;",
          "// Create an Object:const person = {firstName: \n  \"John\",lastName : \"Doe\",language : \"NO\",};// Change a Property:Object.defineProperty(person, \"language\", {value: \"EN\",writable : true,enumerable : false,configurable : true});// \n  Enumerate Propertieslet txt = \"\";for (let x in person) {txt += person[x] + \"<br>\";}document.getElementById(\"demo\").innerHTML = \n  txt;",
          "// Create an Object:const person = {firstName: \"John\",lastName : \n  \"Doe\",language : \"NO\"};// Change a Property:Object.defineProperty(person, \"language\", {get : function() { return \n  language },set : function(value) { language = value.toUpperCase()}});// Change Languageperson.language = \"en\";// Display Languagedocument.getElementById(\"demo\").innerHTML = person.language;",
          "// Create an Object:const person = {firstName: \"John\",lastName: \"Doe\"};// Create new Objectconst man = Object.create(person);man.firstName = \"Peter\";",
          "// Create an Objectconst person = {firstName: \"John\",lastName: \"Doe\",age: 50,eyeColor: \"blue\"};// Get the Keysconst keys = Object.keys(person);",
          "// Adding or changing an object propertyObject.defineProperty(object, property, descriptor)// Adding or changing object propertiesObject.defineProperties(object, descriptors)// Accessing a PropertyObject.getOwnPropertyDescriptor(object, property)// Accessing PropertiesObject.getOwnPropertyDescriptors(object)// Returns all properties as an arrayObject.getOwnPropertyNames(object)// Accessing the prototypeObject.getPrototypeOf(object)",
          "// Prevents adding properties to an objectObject.preventExtensions(object)// Returns true if properties can be added to an objectObject.isExtensible(object)// Prevents changes of object properties (not values)Object.seal(object)// Returns true if object is sealedObject.isSealed(object)// Prevents any changes to an objectObject.freeze(object)// Returns true if object is frozenObject.isFrozen(object)",
          "const person = {firstName:\"John\",lastName: \"Doe\",fullName: function () {return this.firstName + \" \" + this.lastName;}}const member = {firstName:\"Hege\",lastName: \"Nilsen\",}let fullName = person.fullName.bind(member);",
          "person = {firstName: \"John\",lastName: \"\nDoe\",age: 46,}",
          "points = [1,5,10,25,40,100,];",
          "//\n  Allowed:var person = '{\"firstName\":\"John\", \"lastName\":\"Doe\", \n  \"age\":46}'JSON.parse(person)// Not allowed:var person = '{\"firstName\":\"John\", \n  \"lastName\":\"Doe\", \"age\":46,}'JSON.parse(person)",
          "//\n    Allowed:points = [40, 100, 1, 5, 25, 10]// Not allowed:points = \n    [40, 100, 1, 5, 25, 10,]"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_es6.asp",
    "cours": {
      "titre": "Javascript ES6",
      "description": "ECMAScript 2015 was the second major revision to JavaScript.ECMAScript 2015 is also known as ES6 and ECMAScript 6.This chapter describes the most important features of ES6.",
      "lien": "https://www.w3schools.com/js/js_es6.asp",
      "contenus": {
        "paragraphs": [
          "ECMAScript 2015 was the second major revision to JavaScript.",
          "ECMAScript 2015 is also known as ES6 and ECMAScript 6.",
          "This chapter describes the most important features of ES6.",
          "ES6 is fully supported in all modern browsers since June 2017:",
          "ES6 is not supported in Internet Explorer.",
          "Theletkeyword allows you to declare a variable with \nblock scope.",
          "Read more aboutletin the chapter:JavaScript Let.",
          "Theconstkeyword allows you to declare a constant (a \nJavaScript variable with a constant value).",
          "Constants are similar to let variables, except that the value cannot be changed.",
          "Read more aboutconstin the chapter:JavaScript Const.",
          "Arrow functions allows a short syntax for writing function expressions.",
          "You don't need thefunctionkeyword, thereturnkeyword, and thecurly brackets.",
          "Arrow functions do not have their ownthis.\nThey are not well suited for definingobject methods.",
          "Arrow functions are not hoisted. They must be definedbeforethey are used.",
          "Usingconstis safer than usingvar, because a function expression is \nalways a constant value.",
          "You can only omit thereturnkeyword and the curly brackets if the function is a single statement. \nBecause of this, it might be a good habit to always keep them:",
          "Learn more about Arrow Functions in the chapter:JavaScript Arrow Function.",
          "Destructuring assignment makes it easy to assign array values and object properties to variables.",
          "When destructuring an object, you must use the same name for the variables\nas the corresponding object keys (names).",
          "The order of the keys (names) does not matter.",
          "Destructuring assignment makes it easy to assign array values and object properties to variables.",
          "The ... operator expands an iterable (like an array) into more elements:Exampleconst q1 = [\"Jan\", \"Feb\", \"Mar\"];const q2 = [\"Apr\", \"May\", \"Jun\"];const q3 = [\"Jul\", \"Aug\", \"Sep\"];const q4 = [\"Oct\", \"Nov\", \"May\"];const year = [...q1, ...q2, ...q3, ...q4];Try it Yourself »The ... operator can be used to expand an iterable into more arguments for function calls:Exampleconst numbers = [23,55,21,87,56];let maxValue = Math.max(...numbers);Try it Yourself »The For/Of LoopThe JavaScriptfor/ofstatement loops \nthrough the values of an iterable objects.for/oflets you loop over data structures \nthat are iterable such as Arrays, Strings, Maps, NodeLists, and more.Thefor/ofloop has the following syntax:for (variableofiterable) {//code block to be executed}variable- For every iteration the value of the next property is \nassigned to the variable.Variablecan be declared withconst,let, orvar.iterable- An object that has iterable properties.Looping over an ArrayExampleconst cars = [\"BMW\", \"Volvo\", \"Mini\"];let text = \"\";for (let x of cars) {text += x + \" \";}Try it Yourself »Looping over a StringExamplelet language = \"JavaScript\";let text = \"\";for (let x of language) {text += x + \" \";}Try it Yourself »Learn more in the chapter:JavaScript Loop For/In/Of.JavaScript MapsBeing able to use an Object as a key is an important Map feature.Exampleconst fruits = new Map([[\"apples\", 500],[\"bananas\", 300],[\"oranges\", 200]]);Try it Yourself »Learn more about Map objects, and the difference between a Map and an Array, in the the chapter:JavaScript Maps.JavaScript SetsExample// Create a Setconst letters = new Set();// Add some values to the Setletters.add(\"a\");letters.add(\"b\");letters.add(\"c\");Try it Yourself »Learn more about Set objects in the the chapter:JavaScript Sets.JavaScript ClassesJavaScript Classes are templates for JavaScript Objects.Use the keywordclassto create a class.Always add a method namedconstructor():Syntaxclass ClassName {constructor() { ... }}Exampleclass Car {constructor(name, year) {this.name = name;this.year = year;}}The example above creates a class named \"Car\".The class has two initial properties: \"name\" and \"year\".A JavaScript class isnotan object.It is atemplatefor JavaScript objects.Using a ClassWhen you have a class, you can use the class to create objects:Exampleconst myCar1 = new Car(\"Ford\", 2014);const myCar2 = new Car(\"Audi\", 2019);Try it Yourself »Learn more about classes in the the chapter:JavaScript Classes.JavaScript PromisesA Promise is a JavaScript object that links \"Producing Code\" and \"Consuming Code\".\"Producing Code\" can take some time and \"Consuming Code\" must wait for the result.Promise Syntaxconst myPromise = new Promise(function(myResolve, myReject) {// \"Producing Code\" (May take some time)myResolve(); // when successfulmyReject();  // when error});// \"Consuming Code\" (Must wait for a fulfilled Promise).myPromise.then(function(value) { /* code if successful */ },function(error) { /* code if some error */ });Example Using a Promiseconst myPromise = new Promise(function(myResolve, myReject) {setTimeout(function() { myResolve(\"I love You !!\"); }, 3000);});myPromise.then(function(value) {document.getElementById(\"demo\").innerHTML = value;});Try it Yourself »Learn more about Promises in the the chapter:JavaScript Promises.The Symbol TypeA JavaScript Symbol is a primitive data type just like Number, String, or Boolean.It represents a unique \"hidden\" identifier that no other code can accidentally access.For instance, if different coders want to add a person.id property to a person object belonging to a third-party code,\nthey could mix each others values.Using Symbol() to create a unique identifiers, solves this problem:Exampleconst person = {firstName: \"John\",lastName: \"Doe\",age: 50,eyeColor: \"blue\"};let id = Symbol('id');person[id] = 140353;// Now person[id] = 140353// but person.id is still undefinedTry it Yourself »NoteSymbols are always unique.If you create two symbols with the same description they will have different values:Symbol(\"id\") == Symbol(\"id\"); // falseDefault Parameter ValuesES6 allows function parameters to have default values.Examplefunction myFunction(x, y = 10) {// y is 10 if not passed or undefinedreturn x + y;}myFunction(5); // will return 15Try it Yourself »Function Rest ParameterThe rest parameter (...) allows a function to treat an indefinite number of arguments as an array:Examplefunction sum(...args) {let sum = 0;for (let arg of args) sum += arg;return sum;}let x = sum(4, 9, 16, 25, 29, 100, 66, 77);Try it Yourself »String.includes()Theincludes()method returnstrueif a string contains a specified value,\notherwisefalse:Examplelet text = \"Hello world, welcome to the universe.\";text.includes(\"world\")    // Returns trueTry it Yourself »String.startsWith()ThestartsWith()method returnstrueif a string begins with a specified value, otherwisefalse:Examplelet text = \"Hello world, welcome to the universe.\";text.startsWith(\"Hello\")   // Returns trueTry it Yourself »String.endsWith()TheendsWith()method returnstrueif a string ends with a specified value, otherwisefalse:Examplevar text = \"John Doe\";text.endsWith(\"Doe\")    // Returns trueTry it Yourself »Array entries()ExampleCreate an Array Iterator, and then iterate over the key/value pairs:const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];const f = fruits.entries();for (let x of f) {document.getElementById(\"demo\").innerHTML += x;}Try it Yourself »Theentries()method returns an Array Iterator object with key/value pairs:[0, \"Banana\"][1, \"Orange\"][2, \"Apple\"][3, \"Mango\"]Theentries()method does not change the original array.Array.from()TheArray.from()method returns an Array object from any object with a length \nproperty or any iterable object.ExampleCreate an Array from a String:Array.from(\"ABCDEFG\")   // Returns [A,B,C,D,E,F,G]Try it Yourself »Array keys()Thekeys()method returns an Array Iterator object with the keys of an array.ExampleCreate an Array Iterator object, containing the keys of the array:const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];const keys = fruits.keys();let text = \"\";for (let x of keys) {text += x + \"<br>\";}Try it Yourself »Array find()Thefind()method returns the value of the first array element that passes a \ntest function.This example finds (returns the value of ) the first element that is larger \nthan 18:Exampleconst numbers = [4, 9, 16, 25, 29];let first = \n  numbers.find(myFunction);function myFunction(value, index, array) {return \n  value > 18;}Try it Yourself »Note that the function takes 3 arguments:The item valueThe item indexThe array itselfArray findIndex()ThefindIndex()method returns the index of the first array element that \npasses a test function.This example finds the index of the first element that is larger than 18:Exampleconst numbers = [4, 9, 16, 25, 29];let first = \n  numbers.findIndex(myFunction);function myFunction(value, index, array) {return \n  value > 18;}Try it Yourself »Note that the function takes 3 arguments:The item valueThe item indexThe array itselfNew Math MethodsES6 added the following methods to the Math object:Math.trunc()Math.sign()Math.cbrt()Math.log2()Math.log10()The Math.trunc() MethodMath.trunc(x)returns the integer part of x:ExampleMath.trunc(4.9);    // returns 4Math.trunc(4.7);    // returns 4Math.trunc(4.4);    // returns 4Math.trunc(4.2);    // returns 4Math.trunc(-4.2);    // returns -4Try it Yourself »The Math.sign() MethodMath.sign(x)returns if x is negative, null or positive:ExampleMath.sign(-4);    // returns -1Math.sign(0);    // returns 0Math.sign(4);    // returns 1Try it Yourself »The Math.cbrt() MethodMath.cbrt(x)returns the cube root of x:ExampleMath.cbrt(8);    // returns 2Math.cbrt(64);    // returns 4Math.cbrt(125);    // returns 5Try it Yourself »The Math.log2() MethodMath.log2(x)returns the base 2 logarithm of x:ExampleMath.log2(2);    // returns 1Try it Yourself »The Math.log10() MethodMath.log10(x)returns the base 10 logarithm of x:ExampleMath.log10(10);    // returns 1Try it Yourself »New Number PropertiesES6 added the following properties to the Number object:EPSILONMIN_SAFE_INTEGERMAX_SAFE_INTEGEREPSILON Examplelet x = Number.EPSILON;Try it Yourself »MIN_SAFE_INTEGER Examplelet x = Number.MIN_SAFE_INTEGER;Try it Yourself »MAX_SAFE_INTEGER Examplelet x = Number.MAX_SAFE_INTEGER;Try it Yourself »The Number.isInteger() MethodTheNumber.isInteger()method returnstrueif the argument is an integer.ExampleNumber.isInteger(10);        // returns trueNumber.isInteger(10.5);      // returns falseTry it Yourself »The Number.isSafeInteger() MethodA safe integer is an integer that can be exactly represented as a double precision number.TheNumber.isSafeInteger()method returnstrueif the argument is a safe integer.ExampleNumber.isSafeInteger(10);    // returns trueNumber.isSafeInteger(12345678901234567890);  // returns falseTry it Yourself »Safe integers are all integers from -(253- 1) to +(253- 1).This is safe: 9007199254740991. This is not safe: 9007199254740992.New Global MethodsES6 added 2 new global number methods:isFinite()isNaN()The isFinite() MethodThe globalisFinite()method returnsfalseif the argument isInfinityorNaN.Otherwise it returnstrue:ExampleisFinite(10/0);       // returns falseisFinite(10/1);       // returns trueTry it Yourself »The isNaN() MethodThe globalisNaN()method returnstrueif the argument isNaN. Otherwise it returnsfalse:ExampleisNaN(\"Hello\");       // returns trueTry it Yourself »ModulesModules are imported in two different ways:Import from named exportsImport named exports from the file person.js:import { name, age } from \"./person.js\";Try it Yourself »Import from default exportsImport a default export from the file message.js:import message from \"./message.js\";Try it Yourself »Learn more about Modules in:JavaScript Modules.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "The ... operator can be used to expand an iterable into more arguments for function calls:",
          "The JavaScriptfor/ofstatement loops \nthrough the values of an iterable objects.",
          "for/oflets you loop over data structures \nthat are iterable such as Arrays, Strings, Maps, NodeLists, and more.",
          "Thefor/ofloop has the following syntax:",
          "variable- For every iteration the value of the next property is \nassigned to the variable.Variablecan be declared withconst,let, orvar.",
          "iterable- An object that has iterable properties.",
          "Learn more in the chapter:JavaScript Loop For/In/Of.",
          "Being able to use an Object as a key is an important Map feature.",
          "Learn more about Map objects, and the difference between a Map and an Array, in the the chapter:JavaScript Maps.",
          "Learn more about Set objects in the the chapter:JavaScript Sets.",
          "JavaScript Classes are templates for JavaScript Objects.",
          "Use the keywordclassto create a class.",
          "Always add a method namedconstructor():",
          "The example above creates a class named \"Car\".",
          "The class has two initial properties: \"name\" and \"year\".",
          "A JavaScript class isnotan object.",
          "It is atemplatefor JavaScript objects.",
          "When you have a class, you can use the class to create objects:",
          "Try it Yourself »",
          "Learn more about classes in the the chapter:JavaScript Classes.",
          "A Promise is a JavaScript object that links \"Producing Code\" and \"Consuming Code\".",
          "\"Producing Code\" can take some time and \"Consuming Code\" must wait for the result.",
          "Try it Yourself »",
          "Learn more about Promises in the the chapter:JavaScript Promises.",
          "A JavaScript Symbol is a primitive data type just like Number, String, or Boolean.",
          "It represents a unique \"hidden\" identifier that no other code can accidentally access.",
          "For instance, if different coders want to add a person.id property to a person object belonging to a third-party code,\nthey could mix each others values.",
          "Using Symbol() to create a unique identifiers, solves this problem:",
          "Symbols are always unique.",
          "If you create two symbols with the same description they will have different values:",
          "ES6 allows function parameters to have default values.",
          "The rest parameter (...) allows a function to treat an indefinite number of arguments as an array:",
          "Theincludes()method returnstrueif a string contains a specified value,\notherwisefalse:",
          "ThestartsWith()method returnstrueif a string begins with a specified value, otherwisefalse:",
          "TheendsWith()method returnstrueif a string ends with a specified value, otherwisefalse:",
          "Create an Array Iterator, and then iterate over the key/value pairs:",
          "Theentries()method returns an Array Iterator object with key/value pairs:",
          "[0, \"Banana\"][1, \"Orange\"][2, \"Apple\"][3, \"Mango\"]",
          "Theentries()method does not change the original array.",
          "TheArray.from()method returns an Array object from any object with a length \nproperty or any iterable object.",
          "Create an Array from a String:",
          "Thekeys()method returns an Array Iterator object with the keys of an array.",
          "Create an Array Iterator object, containing the keys of the array:",
          "Thefind()method returns the value of the first array element that passes a \ntest function.",
          "This example finds (returns the value of ) the first element that is larger \nthan 18:",
          "Note that the function takes 3 arguments:",
          "ThefindIndex()method returns the index of the first array element that \npasses a test function.",
          "This example finds the index of the first element that is larger than 18:",
          "Note that the function takes 3 arguments:",
          "ES6 added the following methods to the Math object:",
          "Math.trunc(x)returns the integer part of x:",
          "Math.sign(x)returns if x is negative, null or positive:",
          "Math.cbrt(x)returns the cube root of x:",
          "Math.log2(x)returns the base 2 logarithm of x:",
          "Math.log10(x)returns the base 10 logarithm of x:",
          "ES6 added the following properties to the Number object:",
          "TheNumber.isInteger()method returnstrueif the argument is an integer.",
          "A safe integer is an integer that can be exactly represented as a double precision number.",
          "TheNumber.isSafeInteger()method returnstrueif the argument is a safe integer.",
          "Safe integers are all integers from -(253- 1) to +(253- 1).This is safe: 9007199254740991. This is not safe: 9007199254740992.",
          "ES6 added 2 new global number methods:",
          "The globalisFinite()method returnsfalseif the argument isInfinityorNaN.",
          "Otherwise it returnstrue:",
          "The globalisNaN()method returnstrueif the argument isNaN. Otherwise it returnsfalse:",
          "Modules are imported in two different ways:",
          "Import named exports from the file person.js:",
          "Try it Yourself »",
          "Import a default export from the file message.js:",
          "Try it Yourself »",
          "Learn more about Modules in:JavaScript Modules."
        ],
        "lists": [
          [
            "The let keyword",
            "The const keyword",
            "Arrow Functions",
            "The {a,b} = Operator",
            "The [a,b] = Operator",
            "The ... Operator",
            "For/of",
            "Map Objects",
            "Set Objects",
            "Classes",
            "Promises",
            "Symbol",
            "Default Parameters",
            "Function Rest Parameter",
            "String.includes()",
            "String.startsWith()",
            "String.endsWith()",
            "Array entries()",
            "Array.from()",
            "Array keys()",
            "Array find()",
            "Array findIndex()",
            "Math.trunc",
            "Math.sign",
            "Math.cbrt",
            "Math.log2",
            "Math.log10",
            "Number.EPSILON",
            "Number.MIN_SAFE_INTEGER",
            "Number.MAX_SAFE_INTEGER",
            "Number.isInteger()",
            "Number.isSafeInteger()",
            "New Global Methods",
            "JavaScript Modules"
          ],
          [
            "The item value",
            "The item index",
            "The array itself"
          ],
          [
            "The item value",
            "The item index",
            "The array itself"
          ],
          [
            "Math.trunc()",
            "Math.sign()",
            "Math.cbrt()",
            "Math.log2()",
            "Math.log10()"
          ],
          [
            "EPSILON",
            "MIN_SAFE_INTEGER",
            "MAX_SAFE_INTEGER"
          ],
          [
            "isFinite()",
            "isNaN()"
          ]
        ],
        "examples": [
          "var x = 10;// Here x is 10{let x = 2;// Here x is 2}// Here x is 10",
          "var x = 10;// Here x is 10{const x = 2;// Here x is 2}// Here x is 10",
          "// ES5var x = function(x, y) {return x * y;}// ES6const x = (x, y) => x * y;",
          "const x = (x, y) => { return x * y };",
          "// Create an Objectconst person = {firstName: \"John\",lastName: \"Doe\",age: 50,eyeColor: \"blue\"};// Destructuring Assignmentlet { firstName, age } = person;",
          "// Create an Arrayconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];// Destructuring Assignmentlet [fruit1, fruit2] = fruits;",
          "const q1 = [\"Jan\", \"Feb\", \"Mar\"];const q2 = [\"Apr\", \"May\", \"Jun\"];const q3 = [\"Jul\", \"Aug\", \"Sep\"];const q4 = [\"Oct\", \"Nov\", \"May\"];const year = [...q1, ...q2, ...q3, ...q4];",
          "const numbers = [23,55,21,87,56];let maxValue = Math.max(...numbers);",
          "for (variableofiterable) {//code block to be executed}",
          "const cars = [\"BMW\", \"Volvo\", \"Mini\"];let text = \"\";for (let x of cars) {text += x + \" \";}",
          "let language = \"JavaScript\";let text = \"\";for (let x of language) {text += x + \" \";}",
          "const fruits = new Map([[\"apples\", 500],[\"bananas\", 300],[\"oranges\", 200]]);",
          "// Create a Setconst letters = new Set();// Add some values to the Setletters.add(\"a\");letters.add(\"b\");letters.add(\"c\");",
          "class ClassName {constructor() { ... }}",
          "class Car {constructor(name, year) {this.name = name;this.year = year;}}",
          "const myCar1 = new Car(\"Ford\", 2014);const myCar2 = new Car(\"Audi\", 2019);",
          "const myPromise = new Promise(function(myResolve, myReject) {// \"Producing Code\" (May take some time)myResolve(); // when successfulmyReject();  // when error});// \"Consuming Code\" (Must wait for a fulfilled Promise).myPromise.then(function(value) { /* code if successful */ },function(error) { /* code if some error */ });",
          "const myPromise = new Promise(function(myResolve, myReject) {setTimeout(function() { myResolve(\"I love You !!\"); }, 3000);});myPromise.then(function(value) {document.getElementById(\"demo\").innerHTML = value;});",
          "const person = {firstName: \"John\",lastName: \"Doe\",age: 50,eyeColor: \"blue\"};let id = Symbol('id');person[id] = 140353;// Now person[id] = 140353// but person.id is still undefined",
          "Symbol(\"id\") == Symbol(\"id\"); // false",
          "function myFunction(x, y = 10) {// y is 10 if not passed or undefinedreturn x + y;}myFunction(5); // will return 15",
          "function sum(...args) {let sum = 0;for (let arg of args) sum += arg;return sum;}let x = sum(4, 9, 16, 25, 29, 100, 66, 77);",
          "let text = \"Hello world, welcome to the universe.\";text.includes(\"world\")    // Returns true",
          "let text = \"Hello world, welcome to the universe.\";text.startsWith(\"Hello\")   // Returns true",
          "var text = \"John Doe\";text.endsWith(\"Doe\")    // Returns true",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];const f = fruits.entries();for (let x of f) {document.getElementById(\"demo\").innerHTML += x;}",
          "Array.from(\"ABCDEFG\")   // Returns [A,B,C,D,E,F,G]",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];const keys = fruits.keys();let text = \"\";for (let x of keys) {text += x + \"<br>\";}",
          "const numbers = [4, 9, 16, 25, 29];let first = \n  numbers.find(myFunction);function myFunction(value, index, array) {return \n  value > 18;}",
          "const numbers = [4, 9, 16, 25, 29];let first = \n  numbers.findIndex(myFunction);function myFunction(value, index, array) {return \n  value > 18;}",
          "Math.trunc(4.9);    // returns 4Math.trunc(4.7);    // returns 4Math.trunc(4.4);    // returns 4Math.trunc(4.2);    // returns 4Math.trunc(-4.2);    // returns -4",
          "Math.sign(-4);    // returns -1Math.sign(0);    // returns 0Math.sign(4);    // returns 1",
          "Math.cbrt(8);    // returns 2Math.cbrt(64);    // returns 4Math.cbrt(125);    // returns 5",
          "Math.log2(2);    // returns 1",
          "Math.log10(10);    // returns 1",
          "let x = Number.EPSILON;",
          "let x = Number.MIN_SAFE_INTEGER;",
          "let x = Number.MAX_SAFE_INTEGER;",
          "Number.isInteger(10);        // returns trueNumber.isInteger(10.5);      // returns false",
          "Number.isSafeInteger(10);    // returns trueNumber.isSafeInteger(12345678901234567890);  // returns false",
          "isFinite(10/0);       // returns falseisFinite(10/1);       // returns true",
          "isNaN(\"Hello\");       // returns true",
          "import { name, age } from \"./person.js\";",
          "import message from \"./message.js\";"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_2016.asp",
    "cours": {
      "titre": "ECMAScript 2016",
      "description": "JavaScript Version NumbersOld ECMAScript versions was named by numbers: ES5 and ES6.From 2016, versions are named by year: ES2016, 2018, 2020 ...",
      "lien": "https://www.w3schools.com/js/js_2016.asp",
      "contenus": {
        "paragraphs": [
          "Old ECMAScript versions was named by numbers: ES5 and ES6.",
          "From 2016, versions are named by year: ES2016, 2018, 2020 ...",
          "This chapter introduces the new features in ECMAScript 2016:",
          "ES 2016 is fully supported in all modern browsers since March 2017:",
          "ES 2016 is not supported in Internet Explorer.",
          "Theexponentiationoperator (**) raises the first operand to the power of the second operand.",
          "x ** yproduces the same result asMath.pow(x, y):",
          "The Exponentiation Operator is supported in all modern browsers since March 2017:",
          "ECMAScript 2016 introducedArray.includesto arrays.",
          "This allows us to check if an element is present in an array:",
          "Array.includesis supported in all modern browsers since August 2016:"
        ],
        "lists": [
          [
            "JavaScript Exponentiation (**)",
            "JavaScript Exponentiation assignment (**=)",
            "JavaScript Array includes()"
          ]
        ],
        "examples": [
          "let x = 5;let z = x ** 2;",
          "let x = 5;let z = Math.pow(x,2);",
          "let x = 5;x **= 2;",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits.includes(\"Mango\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_2017.asp",
    "cours": {
      "titre": "ECMAScript 2017",
      "description": "JavaScript Version NumbersOld ECMAScript versions was named by numbers: ES5 and ES6.From 2016, versions are named by year: ES2016, 2018, 2020 ...",
      "lien": "https://www.w3schools.com/js/js_2017.asp",
      "contenus": {
        "paragraphs": [
          "Old ECMAScript versions was named by numbers: ES5 and ES6.",
          "From 2016, versions are named by year: ES2016, 2018, 2020 ...",
          "This chapter introduces the new features in ECMAScript 2017:",
          "ES 2017 is fully supported in all modern browsers since September 2017:",
          "ECMAScript 2017 added two string methods to JavaScript:padStart()andpadEnd()to support padding at the beginning and at the end of a string.",
          "JavaScript string padding is supported in all modern browsers since April 2017:",
          "ECMAScript 2017 added theObject.entries()method to objects.",
          "Object.entries()returns an array of the key/value pairs in an object:",
          "Object.entries()makes it simple to use objects in loops:",
          "Object.entries()also makes it simple to convert objects to maps:",
          "Object.entries()is supported in all modern browsers since March 2017:",
          "Object.values()is similar toObject.entries(),\nbut returns a single dimension array of the object values:",
          "Object.values()is supported in all modern browsers since March 2017:",
          "Try it Yourself »",
          "Async functions are supported in all modern browsers since September 2017:",
          "JavaScript allows trailing commas wherever a comma-separated list of values is accepted.",
          "In Array and Object Literals, Function Calls, Parameters, Imports and Exports.",
          "Trailing commas are supported in all modern browsers since May 2017:"
        ],
        "lists": [
          [
            "JavaScript String padding",
            "JavaScript Object entries()",
            "JavaScript Object values()",
            "JavaScript async and await",
            "Trailing Commas in Functions",
            "JavaScript Object.getOwnPropertyDescriptors"
          ]
        ],
        "examples": [
          "let text = \"5\";text = text.padStart(4,0);",
          "let text = \"5\";text = text.padEnd(4,0);",
          "const person = {firstName : \"John\",lastName : \"Doe\",age : 50,eyeColor : \"blue\"};let text = Object.entries(person);",
          "const fruits = {Bananas:300, Oranges:200, Apples:500};let text = \"\";for (let [fruit, value] of Object.entries(fruits)) {text += fruit + \": \" + value + \"<br>\";}",
          "const fruits = {Bananas:300, Oranges:200, Apples:500};const myMap = new Map(Object.entries(fruits));",
          "const person = {firstName : \"John\",lastName : \"Doe\",age : 50,eyeColor : \"blue\"};let text = Object.values(person);",
          "async function myDisplay() {let myPromise = new Promise(function(myResolve,  myReject) {setTimeout(function() { myResolve(\"I love You !!\"); }, 3000);});document.getElementById(\"demo\").innerHTML = await myPromise;}myDisplay();",
          "function myFunc(x,,,) {};const myArr = [1,2,3,4,,,];const myObj = {fname: John, age:50,,,};"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_2018.asp",
    "cours": {
      "titre": "ECMAScript 2018",
      "description": "JavaScript Version NumbersOld ECMAScript versions was named by numbers: ES5 and ES6.From 2016, versions are named by year: ES2016, 2018, 2020 ...",
      "lien": "https://www.w3schools.com/js/js_2018.asp",
      "contenus": {
        "paragraphs": [
          "Old ECMAScript versions was named by numbers: ES5 and ES6.",
          "From 2016, versions are named by year: ES2016, 2018, 2020 ...",
          "This chapter introduces the new features in ECMAScript 2018:",
          "ECMAScript 2018 added asynchronous iterators and iterables.",
          "With asynchronous iterables, we can use theawaitkeyword infor/ofloops.Examplefor await () {}JavaScript asynchronous iteration is supported in all modern browsers since January 2020:Chrome 63Edge 79Firefox 57Safari 11Opera 50Dec 2017Jan 2020Nov 2017Sep 2017Jan 2018JavaScript Promise.finallyECMAScript 2018 finalizes the full implementation of the Promise object withPromise.finally:Examplelet myPromise = new Promise();myPromise.then();myPromise.catch();myPromise.finally();Promise.finallyis supported in all modern browsers since November 2018:Chrome 63Edge 18Firefox 58Safari 11.1Opera 50Dec 2017Nov 2018Jan 2018Mar 2018Jan 2018JavaScript Object Rest PropertiesECMAScript 2018 added rest properties.This allows us to destruct an object and collect the leftovers onto a new object:Examplelet { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };x; // 1y; // 2z; // { a: 3, b: 4 }Object rest properties is supported in all modern browsers since January 2020:Chrome 60Edge 79Firefox 55Safari 11.1Opera 47Jul 2017Jan 2020Aug 2017Mar 2018Aug 2017New JavaScript RegExp FeaturesECMAScript 2018 added 4 new RegExp features:Unicode Property Escapes (\\p{...})Lookbehind Assertions (?<= ) and (?<! )Named Capture Groupss (dotAll) FlagThe new RegExp features is supported in all modern browsers since June 2020:Chrome 64Edge 79Firefox 78Safari 12Opera 51Jan 2018Jan 2020Jun 2020Sep 2018Feb 2018JavaScript ThreadsIn JavaScript you use the Web Workers API to create threads.Worker threads are used to execute code in the background so that the main program can continue execution.Worker threads run simultaneously with the main program. Simultaneous execution of different parts\nof a program can be time-saving.JavaScript Shared MemoryShared memory is a feature that allows threads (different parts of a program) to\naccess and update the same data in the same memory.Instead of passing data between threads, you can pass a SharedArrayBuffer object\nthat points to the memory where data is saved.SharedArrayBufferA SharedArrayBuffer object represents a fixed-length raw binary data buffer similar to the ArrayBuffer object.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "JavaScript asynchronous iteration is supported in all modern browsers since January 2020:",
          "ECMAScript 2018 finalizes the full implementation of the Promise object withPromise.finally:",
          "Promise.finallyis supported in all modern browsers since November 2018:",
          "ECMAScript 2018 added rest properties.",
          "This allows us to destruct an object and collect the leftovers onto a new object:",
          "Object rest properties is supported in all modern browsers since January 2020:",
          "ECMAScript 2018 added 4 new RegExp features:",
          "The new RegExp features is supported in all modern browsers since June 2020:",
          "In JavaScript you use the Web Workers API to create threads.",
          "Worker threads are used to execute code in the background so that the main program can continue execution.",
          "Worker threads run simultaneously with the main program. Simultaneous execution of different parts\nof a program can be time-saving.",
          "Shared memory is a feature that allows threads (different parts of a program) to\naccess and update the same data in the same memory.",
          "Instead of passing data between threads, you can pass a SharedArrayBuffer object\nthat points to the memory where data is saved.",
          "A SharedArrayBuffer object represents a fixed-length raw binary data buffer similar to the ArrayBuffer object."
        ],
        "lists": [
          [
            "Asynchronous Iteration",
            "Promise Finally",
            "Object Rest Properties",
            "New RegExp Features",
            "JavaScript Shared Memory"
          ],
          [
            "Unicode Property Escapes (\\p{...})",
            "Lookbehind Assertions (?<= ) and (?<! )",
            "Named Capture Groups",
            "s (dotAll) Flag"
          ]
        ],
        "examples": [
          "for await () {}",
          "let myPromise = new Promise();myPromise.then();myPromise.catch();myPromise.finally();",
          "let { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };x; // 1y; // 2z; // { a: 3, b: 4 }"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_2019.asp",
    "cours": {
      "titre": "ECMAScript 2019",
      "description": "JavaScript Version NumbersOld ECMAScript versions was named by numbers: ES5 and ES6.From 2016, versions are named by year: ES2016, 2018, 2020 ...",
      "lien": "https://www.w3schools.com/js/js_2019.asp",
      "contenus": {
        "paragraphs": [
          "Old ECMAScript versions was named by numbers: ES5 and ES6.",
          "From 2016, versions are named by year: ES2016, 2018, 2020 ...",
          "ES2019 added the String methodtrimStart()to JavaScript.ThetrimStart()method works liketrim(), but removes whitespace only from the start of a string.Examplelet text1 = \"     Hello World!     \";let text2 = text1.trimStart();Try it Yourself »JavaScript StringtrimStart()is supported in all modern browsers since January 2020:Chrome 66Edge 79Firefox 61Safari 12Opera 50Apr 2018Jan 2020Jun 2018Sep 2018May 2018JavaScript String trimEnd()ES2019 added the String methodtrimEnd()to JavaScript.ThetrimEnd()method works liketrim(), but removes whitespace only from the end of a string.Examplelet text1 = \"     Hello World!     \";let text2 = text1.trimEnd();Try it Yourself »JavaScript StringtrimEnd()is supported in all modern browsers since January 2020:Chrome 66Edge 79Firefox 61Safari 12Opera 50Apr 2018Jan 2020Jun 2018Sep 2018May 2018JavaScript Object fromEntries()ES2019 added the Object methodfromEntries()to JavaScript.ThefromEntries()method creates an object from iterable key / value pairs.Exampleconst fruits = [[\"apples\", 300],[\"pears\", 900],[\"bananas\", 500]];const myObj = Object.fromEntries(fruits);Try it Yourself »JavaScript ObjectfromEntries()is supported in all modern browsers since January 2020:Chrome 73Edge 79Firefox 63Safari 12.1Opera 60Mar 2019Jan 2020Oct 2018Mar 2019Apr 2019Optional catch BindingFrom ES2019 you can omit the catch parameter if you don't need it:.ExampleBefore 2019:try {// code} catch (err) {// code}After 2019:try {// code} catch {// code}Optional catch binding is supported in all modern browsers since January 2020:Chrome 66Edge 79Firefox 58Safari 11.1Opera 53Apr 2018Jan 2020Jan 2018Mar 2018May 2018JavaScript Array flat()ES2019 added the Arrayflat()method to JavaScript.Theflat()method creates a new array by flattening a nested array.Exampleconst myArr = [[1,2],[3,4],[5,6]];const newArr = myArr.flat();Try it Yourself »JavaScript Arrayflat()is supported in all modern browsers since January 2020:Chrome 69Edge 79Firefox 62Safari 12Opera 56Sep 2018Jan 2020Sep 2018Sep 2018Sep 2018JavaScript Array flatMap()ES2019 added the ArrayflatMap()method to JavaScript.TheflatMap()method first maps all elements of an array\nand then creates a new array by flattening the array.Exampleconst myArr = [1, 2, 3, 4, 5, 6];const newArr = myArr.flatMap(x => [x, x * 10]);Try it Yourself »Stable Array sort()ES2019revisedthe Arraysort()method.Before 2019, the specification allowed unstable sorting algorithms such as QuickSort.After ES2019, browsers must use a stable sorting algorithm:When sorting elements on a value, the elements must keep their relative position to other elements with the same value.Exampleconst myArr = [{name:\"X00\",price:100 },{name:\"X01\",price:100 },{name:\"X02\",price:100 },{name:\"X03\",price:100 },{name:\"X04\",price:110 },{name:\"X05\",price:110 },{name:\"X06\",price:110 },{name:\"X07\",price:110 }];Try it Yourself »In the example above, when sorting on price, the result should not have names in a different relative position, such as this:X01 100X03 100X00 100X03 100X05 110X04 110X06 110X07 110Revised JSON.stringify()ES2019revisedthe JSONstringify()method.Before 2019, JSON could not stringify character encoded with \\.Examplelet text = JSON.stringify(\"\\u26D4\");Try it Yourself »Before ES2019, usingJSON.stringify()JSON on UTF-8 code points (U+D800 to U+DFFF)\nreturned broken Unicode characters like ���.After this revision, strings with UTF-8 code points convert safely withJSON.stringify(),\nand back to the original usingJSON.parse().Separator SymbolsLine separators and paragraph separator symbols (\\u2028 and \\u2029) are now allowed in string literals.Before 2019, these were treated as line terminators and resulted in error exceptions:Example// This is valid in ES2019:let text = \"\\u2028\";Try it Yourself »NoteNow, JavaScript and JSON have equal rules.Before ES2019:text = JSON.parse('\"\\u2028\"') would parse to ''.text = '\"\\u2028\"' would givesyntax error.Revised Function toString()ES2019revisedthe FunctiontoString()method.ThetoString()method returns a string representing the source code of a function.From 2019, toString() must return the source code of the function including comments,\nspaces, and syntax details.Before 2019, different browsers returned different variants of the function (like without comments and spaces).\nFrom 2019 the function should be returned exactly as it is written.Examplefunction myFunction(p1, p2) {return p1 * p2;}Try it Yourself »❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "ThetrimStart()method works liketrim(), but removes whitespace only from the start of a string.",
          "JavaScript StringtrimStart()is supported in all modern browsers since January 2020:",
          "ES2019 added the String methodtrimEnd()to JavaScript.ThetrimEnd()method works liketrim(), but removes whitespace only from the end of a string.Examplelet text1 = \"     Hello World!     \";let text2 = text1.trimEnd();Try it Yourself »JavaScript StringtrimEnd()is supported in all modern browsers since January 2020:Chrome 66Edge 79Firefox 61Safari 12Opera 50Apr 2018Jan 2020Jun 2018Sep 2018May 2018JavaScript Object fromEntries()ES2019 added the Object methodfromEntries()to JavaScript.ThefromEntries()method creates an object from iterable key / value pairs.Exampleconst fruits = [[\"apples\", 300],[\"pears\", 900],[\"bananas\", 500]];const myObj = Object.fromEntries(fruits);Try it Yourself »JavaScript ObjectfromEntries()is supported in all modern browsers since January 2020:Chrome 73Edge 79Firefox 63Safari 12.1Opera 60Mar 2019Jan 2020Oct 2018Mar 2019Apr 2019Optional catch BindingFrom ES2019 you can omit the catch parameter if you don't need it:.ExampleBefore 2019:try {// code} catch (err) {// code}After 2019:try {// code} catch {// code}Optional catch binding is supported in all modern browsers since January 2020:Chrome 66Edge 79Firefox 58Safari 11.1Opera 53Apr 2018Jan 2020Jan 2018Mar 2018May 2018JavaScript Array flat()ES2019 added the Arrayflat()method to JavaScript.Theflat()method creates a new array by flattening a nested array.Exampleconst myArr = [[1,2],[3,4],[5,6]];const newArr = myArr.flat();Try it Yourself »JavaScript Arrayflat()is supported in all modern browsers since January 2020:Chrome 69Edge 79Firefox 62Safari 12Opera 56Sep 2018Jan 2020Sep 2018Sep 2018Sep 2018JavaScript Array flatMap()ES2019 added the ArrayflatMap()method to JavaScript.TheflatMap()method first maps all elements of an array\nand then creates a new array by flattening the array.Exampleconst myArr = [1, 2, 3, 4, 5, 6];const newArr = myArr.flatMap(x => [x, x * 10]);Try it Yourself »Stable Array sort()ES2019revisedthe Arraysort()method.Before 2019, the specification allowed unstable sorting algorithms such as QuickSort.After ES2019, browsers must use a stable sorting algorithm:When sorting elements on a value, the elements must keep their relative position to other elements with the same value.Exampleconst myArr = [{name:\"X00\",price:100 },{name:\"X01\",price:100 },{name:\"X02\",price:100 },{name:\"X03\",price:100 },{name:\"X04\",price:110 },{name:\"X05\",price:110 },{name:\"X06\",price:110 },{name:\"X07\",price:110 }];Try it Yourself »In the example above, when sorting on price, the result should not have names in a different relative position, such as this:X01 100X03 100X00 100X03 100X05 110X04 110X06 110X07 110Revised JSON.stringify()ES2019revisedthe JSONstringify()method.Before 2019, JSON could not stringify character encoded with \\.Examplelet text = JSON.stringify(\"\\u26D4\");Try it Yourself »Before ES2019, usingJSON.stringify()JSON on UTF-8 code points (U+D800 to U+DFFF)\nreturned broken Unicode characters like ���.After this revision, strings with UTF-8 code points convert safely withJSON.stringify(),\nand back to the original usingJSON.parse().Separator SymbolsLine separators and paragraph separator symbols (\\u2028 and \\u2029) are now allowed in string literals.Before 2019, these were treated as line terminators and resulted in error exceptions:Example// This is valid in ES2019:let text = \"\\u2028\";Try it Yourself »NoteNow, JavaScript and JSON have equal rules.Before ES2019:text = JSON.parse('\"\\u2028\"') would parse to ''.text = '\"\\u2028\"' would givesyntax error.Revised Function toString()ES2019revisedthe FunctiontoString()method.ThetoString()method returns a string representing the source code of a function.From 2019, toString() must return the source code of the function including comments,\nspaces, and syntax details.Before 2019, different browsers returned different variants of the function (like without comments and spaces).\nFrom 2019 the function should be returned exactly as it is written.Examplefunction myFunction(p1, p2) {return p1 * p2;}Try it Yourself »❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "ThetrimEnd()method works liketrim(), but removes whitespace only from the end of a string.",
          "JavaScript StringtrimEnd()is supported in all modern browsers since January 2020:",
          "ES2019 added the Object methodfromEntries()to JavaScript.ThefromEntries()method creates an object from iterable key / value pairs.Exampleconst fruits = [[\"apples\", 300],[\"pears\", 900],[\"bananas\", 500]];const myObj = Object.fromEntries(fruits);Try it Yourself »JavaScript ObjectfromEntries()is supported in all modern browsers since January 2020:Chrome 73Edge 79Firefox 63Safari 12.1Opera 60Mar 2019Jan 2020Oct 2018Mar 2019Apr 2019Optional catch BindingFrom ES2019 you can omit the catch parameter if you don't need it:.ExampleBefore 2019:try {// code} catch (err) {// code}After 2019:try {// code} catch {// code}Optional catch binding is supported in all modern browsers since January 2020:Chrome 66Edge 79Firefox 58Safari 11.1Opera 53Apr 2018Jan 2020Jan 2018Mar 2018May 2018JavaScript Array flat()ES2019 added the Arrayflat()method to JavaScript.Theflat()method creates a new array by flattening a nested array.Exampleconst myArr = [[1,2],[3,4],[5,6]];const newArr = myArr.flat();Try it Yourself »JavaScript Arrayflat()is supported in all modern browsers since January 2020:Chrome 69Edge 79Firefox 62Safari 12Opera 56Sep 2018Jan 2020Sep 2018Sep 2018Sep 2018JavaScript Array flatMap()ES2019 added the ArrayflatMap()method to JavaScript.TheflatMap()method first maps all elements of an array\nand then creates a new array by flattening the array.Exampleconst myArr = [1, 2, 3, 4, 5, 6];const newArr = myArr.flatMap(x => [x, x * 10]);Try it Yourself »Stable Array sort()ES2019revisedthe Arraysort()method.Before 2019, the specification allowed unstable sorting algorithms such as QuickSort.After ES2019, browsers must use a stable sorting algorithm:When sorting elements on a value, the elements must keep their relative position to other elements with the same value.Exampleconst myArr = [{name:\"X00\",price:100 },{name:\"X01\",price:100 },{name:\"X02\",price:100 },{name:\"X03\",price:100 },{name:\"X04\",price:110 },{name:\"X05\",price:110 },{name:\"X06\",price:110 },{name:\"X07\",price:110 }];Try it Yourself »In the example above, when sorting on price, the result should not have names in a different relative position, such as this:X01 100X03 100X00 100X03 100X05 110X04 110X06 110X07 110Revised JSON.stringify()ES2019revisedthe JSONstringify()method.Before 2019, JSON could not stringify character encoded with \\.Examplelet text = JSON.stringify(\"\\u26D4\");Try it Yourself »Before ES2019, usingJSON.stringify()JSON on UTF-8 code points (U+D800 to U+DFFF)\nreturned broken Unicode characters like ���.After this revision, strings with UTF-8 code points convert safely withJSON.stringify(),\nand back to the original usingJSON.parse().Separator SymbolsLine separators and paragraph separator symbols (\\u2028 and \\u2029) are now allowed in string literals.Before 2019, these were treated as line terminators and resulted in error exceptions:Example// This is valid in ES2019:let text = \"\\u2028\";Try it Yourself »NoteNow, JavaScript and JSON have equal rules.Before ES2019:text = JSON.parse('\"\\u2028\"') would parse to ''.text = '\"\\u2028\"' would givesyntax error.Revised Function toString()ES2019revisedthe FunctiontoString()method.ThetoString()method returns a string representing the source code of a function.From 2019, toString() must return the source code of the function including comments,\nspaces, and syntax details.Before 2019, different browsers returned different variants of the function (like without comments and spaces).\nFrom 2019 the function should be returned exactly as it is written.Examplefunction myFunction(p1, p2) {return p1 * p2;}Try it Yourself »❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "ThefromEntries()method creates an object from iterable key / value pairs.",
          "JavaScript ObjectfromEntries()is supported in all modern browsers since January 2020:",
          "From ES2019 you can omit the catch parameter if you don't need it:.",
          "Before 2019:",
          "After 2019:",
          "Optional catch binding is supported in all modern browsers since January 2020:",
          "ES2019 added the Arrayflat()method to JavaScript.",
          "Theflat()method creates a new array by flattening a nested array.",
          "JavaScript Arrayflat()is supported in all modern browsers since January 2020:",
          "ES2019 added the ArrayflatMap()method to JavaScript.",
          "TheflatMap()method first maps all elements of an array\nand then creates a new array by flattening the array.",
          "ES2019revisedthe Arraysort()method.",
          "Before 2019, the specification allowed unstable sorting algorithms such as QuickSort.",
          "After ES2019, browsers must use a stable sorting algorithm:",
          "When sorting elements on a value, the elements must keep their relative position to other elements with the same value.",
          "In the example above, when sorting on price, the result should not have names in a different relative position, such as this:",
          "ES2019revisedthe JSONstringify()method.",
          "Before 2019, JSON could not stringify character encoded with \\.",
          "Before ES2019, usingJSON.stringify()JSON on UTF-8 code points (U+D800 to U+DFFF)\nreturned broken Unicode characters like ���.",
          "After this revision, strings with UTF-8 code points convert safely withJSON.stringify(),\nand back to the original usingJSON.parse().Separator SymbolsLine separators and paragraph separator symbols (\\u2028 and \\u2029) are now allowed in string literals.Before 2019, these were treated as line terminators and resulted in error exceptions:Example// This is valid in ES2019:let text = \"\\u2028\";Try it Yourself »NoteNow, JavaScript and JSON have equal rules.Before ES2019:text = JSON.parse('\"\\u2028\"') would parse to ''.text = '\"\\u2028\"' would givesyntax error.Revised Function toString()ES2019revisedthe FunctiontoString()method.ThetoString()method returns a string representing the source code of a function.From 2019, toString() must return the source code of the function including comments,\nspaces, and syntax details.Before 2019, different browsers returned different variants of the function (like without comments and spaces).\nFrom 2019 the function should be returned exactly as it is written.Examplefunction myFunction(p1, p2) {return p1 * p2;}Try it Yourself »❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "Line separators and paragraph separator symbols (\\u2028 and \\u2029) are now allowed in string literals.",
          "Before 2019, these were treated as line terminators and resulted in error exceptions:",
          "Now, JavaScript and JSON have equal rules.",
          "Before ES2019:",
          "text = JSON.parse('\"\\u2028\"') would parse to ''.",
          "text = '\"\\u2028\"' would givesyntax error.",
          "ES2019revisedthe FunctiontoString()method.",
          "ThetoString()method returns a string representing the source code of a function.",
          "From 2019, toString() must return the source code of the function including comments,\nspaces, and syntax details.",
          "Before 2019, different browsers returned different variants of the function (like without comments and spaces).\nFrom 2019 the function should be returned exactly as it is written."
        ],
        "lists": [
          [
            "String.trimStart()",
            "String.trimEnd()",
            "Object.fromEntries",
            "Optional catch binding",
            "Array.flat()",
            "Array.flatMap()",
            "Revised Array.Sort()",
            "Revised JSON.stringify()",
            "Separator symbols allowed in string litterals",
            "Revised Function.toString()"
          ]
        ],
        "examples": [
          "let text1 = \"     Hello World!     \";let text2 = text1.trimStart();",
          "let text1 = \"     Hello World!     \";let text2 = text1.trimEnd();",
          "const fruits = [[\"apples\", 300],[\"pears\", 900],[\"bananas\", 500]];const myObj = Object.fromEntries(fruits);",
          "try {// code} catch (err) {// code}",
          "try {// code} catch {// code}",
          "const myArr = [[1,2],[3,4],[5,6]];const newArr = myArr.flat();",
          "const myArr = [1, 2, 3, 4, 5, 6];const newArr = myArr.flatMap(x => [x, x * 10]);",
          "const myArr = [{name:\"X00\",price:100 },{name:\"X01\",price:100 },{name:\"X02\",price:100 },{name:\"X03\",price:100 },{name:\"X04\",price:110 },{name:\"X05\",price:110 },{name:\"X06\",price:110 },{name:\"X07\",price:110 }];",
          "X01 100X03 100X00 100X03 100X05 110X04 110X06 110X07 110",
          "let text = JSON.stringify(\"\\u26D4\");",
          "// This is valid in ES2019:let text = \"\\u2028\";",
          "function myFunction(p1, p2) {return p1 * p2;}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_2020.asp",
    "cours": {
      "titre": "ECMAScript 2020",
      "description": "JavaScript Version NumbersOld ECMAScript versions was named by numbers: ES5 and ES6.From 2016, versions are named by year: ES2016, 2018, 2020 ...",
      "lien": "https://www.w3schools.com/js/js_2020.asp",
      "contenus": {
        "paragraphs": [
          "Old ECMAScript versions was named by numbers: ES5 and ES6.",
          "From 2016, versions are named by year: ES2016, 2018, 2020 ...",
          "These features are relatively new.",
          "Older browsers may need an alternative code (Polyfill)",
          "JavaScriptBigIntvariables are used to store big integer values\nthat are too big to be represented by a a normal JavaScriptNumber.",
          "JavaScript integers are only accurate up to about 15 digits.",
          "To create aBigInt, append n to the end of an integer or callBigInt():",
          "The JavaScripttypeofaBigIntis \"bigint\":",
          "BigIntis supported in all modern browsers since September 2020:",
          "Before ES2020 there was no string method that could be used to search for all occurrences\nof a string in a string.",
          "If the parameter is a regular expression, the global flag (g) must be set set, otherwise\na TypeError is thrown.",
          "If you want to search case insensitive, the insensitive flag (i) must be set:",
          "ES2021introduced the string method replaceAll().",
          "The??operator returns the first argument if it is notnullish(nullorundefined).",
          "Otherwise it returns the second.",
          "The nullish operator is supported in all modern browsers since March 2020:",
          "TheOptional Chaining Operatorreturnsundefinedif an object isundefinedornull(instead of throwing an error).",
          "The?.=operator is supported in all modern browsers since March 2020:",
          "TheLogical AND Assignment Operatoris used between two values.",
          "If the first value istrue, the second value is assigned.",
          "The&&=operator is supported in all modern browsers since September 2020:",
          "TheLogical OR Assignment Operatoris used between two values.",
          "If the first value isfalse, the second value is assigned.",
          "The||=operator is supported in all modern browsers since September 2020:",
          "TheNullish Coalescing Assignment Operatoris used between two values.",
          "If the first value isundefinedornull, the second value is assigned.",
          "The??=operator is supported in all modern browsers since September 2020:",
          "ThePromise.allSettled()method returns a single Promise from a list of promises.",
          "Promise.allSettled()is supported in all modern browsers since March 2020:"
        ],
        "lists": [
          [
            "BigInt",
            "String matchAll()",
            "The Nullish Coalescing Operator (??)",
            "The Optional Chaining Operator (?.)",
            "Logical AND Assignment Operator (&&=)",
            "Logical OR Assignment (||=)",
            "Nullish Coalescing Assignment (??=)",
            "Promise.allSettled()",
            "Dynamic Import"
          ]
        ],
        "examples": [
          "let x = 999999999999999;let y = 9999999999999999; // too big",
          "let x = 9999999999999999;let y = 9999999999999999n;",
          "let x = 1234567890123456789012345n;let y = BigInt(1234567890123456789012345)",
          "let x = BigInt(999999999999999);let type = typeof x;",
          "const iterator = text.matchAll(\"Cats\");",
          "const iterator = text.matchAll(/Cats/g);",
          "const iterator = text.matchAll(/Cats/gi);",
          "let name = null;let text = \"missing\";let result = name ?? text;",
          "const car = {type:\"Fiat\", model:\"500\", color:\"white\"};let name = car?.name;",
          "let x = 10;x &&= 5;",
          "let x = 10;x ||= 5;",
          "let x;x ??= 5;",
          "// Create a Promiseconst myPromise1 = new Promise((resolve, reject) => {setTimeout(resolve, 200, \"King\");});// Create another Promiseconst myPromise2 = new Promise((resolve, reject) => {setTimeout(resolve, 100, \"Queen\");});// Settle AllPromise.allSettled([myPromise1, myPromise2]).then((results) =>results.forEach((x) => myDisplay(x.status)),);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_2021.asp",
    "cours": {
      "titre": "ECMAScript 2021",
      "description": "JavaScript Version NumbersOld ECMAScript versions was named by numbers: ES5 and ES6.From 2016, versions are named by year: ES2016, 2018, 2020 ...",
      "lien": "https://www.w3schools.com/js/js_2021.asp",
      "contenus": {
        "paragraphs": [
          "Old ECMAScript versions was named by numbers: ES5 and ES6.",
          "From 2016, versions are named by year: ES2016, 2018, 2020 ...",
          "These features are relatively new.",
          "Older browsers may need an alternative code (Polyfill)",
          "Promise.any()is supported in all modern browsers since September 2020:",
          "ES2021 introduced the string methodreplaceAll():",
          "ThereplaceAll()method allows you to specify a\nregular expression instead of a string to be replaced.",
          "If the parameter is a regular expression, the global flag (g) must be set, otherwise\na TypeError is thrown.",
          "ES2020introduced the string method matchAll().",
          "ES2021 intoduced the numeric separator (_) to make numbers more readable:",
          "The numeric separator is only for visual use.",
          "The numeric separator can be placed anywhere in a number:",
          "The numeric separator is not allowed at the beginning or at the end of a number.",
          "In JavaScript only variables can start with _.",
          "The numeric separator is supported in all modern browsers since January 2020:"
        ],
        "lists": [
          [
            "Promise.any()",
            "String replaceAll()",
            "Numeric Separators (_)"
          ]
        ],
        "examples": [
          "// Create a Promiseconst myPromise1 = new Promise((resolve, reject) => {setTimeout(resolve, 200, \"King\");});// Create another Promiseconst myPromise2 = new Promise((resolve, reject) => {setTimeout(resolve, 100, \"Queen\");});// Run when any promise fulfillPromise.any([myPromise1, myPromise2]).then((x) => {myDisplay(x);});",
          "text = text.replaceAll(\"Cats\",\"Dogs\");text = text.replaceAll(\"cats\",\"dogs\");",
          "text = text.replaceAll(/Cats/g,\"Dogs\");text = text.replaceAll(/cats/g,\"dogs\");",
          "const num = 1_000_000_000;",
          "const num1 = 1_000_000_000;const num2 = 1000000000;(num1 === num2);",
          "const num1 = 1_2_3_4_5;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_2022.asp",
    "cours": {
      "titre": "ECMAScript 2022",
      "description": "JavaScript Version NumbersOld ECMAScript versions was named by numbers: ES5 and ES6.From 2016, versions are named by year: ES2016, 2018, 2020, 2022.",
      "lien": "https://www.w3schools.com/js/js_2022.asp",
      "contenus": {
        "paragraphs": [
          "Old ECMAScript versions was named by numbers: ES5 and ES6.",
          "From 2016, versions are named by year: ES2016, 2018, 2020, 2022.",
          "These features are relatively new.",
          "Older browsers may need an alternative code (Polyfill)",
          "ES2022 intoduced the array methodat():",
          "Get the third element of fruits:",
          "Get the third element of fruits:",
          "Theat()method returns an indexed element from an array.",
          "Theat()method returns the same as[].",
          "Theat()method is supported in all modern browsers since March 2022:",
          "Many languages allowsnegative bracket indexinglike [-1] to access elements from the end of an\nobject / array / string.",
          "This is not possible in JavaScript, because [] is used for accessing both arrays and objects.\nobj[-1] refers to the value of key -1, not to the last property of the object.",
          "Theat()method was introduced in ES2022 to solve this problem.",
          "ES2022 intoduced the string methodat():",
          "Get the third letter of name:",
          "Get the third letter of name:",
          "Theat()method returns an indexed element from an string.",
          "Theat()method returns the same as[].",
          "Theat()method is supported in all modern browsers since March 2022:",
          "ES2022 added the /d modifier to express the start and end of the match.",
          "RegExp Modifiers are used to spescfy case-insensitive, and other global searches:",
          "ES2022 provides a safe way to check if a property is the own property of an object.",
          "Object.hasOwn()is similar toObject.prototype.hasOwnPropertybut supports all object types.",
          "ES2022 let you specify the reason behind an error witherror.cause.",
          "JavasSript modules can now wait for resources that require import before running:",
          "Class Field Declarations is supported in all modern browsers since April 2021:",
          "Private Methods and Fields is supported in all modern browsers since June 2021:"
        ],
        "lists": [
          [
            "Array at()",
            "String at()",
            "RegExp /d",
            "Object.hasOwn()",
            "error.cause",
            "await import",
            "Class field declarations",
            "Private methods and fields"
          ]
        ],
        "examples": [
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];let fruit = fruits.at(2);",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];let fruit = fruits[2];",
          "const name = \"W3Schools\";let letter = name.at(2);",
          "const name = \"W3Schools\";let letter = name[2];",
          "let text = \"aaaabb\";let result = text.match(/(aa)(bb)/d);",
          "Object.hasOwn(\"initProp\")",
          "try {\n  connectData();\n} catch (err) {\n  throw new Error(\"Connecting failed.\", { cause: err });\n}",
          "import {myData} from './myData.js';const data = await myData();",
          "class Hello {counter = 0; // Class field}const myClass = new Hello();let x = myClass.counter;",
          "class Hello {#counter = 0;  // Private field#myMethod() {} // Private method}const myClass = new Hello();let x = myClass.#counter;  // ErrormyClass.#myMethod();      // Error"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_2023.asp",
    "cours": {
      "titre": "ECMAScript 2023",
      "description": "JavaScript Version NumbersOld ECMAScript versions was named by numbers: ES5 and ES6.From 2016, versions are named by year: ES2016, 2018, 2020 ...The 14th edition, ECMAScript 2023, was published in June 2023.",
      "lien": "https://www.w3schools.com/js/js_2023.asp",
      "contenus": {
        "paragraphs": [
          "Old ECMAScript versions was named by numbers: ES5 and ES6.",
          "From 2016, versions are named by year: ES2016, 2018, 2020 ...",
          "The 14th edition, ECMAScript 2023, was published in June 2023.",
          "These features are relatively new.",
          "Older browsers may need an alternative code (Polyfill)",
          "ES2023 added the findLast() method that will start from the end of an array and return\nthe value of the first element that satisfies a condition.",
          "The findLastIndex() method finds the index of the last element that satisfies a condition.",
          "ES2023 added the Array toReversed() method as a safe way to reverse an array without altering the original array.",
          "The difference between the newtoReversed()method and the oldreverse()method is that the new method\ncreates a new array, keeping the original array unchanged, while the old method altered the original array.",
          "ES2023 added the Array toSorted() method as a safe way to sort an array without altering the original array.",
          "The difference between the newtoSorted()method and the oldsort()method is that the new method\ncreates a new array, keeping the original array unchanged, while the old method altered the original array.",
          "ES2023 added the Array toSpliced() method as a safe way to splice an array without altering the original array.",
          "The difference between the newtoSpliced()method and the oldsplice()method is that the new method\ncreates a new array, keeping the original array unchanged, while the old method altered the original array.",
          "ES2023 added the Array with() method as a safe way to update elements in an array without altering the original array.",
          "A Shebang is a number sign and an exclamation mark (#!) at the beginning of a script:",
          "The example above tells the operating system to use the node program to run the script.",
          "Now, you can run JavaScript code with./fileName.jsinstead \nofnode fileName.js.",
          "#! is also called sharp-exclamation, hashbang, pound-bang, or hash-pling."
        ],
        "lists": [
          [
            "Array findLast()",
            "Array findLastIndex()",
            "Array toReversed()",
            "Array toSorted()",
            "Array toSpliced()",
            "Array with()",
            "#! (Shebang)"
          ]
        ],
        "examples": [
          "const temp = [27, 28, 30, 40, 42, 35, 30];let high = temp.findLast(x => x > 40);",
          "const temp = [27, 28, 30, 40, 42, 35, 30];let pos = temp.findLastIndex(x => x > 40);",
          "const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\"];const reversed = months.toReversed();",
          "const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\"];const sorted = months.toSorted();",
          "const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\"];const spliced = months.toSpliced(0, 1);",
          "const months = [\"Januar\", \"Februar\", \"Mar\", \"April\"];const new = months.with(2, \"March\");",
          "#!/usr/bin/env node"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_2024.asp",
    "cours": {
      "titre": "ECMAScript 2024",
      "description": "JavaScript Version NumbersOld ECMAScript versions was named by numbers: ES5 and ES6.From 2016, versions are named by year: ES2016, 2018, 2020 ...The 15th edition, ECMAScript 2024, is published in July 2024.",
      "lien": "https://www.w3schools.com/js/js_2024.asp",
      "contenus": {
        "paragraphs": [
          "Old ECMAScript versions was named by numbers: ES5 and ES6.",
          "From 2016, versions are named by year: ES2016, 2018, 2020 ...",
          "The 15th edition, ECMAScript 2024, is published in July 2024.",
          "These features are relatively new.",
          "Older browsers may need an alternative code (Polyfill)",
          "TheObject.groupBy()method groups elements of an object\naccording to string values returned from a callback function.",
          "TheObject.groupBy()method does not change the original object.",
          "The elements in the original and in the returned object are the same.",
          "Changes will be reflected in both the original and in the returned object.",
          "TheMap.groupBy()method groups elements of an object\naccording to string values returned from a callback function.",
          "TheMap.groupBy()method does not change the original object.",
          "The elements in the original and in the returned object are the same.",
          "Changes will be reflected in both the original and in the returned object.",
          "The difference between Object.groupBy() and Map.groupBy() is:",
          "Object.groupBy() groups elements into a JavaScript object.",
          "Map.groupBy() groups elements into a Map object."
        ],
        "lists": [
          [
            "Object.groupBy()",
            "Map.groupBy()",
            "Temporal.PlainDate()",
            "Temporal.PlainTime()",
            "Temporal.PlainMonthDay()",
            "Temporal.PlainYearMonth()"
          ]
        ],
        "examples": [
          "// Create an Arrayconst fruits = [{name:\"apples\", quantity:300},{name:\"bananas\", quantity:500},{name:\"oranges\", quantity:200},{name:\"kiwi\", quantity:150}];// Callback function to Group Elementsfunction myCallback({ quantity }) {return quantity > 200 ? \"ok\" : \"low\";}// Group by Quantityconst result = Object.groupBy(fruits, myCallback);",
          "// Create an Arrayconst fruits = [{name:\"apples\", quantity:300},{name:\"bananas\", quantity:500},{name:\"oranges\", quantity:200},{name:\"kiwi\", quantity:150}];// Callback function to Group Elementsfunction myCallback({ quantity }) {return quantity > 200 ? \"ok\" : \"low\";}// Group by Quantityconst result = Map.groupBy(fruits, myCallback);",
          "const date = Temporal.PlainDate(2024, 5, 1);",
          "const date = new Temporal.PlainTime(10, 30);",
          "const date = new Temporal.PlainMonthDay(5, 1);",
          "const date = new Temporal.PlainYearMonth(2024, 5);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_ie_edge.asp",
    "cours": {
      "titre": "Internet Explorer Retirement",
      "description": "Microsoft ended all support for Internet ExplorerJune 15, 2022.",
      "lien": "https://www.w3schools.com/js/js_ie_edge.asp",
      "contenus": {
        "paragraphs": [
          "Source ...",
          "Internet Explorer is disabled in Windows 11",
          "Internet Explorer is \"replaced\" by Edge in Windows 10",
          "IE 11 goes out of support on June 15 2022",
          "Edge was the default browser for Windows 10.",
          "It was built with Microsoft's browser engineEdgeHTMLand theirChakraJavaScript engine.",
          "The first versions of Edge (12-18), are now referred to as \"Edge Legacy\".The Microsoft support for Edge Legacy ended on March 9, 2021.Future Windows updates will replace Edge Legacy withThe New Edge.Retirement dates published August 17, 2020:31-12-2020Azure DevOps Services stops supporting Edge Legacy09-03-2021End of Windows updates for Edge Legacy13-04-2021Future Windows updates will remove Edge LegacySource ...The New EdgeThe new Microsoft Edge isChromiumbased withBlinkandV8engines.It was released in January 2020, and is available for Windows 7, 8, and 10.It can also be downloaded for macOS, iOS, and Android.The new Edge follows theModern Lifecycle Policy(updates on an approx. six-week cycle).GoogleGoogle Ad ManagerAs ofMarch 28, 2022,Google Ad Manager no longer supports ad serving for Internet Explorer versions 11 and below.Source ...Google SearchAs ofOctober 1, 2021,Google Search no longer supports Internet Explorer 11.Source ...Google WorkspaceAs ofMarch 15, 2021,Google Workspace no longer supports Internet Explorer 11.Source ...Old Operating SystemsInternet Explorer 11 is still a component in some old Windows operating system and follows the Lifecycle Policy\nfor these products:SystemDefault BrowserWindows 7Internet Explorer 11Windows 8.XInternet Explorer 11Windows 10Internet Explorer 11Windows Server 2012Internet Explorer 11Windows Server 2012 R2Internet Explorer 11Windows Server 2016Internet Explorer 11Windows Embedded Standard 7Internet Explorer 11Windows Embedded POSReady 7Internet Explorer 11Windows Thin PCInternet Explorer 11Windows Embedded 8 StandardInternet Explorer 11Windows 8.1 Industry UpdateInternet Explorer 11Old ApplicationsSome old PCs (like in public libraries) are still using Internet Explorer.Some legacy web applications are using Internet Explorer.Some legacy web applications are using Internet Explorer runtime DLLs.Some AJAX based applications are using Microsoft ActiveX components.In order to ease the migration from Internet Explorer,\nMicrosoft Edge offersInternet Explorer Mode, providing backward compatibility\nand enabling customers to continue to run legacy web applications.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "The Microsoft support for Edge Legacy ended on March 9, 2021.",
          "Future Windows updates will replace Edge Legacy withThe New Edge.",
          "Source ...",
          "The new Microsoft Edge isChromiumbased withBlinkandV8engines.",
          "It was released in January 2020, and is available for Windows 7, 8, and 10.",
          "It can also be downloaded for macOS, iOS, and Android.",
          "The new Edge follows theModern Lifecycle Policy(updates on an approx. six-week cycle).",
          "As ofMarch 28, 2022,Google Ad Manager no longer supports ad serving for Internet Explorer versions 11 and below.",
          "Source ...",
          "As ofOctober 1, 2021,Google Search no longer supports Internet Explorer 11.",
          "Source ...",
          "As ofMarch 15, 2021,Google Workspace no longer supports Internet Explorer 11.",
          "Source ...",
          "Internet Explorer 11 is still a component in some old Windows operating system and follows the Lifecycle Policy\nfor these products:",
          "Some old PCs (like in public libraries) are still using Internet Explorer.",
          "Some legacy web applications are using Internet Explorer.",
          "Some legacy web applications are using Internet Explorer runtime DLLs.",
          "Some AJAX based applications are using Microsoft ActiveX components.",
          "In order to ease the migration from Internet Explorer,\nMicrosoft Edge offersInternet Explorer Mode, providing backward compatibility\nand enabling customers to continue to run legacy web applications."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_history.asp",
    "cours": {
      "titre": "JavaScript History",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_history.asp",
      "contenus": {
        "paragraphs": [
          "JavaScriptwas invented byBrendan Eichin 1995.",
          "It was developed forNetscape 2, and became theECMA-262standard in 1997.",
          "After Netscape handed JavaScript over to ECMA, the Mozilla foundation \ncontinued to develop JavaScript for the Firefox browser.\nMozilla's latest version was 1.8.5. (Identical to ES5).",
          "Internet Explorer(IE4) was the first browser to support ECMA-262 Edition 1 (ES1).",
          "* Internet Explorer 9 did not support ES5 \"use strict\".",
          "** Internet Explorer 11 does not support ES6.",
          "In 1996, Netscape and Brendan Eich took JavaScript to the ECMA international standards organization,\nand a technical committee (TC39) was created to develop the language.",
          "ECMA-262 Edition 1 was released in June 1997.",
          "When the TC39 committee got together in Oslo in 2008, to agree on ECMAScript 4, they were divided into\n2 very different camps:The ECMAScript 3.1 Camp:Microsoft and Yahoo who wanted an incremental upgrade from ES3.The ECMAScript 4 Camp:Adobe, Mozilla, Opera, and Google who wanted a massive ES4 upgrade.August 13 2008, Brendan Eich wrote anemail:It's no secret that the JavaScript standards body, Ecma's Technical  \nCommittee 39, has been split for over a year, with some members  \nfavoring ES4, a major fourth edition to ECMA-262, and others  \nadvocating ES3.1 based on the existing ECMA-262 Edition 3 (ES3)  \nspecification. Now, I'm happy to report, the split is over.The solution was to work together:ECMAScript 4 was renamed to ES5ES5 should be an incremental upgrade of ECMAScript 3.Features of ECMAScript 4 should be picked up in later versions.TC39 should develop a new major release, bigger in scope than ES5.The planned new release (ES6) was codenamed \"Harmony\" (Because of the split it created?).ES5 was a huge success. It was released in 2009, and all major browsers (including Internet Explorer) were fully\ncompliant by July 2013:Chrome 23IE10 / EdgeFirefox 21Safari 6Opera 15Nov 2012Sep 2012May 2013Jul 2012Jul 2013ES6 was also a huge success. It was released in 2015, and all major browsers were fully compliant by March  2017:Chrome 51Edge 14Firefox 52Safari 10Opera 38May 2016Aug 2016Mar 2017Sep 2016Jun 2016❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "The ECMAScript 3.1 Camp:Microsoft and Yahoo who wanted an incremental upgrade from ES3.",
          "The ECMAScript 4 Camp:Adobe, Mozilla, Opera, and Google who wanted a massive ES4 upgrade.",
          "August 13 2008, Brendan Eich wrote anemail:",
          "It's no secret that the JavaScript standards body, Ecma's Technical  \nCommittee 39, has been split for over a year, with some members  \nfavoring ES4, a major fourth edition to ECMA-262, and others  \nadvocating ES3.1 based on the existing ECMA-262 Edition 3 (ES3)  \nspecification. Now, I'm happy to report, the split is over.",
          "The solution was to work together:",
          "The planned new release (ES6) was codenamed \"Harmony\" (Because of the split it created?).",
          "ES5 was a huge success. It was released in 2009, and all major browsers (including Internet Explorer) were fully\ncompliant by July 2013:",
          "ES6 was also a huge success. It was released in 2015, and all major browsers were fully compliant by March  2017:"
        ],
        "lists": [
          [
            "ECMAScript 4 was renamed to ES5",
            "ES5 should be an incremental upgrade of ECMAScript 3.",
            "Features of ECMAScript 4 should be picked up in later versions.",
            "TC39 should develop a new major release, bigger in scope than ES5."
          ]
        ],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_object_definition.asp",
    "cours": {
      "titre": "JavaScript Object Definition",
      "description": "Methods for Defining JavaScript ObjectsUsing an Object LiteralUsing thenewKeywordUsing an Object ConstructorUsingObject.assign()UsingObject.create()UsingObject.fromEntries()",
      "lien": "https://www.w3schools.com/js/js_object_definition.asp",
      "contenus": {
        "paragraphs": [
          "An object literal is a list of propertynames:valuesinside curly braces{}.",
          "Anobject literalis also called anobject initializer.",
          "Create an empty JavaScript object using{}, and add 4 properties:",
          "Create an empty JavaScript object usingnew Object(), and add 4 properties:",
          "The examples above do exactly the same.",
          "But, there is no need to usenew Object().",
          "For readability, simplicity and execution speed, use theobject literalmethod.",
          "Sometimes we need to create many objects of the sametype.",
          "To create anobject typewe use anobject constructor function.",
          "It is considered good practice to name constructor functions with an upper-case first letter.",
          "In the constructor function,thishas no value.",
          "The value ofthiswill become the new object when \na new object is created.",
          "The JavaScriptthisTutorial",
          "Now we can usenew Person()to create many new Person objects:",
          "Avaluegiven to a property will be adefault valuefor all objects\ncreated by the constructor:",
          "JavaScript Object Methods can be grouped into:",
          "JavaScript General Object Methods",
          "JavaScript Property Management Methods",
          "The most common way to protect an object from being changed\nis by using theconstkeyword.",
          "Withconstyou can not re-assign the object,\nbut you can still change the value of a property, delete a property or create a new property.",
          "JavaScript Object Protection Methods"
        ],
        "lists": [
          [
            "Using an Object Literal",
            "Using thenewKeyword",
            "Using an Object Constructor",
            "UsingObject.assign()",
            "UsingObject.create()",
            "UsingObject.fromEntries()"
          ],
          [
            "General Methods",
            "Property Management Methods",
            "Object Protection Methods"
          ]
        ],
        "examples": [
          "{firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};",
          "// Create an Objectconst person = {};// Add Propertiesperson.firstName = \"John\";person.lastName = \"Doe\";person.age = 50;person.eyeColor = \"blue\";",
          "// Create an Objectconst person = new Object();// Add Propertiesperson.firstName = \"John\";person.lastName = \"Doe\";person.age = 50;person.eyeColor = \"blue\";",
          "function Person(first, last, age, eye) {this.firstName = first;this.lastName = last;this.age = age;this.eyeColor = eye;}",
          "const myFather = new Person(\"John\", \"Doe\", 50, \"blue\");const myMother = new Person(\"Sally\", \"Rally\", 48, \"green\");const mySister = new Person(\"Anna\", \"Rally\", 18, \"green\");const mySelf = new Person(\"Johnny\", \"Rally\", 22, \"green\");",
          "function Person(first, last, age, eyecolor) {this.firstName = first;this.lastName = last;this.age = age;this.eyeColor = eyecolor;this.nationality = \"English\";}",
          "// Copies properties from a source object to a target objectObject.assign(target, source)// Creates an object from an existing objectObject.create(object)// Returns an array of the key/value pairs of an objectObject.entries(object)// Creates an object from a list of keys/valuesObject.fromEntries()// Returns an array of the keys of an objectObject.keys(object)// Returns an array of the property values of an objectObject.values(object)// Groups object elements according to a functionObject.groupBy(object, callback)",
          "// Adding or changing an object propertyObject.defineProperty(object, property, descriptor)// Adding or changing object propertiesObject.defineProperties(object, descriptors)// Accessing a PropertyObject.getOwnPropertyDescriptor(object, property)// Accessing PropertiesObject.getOwnPropertyDescriptors(object)// Returns all properties as an arrayObject.getOwnPropertyNames(object)// Accessing the prototypeObject.getPrototypeOf(object)",
          "// Prevents re-assignmentconst car = {type:\"Fiat\", model:\"500\", color:\"white\"};// Prevents adding object propertiesObject.preventExtensions(object)// Returns true if properties can be added to an objectObject.isExtensible(object)// Prevents adding and deleting object propertiesObject.seal(object)// Returns true if object is sealedObject.isSealed(object)// Prevents any changes to an objectObject.freeze(object)// Returns true if object is frozenObject.isFrozen(object)"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_object_prototypes.asp",
    "cours": {
      "titre": "JavaScriptObject Prototypes",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_object_prototypes.asp",
      "contenus": {
        "paragraphs": [
          "All JavaScript objects inherit properties and methods \nfrom a prototype.",
          "In the previous chapter we learned how to use anobject constructor:",
          "We also learned that you cannotadd a new property to an existing object constructor:",
          "To add a new property to a constructor, you must add it to the \nconstructor function:",
          "All JavaScript objects inherit properties and methods from a prototype:",
          "TheObject.prototypeis on the top of the prototype inheritance chain:",
          "Dateobjects,Arrayobjects, andPersonobjects inherit fromObject.prototype.",
          "Sometimes you want to add new properties (or methods) to all existing objects of a given type.",
          "Sometimes you want to add new properties (or methods) to an object \nconstructor.",
          "The JavaScriptprototypeproperty allows you to add new properties to object \nconstructors:",
          "The JavaScriptprototypeproperty also allows you to add new methods to objects \nconstructors:",
          "Only modify yourownprototypes. Never modify the prototypes of  \nstandard JavaScript objects."
        ],
        "lists": [
          [
            "Dateobjects inherit fromDate.prototype",
            "Arrayobjects inherit fromArray.prototype",
            "Personobjects inherit fromPerson.prototype"
          ]
        ],
        "examples": [
          "function Person(first, last, age, eyecolor) {this.firstName = first;this.lastName = last;this.age = age;this.eyeColor = eyecolor;}const myFather = new Person(\"John\", \"Doe\", 50, \"blue\");const myMother = new Person(\"Sally\", \"Rally\", 48, \"green\");",
          "Person.nationality = \"English\";",
          "function Person(first, last, age, eyecolor) {this.firstName = first;this.lastName = last;this.age = age;this.eyeColor = eyecolor;this.nationality = \"English\";}",
          "function Person(first, last, age, eyecolor) {this.firstName = first;this.lastName = last;this.age = age;this.eyeColor = eyecolor;}Person.prototype.nationality = \"English\";",
          "function Person(first, last, age, eyecolor) {this.firstName = first;this.lastName = last;this.age = age;this.eyeColor = eyecolor;}Person.prototype.name = function() {return this.firstName + \" \" + this.lastName;};"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_object_methods.asp",
    "cours": {
      "titre": "JavaScriptObject Methods",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_object_methods.asp",
      "contenus": {
        "paragraphs": [
          "TheObject.assign()method copies properties from\none or more source objects to a target object.",
          "ECMAScript 2017 added theObject.entries()method to objects.",
          "Object.entries()returns an array of the key/value pairs in an object:",
          "Object.entries()makes it simple to use objects in loops:",
          "Object.entries()also makes it simple to convert objects to maps:",
          "Object.entries()is supported in all modern browsers since March 2017:",
          "ThefromEntries()method creates an object from\na list of key/value pairs.",
          "Object.values()is similar toObject.entries(),\nbut returns a single dimension array of the object values:",
          "Object.values()is supported in all modern browsers since March 2017:",
          "ES2024 added theObject.groupBy()method to JavaScript.",
          "TheObject.groupBy()method groups elements of an object\naccording to string values returned from a callback function.",
          "TheObject.groupBy()method does not change the original object.",
          "Object.groupby()is an ES2024 feature.",
          "It is supported in new browsers since March 2024:",
          "ES2024 features are relatively new.",
          "Older browsers may need an alternative code (Polyfill)",
          "The difference between Object.groupBy() and Map.groupBy() is:",
          "Object.groupBy() groups elements into a JavaScript object.",
          "Map.groupBy() groups elements into a Map object.",
          "TheObject.keys()method returns an array with the keys of an object.",
          "The JavaScriptfor...instatement loops through the properties of an object.",
          "The block of code inside of thefor...inloop will be executed once for each property.",
          "Looping through the properties of an object:",
          "For a complete reference, go to our:",
          "Complete JavaScript Object Reference.",
          "The reference contains descriptions and examples of all Object Properties and Methods."
        ],
        "lists": [],
        "examples": [
          "// Copies properties from a source object to a target objectObject.assign(target, source)// Creates an object from an existing objectObject.create(object)// Returns an array of the key/value pairs of an objectObject.entries(object)// Creates an object from a list of keys/valuesObject.fromEntries()// Returns an array of the keys of an objectObject.keys(object)// Returns an array of the property values of an objectObject.values(object)// Groups object elements according to a functionObject.groupBy(object, callback)",
          "// Create Target Objectconst person1 = {firstName: \"John\",lastName: \"Doe\",age: 50,eyeColor: \"blue\"};// Create Source Objectconst person2 = {firstName: \"Anne\",lastName: \"Smith\"};// Assign Source to TargetObject.assign(person1, person2);",
          "const person = {firstName : \"John\",lastName : \"Doe\",age : 50,eyeColor : \"blue\"};let text = Object.entries(person);",
          "const fruits = {Bananas:300, Oranges:200, Apples:500};let text = \"\";for (let [fruit, value] of Object.entries(fruits)) {text += fruit + \": \" + value + \"<br>\";}",
          "const fruits = {Bananas:300, Oranges:200, Apples:500};const myMap = new Map(Object.entries(fruits));",
          "const fruits = [[\"apples\", 300],[\"pears\", 900],[\"bananas\", 500]];const myObj = Object.fromEntries(fruits);",
          "const person = {firstName : \"John\",lastName : \"Doe\",age : 50,eyeColor : \"blue\"};let text = Object.values(person);",
          "// Create an Arrayconst fruits = [{name:\"apples\", quantity:300},{name:\"bananas\", quantity:500},{name:\"oranges\", quantity:200},{name:\"kiwi\", quantity:150}];// Callback function to Group Elementsfunction myCallback({ quantity }) {return quantity > 200 ? \"ok\" : \"low\";}// Group by Quantityconst result = Object.groupBy(fruits, myCallback);",
          "// Create an Objectconst person = {firstName: \"John\",lastName: \"Doe\",age: 50,eyeColor: \"blue\"};// Get the Keysconst keys = Object.keys(person);",
          "for (letvariableinobject) {// code to be executed}",
          "const person = {fname:\" John\",lname:\" Doe\",age: 25};for (let x in person) {txt += person[x];}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_object_properties.asp",
    "cours": {
      "titre": "JavaScriptObject Properties",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_object_properties.asp",
      "contenus": {
        "paragraphs": [
          "TheObject.defineProperty()method can be used to:",
          "Syntax:",
          "This example adds a new property to an object:",
          "This example changes a property value:",
          "All properties have a name. In addition they also have a value.",
          "The value is one of the property's attributes.",
          "Other attributes are: enumerable, configurable, and writable.",
          "These attributes define how the property can be accessed (is it readable?, is \nit writable?)",
          "In JavaScript, all attributes can be read, but only the value attribute can \nbe changed (and only if the property is writable).",
          "( ECMAScript 5 has methods for both getting and setting all property \nattributes)",
          "The following property meta data can be changed:",
          "Getters and setters can also be changed:",
          "This example makes language read-only:",
          "This example makes language not enumerable:",
          "TheObject.getOwnPropertyNames()method can:",
          "This example gets all properties of an object:",
          "Object.getOwnPropertyNames()will also list properties that is not enumerable:",
          "TheObject.keys()method can:",
          "This example usesObject.keys()insted ofObject.getOwnPropertyNames():",
          "The getOwnPropertyNames() method returns all properties.",
          "The Object.keys() method returns all enumerable properties.",
          "If you define object properties withoutenumerable:false,\nthe two methods will return the same.",
          "TheObject.defineProperty()method can also be used to add Getters and \nSetters:",
          "JavaScript objects inherit the properties of their prototype.",
          "Thedeletekeyword does not delete inherited properties, but if you delete a \nprototype property, it will affect all objects \ninherited from the prototype.",
          "For a complete reference, go to our:",
          "Complete JavaScript Object Reference.",
          "The reference contains descriptions and examples of all Object Properties and Methods."
        ],
        "lists": [
          [
            "Adding a new property to an object",
            "Changing property values",
            "Changing property metadata",
            "Changing object getters and setters"
          ],
          [
            "List object properties"
          ],
          [
            "List enumerable object properties"
          ]
        ],
        "examples": [
          "// Adding or changing an object propertyObject.defineProperty(object, property, descriptor)// Adding or changing object propertiesObject.defineProperties(object, descriptors)// Accessing a PropertyObject.getOwnPropertyDescriptor(object, property)// Accessing PropertiesObject.getOwnPropertyDescriptors(object)// Returns all properties as an arrayObject.getOwnPropertyNames(object)// Accessing the prototypeObject.getPrototypeOf(object)",
          "Object.defineProperty(object, property, descriptor)",
          "// Create an Object:const person = {firstName: \"John\",lastName : \n  \"Doe\",language : \"EN\"};// Add a PropertyObject.defineProperty(person, \"year\", \n  {value:\"2008\"});",
          "// Create an Object:const person = {firstName: \"John\",lastName : \"Doe\",language : \"EN\"};// Change a PropertyObject.defineProperty(person, \"language\", \n  {value : \"NO\"});",
          "writable : true      // Property value can be changedenumerable : true    // Property can be enumeratedconfigurable : true  // Property can be reconfigured",
          "writable : false     // Property value can not be changedenumerable : false   // Property can be not enumeratedconfigurable : false // Property can be not reconfigured",
          "// Defining a getterget: function() { return language }// Defining a setterset: function(value) { language = value }",
          "Object.defineProperty(person, \"language\", {writable:false});",
          "Object.defineProperty(person, \"language\", {enumerable:false});",
          "Object.getOwnPropertyNames(object)",
          "// Create an Objectconst person = {firstName: \"John\",lastName : \"Doe\",language : \"EN\"};// Get all PropertiesObject.getOwnPropertyNames(person);",
          "// Create an Objectconst person = {firstName: \"John\",lastName : \"Doe\",language : \"EN\"};// Set the language Property not enumerableObject.defineProperty(person, \"language\", {enumerable:false});// Get all PropertiesObject.getOwnPropertyNames(person);",
          "Object.keys(object)",
          "// Create an Objectconst person = {firstName: \"John\",lastName : \"Doe\",language : \"EN\"};// Change the \"language\" PropertyObject.defineProperty(person, \"language\", {enumerable:false});// Get all Enumerable PropertiesObject.keys(person);",
          "//Create an objectconst person = {firstName:\"John\", lastName:\"Doe\"};// Define a getterObject.defineProperty(person, \"fullName\", {get: \nfunction () {return this.firstName + \" \" + this.lastName;}});",
          "// Define objectconst obj = {counter:0};// Define settersObject.defineProperty(obj, \"reset\", {get : function () {this.counter = 0;}});Object.defineProperty(obj, \"increment\", {get : function () {this.counter++;}});Object.defineProperty(obj, \"decrement\", {get : function () {this.counter--;}});Object.defineProperty(obj, \"add\", {set : function (value) {this.counter += value;}});Object.defineProperty(obj, \"subtract\", {set : function (i) {this.counter -= i;}});// Play with the counter:obj.reset;obj.add = 5;obj.subtract = 1;obj.increment;obj.decrement;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_object_accessors.asp",
    "cours": {
      "titre": "JavaScript Object Accessors",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_object_accessors.asp",
      "contenus": {
        "paragraphs": [
          "ECMAScript 5 (ES5 2009) introduced Getter and Setters.",
          "Getters and setters allow you to define Object Accessors (Computed \nProperties).",
          "This example uses alangproperty togetthe value of thelanguageproperty.",
          "This example uses alangproperty tosetthe value of thelanguageproperty.",
          "What is the differences between these two examples?",
          "Example 1 access fullName as a function: person.fullName().",
          "Example 2 access fullName as a property: person.fullName.",
          "The second example provides a simpler syntax.",
          "JavaScript can secure better data quality when using getters and setters.",
          "Using thelangproperty, in this example, returns the value \nof thelanguageproperty in upper case:",
          "Using thelangproperty, in this example, stores an upper case \nvalue in thelanguageproperty:",
          "TheObject.defineProperty()method can also be used to add Getters and \nSetters:",
          "For a complete reference, go to our:",
          "Complete JavaScript Object Reference.",
          "The reference contains descriptions and examples of all Object Properties and Methods."
        ],
        "lists": [
          [
            "It gives simpler syntax",
            "It allows equal syntax for properties and methods",
            "It can secure better data quality",
            "It is useful for doing things behind-the-scenes"
          ]
        ],
        "examples": [
          "// Create an object:const person = {firstName: \"John\",lastName: \"Doe\",language: \"en\",get lang() {return this.language;}};// Display data from the object using a getter:document.getElementById(\"demo\").innerHTML = person.lang;",
          "const person = {firstName: \"John\",lastName: \"Doe\",language: \"\",set lang(lang) {this.language = lang;}};// Set an object \nproperty using a setter:person.lang = \"en\";// Display data from the object:document.getElementById(\"demo\").innerHTML = person.language;",
          "const person = {firstName: \"John\",lastName: \"Doe\",fullName: function() {return this.firstName + \" \" + \nthis.lastName;}};// Display data from the object using a method:document.getElementById(\"demo\").innerHTML = person.fullName();",
          "const person = {firstName: \"John\",lastName: \"Doe\",get fullName() {return this.firstName + \" \" + \nthis.lastName;}};// Display data from the object using a getter:document.getElementById(\"demo\").innerHTML = person.fullName;",
          "// Create an object:const person = {firstName: \"John\",lastName: \"Doe\",language: \"en\",get lang() {return this.language.toUpperCase();}};// Display data from the object using a getter:document.getElementById(\"demo\").innerHTML = person.lang;",
          "const person = {firstName: \"John\",lastName: \"Doe\",language: \"\",set lang(lang) {this.language = lang.toUpperCase();}};// Set an object \nproperty using a setter:person.lang = \"en\";// Display data from the object:document.getElementById(\"demo\").innerHTML = person.language;",
          "// Define objectconst obj = {counter : 0};// Define setters and gettersObject.defineProperty(obj, \"reset\", {get : function () {this.counter = 0;}});Object.defineProperty(obj, \"increment\", {get : function () {this.counter++;}});Object.defineProperty(obj, \"decrement\", {get : function () {this.counter--;}});Object.defineProperty(obj, \"add\", {set : function (value) {this.counter += value;}});Object.defineProperty(obj, \"subtract\", {set : function (value) {this.counter -= value;}});// Play with the counter:obj.reset;obj.add = 5;obj.subtract = 1;obj.increment;obj.decrement;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_object_protection.asp",
    "cours": {
      "titre": "JavaScript Object Protection",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_object_protection.asp",
      "contenus": {
        "paragraphs": [
          "The most common way to protect an object from being changed\nis by using theconstkeyword.",
          "Withconstyou can not re-assign the object,\nbut you can still change the value of a property, delete a property or create a new property.",
          "TheObject.preventExtensions()method prevents adding properties to an object.",
          "Since arrays are objects, arrays can be prevented from extensions too:",
          "You can useObject.isExtensible()to check if an object is extensible.",
          "TheObject.isExtensible()returns true if an object is extensible.",
          "TheObject.seal()method prevents additions or deletions of new properties.",
          "TheObject.seal()method makes existing properties non-configurable.",
          "TheObject.isSealed()method can be used to check if an object is sealed.",
          "TheObject.seal()method will fail silently in non-strict mode and throw a TypeError in strict mode.",
          "Since arrays are objects, arrays can be sealed too:",
          "TheObject.isSealed()method can be used to check if an object is sealed.",
          "TheObject.isSealed()returns true if an object is sealed.",
          "TheObject.freeze()method prevents any changes to an object.",
          "Frozen objects are read-only.",
          "No modification, addition or deletion of properties are allowed.",
          "TheObject.freeze()method will fail silently in non-strict mode and throw a TypeError in strict mode.",
          "Since arrays are objects, arrays can be frozen too:",
          "TheObject.isFrozen()method can be used to check if an object is frozen.",
          "TheObject.isFrozen()returns true if an object is frozen.",
          "For a complete reference, go to our:",
          "Complete JavaScript Object Reference.",
          "The reference contains descriptions and examples of all Object Properties and Methods."
        ],
        "lists": [],
        "examples": [
          "// Prevents re-assignmentconst car = {type:\"Fiat\", model:\"500\", color:\"white\"};// Prevents adding object propertiesObject.preventExtensions(object)// Returns true if properties can be added to an objectObject.isExtensible(object)// Prevents adding and deleting object propertiesObject.seal(object)// Returns true if object is sealedObject.isSealed(object)// Prevents any changes to an objectObject.freeze(object)// Returns true if object is frozenObject.isFrozen(object)",
          "// Create Objectconst person = {firstName:\"John\", lastName:\"Doe\"};// Prevent ExtensionsObject.preventExtensions(person);// This will throw an errorperson.nationality = \"English\";",
          "// Create Arrayconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];Object.preventExtensions(fruits);// This will throw an error:fruits.push(\"Kiwi\");",
          "// Create Objectconst person = {firstName:\"John\", lastName:\"Doe\"};// Prevent ExtensionsObject.preventExtensions(person);// This will return falselet answer = Object.isExtensible(person);",
          "// Create Arrayconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];// Prevent ExtensionsObject.preventExtensions(fruits);// This will return falselet answer = Object.isExtensible(fruits);",
          "\"use strict\"// Create Objectconst person = {firstName: \"John\",lastName: \"Doe\",age: 50,eyeColor: \"blue\"};// Seal ObjectObject.seal(person)// This will throw an errordelete person.age;",
          "// Create Arrayconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];Object.seal(fruits);// This will throw an error:fruits.push(\"Kiwi\");",
          "// Create Objectconst person = {firstName:\"John\", lastName:\"Doe\"};// Seal ObjectObject.seal(person);// This will return truelet answer = Object.isSealed(person);",
          "// Create Arrayconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];// Seal ArrayObject.seal(fruits);// This will return truelet answer = Object.isSealed(fruits);",
          "\"use strict\"// Create Objectconst person = {firstName: \"John\",lastName: \"Doe\",age: 50,eyeColor: \"blue\"};// Freeze ObjectObject.freeze(person)// This will throw an errorperson.age = 51;",
          "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];Object.freeze(fruits);// This will trow an error:fruits.push(\"Kiwi\");",
          "// Create Objectconst person = {firstName:\"John\", lastName:\"Doe\"};// Freeze ObjectObject.freeze(person);// This will return truelet answer = Object.isFrozen(person);",
          "// Create Arrayconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];Object.freeze(fruits);// This will return true:let answer = Object.isFrozen(fruits);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_function_definition.asp",
    "cours": {
      "titre": "JavaScriptFunction Definitions",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_function_definition.asp",
      "contenus": {
        "paragraphs": [
          "JavaScript functions aredefinedwith thefunctionkeyword.",
          "You can use a functiondeclarationor a \nfunctionexpression.",
          "Earlier in this tutorial, you learned that functions aredeclaredwith the \nfollowing syntax:",
          "Declared functions are not executed immediately. They are \"saved for later use\", \nand will be executed later, when they are invoked (called upon).",
          "Semicolons are used to separate executable JavaScript statements.Since a functiondeclarationis not an executable statement, it is \nnot common to end it with a semicolon.",
          "A JavaScript function can also be defined using anexpression.",
          "A function expression can be stored in a variable:",
          "After a function expression has been stored in a variable, the variable can \nbe used as a function:",
          "The function above is actually ananonymous function(a function without a \nname).",
          "Functions stored in variables do not need function names. They are always \ninvoked (called) using the variable name.",
          "The function above ends with a semicolon because it is a part of an executable statement.",
          "As you have seen in the previous examples, JavaScript functions are defined \nwith thefunctionkeyword.",
          "Functions can also be defined with a built-in JavaScript function constructor calledFunction().",
          "You actually don't have to use the function constructor. The example above is the same as writing:",
          "Most of the time, you can avoid using thenewkeyword in JavaScript.",
          "Earlier in this tutorial, you learned about \"hoisting\" (JavaScript Hoisting).",
          "Hoisting is JavaScript's default behavior of movingdeclarationsto the top of the \ncurrent scope.",
          "Hoisting applies to variable declarations and to function declarations.",
          "Because of this, JavaScript functions can be called before they are declared:",
          "Functions defined using an expression are not hoisted.",
          "Function expressions can be made \"self-invoking\".",
          "A self-invoking expression is invoked (started) automatically, without being called.",
          "Function expressions will execute automatically if the expression is followed \nby ().",
          "You cannot self-invoke a function declaration.",
          "You have to add \nparentheses around the function to indicate that it is a function expression:",
          "The function above is actually ananonymous self-invoking function(function \nwithout name).",
          "JavaScript functions can be used as values:",
          "JavaScript functions can be used in expressions:",
          "Thetypeofoperator in JavaScript returns \"function\" for \nfunctions.",
          "But, JavaScript functions can best be described as objects.",
          "JavaScript functions have bothpropertiesandmethods.",
          "Thearguments.lengthproperty returns the number of arguments received when \nthe function was invoked:",
          "ThetoString()method returns the function as a string:",
          "A function defined as the property of an object, is called a method to the object.A function designed to create new objects, is called an object constructor.",
          "Arrow functions allows a short syntax for writing function expressions.",
          "You don't need thefunctionkeyword, thereturnkeyword, and thecurly brackets.",
          "Arrow functions do not have their ownthis.\nThey are not well suited for definingobject methods.",
          "Arrow functions are not hoisted. They must be definedbeforethey are used.",
          "Usingconstis safer than usingvar, because a function expression is \nalways constant value.",
          "You can only omit thereturnkeyword and the curly brackets if the function is a single statement. \nBecause of this, it might be a good habit to always keep them:",
          "Arrow functions are not supported in IE11 or earlier."
        ],
        "lists": [],
        "examples": [
          "functionfunctionName(parameters) {//code to be executed}",
          "function myFunction(a, b) {return a * b;}",
          "const x = function (a, b) {return a * b};",
          "const x = function (a, b) {return a * b};let z = x(4, 3);",
          "const myFunction = new Function(\"a\", \"b\", \"return a * b\");let x = myFunction(4, 3);",
          "const myFunction = function (a, b) {return a * b};let x = myFunction(4, 3);",
          "myFunction(5);function myFunction(y) {return y * y;}",
          "(function () {let x = \"Hello!!\";  // I will invoke myself})();",
          "function myFunction(a, b) {return a * b;}let x = myFunction(4, 3);",
          "function myFunction(a, b) {return a * b;}let x = myFunction(4, 3) * 2;",
          "function myFunction(a, b) {return arguments.length;}",
          "function myFunction(a, b) {return a * b;}let text = myFunction.toString();",
          "// ES5var x = function(x, y) {return x * y;}// ES6const x = (x, y) => x * y;",
          "const x = (x, y) => { return x * y };"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_function_parameters.asp",
    "cours": {
      "titre": "JavaScriptFunction Parameters",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_function_parameters.asp",
      "contenus": {
        "paragraphs": [
          "A JavaScriptfunctiondoes not perform any checking on \nparameter values (arguments).",
          "Earlier in this tutorial, you learned that functions can haveparameters:",
          "Functionparametersare thenameslisted in \nthe function definition.",
          "Functionargumentsare the realvaluespassed to (and received by) the function.",
          "JavaScript function definitions do not specify data types for \nparameters.",
          "JavaScript functions do not perform type checking on the passed \narguments.",
          "JavaScript functions do not check the number of arguments received.",
          "If a function is called withmissing arguments(less than declared), the missing values are set toundefined.",
          "Sometimes this is acceptable, but sometimes it is better to assign a default \nvalue to the parameter:",
          "ES6allows function parameters to have default values.",
          "If y is not passed or undefined, then y = 10.",
          "The rest parameter (...) allows a function to treat an indefinite number of arguments as an array:",
          "JavaScript functions have a built-in object called the arguments \nobject.",
          "The argument object contains an array of the arguments used when the function \nwas called (invoked).",
          "This way you can simply use a function to find (for instance) the highest \nvalue in a list of numbers:",
          "Or create a function to sum all input values:",
          "If a function is called withtoo many arguments(more than declared),\nthese arguments can be reached usingthe arguments object.",
          "The parameters, in a function call, are the function's arguments.",
          "JavaScript arguments are passed byvalue: The function only \ngets to know the values, not the argument's locations.",
          "If a function changes an argument's value, it does not change the parameter's \noriginal value.",
          "Changes to arguments are not visible (reflected) outside the function.",
          "In JavaScript, object references are values.",
          "Because of this, objects will behave like they are passed byreference:",
          "If a function changes an object property, it changes the original value.",
          "Changes to object properties are visible (reflected) outside the function."
        ],
        "lists": [],
        "examples": [
          "functionfunctionName(parameter1, parameter2, parameter3) {//code to be executed}",
          "function myFunction(x, y) {if (y === undefined) {y = 2;}}",
          "function myFunction(x, y = 10) {return x + y;}myFunction(5);",
          "function sum(...args) {let sum = 0;for (let arg of args) sum += arg;return sum;}let x = sum(4, 9, 16, 25, 29, 100, 66, 77);",
          "x = findMax(1, 123, 500, 115, 44, 88);function findMax() {let max = -Infinity;for (let i = 0; i < arguments.length; i++) {if (arguments[i] > max) {max = arguments[i];}}return max;}",
          "x = sumAll(1, 123, 500, 115, 44, 88);function sumAll() {let sum = 0;for (let i = 0; i < arguments.length; i++) {sum += arguments[i];}return sum;}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_function_invocation.asp",
    "cours": {
      "titre": "JavaScriptFunction Invocation",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_function_invocation.asp",
      "contenus": {
        "paragraphs": [
          "The code inside a JavaScriptfunctionwill execute when \"something\" invokes it.",
          "The code inside a function is not executed when the function isdefined.",
          "The code inside a function is executed when the function isinvoked.",
          "It is common to use the term \"call a function\" instead of \"invoke \na function\".",
          "It is also common to say \"call upon a function\", \"start a function\", or \n\"execute a function\".",
          "In this tutorial, we will useinvoke, because a \nJavaScript function can be invoked without being called.",
          "The function above does not belong to any object. But in JavaScript there \nis always a default global object.",
          "In HTML the default global object is the HTML page itself, so the function above \"belongs\" to the \nHTML page.",
          "In a browser the page object is the browser window. The function above \nautomatically becomes a window function.",
          "This is a common way to invoke a JavaScript function, but not a very good practice.Global variables, methods, or functions can easily create name conflicts and bugs in the global object.",
          "myFunction() and window.myFunction() is the same function:",
          "In JavaScript, thethiskeyword refers to anobject.",
          "Thethiskeyword refers todifferent objectsdepending on how it is used:",
          "thisis not a variable. It is a keyword.\nYou cannot change the value ofthis.",
          "The JavaScriptthisTutorial",
          "When a function is called without an owner object, the value ofthisbecomes the global object.",
          "In a web browser the global object is the browser window.",
          "This example returns the window object as the value ofthis:",
          "Invoking a function as a global function, causes the value ofthisto be the global object.Using the window object as a variable can easily crash your program.",
          "In JavaScript you can define functions as object methods.",
          "The following example creates an object (myObject), with two \nproperties (firstNameandlastName), and a \nmethod (fullName):",
          "ThefullNamemethod is a function. The function belongs to \nthe object.myObjectis the owner of the function.",
          "The thing calledthis, is the object that \n\"owns\" the JavaScript code. In this case the value ofthisismyObject.",
          "Test it! Change thefullNamemethod to return the value ofthis:",
          "Invoking a function as an object method, causes the value ofthisto be the object itself.",
          "If a function invocation is preceded with thenewkeyword, \nit is a constructor invocation.",
          "It looks like you create a new function, but since JavaScript functions are \nobjects you actually create a new object:",
          "A constructor invocation creates a new object. The new object inherits the \nproperties and methods from its constructor.",
          "Thethiskeyword in the constructor does not have a value.The value ofthiswill be the new object created when the function is invoked."
        ],
        "lists": [],
        "examples": [
          "function myFunction(a, b) {return a * b;}myFunction(10, 2);           // \n  Will return 20",
          "function myFunction(a, b) {return a * b;}window.myFunction(10, 2);     // Will also return 20",
          "let x = myFunction();\n           // x will be the window objectfunction myFunction() {return this;}",
          "const myObject = {firstName:\"John\",lastName: \"Doe\",fullName: function () {return this.firstName + \" \" + this.lastName;}}myObject.fullName();         // Will return \"John Doe\"",
          "const myObject = {firstName:\"John\",lastName: \"Doe\",fullName: function () {return this;}}// This will return [object Object] (the owner object)myObject.fullName();",
          "// This is a function constructor:function myFunction(arg1, arg2) {this.firstName = arg1;this.lastName  = arg2;}// This creates a new objectconst myObj = new myFunction(\"John\", \"Doe\");// This will return \"John\"myObj.firstName;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_function_call.asp",
    "cours": {
      "titre": "JavaScript Function call()",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_function_call.asp",
      "contenus": {
        "paragraphs": [
          "With thecall()method, you can write a method that can be used on different \nobjects.",
          "In JavaScript all functions are object methods.",
          "If a function is not a method of a JavaScript object, it is a function of the \nglobal object (see previous chapter).",
          "The example below creates an object with 3 \nproperties, firstName, lastName, fullName.",
          "In the example above,thisrefers to theperson object.",
          "this.firstNamemeans thefirstNameproperty ofthis.",
          "Same as:",
          "this.firstNamemeans thefirstNameproperty ofperson.",
          "In JavaScript, thethiskeyword refers to anobject.",
          "Thethiskeyword refers todifferent objectsdepending on how it is used:",
          "thisis not a variable. It is a keyword.\nYou cannot change the value ofthis.",
          "The JavaScriptthisTutorial",
          "Thecall()method is a predefined \nJavaScript method.",
          "It can be used to invoke (call) a method \nwith an owner object as an argument (parameter).",
          "Withcall(), an object can use a method belonging to another object.",
          "This example calls thefullNamemethod of person, using it onperson1:",
          "Try it Yourself »",
          "This example calls thefullNamemethod of person, using it onperson2:",
          "Try it Yourself »",
          "Thecall()method can accept arguments:",
          "Try it Yourself »"
        ],
        "lists": [],
        "examples": [
          "const person = {firstName:\"John\",lastName: \"Doe\",fullName: function () {return this.firstName + \" \" + this.lastName;}}// This will return \"John Doe\":person.fullName();",
          "const person = {fullName: function() {return this.firstName + \" \" + this.lastName;}}const person1 = {firstName:\"John\",lastName: \"Doe\"}const person2 = {firstName:\"Mary\",lastName: \"Doe\"}// This will return \"John Doe\":person.fullName.call(person1);",
          "const person = {fullName: function() {return this.firstName + \" \" + this.lastName;}}const person1 = {firstName:\"John\",lastName: \"Doe\"}const person2 = {firstName:\"Mary\",lastName: \"Doe\"}// This will return \"Mary Doe\"person.fullName.call(person2);",
          "const person = {fullName: function(city, country) {return this.firstName + \" \" + this.lastName \n  + \",\" + city + \",\" + country;}}const person1 = {firstName:\"John\",lastName: \"Doe\"}person.fullName.call(person1, \"Oslo\", \"Norway\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_function_apply.asp",
    "cours": {
      "titre": "JavaScript Function apply()",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_function_apply.asp",
      "contenus": {
        "paragraphs": [
          "With theapply()method, you can write a method that can be used on different \nobjects.",
          "Theapply()method is similar to thecall()method (previous chapter).",
          "In this example thefullNamemethod ofpersonisappliedonperson1:",
          "Try it Yourself »",
          "The difference is:",
          "Thecall()method takes argumentsseparately.",
          "Theapply()method takes arguments as anarray.",
          "The apply() method is very handy if you want to use an array instead of an argument list.",
          "Theapply()method accepts arguments in an array:",
          "Try it Yourself »",
          "Compared with thecall()method:",
          "Try it Yourself »",
          "You can find the largest number (in a list of numbers) using theMath.max()method:",
          "Try it Yourself »",
          "Since JavaScriptarraysdo not have a max() method, you can apply theMath.max()method instead.",
          "Try it Yourself »",
          "The first argument (null) does not matter. It is not used in this example.",
          "These examples will give the same result:",
          "Try it Yourself »",
          "Try it Yourself »",
          "Try it Yourself »",
          "In JavaScript strict mode, if the first argument of theapply()method is not an object,\nit becomes the owner (object) of the invoked function.\nIn \"non-strict\" mode, it becomes the global object."
        ],
        "lists": [],
        "examples": [
          "const person = {fullName: function() {return this.firstName + \" \" + this.lastName;}}const person1 = {firstName: \"Mary\",lastName: \"Doe\"}// This will return \"Mary Doe\":person.fullName.apply(person1);",
          "const person = {fullName: function(city, country) {return this.firstName + \" \" + this.lastName \n  + \",\" + city + \",\" + country;}}const person1 = {firstName:\"John\",lastName: \"Doe\"}person.fullName.apply(person1, [\"Oslo\", \"Norway\"]);",
          "const person = {fullName: function(city, country) {return this.firstName + \" \" + this.lastName \n  + \",\" + city + \",\" + country;}}const person1 = {firstName:\"John\",lastName: \"Doe\"}person.fullName.call(person1, \"Oslo\", \"Norway\");",
          "Math.max(1,2,3);  // Will return 3",
          "Math.max.apply(null, [1,2,3]); // Will also return 3",
          "Math.max.apply(Math, [1,2,3]); // Will also return 3",
          "Math.max.apply(\" \", [1,2,3]); // Will also return 3",
          "Math.max.apply(0, [1,2,3]); // Will also return 3"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_function_bind.asp",
    "cours": {
      "titre": "JavaScript Function bind()",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_function_bind.asp",
      "contenus": {
        "paragraphs": [
          "With thebind()method, an object can borrow a method from another object.",
          "The example below creates 2 objects (person and member).",
          "The member object borrows the fullname method from the person object:",
          "Sometimes thebind()method has to be used to prevent losingthis.",
          "In the following example, the person object has a display method. In the display method,thisrefers to the person object:",
          "When a function is used as a callback,thisis lost.",
          "This example will try to display the person name after 3 seconds, but it will displayundefinedinstead:",
          "Thebind()method solves this problem.",
          "In the following example, thebind()method is used to bind person.display to person.",
          "This example will display the person name after 3 seconds:",
          "In JavaScript, thethiskeyword refers to anobject.",
          "Thethiskeyword refers todifferent objectsdepending on how it is used:",
          "thisis not a variable. It is a keyword.\nYou cannot change the value ofthis.",
          "The JavaScriptthisTutorial"
        ],
        "lists": [],
        "examples": [
          "const person = {firstName:\"John\",lastName: \"Doe\",fullName: function () {return this.firstName + \" \" + this.lastName;}}const member = {firstName:\"Hege\",lastName: \"Nilsen\",}let fullName = person.fullName.bind(member);",
          "const person = {firstName:\"John\",lastName: \"Doe\",display: function () {let x = document.getElementById(\"demo\");x.innerHTML = this.firstName + \" \" + this.lastName;}}person.display();",
          "const person = {firstName:\"John\",lastName: \"Doe\",display: function () {let x = document.getElementById(\"demo\");x.innerHTML = this.firstName + \" \" + this.lastName;}}setTimeout(person.display, 3000);",
          "const person = {firstName:\"John\",lastName: \"Doe\",display: function () {let x = document.getElementById(\"demo\");x.innerHTML = this.firstName + \" \" + this.lastName;}}let display = person.display.bind(person);setTimeout(display, 3000);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_function_closures.asp",
    "cours": {
      "titre": "JavaScriptClosures",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_function_closures.asp",
      "contenus": {
        "paragraphs": [
          "JavaScript variables can belong to thelocalorglobalscope.",
          "Global variables can be made local (private) withclosures.",
          "Afunctioncan access all variables definedinsidethe function, like this:",
          "But afunctioncan also access variables definedoutsidethe function, like this:",
          "In the last example,ais aglobalvariable.",
          "In a web page, global variables belong to the page.",
          "Global variables can be used (and changed) by all other scripts in the page.",
          "In the first example,ais alocalvariable.",
          "A local variable can only be used inside the function where it is defined. It \nis hidden from other functions and other scripting code.",
          "Global \nand local variables with the same name are  \ndifferent variables. Modifying one, does not modify the other.",
          "Variables createdwithouta declaration keyword (var,let, orconst) \nare always \nglobal, even if they are created inside a function.",
          "Global variables live until the page is discarded, like when you navigate \nto another page or close the window.",
          "Local \nvariables have short lives. They are created when the function is \ninvoked, and deleted when the function is finished.",
          "Suppose you want to use a variable for counting something, and you want this \ncounter to be available to all functions.",
          "You could use a global variable, and afunctionto increase the counter:",
          "There is a problem with the solution above: Any code on the page can change the counter, without \ncalling add().",
          "The counter should be local to theadd()function, to prevent other code from changing \nit:",
          "It did not work because we display the global counter instead of the local \ncounter.",
          "We can remove the global counter and access the local counter by letting the \nfunction return it:",
          "It did not work because we reset the local counter every time we call the \nfunction.",
          "A JavaScript inner function can solve this.",
          "All functions have access to the global scope.",
          "In fact, in JavaScript, all functions have access to the scope \"above\" them.",
          "JavaScript supports nested functions. Nested functions have access to the \nscope \"above\" them.",
          "In this example, the inner functionplus()has access \nto thecountervariable in the parent function:",
          "This could have solved the counter dilemma, if we could reach theplus()function from the outside.",
          "We also need to find a way to executecounter = 0only once.",
          "We need a closure.",
          "Remember self-invoking functions? What does this function do?",
          "The variableaddis assigned to the return value of a self-invoking \nfunction.",
          "The self-invoking function only runs once. It sets the counter to zero (0), \nand returns a function expression.",
          "This way add becomes a function. The \"wonderful\" part is that it can access \nthe counter in the parent scope.",
          "This is called a JavaScriptclosure.It makes it possible \nfor a function to have \"private\" variables.",
          "The counter is protected by the scope of the anonymous function, \nand can only be changed using the add function.",
          "A closure is a function having access to the parent scope, even after the parent function has closed."
        ],
        "lists": [],
        "examples": [
          "function myFunction() {let a = 4;return a * a;}",
          "let a = 4;function myFunction() {return a * a;}",
          "function myFunction() {a = 4;}",
          "// Initiate counterlet counter = 0;// Function to increment \n  counterfunction add() {counter += 1;}// Call add() 3 timesadd();add();add();// The counter should now be 3",
          "// Initiate counterlet counter = 0;// Function to increment \n  counterfunction add() {let counter = 0;counter += 1;}// \n  Call add() 3 timesadd();add();add();//The counter should \n  now be 3. But it is 0",
          "// Function to increment \n  counterfunction add() {let counter = 0;counter += 1;return counter;}// \n  Call add() 3 timesadd();add();add();//The counter should \n  now be 3. But it is 1.",
          "function add() {let counter = 0;function plus() {counter += 1;}plus();return counter;}",
          "const add = (function () {let counter = 0;return function () {counter += 1; return counter}})();add();add();add();// the counter is now 3"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_class_intro.asp",
    "cours": {
      "titre": "JavaScript Classes",
      "description": "ECMAScript 2015, also known as ES6, introduced JavaScript Classes.JavaScript Classes are templates for JavaScript Objects.",
      "lien": "https://www.w3schools.com/js/js_class_intro.asp",
      "contenus": {
        "paragraphs": [
          "ECMAScript 2015, also known as ES6, introduced JavaScript Classes.",
          "JavaScript Classes are templates for JavaScript Objects.",
          "Use the keywordclassto create a class.",
          "Always add a method namedconstructor():",
          "The example above creates a class named \"Car\".",
          "The class has two initial properties: \"name\" and \"year\".",
          "A JavaScript class isnotan object.",
          "It is atemplatefor JavaScript objects.",
          "When you have a class, you can use the class to create objects:",
          "Try it Yourself »",
          "The example above uses theCar classto create twoCar objects.",
          "The constructor method is called automatically when a new object is created.",
          "The constructor method is a special method:",
          "If you do not define a constructor method, JavaScript \nwill add an empty constructor method.",
          "Class methods are created with the same syntax as object methods.",
          "Use the keywordclassto create a class.",
          "Always add aconstructor()method.",
          "Then add any number of methods.",
          "Create a Class method named \"age\", that returns the Car age:",
          "Try it Yourself »",
          "You can send parameters to Class methods:",
          "Try it Yourself »",
          "The following table defines the first browser version with full support for \nClasses in JavaScript:",
          "The syntax in classes must be written in \"strict mode\".",
          "You will get an \nerror if you do not follow the \"strict mode\" rules.",
          "In \"strict mode\" you will get an error if you use a variable without \ndeclaring it:",
          "Learn more about \"strict mode\" in:JS Strict Mode."
        ],
        "lists": [
          [
            "It has to have the exact name \"constructor\"",
            "It is executed automatically when a new object is created",
            "It is used to initialize object properties"
          ]
        ],
        "examples": [
          "class ClassName {constructor() { ... }}",
          "class Car {constructor(name, year) {this.name = name;this.year = year;}}",
          "const myCar1 = new Car(\"Ford\", 2014);const myCar2 = new Car(\"Audi\", 2019);",
          "class ClassName {constructor() { ... }method_1() { ... }method_2() { ... }method_3() { ... }}",
          "class Car {constructor(name, year) {this.name = name;this.year = year;}age() {const date = new Date();return date.getFullYear() - this.year;}}const myCar = new Car(\"Ford\", 2014);document.getElementById(\"demo\").innerHTML =\"My car is \" + myCar.age() + \" years old.\";",
          "class Car {constructor(name, year) {this.name = name;this.year = year;}age(x) {return x - this.year;}}const date = new Date();let year = date.getFullYear();const myCar = new \n  Car(\"Ford\", 2014);document.getElementById(\"demo\").innerHTML=\"My car is \n  \" + myCar.age(year) + \" years old.\";",
          "class Car {constructor(name, year) {this.name = name;this.year = year;}age() {// date = new Date();   // This will not workconst date = new Date();  // This will workreturn date.getFullYear() - this.year;}}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_class_inheritance.asp",
    "cours": {
      "titre": "JavaScript Class Inheritance",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_class_inheritance.asp",
      "contenus": {
        "paragraphs": [
          "To create a class inheritance, use theextendskeyword.",
          "A class created with a class inheritance inherits all the methods from \nanother class:",
          "Create a class named \"Model\" which will inherit the methods from the \"Car\" \nclass:",
          "Try it Yourself »",
          "Thesuper()method refers to the parent \nclass.",
          "By calling thesuper()method in the \nconstructor method, we call the parent's constructor method and gets access to \nthe parent's properties and methods.",
          "Inheritance is useful for code reusability: reuse properties and methods of an existing class when you create a new class.",
          "Classes also allows you to use getters and setters.",
          "It can be smart to use getters and setters for your properties, especially if \nyou want to do something special with the value before returning them, or before \nyou set them.",
          "To add getters and setters in the class, use thegetandsetkeywords.",
          "Create a getter and a setter for the \"carname\" property:",
          "Try it Yourself »",
          "Note:even if the getter is a method, you do not use parentheses when you \nwant to get the property value.",
          "The name of the getter/setter method cannot be the same as the name of the \nproperty, in this casecarname.",
          "Many programmers use an underscore character_before the property name to separate the getter/setter from the actual property:ExampleYou can use the underscore character to separate the getter/setter from the \nactual property:class Car {constructor(brand) {this._carname \n  = brand;}get carname() {return this._carname;}set carname(x) {this._carname = x;}}const myCar = new Car(\"Ford\");document.getElementById(\"demo\").innerHTML = myCar.carname;Try it Yourself »To use asetter, use the same syntax as when you set a property value, without parentheses:ExampleUse a setter to change the carname to \"Volvo\":class Car {constructor(brand) {this._carname \n  = brand;}get carname() {return this._carname;}set carname(x) {this._carname = x;}}const myCar = new Car(\"Ford\");myCar.carname = \"Volvo\";document.getElementById(\"demo\").innerHTML = myCar.carname;Try it Yourself »HoistingUnlike functions, and other JavaScript declarations, class declarations are not hoisted.That means that you must declare a class before you can use it:Example//You cannot use the class yet.//myCar = new Car(\"Ford\") will raise an error.class Car {constructor(brand) {this.carname = brand;}}//Now you can use the class:const myCar = new Car(\"Ford\")Try it Yourself »Note:For other declarations, like functions, you will NOT get an \nerror when you try to use it before it is declared, because the default behavior \nof JavaScript declarations are hoisting (moving the declaration to the top).❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "Many programmers use an underscore character_before the property name to separate the getter/setter from the actual property:",
          "You can use the underscore character to separate the getter/setter from the \nactual property:",
          "Try it Yourself »",
          "To use asetter, use the same syntax as when you set a property value, without parentheses:",
          "Use a setter to change the carname to \"Volvo\":",
          "Try it Yourself »",
          "Unlike functions, and other JavaScript declarations, class declarations are not hoisted.",
          "That means that you must declare a class before you can use it:",
          "Note:For other declarations, like functions, you will NOT get an \nerror when you try to use it before it is declared, because the default behavior \nof JavaScript declarations are hoisting (moving the declaration to the top)."
        ],
        "lists": [],
        "examples": [
          "class Car {constructor(brand) {this.carname = \n  brand;}present() {return 'I have a ' + this.carname;}}class Model extends Car {constructor(brand, mod) {super(brand);this.model = mod;}show() {return this.present() + ', it is a ' + this.model;}}let myCar = new Model(\"Ford\", \"Mustang\");document.getElementById(\"demo\").innerHTML \n  = myCar.show();",
          "class Car {constructor(brand) {this.carname \n  = brand;}get cnam() {return this.carname;}set cnam(x) {this.carname = x;}}const myCar = new Car(\"Ford\");document.getElementById(\"demo\").innerHTML = myCar.cnam;",
          "class Car {constructor(brand) {this._carname \n  = brand;}get carname() {return this._carname;}set carname(x) {this._carname = x;}}const myCar = new Car(\"Ford\");document.getElementById(\"demo\").innerHTML = myCar.carname;",
          "class Car {constructor(brand) {this._carname \n  = brand;}get carname() {return this._carname;}set carname(x) {this._carname = x;}}const myCar = new Car(\"Ford\");myCar.carname = \"Volvo\";document.getElementById(\"demo\").innerHTML = myCar.carname;",
          "//You cannot use the class yet.//myCar = new Car(\"Ford\") will raise an error.class Car {constructor(brand) {this.carname = brand;}}//Now you can use the class:const myCar = new Car(\"Ford\")"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_class_static.asp",
    "cours": {
      "titre": "JavaScript Static Methods",
      "description": "Static class methods are defined on the class itself.You cannot call astaticmethod on an object, only on an object class.",
      "lien": "https://www.w3schools.com/js/js_class_static.asp",
      "contenus": {
        "paragraphs": [
          "Static class methods are defined on the class itself.",
          "You cannot call astaticmethod on an object, only on an object class.",
          "",
          "Try it Yourself »",
          "If you want to use the myCar object inside thestaticmethod, you can send it \nas a parameter:",
          "Try it Yourself »"
        ],
        "lists": [],
        "examples": [
          "class Car {constructor(name) {this.name = \n  name;}static hello() {return \"Hello!!\";}}const myCar = new Car(\"Ford\");// You can call 'hello()' on \n  the Car Class:document.getElementById(\"demo\").innerHTML \n  = Car.hello();// But NOT on a Car Object:// document.getElementById(\"demo\").innerHTML \n  = myCar.hello();// this will raise an error.",
          "class Car {constructor(name) {this.name = \n  name;}static hello(x) {return \"Hello \" + \n  x.name;}}const myCar = new Car(\"Ford\");document.getElementById(\"demo\").innerHTML \n  = Car.hello(myCar);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_callback.asp",
    "cours": {
      "titre": "JavaScript Callbacks",
      "description": "\"I will call back later!\"A callback is a function passed as an argument to another functionThis technique allows a function to call another functionA callback function can run after another function has finished",
      "lien": "https://www.w3schools.com/js/js_callback.asp",
      "contenus": {
        "paragraphs": [
          "\"I will call back later!\"",
          "A callback is a function passed as an argument to another function",
          "This technique allows a function to call another function",
          "A callback function can run after another function has finished",
          "JavaScript functions are executed in the sequence they are called.\nNot in the sequence they are defined.",
          "This example will end up displaying \"Goodbye\":",
          "Try it Yourself »",
          "This example will end up displaying \"Hello\":",
          "Try it Yourself »",
          "Sometimes you would like to have better control over when to execute a function.",
          "Suppose you want to do a calculation, and then display the result.",
          "You could call a calculator function (myCalculator), save the result,\nand then call another function (myDisplayer) to display the result:",
          "Try it Yourself »",
          "Or, you could call a calculator function (myCalculator),\nand let the calculator function call the display function (myDisplayer):",
          "Try it Yourself »",
          "The problem with the first example above, is that you have to call two functions to display the result.",
          "The problem with the second example, is that you cannot prevent the calculator function from \ndisplaying the result.",
          "Now it is time to bring in a callback.",
          "A callback is a function passed as an argument to another function.",
          "Using a callback, you could call the calculator function (myCalculator)\nwith a callback (myCallback), and let the calculator function run the callback after the calculation is finished:",
          "In the example above,myDisplayeris a called acallback function.It is passed tomyCalculator()as anargument.NoteWhen you pass a function as an argument, remember not to use parenthesis.Right: myCalculator(5, 5, myDisplayer);Wrong:myCalculator(5, 5, myDisplayer());Example// Create an Arrayconst myNumbers = [4, 1, -20, -7, 5, 9, -6];// Call removeNeg with a callbackconst posNumbers = removeNeg(myNumbers, (x) => x >= 0);// Display Resultdocument.getElementById(\"demo\").innerHTML = posNumbers;// Keep only positive numbersfunction removeNeg(numbers, callback) {const myArray = [];for (const x of numbers) {if (callback(x)) {myArray.push(x);}}return myArray;}Try it Yourself »In the example above,(x) => x >= 0is acallback function.It is passed toremoveNeg()as anargument.When to Use a Callback?The examples above are not very exciting.They are simplified to teach you the callback syntax.Where callbacks really shine are in asynchronous functions, \nwhere one function has to wait for another function (like waiting for a file to load).Asynchronous functions are covered in the next chapter.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "It is passed tomyCalculator()as anargument.",
          "When you pass a function as an argument, remember not to use parenthesis.",
          "Right: myCalculator(5, 5, myDisplayer);",
          "Wrong:myCalculator(5, 5, myDisplayer());",
          "In the example above,(x) => x >= 0is acallback function.It is passed toremoveNeg()as anargument.When to Use a Callback?The examples above are not very exciting.They are simplified to teach you the callback syntax.Where callbacks really shine are in asynchronous functions, \nwhere one function has to wait for another function (like waiting for a file to load).Asynchronous functions are covered in the next chapter.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "It is passed toremoveNeg()as anargument.",
          "The examples above are not very exciting.",
          "They are simplified to teach you the callback syntax.",
          "Where callbacks really shine are in asynchronous functions, \nwhere one function has to wait for another function (like waiting for a file to load).",
          "Asynchronous functions are covered in the next chapter."
        ],
        "lists": [],
        "examples": [
          "function myFirst() {myDisplayer(\"Hello\");}function \n  mySecond() {myDisplayer(\"Goodbye\");}myFirst();mySecond();",
          "function myFirst() {myDisplayer(\"Hello\");}function \n  mySecond() {myDisplayer(\"Goodbye\");}mySecond();myFirst();",
          "function myDisplayer(some) {document.getElementById(\"demo\").innerHTML = some;}function myCalculator(num1, num2) {let sum = num1 + num2;return sum;}let result = myCalculator(5, 5);myDisplayer(result);",
          "function myDisplayer(some) {document.getElementById(\"demo\").innerHTML \n  = some;}function myCalculator(num1, num2) {let sum = num1 + num2;myDisplayer(sum);}myCalculator(5, 5);",
          "function myDisplayer(some) {document.getElementById(\"demo\").innerHTML \n  = some;}function myCalculator(num1, num2, myCallback) {let sum = num1 + num2;myCallback(sum);}myCalculator(5, 5, myDisplayer);",
          "// Create an Arrayconst myNumbers = [4, 1, -20, -7, 5, 9, -6];// Call removeNeg with a callbackconst posNumbers = removeNeg(myNumbers, (x) => x >= 0);// Display Resultdocument.getElementById(\"demo\").innerHTML = posNumbers;// Keep only positive numbersfunction removeNeg(numbers, callback) {const myArray = [];for (const x of numbers) {if (callback(x)) {myArray.push(x);}}return myArray;}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_asynchronous.asp",
    "cours": {
      "titre": "Asynchronous JavaScript",
      "description": "\"I will finish later!\"Functions running inparallelwith other functions are calledasynchronousA good example is JavaScript setTimeout()",
      "lien": "https://www.w3schools.com/js/js_asynchronous.asp",
      "contenus": {
        "paragraphs": [
          "\"I will finish later!\"",
          "Functions running inparallelwith other functions are calledasynchronous",
          "A good example is JavaScript setTimeout()",
          "The examples used in the previous chapter, was very simplified.",
          "The purpose of the examples was to demonstrate the syntax of callback functions:",
          "Try it Yourself »",
          "In the example above,myDisplayeris the name of a function.",
          "It is passed tomyCalculator()as an argument.",
          "In the real world, callbacks are most often used with asynchronous functions.",
          "A typical example is JavaScriptsetTimeout().",
          "When using the JavaScript functionsetTimeout(),\nyou can specify a callback function to be executed on time-out:",
          "Try it Yourself »",
          "In the example above,myFunctionis used as a callback.",
          "myFunctionis passed tosetTimeout()as an argument.",
          "3000 is the number of milliseconds before time-out, somyFunction()will be called after 3 seconds.",
          "When you pass a function as an argument, remember not to use parenthesis.",
          "Right: setTimeout(myFunction, 3000);",
          "Wrong:setTimeout(myFunction(), 3000);",
          "Instead of passing the name of a function as an argument to another function,\nyou can always pass a whole function instead:",
          "Try it Yourself »",
          "In the example above,function(){ myFunction(\"I love You !!!\"); }is used as a callback. It is a complete function.\nThe complete function is passed to setTimeout() as an argument.",
          "3000 is the number of milliseconds before time-out, somyFunction()will be called after 3 seconds.",
          "When using the JavaScript functionsetInterval(),\nyou can specify a callback function to be executed for each interval:",
          "Try it Yourself »",
          "In the example above,myFunctionis used as a callback.",
          "myFunctionis passed tosetInterval()as an argument.",
          "1000 is the number of milliseconds between intervals, somyFunction()will be called every second.",
          "With asynchronous programming, JavaScript programs can start long-running tasks,\nand continue running other tasks in parallel.",
          "But, asynchronus programmes are difficult to write and difficult to debug.",
          "Because of this, most modern asynchronous JavaScript methods don't use callbacks.\nInstead, in JavaScript, asynchronous programming is solved usingPromisesinstead.",
          "You will learn about promises in the next chapter of this tutorial."
        ],
        "lists": [],
        "examples": [
          "function myDisplayer(something) {document.getElementById(\"demo\").innerHTML \n  = something;}function myCalculator(num1, num2, myCallback) {let sum = num1 + num2;myCallback(sum);}myCalculator(5, 5, myDisplayer);",
          "setTimeout(myFunction, 3000);function myFunction() {document.getElementById(\"demo\").innerHTML = \"I love You !!\";}",
          "setTimeout(function() { myFunction(\"I love You !!!\"); }, 3000);function myFunction(value) {document.getElementById(\"demo\").innerHTML = value;}",
          "setInterval(myFunction, 1000);function myFunction() {let d = new Date();document.getElementById(\"demo\").innerHTML=d.getHours() + \":\" +d.getMinutes() + \":\" +d.getSeconds();}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_promise.asp",
    "cours": {
      "titre": "JavaScript Promises",
      "description": "\"I Promise a Result!\"\"Producing code\" is code that can take some time\"Consuming code\" is code that must wait for the resultA Promise is an Object that links Producing code and Consuming code",
      "lien": "https://www.w3schools.com/js/js_promise.asp",
      "contenus": {
        "paragraphs": [
          "\"I Promise a Result!\"",
          "\"Producing code\" is code that can take some time",
          "\"Consuming code\" is code that must wait for the result",
          "A Promise is an Object that links Producing code and Consuming code",
          "A Promise contains both the producing code and calls to the consuming code:",
          "When the producing code obtains the result, it should call one of the two callbacks:WhenCallSuccessmyResolve(result value)ErrormyReject(error object)Promise Object PropertiesA JavaScript Promise object can be:PendingFulfilledRejectedThe Promise object supports two properties:stateandresult.While a Promise object is \"pending\" (working), the result is undefined.When a Promise object is \"fulfilled\", the result is a value.When a Promise object is \"rejected\", the result is an error object.myPromise.statemyPromise.result\"pending\"undefined\"fulfilled\"a result value\"rejected\"an error objectYou cannot access the Promise propertiesstateandresult.You must use a Promise method to handle promises.Promise How ToHere is how to use a Promise:myPromise.then(function(value) { /* code if successful */ },function(error) { /* code if some error */ });Promise.then() takes two arguments, a callback for success and another for failure.Both are optional, so you can add a callback for success or failure only.Examplefunction myDisplayer(some) {document.getElementById(\"demo\").innerHTML = some;}let myPromise = new Promise(function(myResolve, myReject) {let x = 0;// The producing code (this may take some time)if (x == 0) {myResolve(\"OK\");} else {myReject(\"Error\");}});myPromise.then(function(value) {myDisplayer(value);},function(error) {myDisplayer(error);});Try it Yourself »JavaScript Promise ExamplesTo demonstrate the use of promises, we will use the callback examples from the previous chapter:Waiting for a TimeoutWaiting for a FileWaiting for a TimeoutExample Using CallbacksetTimeout(function() { myFunction(\"I love You !!!\"); }, 3000);function myFunction(value) {document.getElementById(\"demo\").innerHTML = value;}Try it Yourself »Example Using Promiselet myPromise = new Promise(function(myResolve, myReject) {setTimeout(function() { myResolve(\"I love You !!\"); }, 3000);});myPromise.then(function(value) {document.getElementById(\"demo\").innerHTML = value;});Try it Yourself »Waiting for a fileExample using Callbackfunction getFile(myCallback) {let req = new XMLHttpRequest();req.open('GET', \"mycar.html\");req.onload = function() {if (req.status == 200) {myCallback(req.responseText);} else {myCallback(\"Error: \" + req.status);}}req.send();}getFile(myDisplayer);Try it Yourself »Example using Promiselet myPromise = new Promise(function(myResolve, myReject) {let req = new XMLHttpRequest();req.open('GET', \"mycar.html\");req.onload = function() {if (req.status == 200) {myResolve(req.response);} else {myReject(\"File not Found\");}};req.send();});myPromise.then(function(value) {myDisplayer(value);},function(error) {myDisplayer(error);});Try it Yourself »Browser SupportECMAScript 2015, also known as ES6, introduced the JavaScript Promise object.The following table defines the first browser version with full support for Promise objects:Chrome 33Edge 12Firefox 29Safari 7.1Opera 20Feb, 2014Jul, 2015Apr, 2014Sep, 2014Mar, 2014❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "A JavaScript Promise object can be:",
          "The Promise object supports two properties:stateandresult.",
          "While a Promise object is \"pending\" (working), the result is undefined.",
          "When a Promise object is \"fulfilled\", the result is a value.",
          "When a Promise object is \"rejected\", the result is an error object.",
          "You cannot access the Promise propertiesstateandresult.",
          "You must use a Promise method to handle promises.",
          "Here is how to use a Promise:",
          "Promise.then() takes two arguments, a callback for success and another for failure.",
          "Both are optional, so you can add a callback for success or failure only.",
          "Try it Yourself »",
          "To demonstrate the use of promises, we will use the callback examples from the previous chapter:",
          "Try it Yourself »",
          "Try it Yourself »",
          "Try it Yourself »",
          "Try it Yourself »",
          "ECMAScript 2015, also known as ES6, introduced the JavaScript Promise object.",
          "The following table defines the first browser version with full support for Promise objects:"
        ],
        "lists": [
          [
            "Pending",
            "Fulfilled",
            "Rejected"
          ],
          [
            "Waiting for a Timeout",
            "Waiting for a File"
          ]
        ],
        "examples": [
          "let myPromise = new Promise(function(myResolve, myReject) {// \"Producing Code\" (May take some time)myResolve(); // when successfulmyReject();  // when error});// \"Consuming Code\" (Must wait for a fulfilled Promise)myPromise.then(function(value) { /* code if successful */ },function(error) { /* code if some error */ });",
          "myPromise.then(function(value) { /* code if successful */ },function(error) { /* code if some error */ });",
          "function myDisplayer(some) {document.getElementById(\"demo\").innerHTML = some;}let myPromise = new Promise(function(myResolve, myReject) {let x = 0;// The producing code (this may take some time)if (x == 0) {myResolve(\"OK\");} else {myReject(\"Error\");}});myPromise.then(function(value) {myDisplayer(value);},function(error) {myDisplayer(error);});",
          "setTimeout(function() { myFunction(\"I love You !!!\"); }, 3000);function myFunction(value) {document.getElementById(\"demo\").innerHTML = value;}",
          "let myPromise = new Promise(function(myResolve, myReject) {setTimeout(function() { myResolve(\"I love You !!\"); }, 3000);});myPromise.then(function(value) {document.getElementById(\"demo\").innerHTML = value;});",
          "function getFile(myCallback) {let req = new XMLHttpRequest();req.open('GET', \"mycar.html\");req.onload = function() {if (req.status == 200) {myCallback(req.responseText);} else {myCallback(\"Error: \" + req.status);}}req.send();}getFile(myDisplayer);",
          "let myPromise = new Promise(function(myResolve, myReject) {let req = new XMLHttpRequest();req.open('GET', \"mycar.html\");req.onload = function() {if (req.status == 200) {myResolve(req.response);} else {myReject(\"File not Found\");}};req.send();});myPromise.then(function(value) {myDisplayer(value);},function(error) {myDisplayer(error);});"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_async.asp",
    "cours": {
      "titre": "JavaScript Async",
      "description": "\"async and await make promises easier to write\"asyncmakes a function return a Promiseawaitmakes a function wait for a Promise",
      "lien": "https://www.w3schools.com/js/js_async.asp",
      "contenus": {
        "paragraphs": [
          "\"async and await make promises easier to write\"",
          "asyncmakes a function return a Promise",
          "awaitmakes a function wait for a Promise",
          "The keywordasyncbefore a function makes the function return a promise:",
          "Is the same as:",
          "Here is how to use the Promise:",
          "Try it Yourself »",
          "Or simpler, since you expect a normal value (a normal response, not an error):",
          "Try it Yourself »",
          "Theawaitkeyword can only be used inside anasyncfunction.",
          "Theawaitkeyword makes the function pause the execution \nand wait for a resolved promise before it continues:",
          "Let's go slowly and learn how to use it.",
          "Try it Yourself »",
          "The two arguments (resolve and reject) are pre-defined by JavaScript.",
          "We will not create them, but call one of them when the executor function is ready.",
          "Very often we will not need a reject function.",
          "Try it Yourself »",
          "Try it Yourself »",
          "Try it Yourself »",
          "ECMAScript 2017 introduced the JavaScript keywordsasyncandawait.",
          "The following table defines the first browser version with full support for both:"
        ],
        "lists": [],
        "examples": [
          "async function myFunction() {return \"Hello\";}",
          "function myFunction() {return Promise.resolve(\"Hello\");}",
          "myFunction().then(function(value) { /* code if successful */ },function(error) { /* code if some error */ });",
          "async function myFunction() {return \"Hello\";}myFunction().then(function(value) {myDisplayer(value);},function(error) {myDisplayer(error);});",
          "async function myFunction() {return \"Hello\";}myFunction().then(function(value) {myDisplayer(value);});",
          "let value = await promise;",
          "async function myDisplay() {let myPromise = new Promise(function(resolve,  reject) {resolve(\"I love You !!\");});document.getElementById(\"demo\").innerHTML = await myPromise;}myDisplay();",
          "async function myDisplay() {let myPromise = new Promise(function(resolve) {resolve(\"I love You !!\");});document.getElementById(\"demo\").innerHTML = await myPromise;}myDisplay();",
          "async function myDisplay() {let myPromise = new Promise(function(resolve) {setTimeout(function() {resolve(\"I love You !!\");}, 3000);});document.getElementById(\"demo\").innerHTML = await myPromise;}myDisplay();",
          "async function getFile() {let myPromise = new Promise(function(resolve) {let req = new XMLHttpRequest();req.open('GET', \"mycar.html\");req.onload = function() {if (req.status == 200) {resolve(req.response);} else {resolve(\"File not Found\");}};req.send();});document.getElementById(\"demo\").innerHTML = await myPromise;}getFile();"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_htmldom.asp",
    "cours": {
      "titre": "JavaScriptHTML DOM",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_htmldom.asp",
      "contenus": {
        "paragraphs": [
          "With the HTML DOM, JavaScript can access and change all the elements of an HTML \ndocument.",
          "When a web page is loaded, the browser creates aDocumentObjectModel of the page.",
          "TheHTML DOMmodel is constructed as a tree ofObjects:",
          "With the object model, JavaScript gets all the power it needs to create \ndynamic HTML:",
          "In the next chapters of this tutorial you will learn:",
          "The DOM is a W3C (World Wide Web Consortium) standard.",
          "The DOM defines a standard for accessing documents:",
          "\"The W3C Document Object Model (DOM) is a platform and language-neutral \ninterface that allows programs and scripts to dynamically access and update the \ncontent, structure, and style of a document.\"",
          "The W3C DOM standard is separated into 3 different parts:",
          "The HTML DOM is a standardobjectmodel andprogramming interfacefor HTML. It defines:",
          "In other words:The HTML DOM is a standard for how to get, change, add, or delete HTML elements."
        ],
        "lists": [
          [
            "JavaScript can change all the HTML elements in the page",
            "JavaScript can change all the HTML attributes in the page",
            "JavaScript can change all the CSS styles in the page",
            "JavaScript can remove existing HTML elements and attributes",
            "JavaScript can add new HTML elements and attributes",
            "JavaScript can react to all existing HTML events in the page",
            "JavaScript can create new HTML events in the page"
          ],
          [
            "How to change the content of HTML elements",
            "How to change the style (CSS) of HTML elements",
            "How to react to HTML DOM events",
            "How to add and delete HTML elements"
          ],
          [
            "Core DOM - standard model for all document types",
            "XML DOM - standard model for XML documents",
            "HTML DOM - standard model for HTML documents"
          ],
          [
            "The HTML elements asobjectsThepropertiesof all HTML elementsThemethodsto access all HTML elementsTheeventsfor all HTML elements",
            "Thepropertiesof all HTML elementsThemethodsto access all HTML elementsTheeventsfor all HTML elements",
            "Themethodsto access all HTML elements",
            "Theeventsfor all HTML elements"
          ]
        ],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_htmldom_methods.asp",
    "cours": {
      "titre": "JavaScript -HTML DOM Methods",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_htmldom_methods.asp",
      "contenus": {
        "paragraphs": [
          "HTML DOM methods areactionsyou can perform (on HTML \nElements).",
          "HTML DOM properties arevalues(of HTML Elements) that you can \nset or change.",
          "The HTML DOM can be accessed with JavaScript \n(and with other programming languages).",
          "In the DOM, all HTML elements are defined asobjects.",
          "The programming interface is \nthe properties and methods of each object.",
          "Apropertyis a value that you can get or set (like changing the \ncontent of an HTML element).",
          "Amethodis an action you can do (like add \nor deleting an HTML element).",
          "The following example changes the content (theinnerHTML) of the<p>element withid=\"demo\":",
          "In the example above,getElementByIdis amethod, whileinnerHTMLis aproperty.",
          "The most common way to access an HTML element is to use theidof the \nelement.",
          "In the example above thegetElementByIdmethod usedid=\"demo\"to find the \nelement.",
          "The easiest way to get the content of an element is by using theinnerHTMLproperty.",
          "TheinnerHTMLproperty is useful for getting or replacing the content of HTML elements.",
          "TheinnerHTMLproperty can be used to get or change any HTML element, \nincluding<html>and<body>."
        ],
        "lists": [],
        "examples": [
          "<html><body><p id=\"demo\"></p><script>document.getElementById(\"demo\").innerHTML = \"Hello World!\";</script></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_htmldom_document.asp",
    "cours": {
      "titre": "JavaScriptHTML DOM Document",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_htmldom_document.asp",
      "contenus": {
        "paragraphs": [
          "The HTML DOM document object is the owner of all other objects in your web page.",
          "The document object represents your web page.",
          "If you want to access any element in an HTML page, you always start with accessing the \ndocument object.",
          "Below are some examples of how you can use the document object to access and \nmanipulate HTML.",
          "The first HTML DOM Level 1 (1998), defined 11 HTML objects, object collections, and properties. These are still valid in HTML5.",
          "Later, in HTML DOM Level 3, more objects, collections, and properties were added."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_htmldom_elements.asp",
    "cours": {
      "titre": "JavaScriptHTML DOM Elements",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_htmldom_elements.asp",
      "contenus": {
        "paragraphs": [
          "This page teaches you how to find and access HTML elements in \nan HTML page.",
          "Often, with JavaScript, you want to manipulate HTML elements.",
          "To do so, you have to find the elements first. There are several ways to do this:",
          "The easiest way to find an HTML element in the DOM, is by using the element id.",
          "This example finds the element withid=\"intro\":",
          "If the element is found, the method will return the element as an object (in element).",
          "If the element is not found, element will containnull.",
          "This example finds all<p>elements:",
          "This example finds the element withid=\"main\", and then finds all<p>elements \ninside\"main\":",
          "If you want to find all HTML elements with the same class name, usegetElementsByClassName().",
          "This example returns a list of all elements withclass=\"intro\".",
          "If you want to find all HTML elements that match a specified CSS selector \n(id, class names, types, attributes, values of attributes, etc), use thequerySelectorAll()method.",
          "This example returns a list of all<p>elements withclass=\"intro\".",
          "This example finds the form element withid=\"frm1\", in the forms \ncollection, and displays all element \nvalues:",
          "The following HTML objects (and object collections) are also accessible:"
        ],
        "lists": [
          [
            "Finding HTML elements by id",
            "Finding HTML elements by tag name",
            "Finding HTML elements by class name",
            "Finding HTML elements by CSS selectors",
            "Finding HTML elements by HTML object collections"
          ],
          [
            "document.anchors",
            "document.body",
            "document.documentElement",
            "document.embeds",
            "document.forms",
            "document.head",
            "document.images",
            "document.links",
            "document.scripts",
            "document.title"
          ]
        ],
        "examples": [
          "const element = document.getElementById(\"intro\");",
          "const element = document.getElementsByTagName(\"p\");",
          "const x = document.getElementById(\"main\");const y = x.getElementsByTagName(\"p\");",
          "const x = document.getElementsByClassName(\"intro\");",
          "const x = document.querySelectorAll(\"p.intro\");",
          "const x = document.forms[\"frm1\"];let text = \"\";for (let i = 0; i < x.length; i++) {text += x.elements[i].value + \"<br>\";}document.getElementById(\"demo\").innerHTML = text;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_htmldom_html.asp",
    "cours": {
      "titre": "JavaScriptHTML DOM - Changing HTML",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_htmldom_html.asp",
      "contenus": {
        "paragraphs": [
          "The HTML DOM allows JavaScript to change the content of HTML elements.",
          "The easiest way to modify the content of an HTML element is by using theinnerHTMLproperty.",
          "To change the content of an HTML element, use this syntax:",
          "This example changes the content of a<p>element:",
          "Example explained:",
          "This example changes the content of an<h1>element:",
          "Example explained:",
          "To change the value of an HTML attribute, use this syntax:",
          "This example changes the value of the src attribute of an<img>element:",
          "Example explained:",
          "JavaScript can create dynamic HTML content:",
          "",
          "In JavaScript,document.write()can be used to write directly to the HTML \noutput stream:",
          "Never usedocument.write()after the document is loaded. It will \noverwrite the document."
        ],
        "lists": [
          [
            "The HTML document above contains a<p>element withid=\"p1\"",
            "We use the HTML DOM to get the element withid=\"p1\"",
            "A JavaScript changes the content (innerHTML) of that element to \"New \n  text!\""
          ],
          [
            "The HTML document above contains an<h1>element withid=\"id01\"",
            "We use the HTML DOM to get the element withid=\"id01\"",
            "A JavaScript changes the content (innerHTML) of that element to \"New \n  Heading\""
          ],
          [
            "The HTML document above contains an<img>element withid=\"myImage\"",
            "We use the HTML DOM to get the element withid=\"myImage\"",
            "A JavaScript changes thesrcattribute of that element from \"smiley.gif\" to \"landscape.jpg\""
          ]
        ],
        "examples": [
          "document.getElementById(id).innerHTML =new HTML",
          "<html><body><p id=\"p1\">Hello World!</p><script>document.getElementById(\"p1\").innerHTML = \"New text!\";</script></body></html>",
          "<!DOCTYPE html><html><body><h1 id=\"id01\">Old Heading</h1><script>const element = document.getElementById(\"id01\");element.innerHTML = \"New Heading\";</script></body></html>",
          "document.getElementById(id).attribute = new value",
          "<!DOCTYPE html><html><body><img id=\"myImage\" src=\"smiley.gif\"><script>document.getElementById(\"myImage\").src = \"landscape.jpg\";</script></body></html>",
          "<!DOCTYPE html><html><body><script>document.getElementById(\"demo\").innerHTML = \"Date : \" + Date();\n</script></body></html>",
          "<!DOCTYPE html><html><body><p>Bla bla bla</p><script>document.write(Date());</script><p>Bla bla bla</p></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_validation.asp",
    "cours": {
      "titre": "JavaScriptForms",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_validation.asp",
      "contenus": {
        "paragraphs": [
          "HTML form validation can be done by JavaScript.",
          "If a form field (fname) is empty, this function alerts a message, and returns \nfalse, to prevent the form from being submitted:",
          "The function can be called when the form is submitted:",
          "JavaScript is often used to validate numeric input:",
          "Please input a number between 1 and 10",
          "",
          "HTML form validation can be performed automatically by the browser:",
          "If a form field (fname) is empty, therequiredattribute prevents this form from being \nsubmitted:",
          "Automatic HTML form validation does not work in Internet Explorer 9 or earlier.",
          "Data validation is the process of ensuring that user input is clean, \ncorrect, and useful.",
          "Typical validation tasks are:",
          "Most often, the purpose of data validation is to ensure correct user input.",
          "Validation can be defined by many different methods, and deployed in many \ndifferent ways.",
          "Server side validationis performed by a web server, after input has been sent to the \nserver.",
          "Client side validationis performed by a web browser, before input is sent to a web server.",
          "HTML5 introduced a new HTML validation concept calledconstraint \nvalidation.",
          "HTML constraint validation is based on:",
          "For a full list, go toHTML \nInput Attributes.",
          "For a full list, go toCSS \nPseudo Classes."
        ],
        "lists": [
          [
            "has the user filled in all required fields?",
            "has the user entered a valid date?",
            "has the user entered text in a numeric field?"
          ],
          [
            "Constraint validationHTMLInput Attributes",
            "Constraint validationCSS Pseudo Selectors",
            "Constraint validationDOM Properties and Methods"
          ]
        ],
        "examples": [
          "function validateForm() {let\nx = document.forms[\"myForm\"][\"fname\"].value;if (x == \"\") {alert(\"Name must be filled out\");return false;}}",
          "<form name=\"myForm\" action=\"/action_page.php\"onsubmit=\"return validateForm()\"method=\"post\">Name: <input type=\"text\" name=\"fname\"><input type=\"submit\" value=\"Submit\"></form>",
          "<form action=\"/action_page.php\" method=\"post\"><input type=\"text\" name=\"fname\"required><input type=\"submit\" value=\"Submit\"></form>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_htmldom_css.asp",
    "cours": {
      "titre": "JavaScriptHTML DOM - Changing CSS",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_htmldom_css.asp",
      "contenus": {
        "paragraphs": [
          "The HTML DOM allows JavaScript to change the style of HTML elements.",
          "To change the style of an HTML element, use this syntax:",
          "The following example changes the style of a<p>element:",
          "The HTML DOM allows you to execute code when an event occurs.",
          "Events are generated by the browser when \"things happen\" to HTML elements:",
          "You will learn more about events in the next chapter of this tutorial.",
          "This example changes the style of the HTML element withid=\"id1\", when the \nuser clicks a button:",
          "VisibilityHow to make an element invisible. Do you want to show the element or not?",
          "For all HTML DOM style properties, look at our completeHTML DOM Style Object Reference."
        ],
        "lists": [
          [
            "An element is clicked on",
            "The page has loaded",
            "Input fields are changed"
          ]
        ],
        "examples": [
          "document.getElementById(id).style.property=new style",
          "<html><body><p id=\"p2\">Hello World!</p><script>document.getElementById(\"p2\").style.color = \"blue\";</script></body></html>",
          "<!DOCTYPE html><html><body><h1 id=\"id1\">My Heading 1</h1><button type=\"button\"onclick=\"document.getElementById('id1').style.color = 'red'\">Click Me!</button></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_htmldom_animate.asp",
    "cours": {
      "titre": "JavaScript HTML DOM Animation",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_htmldom_animate.asp",
      "contenus": {
        "paragraphs": [
          "Learn to create HTML animations using JavaScript.",
          "To demonstrate how to create HTML animations with JavaScript, we will use a simple \nweb page:",
          "All animations should be relative to a container element.",
          "The container element should be created with style = \"position: relative\".",
          "The animation element should be created with style = \"position: absolute\".",
          "JavaScript animations are done by programming gradual changes in an element's \nstyle.",
          "The changes are called by a timer. When the timer interval is small, the \nanimation looks continuous.",
          "The basic code is:"
        ],
        "lists": [],
        "examples": [
          "<!DOCTYPE html><html><body><h1>My First \n JavaScript Animation</h1><div id=\"animation\">My animation will go here</div></body></html>",
          "<div id =\"container\"><div id =\"animate\">My \n animation will go here</div></div>",
          "#container {width: 400px;height: \n 400px;position: relative;background: yellow;}#animate {width: 50px;height: \n 50px;position: absolute;background: red;}",
          "id = setInterval(frame, 5);function frame() {if (/* \n test for finished */) {clearInterval(id);} else {/* code to change the element style */}}",
          "function myMove() {let id = null;const elem = document.getElementById(\"animate\");let pos = 0;clearInterval(id);id = setInterval(frame, 5);function frame() {if (pos == \n 350) {clearInterval(id);} else {pos++;elem.style.top = pos + 'px';elem.style.left = pos + 'px';}}}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_htmldom_events.asp",
    "cours": {
      "titre": "JavaScriptHTML DOM Events",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_htmldom_events.asp",
      "contenus": {
        "paragraphs": [
          "HTML DOM allows JavaScript to react to HTML events:",
          "A JavaScript can be executed when an event occurs, like when a user clicks on an HTML element.",
          "To execute code when a user clicks on an element, add JavaScript code to an HTML event attribute:",
          "Examples of HTML events:",
          "In this example, the content of the<h1>element is changed when a user clicks on it:",
          "In this example, a function is called from the event handler:",
          "To assign events to HTML elements you can use event attributes.",
          "Assign an onclick event to a button element:",
          "In the example above, a function nameddisplayDatewill be executed \nwhen the button is clicked.",
          "The HTML DOM allows you to assign events to HTML elements using JavaScript:",
          "Assign an onclick event to a button element:",
          "In the example above, a function nameddisplayDateis assigned to \nan HTML element with theid=\"myBtn\".",
          "The function will be executed \nwhen the button is clicked.",
          "Theonloadandonunloadevents are triggered when the user enters or leaves the page.",
          "Theonloadevent can be used to check the visitor's browser type and browser version, and load the proper version of the web page based on the information.",
          "Theonloadandonunloadevents can be used to deal with cookies.",
          "Theoninputevent is often to some action while the user input data.",
          "Below is an example of how to use the oninput to change the content of an input field.",
          "Theonchangeevent is often used in combination with validation of input fields.",
          "Below is an example of how to use the onchange. TheupperCase()function will be called when a user changes the content of an input field.",
          "Theonmouseoverandonmouseoutevents can be used to trigger a function when the user mouses \nover, or out of, an HTML element:",
          "Try it Yourself »",
          "Theonmousedown,onmouseup, andonclickevents are all parts of a \nmouse-click. First when a mouse-button is clicked, the onmousedown event is \ntriggered, then, when the mouse-button \nis released, the onmouseup event is triggered, finally, when the mouse-click is completed, the onclick event is triggered.",
          "Try it Yourself »",
          "onmousedown and onmouseupChange an image when a user holds down the mouse button.",
          "onloadDisplay an alert box when the page has finished loading.",
          "onfocusChange the background-color of an input field when it gets focus.",
          "Mouse EventsChange the color of an element when the cursor moves over it.",
          "For a list of all HTML DOM events, look at our completeHTML DOM Event Object Reference."
        ],
        "lists": [
          [
            "When a user clicks the mouse",
            "When a web page has loaded",
            "When an image has been loaded",
            "When the mouse moves over an element",
            "When an input field is changed",
            "When an HTML form is submitted",
            "When a user strokes a key"
          ]
        ],
        "examples": [
          "onclick=JavaScript",
          "<!DOCTYPE html><html><body><h1 onclick=\"this.innerHTML = 'Ooops!'\">Click on this text!</h1></body></html>",
          "<!DOCTYPE html><html><body><h1 onclick=\"changeText(this)\">Click on this text!</h1><script>function changeText(id) {id.innerHTML = \"Ooops!\";}</script></body></html>",
          "<button onclick=\"displayDate()\">Try it</button>",
          "<script>document.getElementById(\"myBtn\").onclick = displayDate;</script>",
          "<body onload=\"checkCookies()\">",
          "<input type=\"text\" id=\"fname\"\noninput=\"upperCase()\">",
          "<input type=\"text\" id=\"fname\"\nonchange=\"upperCase()\">"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_htmldom_eventlistener.asp",
    "cours": {
      "titre": "JavaScriptHTML DOM EventListener",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_htmldom_eventlistener.asp",
      "contenus": {
        "paragraphs": [
          "Add an event listener that fires when a user clicks a button:",
          "TheaddEventListener()method attaches an event handler to the specified element.",
          "TheaddEventListener()method attaches an event handler to an element without overwriting existing event handlers.",
          "You can add many event handlers to one element.",
          "You can add many event handlers of the same type to one element, i.e two \"click\" events.",
          "You can add event listeners to any DOM object not only HTML elements. i.e the window object.",
          "TheaddEventListener()method makes it easier to control how the event reacts to bubbling.",
          "When using theaddEventListener()method, the JavaScript is separated from the HTML markup, for better readability \nand allows you to add event listeners even when you do not control the HTML markup.",
          "You can easily remove an event listener by using theremoveEventListener()method.",
          "The first parameter is the type of the event (like \"click\" or \"mousedown\" \nor any otherHTML DOM Event.)",
          "The second parameter is the function we want to call when the event occurs.",
          "The third parameter is a boolean value specifying whether to use event bubbling or event capturing. This parameter is optional.",
          "Note that you don't use the \n\"on\" prefix for the event; use \"click\" instead of \"onclick\".",
          "Alert \"Hello World!\" when the user clicks on an element:",
          "You can also refer to an external \"named\" function:",
          "Alert \"Hello World!\" when the user clicks on an element:",
          "TheaddEventListener()method allows you to add many events to the same \nelement, without overwriting existing events:",
          "You can add events of different types to the same element:",
          "TheaddEventListener()method allows you to add event listeners on any HTML \nDOM object such as HTML elements, the HTML document, the window object, or other \nobjects that support events, like thexmlHttpRequestobject.",
          "Add an event listener that fires when a user resizes the window:",
          "When passing parameter values, use \nan \"anonymous function\" that calls the specified function with the parameters:",
          "There are two ways of event propagation in the HTML DOM, bubbling and capturing.",
          "Event propagation is a way of defining the element order when an event occurs.\nIf you have a <p> element inside a <div> element, and the user clicks on the <p> element, which element's \n\"click\" event should be handled first?",
          "Inbubblingthe inner most element's event is handled first and then the outer:\nthe <p> element's click event is handled first, then the <div> element's click event.",
          "Incapturingthe outer most element's event is handled first and then the inner:\nthe <div> element's click event will be handled first, then the <p> element's click event.",
          "With the addEventListener() method you can specify the propagation type by using the \"useCapture\" parameter:",
          "The default value is false, which will use the bubbling propagation, when the value is set to true, the event uses the capturing propagation.",
          "TheremoveEventListener()method removes event handlers that have been \nattached with the addEventListener() method:",
          "For a list of all HTML DOM events, look at our completeHTML DOM Event Object Reference."
        ],
        "lists": [],
        "examples": [
          "document.getElementById(\"myBtn\").addEventListener(\"click\", displayDate);",
          "element.addEventListener(event, function, useCapture);",
          "element.addEventListener(\"click\", function(){ alert(\"Hello World!\"); });",
          "element.addEventListener(\"click\",  myFunction);function myFunction() {alert (\"Hello World!\");}",
          "element.addEventListener(\"click\", myFunction);element.addEventListener(\"click\", mySecondFunction);",
          "element.addEventListener(\"mouseover\", myFunction);element.addEventListener(\"click\", mySecondFunction);element.addEventListener(\"mouseout\", myThirdFunction);",
          "window.addEventListener(\"resize\", function(){document.getElementById(\"demo\").innerHTML =sometext;});",
          "element.addEventListener(\"click\", function(){ myFunction(p1, p2); });",
          "addEventListener(event,function,useCapture);",
          "document.getElementById(\"myP\").addEventListener(\"click\", myFunction, true);document.getElementById(\"myDiv\").addEventListener(\"click\", myFunction, true);",
          "element.removeEventListener(\"mousemove\", myFunction);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_htmldom_navigation.asp",
    "cours": {
      "titre": "JavaScriptHTML DOM Navigation",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_htmldom_navigation.asp",
      "contenus": {
        "paragraphs": [
          "With the HTML DOM, you can navigate the node tree using node \nrelationships.",
          "According to the W3C HTML DOM standard, everything in an HTML document is a node:",
          "With the HTML DOM, all nodes in the node tree can be accessed by JavaScript.",
          "New nodes can be created, and all \nnodes can be modified or deleted.",
          "The nodes in the node tree have a hierarchical relationship to each other.",
          "The terms parent, child, and sibling are used to describe the relationships.",
          "From the HTML above you can read:",
          "and:",
          "You can use the following node properties to navigate between nodes with \nJavaScript:",
          "A common error in DOM processing is to expect an element node to contain text.",
          "The element node<title>(in the example above) doesnotcontain text.",
          "It contains atext nodewith the value \"DOM Tutorial\".",
          "The value of the text node can be accessed by the \nnode'sinnerHTMLproperty:myTitle = document.getElementById(\"demo\").innerHTML;Accessing the innerHTML property is the same as accessing thenodeValueof the first child:myTitle = document.getElementById(\"demo\").firstChild.nodeValue;Accessing the first child can also be done like this:myTitle = document.getElementById(\"demo\").childNodes[0].nodeValue;All the (3) following examples retrieves the text of an<h1>element and copies it \ninto a<p>element:Example<html><body><h1 id=\"id01\">My First Page</h1><p id=\"id02\"></p><script>document.getElementById(\"id02\").innerHTML \n = document.getElementById(\"id01\").innerHTML;</script></body></html>Try it Yourself »Example<html><body><h1 id=\"id01\">My First Page</h1><p id=\"id02\"></p><script>document.getElementById(\"id02\").innerHTML = document.getElementById(\"id01\").firstChild.nodeValue;</script></body></html>Try it Yourself »Example<html><body><h1 id=\"id01\">My First Page</h1><p id=\"id02\">Hello!</p><script>document.getElementById(\"id02\").innerHTML = document.getElementById(\"id01\").childNodes[0].nodeValue;</script></body></html>Try it Yourself »InnerHTMLIn this tutorial we use the innerHTML property to retrieve the content of an \nHTML element.However, learning \nthe other methods above is useful for understanding the tree structure and the \nnavigation of the DOM.DOM Root NodesThere are two special properties that allow access to the full document:document.body- The body of the documentdocument.documentElement- The full documentExample<html><body><h2>JavaScript HTMLDOM</h2><p>Displaying document.body</p><p \nid=\"demo\"></p><script>document.getElementById(\"demo\").innerHTML \n= document.body.innerHTML;</script></body></html>Try it Yourself »Example<html><body><h2>JavaScript HTMLDOM</h2><p>Displaying document.documentElement</p><p id=\"demo\"></p><script>document.getElementById(\"demo\").innerHTML = \ndocument.documentElement.innerHTML;</script></body></html>Try it Yourself »The nodeName PropertyThenodeNameproperty specifies the name of a node.nodeName is read-onlynodeName of an element node is the same as the tag namenodeName of an attribute node is the attribute namenodeName of a text node is always #textnodeName of the document node is always #documentExample<h1 id=\"id01\">My First Page</h1><p id=\"id02\"></p><script>document.getElementById(\"id02\").innerHTML \n = document.getElementById(\"id01\").nodeName;</script>Try it Yourself »Note:nodeNamealways contains the uppercase tag name of an HTML element.The nodeValue PropertyThenodeValueproperty specifies the value of a node.nodeValue for element nodes isnullnodeValue for text nodes is the text itselfnodeValue for attribute nodes is the attribute valueThe nodeType PropertyThenodeTypeproperty is read only. It returns the type of a node.Example<h1 id=\"id01\">My First Page</h1><p id=\"id02\"></p><script>document.getElementById(\"id02\").innerHTML \n = document.getElementById(\"id01\").nodeType;</script>Try it Yourself »The most important nodeType properties are:NodeTypeExampleELEMENT_NODE1<h1 class=\"heading\">W3Schools</h1>ATTRIBUTE_NODE2class = \"heading\" (deprecated)TEXT_NODE3W3SchoolsCOMMENT_NODE8<!-- This is a comment -->DOCUMENT_NODE9The HTML document itself (the parent of <html>)DOCUMENT_TYPE_NODE10<!Doctype html>Type 2 is deprecated in the HTML DOM (but works). It is not deprecated in the XML DOM.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "Accessing the innerHTML property is the same as accessing thenodeValueof the first child:",
          "Accessing the first child can also be done like this:",
          "All the (3) following examples retrieves the text of an<h1>element and copies it \ninto a<p>element:",
          "In this tutorial we use the innerHTML property to retrieve the content of an \nHTML element.",
          "However, learning \nthe other methods above is useful for understanding the tree structure and the \nnavigation of the DOM.",
          "There are two special properties that allow access to the full document:",
          "ThenodeNameproperty specifies the name of a node.",
          "Note:nodeNamealways contains the uppercase tag name of an HTML element.",
          "ThenodeValueproperty specifies the value of a node.",
          "ThenodeTypeproperty is read only. It returns the type of a node.",
          "The most important nodeType properties are:",
          "Type 2 is deprecated in the HTML DOM (but works). It is not deprecated in the XML DOM."
        ],
        "lists": [
          [
            "The entire document is a document node",
            "Every HTML element is an element node",
            "The text inside HTML elements are text nodes",
            "Every HTML attribute is an attribute node (deprecated)",
            "All comments are comment nodes"
          ],
          [
            "In a node tree, the top node is called the root (or root node)",
            "Every node has exactly one parent, except the root (which has no parent)",
            "A node can have a number of children",
            "Siblings (brothers or sisters) are nodes with the same parent"
          ],
          [
            "<html>is the root node",
            "<html>has no parents",
            "<html>is the parent of<head>and<body>",
            "<head>is the first child of<html>",
            "<body>is the last child of<html>"
          ],
          [
            "<head>has one child:<title>",
            "<title>has one child (a text node): \"DOM Tutorial\"",
            "<body>has two children:<h1>and<p>",
            "<h1>has one child: \"DOM Lesson one\"",
            "<p>has one child: \"Hello world!\"",
            "<h1>and<p>are siblings"
          ],
          [
            "parentNode",
            "childNodes[nodenumber]",
            "firstChild",
            "lastChild",
            "nextSibling",
            "previousSibling"
          ],
          [
            "document.body- The body of the document",
            "document.documentElement- The full document"
          ],
          [
            "nodeName is read-only",
            "nodeName of an element node is the same as the tag name",
            "nodeName of an attribute node is the attribute name",
            "nodeName of a text node is always #text",
            "nodeName of the document node is always #document"
          ],
          [
            "nodeValue for element nodes isnull",
            "nodeValue for text nodes is the text itself",
            "nodeValue for attribute nodes is the attribute value"
          ]
        ],
        "examples": [
          "<html><head><title>DOM Tutorial</title></head><body><h1>DOM Lesson one</h1><p>Hello world!</p></body></html>",
          "<title \n id=\"demo\">DOM Tutorial</title>",
          "myTitle = document.getElementById(\"demo\").innerHTML;",
          "myTitle = document.getElementById(\"demo\").firstChild.nodeValue;",
          "myTitle = document.getElementById(\"demo\").childNodes[0].nodeValue;",
          "<html><body><h1 id=\"id01\">My First Page</h1><p id=\"id02\"></p><script>document.getElementById(\"id02\").innerHTML \n = document.getElementById(\"id01\").innerHTML;</script></body></html>",
          "<html><body><h1 id=\"id01\">My First Page</h1><p id=\"id02\"></p><script>document.getElementById(\"id02\").innerHTML = document.getElementById(\"id01\").firstChild.nodeValue;</script></body></html>",
          "<html><body><h1 id=\"id01\">My First Page</h1><p id=\"id02\">Hello!</p><script>document.getElementById(\"id02\").innerHTML = document.getElementById(\"id01\").childNodes[0].nodeValue;</script></body></html>",
          "<html><body><h2>JavaScript HTMLDOM</h2><p>Displaying document.body</p><p \nid=\"demo\"></p><script>document.getElementById(\"demo\").innerHTML \n= document.body.innerHTML;</script></body></html>",
          "<html><body><h2>JavaScript HTMLDOM</h2><p>Displaying document.documentElement</p><p id=\"demo\"></p><script>document.getElementById(\"demo\").innerHTML = \ndocument.documentElement.innerHTML;</script></body></html>",
          "<h1 id=\"id01\">My First Page</h1><p id=\"id02\"></p><script>document.getElementById(\"id02\").innerHTML \n = document.getElementById(\"id01\").nodeName;</script>",
          "<h1 id=\"id01\">My First Page</h1><p id=\"id02\"></p><script>document.getElementById(\"id02\").innerHTML \n = document.getElementById(\"id01\").nodeType;</script>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_htmldom_nodes.asp",
    "cours": {
      "titre": "JavaScriptHTML DOM Elements (Nodes)",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_htmldom_nodes.asp",
      "contenus": {
        "paragraphs": [
          "Adding and Removing Nodes (HTML Elements)",
          "To add a new element to the HTML DOM, you must create the element (element node) first, \nand then append it to an existing element.",
          "This code creates a new<p>element:",
          "To add text to the<p>element, you must create a text node first. This code creates a text node:",
          "Then you must append the text node to the<p>element:",
          "Finally you must append the new element to an existing element.",
          "This code finds an existing element:",
          "This code appends the new element to the existing element:",
          "TheappendChild()method in the previous example, appended the new element as \nthe last child of the parent.",
          "If you don't want that you can use theinsertBefore()method:",
          "To remove an HTML element, use theremove()method:",
          "The HTML document contains a<div>element with two child nodes (two<p>elements):",
          "Find the element you want to remove:",
          "Then execute the remove() method on that element:",
          "Theremove()method does not work in \nolder browsers, see the example below on how to useremoveChild()instead.",
          "For browsers that does not support theremove()method, you have to find the \nparent node to remove an element:",
          "This HTML document contains a<div>element with two child nodes (two<p>elements):",
          "Find the element withid=\"div1\":",
          "Find the<p>element withid=\"p1\":",
          "Remove the child from the parent:",
          "Here is a common workaround: Find the child you want to remove, and use itsparentNodeproperty to find the parent:",
          "To replace an element to the HTML DOM, use thereplaceChild()method:"
        ],
        "lists": [],
        "examples": [
          "<div id=\"div1\"><p id=\"p1\">This is a paragraph.</p><p id=\"p2\">This is another paragraph.</p></div><script>const para = document.createElement(\"p\");const node = document.createTextNode(\"This is new.\");para.appendChild(node);const element = document.getElementById(\"div1\");element.appendChild(para);</script>",
          "const para = document.createElement(\"p\");",
          "const node = document.createTextNode(\"This is a new paragraph.\");",
          "para.appendChild(node);",
          "const element = document.getElementById(\"div1\");",
          "element.appendChild(para);",
          "<div id=\"div1\"><p id=\"p1\">This is a paragraph.</p><p id=\"p2\">This is another paragraph.</p></div><script>const para = document.createElement(\"p\");const node = document.createTextNode(\"This is new.\");para.appendChild(node);const element = document.getElementById(\"div1\");const child = document.getElementById(\"p1\");element.insertBefore(para, child);</script>",
          "<div><p id=\"p1\">This is a paragraph.</p><p id=\"p2\">This is another paragraph.</p></div><script>const elmnt = document.getElementById(\"p1\");\nelmnt.remove();</script>",
          "<div><p id=\"p1\">This is a paragraph.</p><p id=\"p2\">This is another paragraph.</p></div>",
          "const elmnt = document.getElementById(\"p1\");",
          "elmnt.remove();",
          "<div id=\"div1\"><p id=\"p1\">This is a paragraph.</p><p id=\"p2\">This is another paragraph.</p></div><script>const parent = document.getElementById(\"div1\");const child = document.getElementById(\"p1\");parent.removeChild(child);</script>",
          "<div id=\"div1\"><p id=\"p1\">This is a paragraph.</p><p id=\"p2\">This is another paragraph.</p></div>",
          "const parent = document.getElementById(\"div1\");",
          "const child = document.getElementById(\"p1\");",
          "parent.removeChild(child);",
          "const child = document.getElementById(\"p1\");child.parentNode.removeChild(child);",
          "<div id=\"div1\"><p id=\"p1\">This is a paragraph.</p><p id=\"p2\">This is another paragraph.</p></div><script>const para = document.createElement(\"p\");const node = document.createTextNode(\"This is new.\");para.appendChild(node);const parent = document.getElementById(\"div1\");const child = document.getElementById(\"p1\");parent.replaceChild(para, child);</script>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_htmldom_collections.asp",
    "cours": {
      "titre": "JavaScript HTML DOM Collections",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_htmldom_collections.asp",
      "contenus": {
        "paragraphs": [
          "ThegetElementsByTagName()method returns anHTMLCollectionobject.",
          "AnHTMLCollectionobject is \nan array-like list (collection) of HTML elements.",
          "The following code selects all<p>elements in a document:",
          "The elements in the collection can be accessed by an index number.",
          "To access the \nsecond <p> element you can write:",
          "Note:The index starts at 0.",
          "Thelengthproperty defines the number of elements in anHTMLCollection:",
          "Thelengthproperty is useful when you want to loop through the elements in a \ncollection:",
          "Change the text color of all <p> elements:",
          "An HTMLCollection is NOT an array!",
          "An HTMLCollection may look \nlike an array, but it is not.",
          "You can loop through the list and refer to \nthe elements with a number (just like an array).",
          "However, you cannot use array methods like valueOf(), pop(), push(), \nor join() on an HTMLCollection."
        ],
        "lists": [],
        "examples": [
          "const myCollection = document.getElementsByTagName(\"p\");",
          "myCollection[1]",
          "myCollection.length",
          "const myCollection = document.getElementsByTagName(\"p\");for (let i = 0; i < myCollection.length; i++) {myCollection[i].style.color = \"red\";}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_htmldom_nodelist.asp",
    "cours": {
      "titre": "JavaScriptHTML DOM Node Lists",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_htmldom_nodelist.asp",
      "contenus": {
        "paragraphs": [
          "ANodeListobject is a list (collection) of nodes extracted from a \ndocument.",
          "ANodeListobject is almost the same as anHTMLCollectionobject.",
          "Some (older) browsers return a NodeList object instead of an HTMLCollection \nfor methods likegetElementsByClassName().",
          "All browsers return a NodeList object for the propertychildNodes.",
          "Most browsers return a NodeList object for the methodquerySelectorAll().",
          "The following code selects all<p>nodes in a document:",
          "The elements in the NodeList can be accessed by an index number.",
          "To access the \nsecond <p> node you can write:",
          "Note:The index starts at 0.",
          "Thelengthproperty defines the number of nodes in a node list:",
          "Thelengthproperty is useful when you want to loop through the nodes in a node \nlist:",
          "Change the color of all <p> elements in a node \nlist:",
          "ANodeListand anHTMLcollectionis very much the same thing.",
          "Both are array-like collections (lists) of nodes (elements) extracted from a \ndocument. The nodes can be accessed by index numbers. The index starts at 0.",
          "Both have alengthproperty that returns the number of elements in the list (collection).",
          "An HTMLCollection is a collection ofdocument elements.",
          "A NodeList is a collection ofdocument nodes(element nodes, attribute nodes, and text nodes).",
          "HTMLCollection items can be accessed by their name, id, or index number.",
          "NodeList items can only be accessed by their index number.",
          "An HTMLCollection is always alivecollection. Example: If you add a <li> element to a list in the DOM, the list in the HTMLCollection will also change.",
          "A NodeList is most often astaticcollection. Example: If you add a <li> element to a list in the DOM, the list in NodeList will not change.",
          "ThegetElementsByClassName()andgetElementsByTagName()methods return a live HTMLCollection.",
          "ThequerySelectorAll()method returns a static NodeList.",
          "ThechildNodesproperty returns a live NodeList.",
          "A NodeList may look like an array, but it is not.",
          "You can loop through a NodeList and refer to its nodes by index.",
          "But, you cannot use Array methods like push(), pop(), or join() on a NodeList."
        ],
        "lists": [],
        "examples": [
          "const myNodeList = document.querySelectorAll(\"p\");",
          "myNodeList[1]",
          "myNodelist.length",
          "const myNodelist = document.querySelectorAll(\"p\");for (let i = 0; i < myNodelist.length; i++) {myNodelist[i].style.color = \"red\";}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_window.asp",
    "cours": {
      "titre": "JavaScriptWindow - The Browser Object Model",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_window.asp",
      "contenus": {
        "paragraphs": [
          "The Browser Object Model (BOM) allows JavaScript to \"talk to\" \nthe browser.",
          "There are no official standards for theBrowserObjectModel (BOM).",
          "Since modern browsers have implemented (almost) the same methods and \nproperties for JavaScript interactivity, it is often referred to, as methods and \nproperties of the BOM.",
          "Thewindowobject is supported by all browsers. It represents \nthe browser's window.",
          "All global JavaScript objects, functions, and variables automatically become \nmembers of the window object.",
          "Global variables are properties of the window object.",
          "Global functions are methods of the window object.",
          "Even the document object (of the HTML DOM) is a property of the window \nobject:",
          "is the same as:",
          "Two properties can be used to determine the size of the browser \nwindow.",
          "Both properties return the sizes in \npixels:",
          "The browser window (the browser viewport) is NOT including toolbars and scrollbars.",
          "Some other methods:"
        ],
        "lists": [
          [
            "window.innerHeight- the inner height of the browser window (in pixels)",
            "window.innerWidth- the inner width of the browser window (in pixels)"
          ],
          [
            "window.open()- open a new window",
            "window.close()- close the current window",
            "window.moveTo()- move the current window",
            "window.resizeTo()- resize the current window"
          ]
        ],
        "examples": [
          "window.document.getElementById(\"header\");",
          "document.getElementById(\"header\");",
          "let w = window.innerWidth;let h = window.innerHeight;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_window_screen.asp",
    "cours": {
      "titre": "JavaScriptWindow Screen",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_window_screen.asp",
      "contenus": {
        "paragraphs": [
          "The window.screen object contains information \nabout the user's screen.",
          "Thewindow.screenobject can be written without the window prefix.",
          "Properties:",
          "Thescreen.widthproperty returns the width of the visitor's screen in \npixels.",
          "Display the width of the screen in pixels:",
          "Result will be:",
          "Thescreen.heightproperty returns the height of the visitor's screen in pixels.",
          "Display the height of the screen in pixels:",
          "Result will be:",
          "Thescreen.availWidthproperty returns the width of the visitor's screen, in \npixels, \nminus interface features like the Windows Taskbar.",
          "Display the available width of the screen in pixels:",
          "Result will be:",
          "Thescreen.availHeightproperty returns the height of the visitor's screen, \nin pixels, minus interface features like the Windows Taskbar.",
          "Display the available height of the screen in pixels:",
          "Result will be:",
          "Thescreen.colorDepthproperty returns the number of bits used to display one color.",
          "All modern computers use 24 bit or 32 bit hardware for color resolution:",
          "Older computers used 16 bits: 65,536 different \"High Colors\" resolution.",
          "Very old computers, and old cell phones used 8 bits: 256 different \"VGA colors\".",
          "Display the color depth of the screen in bits:",
          "Result will be:",
          "The #rrggbb (rgb) values used in HTML represents \"True Colors\" (16,777,216 different colors)",
          "Thescreen.pixelDepthproperty returns the pixel depth of the screen.",
          "Display the pixel depth of the screen in bits:",
          "Result will be:",
          "For modern computers, Color Depth and Pixel Depth are equal."
        ],
        "lists": [
          [
            "screen.width",
            "screen.height",
            "screen.availWidth",
            "screen.availHeight",
            "screen.colorDepth",
            "screen.pixelDepth"
          ],
          [
            "24 bits =      16,777,216 different \"True Colors\"",
            "32 bits = 4,294,967,296 different \"Deep Colors\""
          ]
        ],
        "examples": [
          "document.getElementById(\"demo\").innerHTML =\"Screen Width: \" + screen.width;",
          "document.getElementById(\"demo\").innerHTML =\"Screen Height: \" + screen.height;",
          "document.getElementById(\"demo\").innerHTML =\"Available Screen Width: \" + screen.availWidth;",
          "document.getElementById(\"demo\").innerHTML =\"Available Screen Height: \" + screen.availHeight;",
          "document.getElementById(\"demo\").innerHTML =\"Screen Color Depth: \" + screen.colorDepth;",
          "document.getElementById(\"demo\").innerHTML =\"Screen Pixel Depth: \" + screen.pixelDepth;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_window_location.asp",
    "cours": {
      "titre": "JavaScriptWindow Location",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_window_location.asp",
      "contenus": {
        "paragraphs": [
          "Thewindow.locationobject can be used to get \nthe current page address (URL) and to redirect the browser to a new page.",
          "Thewindow.locationobject can be written without the window prefix.",
          "Some examples:",
          "Thewindow.location.hrefproperty returns the URL of the current page.",
          "Display the href (URL) of the current page:",
          "Result is:",
          "Thewindow.location.hostnameproperty returns the name of the internet host (of the current page).",
          "Display the name of the host:",
          "Result is:",
          "Thewindow.location.pathnameproperty returns the pathname of \nthe current page.",
          "Display the path name of the current URL:",
          "Result is:",
          "Thewindow.location.protocolproperty returns the web protocol of the page.",
          "Display the web protocol:",
          "Result is:",
          "Thewindow.location.portproperty returns the number of the internet host \nport (of the current page).",
          "Display the name of the host:",
          "Result is:",
          "Most browsers will not display default port numbers (80 for http and 443 for https)",
          "Thewindow.location.assign()method loads a new document.",
          "Load a new document:"
        ],
        "lists": [
          [
            "window.location.hrefreturns the href (URL) of the current page",
            "window.location.hostnamereturns the domain name of the web host",
            "window.location.pathnamereturns the path and filename of the current page",
            "window.location.protocolreturns the web protocol used (http: or https:)",
            "window.location.assign()loads a new document"
          ]
        ],
        "examples": [
          "document.getElementById(\"demo\").innerHTML =\"Page location is \" + window.location.href;",
          "document.getElementById(\"demo\").innerHTML =\"Page hostname is \" + window.location.hostname;",
          "document.getElementById(\"demo\").innerHTML =\"Page path is \" + window.location.pathname;",
          "document.getElementById(\"demo\").innerHTML =\"Page protocol is \" + window.location.protocol;",
          "document.getElementById(\"demo\").innerHTML =\"Port \n  number is \" + window.location.port;",
          "<html><head><script>function newDoc() {window.location.assign(\"https://www.w3schools.com\")}</script></head><body><input type=\"button\" value=\"Load new document\"\nonclick=\"newDoc()\"></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_window_history.asp",
    "cours": {
      "titre": "JavaScriptWindow History",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_window_history.asp",
      "contenus": {
        "paragraphs": [
          "Thewindow.historyobject contains the \nbrowsers history.",
          "Thewindow.historyobject can be written without the window prefix.",
          "To protect the privacy of the users, there are limitations to how JavaScript \ncan access this object.",
          "Some methods:",
          "Thehistory.back()method loads the previous URL in the history list.",
          "This is the same as clicking the Back button in the browser.",
          "Create a back button on a page:",
          "The output of the code above will be:",
          "Thehistory.forward()method loads the next URL in the history list.",
          "This is the same as clicking the Forward button in the browser.",
          "Create a forward button on a page:",
          "The output of the code above will be:"
        ],
        "lists": [
          [
            "history.back()- same as clicking back in the browser",
            "history.forward()- same as clicking forward in the browser"
          ]
        ],
        "examples": [
          "<html><head><script>function goBack() {window.history.back()}</script></head><body><input type=\"button\" value=\"Back\" onclick=\"goBack()\"></body></html>",
          "<html><head><script>function goForward() {window.history.forward()}</script></head><body><input type=\"button\" value=\"Forward\" onclick=\"goForward()\"></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_window_navigator.asp",
    "cours": {
      "titre": "JavaScriptWindow Navigator",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_window_navigator.asp",
      "contenus": {
        "paragraphs": [
          "Thewindow.navigatorobject contains information about the \nvisitor's browser.",
          "Thewindow.navigatorobject can be written without the window prefix.",
          "Some examples:",
          "ThecookieEnabledproperty returns true if cookies are enabled, otherwise \nfalse:",
          "TheappNameproperty returns the application name \nof the browser:",
          "This property is removed (deprecated) in the latest web standard.",
          "Most browsers (IE11, Chrome, Firefox, Safari) returnsNetscapeas appName.",
          "TheappCodeNameproperty returns the application code name \nof the browser:",
          "This property is removed (deprecated) in the latest web standard.",
          "Most browsers (IE11, Chrome, Firefox, Safari, Opera) returnsMozillaas appCodeName.",
          "Theproductproperty returns \nthe product name of the browser engine:",
          "This property is removed (deprecated) in the latest web standard.",
          "Most browsers returnsGeckoas product.",
          "TheappVersionproperty returns \nversion information about the browser:",
          "TheuserAgentproperty returns the user-agent header sent by the browser to the server:",
          "The information from the navigator object can often be misleading.",
          "The navigator object shouldnot be used to detect browser versionsbecause:",
          "Theplatformproperty returns the browser platform \n(operating system):",
          "Thelanguageproperty returns the browser's language:",
          "TheonLineproperty returns true if the browser is online:",
          "ThejavaEnabled()method returns true ifJavais enabled:"
        ],
        "lists": [
          [
            "navigator.cookieEnabled",
            "navigator.appCodeName",
            "navigator.platform"
          ],
          [
            "Different browsers can use the same name",
            "The navigator data can \nbe changed by the browser owner",
            "Some browsers misidentify themselves to bypass site tests",
            "Browsers cannot report new operating systems, released later than the browser"
          ]
        ],
        "examples": [
          "<p id=\"demo\"></p><script>document.getElementById(\"demo\").innerHTML =\"cookiesEnabled is \" + navigator.cookieEnabled;</script>",
          "<p id=\"demo\"></p><script>document.getElementById(\"demo\").innerHTML =\"navigator.appName is \" + navigator.appName;</script>",
          "<p id=\"demo\"></p><script>document.getElementById(\"demo\").innerHTML =\"navigator.appCodeName is \" + navigator.appCodeName;</script>",
          "<p id=\"demo\"></p><script>document.getElementById(\"demo\").innerHTML =\"navigator.product is \" + navigator.product;</script>",
          "<p id=\"demo\"></p><script>document.getElementById(\"demo\").innerHTML = navigator.appVersion;</script>",
          "<p id=\"demo\"></p><script>document.getElementById(\"demo\").innerHTML = navigator.userAgent;</script>",
          "<p id=\"demo\"></p><script>document.getElementById(\"demo\").innerHTML = navigator.platform;</script>",
          "<p id=\"demo\"></p><script>document.getElementById(\"demo\").innerHTML = navigator.language;</script>",
          "<p id=\"demo\"></p><script>document.getElementById(\"demo\").innerHTML = navigator.onLine;</script>",
          "<p id=\"demo\"></p><script>document.getElementById(\"demo\").innerHTML = navigator.javaEnabled();</script>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_popup.asp",
    "cours": {
      "titre": "JavaScriptPopup Boxes",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_popup.asp",
      "contenus": {
        "paragraphs": [
          "JavaScript has three kind of popup boxes: Alert box, Confirm box, and Prompt box.",
          "An alert box is often used if you want to make sure information comes through to the user.",
          "When an alert box pops up, the user will have to click \"OK\" to proceed.",
          "Thewindow.alert()method can be written without the window \nprefix.",
          "A confirm box is often used if you want the user to verify or accept something.",
          "When a confirm box pops up, the user will have to click either \"OK\" or \"Cancel\" to proceed.",
          "If the user clicks \"OK\", the box returnstrue. If the user clicks \"Cancel\", the box returnsfalse.",
          "Thewindow.confirm()method can be written without the window prefix.",
          "A prompt box is often used if you want the user to input a value before entering a page.",
          "When a prompt box pops up, the user will have to click either \"OK\" or \"Cancel\" \nto proceed after entering an input value.",
          "If the user clicks \"OK\" the box returns the input value. If the user clicks \"Cancel\" the box returns null.",
          "Thewindow.prompt()method can be written without the window prefix.",
          "To display line breaks inside a popup box, use a back-slash followed by the character n."
        ],
        "lists": [],
        "examples": [
          "window.alert(\"sometext\");",
          "alert(\"I am an alert box!\");",
          "window.confirm(\"sometext\");",
          "if (confirm(\"Press a button!\")) {txt = \"You \n  pressed OK!\";} else {txt = \"You pressed Cancel!\";}",
          "window.prompt(\"sometext\",\"defaultText\");",
          "let person = prompt(\"Please enter your name\", \"Harry Potter\");let text;if \n  (person == null || person == \"\") {text = \"User cancelled \n  the prompt.\";} else {text = \"Hello \" + person + \"! \n  How are you today?\";}",
          "alert(\"Hello\\nHow are you?\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_timing.asp",
    "cours": {
      "titre": "JavaScriptTiming Events",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_timing.asp",
      "contenus": {
        "paragraphs": [
          "JavaScript can be executed in time-intervals.",
          "This is called timing events.",
          "Thewindowobject allows execution of code at specified time intervals.",
          "These time intervals are called timing events.",
          "The two key methods to use with JavaScript are:",
          "ThesetTimeout()andsetInterval()are both methods of the HTML DOM Window object.",
          "Thewindow.setTimeout()method can be written without the window prefix.",
          "The first parameter is a function to be executed.",
          "The second parameter indicates the number of milliseconds before execution.",
          "Click a button. Wait 3 seconds, and the page will alert \"Hello\":",
          "TheclearTimeout()method stops the execution of the function \nspecified in setTimeout().",
          "Thewindow.clearTimeout()method can be written without the window prefix.",
          "TheclearTimeout()method uses the variable \nreturned fromsetTimeout():",
          "If the function has not already been executed, you can stop the execution by calling theclearTimeout()method:",
          "Same example as above, but with an added \"Stop\" button:",
          "ThesetInterval()method repeats a given function at every given \ntime-interval.",
          "Thewindow.setInterval()method can be written without the window prefix.",
          "The first parameter is the function to be executed.",
          "The second parameter indicates the length of the time-interval between each \nexecution.",
          "This example executes a function called \"myTimer\" once every second (like a digital \nwatch).",
          "Display the current time:",
          "There are 1000 milliseconds in one second.",
          "TheclearInterval()method stops the executions of the function \nspecified in the setInterval() method.",
          "Thewindow.clearInterval()method can be written without the window prefix.",
          "TheclearInterval()method uses the variable returned fromsetInterval():",
          "Same example as above, but we have added a \"Stop time\" button:",
          "Another simple timing",
          "A clock created with a timing event"
        ],
        "lists": [
          [
            "setTimeout(function, milliseconds)Executes a function, after waiting a specified number of milliseconds.",
            "setInterval(function, milliseconds)Same as setTimeout(), but repeats the execution \n    of the function continuously."
          ]
        ],
        "examples": [
          "window.setTimeout(function,milliseconds);",
          "<button onclick=\"setTimeout(myFunction, 3000)\">Try it</button><script>function myFunction() {alert('Hello');}</script>",
          "window.clearTimeout(timeoutVariable)",
          "myVar = setTimeout(function,milliseconds);clearTimeout(myVar);",
          "<button onclick=\"myVar = setTimeout(myFunction, 3000)\">Try it</button><button onclick=\"clearTimeout(myVar)\">Stop it</button>",
          "window.setInterval(function,milliseconds);",
          "setInterval(myTimer, 1000);function myTimer() {const d = new Date();document.getElementById(\"demo\").innerHTML = d.toLocaleTimeString();}",
          "window.clearInterval(timerVariable)",
          "let myVar = setInterval(function,milliseconds);clearInterval(myVar);",
          "<p id=\"demo\"></p><button onclick=\"clearInterval(myVar)\">Stop time</button><script>let myVar = setInterval(myTimer, 1000);function myTimer() {const d = new Date();document.getElementById(\"demo\").innerHTML = d.toLocaleTimeString();}</script>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_cookies.asp",
    "cours": {
      "titre": "JavaScriptCookies",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_cookies.asp",
      "contenus": {
        "paragraphs": [
          "Cookies let you store user information in web pages.",
          "Cookies are data, stored in small text files, on your computer.",
          "When a web server has sent a web page to a browser, the connection is \nshut down, and the server forgets everything about the user.",
          "Cookies were invented to solve the problem \"how to remember information about \nthe user\":",
          "Cookies are saved in name-value pairs like:",
          "When a browser requests a web page from a server, cookies belonging to the page are added to the request. This way the server \ngets the necessary data to \"remember\" information about users.",
          "None of the examples below will work if your browser has local cookies support turned off.",
          "JavaScript can create, read, and delete cookies with thedocument.cookieproperty.",
          "With JavaScript, a cookie can be created like this:",
          "You can also add an expiry date (in UTC time).\nBy default, the cookie is deleted when the browser is closed:",
          "With a path parameter, you can tell the browser what path the cookie belongs to.\nBy default, the cookie belongs to the current page.",
          "With JavaScript, cookies can be read like this:",
          "document.cookiewill return all cookies in one string much like: cookie1=value; cookie2=value; cookie3=value;",
          "With JavaScript, you can change a cookie the same way as you create it:",
          "The old cookie is overwritten.",
          "Deleting a cookie is very simple.",
          "You don't have to specify a cookie value when you delete a cookie.",
          "Just set the expires parameter to a past date:",
          "You should define the cookie path to ensure that you delete the right cookie.",
          "Some browsers will not let you delete a cookie if you don't specify the path.",
          "Thedocument.cookieproperty looks like a normal text string. But it is not.",
          "Even if you write a whole cookie string to document.cookie, when you read it out again, you can only see the \nname-value pair of it.",
          "If you set a new cookie, older cookies are not overwritten.\nThe new cookie is added to document.cookie, so if you read document.cookie \nagain you will get something like:",
          "cookie1 = value; cookie2 = value;",
          "Display All CookiesCreate Cookie 1Create Cookie 2Delete Cookie 1Delete Cookie 2",
          "If you want to find the value of one specified cookie, you must write a JavaScript \nfunction that searches for the cookie value in the cookie string.",
          "In the example to follow, we will create a cookie that stores the name of a visitor.",
          "The first time a visitor arrives to the web page, he/she will be asked to fill in his/her name. The name is then stored in a cookie.",
          "The next time the visitor arrives at the same page, he/she will get a welcome message.",
          "For the example we will create 3 JavaScript functions:",
          "First, we create afunctionthat stores the name of the visitor in a cookie variable:",
          "Example explained:",
          "The parameters of the function above are the name of the cookie (cname), the value of the cookie \n(cvalue), and the number of days until the cookie should expire (exdays).",
          "The function sets a cookie by adding together the cookiename, the cookie \nvalue, and the expires string.",
          "Then, we create afunctionthat returns the value of a specified cookie:",
          "Function explained:",
          "Take the cookiename as parameter (cname).",
          "Create a variable (name) with the text to search for (cname + \"=\").",
          "Decode the cookie string, to handle cookies with special characters, e.g. '$'",
          "Split document.cookie on semicolons into an array called ca (ca = \ndecodedCookie.split(';')).",
          "Loop through the ca array (i = 0; i < ca.length; i++), and read out each value \nc = ca[i]).",
          "If the cookie is found (c.indexOf(name) == 0), return the value of the cookie \n(c.substring(name.length, c.length).",
          "If the cookie is not found, return \"\".",
          "Last, we create the function that checks if a cookie is set.",
          "If the cookie is set it will display a greeting.",
          "If the cookie is not set, it will display a prompt box, asking for the name of the user,\nand stores the username cookie for 365 days, by calling thesetCookiefunction:",
          "The example above runs thecheckCookie()function when the page loads."
        ],
        "lists": [
          [
            "When a user visits a web page, his/her name can be stored in a cookie.",
            "Next time the user visits the page, the cookie \"remembers\" his/her name."
          ],
          [
            "A function to set a cookie value",
            "A function to get a cookie value",
            "A function to check a cookie value"
          ]
        ],
        "examples": [
          "username = John Doe",
          "document.cookie = \"username=John Doe\";",
          "document.cookie = \"username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC\";",
          "document.cookie = \"username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC; path=/\";",
          "let x = document.cookie;",
          "document.cookie = \"username=John Smith; expires=Thu, 18 Dec 2013 12:00:00 UTC; path=/\";",
          "document.cookie = \"username=; expires=Thu, 01 \nJan 1970 00:00:00 UTC; path=/;\";",
          "function setCookie(cname, cvalue, exdays) {const d = new Date();d.setTime(d.getTime() + (exdays*24*60*60*1000));let expires = \"expires=\"+ d.toUTCString();document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";}",
          "function getCookie(cname) {let name = cname + \"=\";let decodedCookie = decodeURIComponent(document.cookie);let ca = decodedCookie.split(';');for(let i = 0; i <ca.length; i++) {let c = ca[i];while (c.charAt(0) == ' ') {c = c.substring(1);}if (c.indexOf(name) == 0) {return c.substring(name.length, c.length);}}return \"\";}",
          "function checkCookie() {let \nusername = getCookie(\"username\");if (username != \"\") {alert(\"Welcome again \" + username);} else {username = prompt(\"Please enter your name:\", \"\");if (username != \"\" \n&& username != null) {setCookie(\"username\", username, 365);}}}",
          "function setCookie(cname, cvalue, exdays) {const d = new Date();d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));let expires = \"expires=\"+d.toUTCString();document.cookie = cname + \"=\" + cvalue + \n\";\" + expires + \";path=/\";}function getCookie(cname) {let name = cname + \"=\";let ca \n= document.cookie.split(';');for(let i = 0; i < ca.length; i++) \n{let c = ca[i];while (c.charAt(0) == ' \n') {c = c.substring(1);}if (c.indexOf(name) \n == 0) {return c.substring(name.length, c.length);}}return \"\";}function \ncheckCookie() {let user = getCookie(\"username\");if (user != \"\") \n{alert(\"Welcome again \" + user);} else {user = prompt(\"Please enter your name:\", \"\");if (user != \"\" && \nuser != null) {setCookie(\"username\", user, 365);}}}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_api_intro.asp",
    "cours": {
      "titre": "Web APIs - Introduction",
      "description": "A Web API is a developer's dream.It can extend the functionality of the browserIt can greatly simplify complex functionsIt can provide easy syntax to complex code",
      "lien": "https://www.w3schools.com/js/js_api_intro.asp",
      "contenus": {
        "paragraphs": [
          "A Web API is a developer's dream.",
          "API stands forApplicationProgrammingInterface.",
          "A Web API is an application programming interface for the Web.",
          "A Browser API can extend the functionality of a web browser.",
          "A Server API can extend the functionality of a web server.",
          "All browsers have a set of built-in Web APIs \nto support complex operations, and to help accessing data.",
          "For example, the Geolocation API can return the coordinates of where the browser is located.",
          "Get the latitude and longitude of the user's position:",
          "Third party APIs are not built into your browser.",
          "To use these APIs, you will have to download the code from the Web.",
          "Examples:"
        ],
        "lists": [
          [
            "It can extend the functionality of the browser",
            "It can greatly simplify complex functions",
            "It can provide easy syntax to complex code"
          ],
          [
            "YouTube API - Allows you to display videos on a web site.",
            "Twitter API - Allows you to display Tweets on a web site.",
            "Facebook API - Allows you to display Facebook info on a web site."
          ]
        ],
        "examples": [
          "const myElement = document.getElementById(\"demo\");function getLocation() {if (navigator.geolocation) {navigator.geolocation.getCurrentPosition(showPosition);} else {myElement.innerHTML = \"Geolocation is not supported by this browser.\";}}function showPosition(position) {myElement.innerHTML = \"Latitude: \" + position.coords.latitude +\"<br>Longitude: \" + position.coords.longitude;}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_validation_api.asp",
    "cours": {
      "titre": "JavaScriptValidation API",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_validation_api.asp",
      "contenus": {
        "paragraphs": [
          "If an input field contains invalid data, display a message:",
          "Thevalidity propertyof an input element contains a number \nof properties related to the validity of data:",
          "If the number in an input field is greater than 100 (the input'smaxattribute), display a message:",
          "If the number in an input field is less than 100 (the input'sminattribute), display a message:"
        ],
        "lists": [],
        "examples": [
          "<input id=\"id1\" type=\"number\" min=\"100\" max=\"300\" \n    required><button onclick=\"myFunction()\">OK</button><p id=\"demo\"></p><script>function myFunction() {const inpObj = document.getElementById(\"id1\");if (!inpObj.checkValidity()) {document.getElementById(\"demo\").innerHTML = inpObj.validationMessage;}}</script>",
          "<input id=\"id1\" type=\"number\" max=\"100\"><button onclick=\"myFunction()\">OK</button><p id=\"demo\"></p><script>function myFunction() {let text = \"Value OK\";if (document.getElementById(\"id1\").validity.rangeOverflow) {text = \"Value too large\";}}</script>",
          "<input id=\"id1\" type=\"number\" min=\"100\"><button onclick=\"myFunction()\">OK</button><p id=\"demo\"></p><script>function myFunction() {let text = \"Value OK\";if (document.getElementById(\"id1\").validity.rangeUnderflow) {text = \"Value too small\";}}</script>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_api_history.asp",
    "cours": {
      "titre": "Web History API",
      "description": "The Web History API provides easy methods to access the windows.history object.The window.history object contains the URLs (Web Sites) visited by the user.",
      "lien": "https://www.w3schools.com/js/js_api_history.asp",
      "contenus": {
        "paragraphs": [
          "The Web History API provides easy methods to access the windows.history object.",
          "The window.history object contains the URLs (Web Sites) visited by the user.",
          "The Web History API is supported in all browsers:",
          "The back() method loads the previous URL in the windows.history list.",
          "It is the same as clicking the \"back arrow\" in your browser.",
          "Go Back",
          "The go() method loads a specific URL from the history list:",
          "Go Back 2 Pages"
        ],
        "lists": [],
        "examples": [
          "<button onclick=\"myFunction()\">Go Back</button><script>function myFunction() {window.history.back();}</script>",
          "<button onclick=\"myFunction()\">Go Back 2 Pages</button><script>function myFunction() {window.history.go(-2);}</script>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_api_web_storage.asp",
    "cours": {
      "titre": "Web Storage API",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_api_web_storage.asp",
      "contenus": {
        "paragraphs": [
          "The Web Storage API is a simple syntax for storing and retrieving data in the browser.\nIt is very easy to use:",
          "The Web Storage API is supported in all browsers:",
          "The localStorage object provides access to a local storage for a particular Web Site.\nIt allows you to store, read, add, modify, and delete data items for that domain.",
          "The data is stored with no expiration date, and will not be deleted when the browser is closed.",
          "The data will be available for days, weeks, and years.",
          "The localStorage.setItem() method stores a data item in a storage.",
          "It takes a name and a value as parameters:",
          "The localStorage.getItem() method retrieves a data item from the storage.",
          "It takes a name as parameter:",
          "The sessionStorage object is identical to the localStorage object.",
          "The difference is that the sessionStorage object stores data for one session.",
          "The data is deleted when the browser is closed.",
          "The sessionStorage.setItem() method stores a data item in a storage.",
          "It takes a name and a value as parameters:",
          "The sessionStorage.getItem() method retrieves a data item from the storage.",
          "It takes a name as parameter:"
        ],
        "lists": [],
        "examples": [
          "localStorage.setItem(\"name\", \"John Doe\");localStorage.getItem(\"name\");",
          "localStorage.setItem(\"name\", \"John Doe\");",
          "localStorage.getItem(\"name\");",
          "sessionStorage.getItem(\"name\");",
          "sessionStorage.setItem(\"name\", \"John Doe\");",
          "sessionStorage.getItem(\"name\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_api_web_workers.asp",
    "cours": {
      "titre": "Web Workers API",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_api_web_workers.asp",
      "contenus": {
        "paragraphs": [
          "A web worker is a JavaScript running in the background, without affecting the performance of the page.",
          "When executing scripts in an HTML page, the page becomes unresponsive until the script is finished.",
          "A web worker is a JavaScript that runs in the background, independently \nof other scripts, without affecting the performance of the page. You can continue to do whatever you want: \nclicking, selecting things, etc., while the web worker runs in the background.",
          "The numbers in the table specify the first browser versions that fully support Web Workers:",
          "The example below creates a simple web worker that count numbers in the background:",
          "Start WorkerStop Worker",
          "Before creating a web worker, check whether the user's browser supports it:",
          "Now, let's create our web worker in an external JavaScript.",
          "Here, we create a script that counts. The script is stored in the \"demo_workers.js\" file:",
          "The important part of the code above is thepostMessage()method - which is used to post a message back to the HTML page.",
          "Note:Normally web workers are not used for such simple scripts, but for more CPU intensive tasks.",
          "Now that we have the web worker file, we need to call it from an HTML page.",
          "The following lines checks if the worker already exists, if not - it creates a new web worker object and runs the code in \n\"demo_workers.js\":",
          "Then we can send and receive messages from the web worker.",
          "Add an \"onmessage\" event listener to the web worker.",
          "When the web worker posts a message, the code within the event listener is executed. The data \nfrom the web worker is stored in event.data.",
          "When a web worker object is created, it will continue to listen for messages (even after the external script is finished) until it is terminated.",
          "To terminate a web worker, and free browser/computer resources, use theterminate()method:",
          "If you set the worker variable to undefined, after it has been terminated, \nyou can reuse the code:",
          "We have already seen the Worker code in the .js file. Below is the code for the HTML page:",
          "Since web workers are in external files, they do not have access to the following JavaScript objects:"
        ],
        "lists": [
          [
            "The window object",
            "The document object",
            "The parent object"
          ]
        ],
        "examples": [
          "if (typeof(Worker) !== \"undefined\") {// Yes! Web worker support!//Some code.....}\n else {// Sorry! No Web Worker support..}",
          "let i = 0;function timedCount()\n{i ++;postMessage(i);setTimeout(\"timedCount()\",500);}timedCount();",
          "if (typeof(w) == \"undefined\") {w = new Worker(\"demo_workers.js\");}",
          "w.onmessage = function(event){document.getElementById(\"result\").innerHTML = event.data;};",
          "w.terminate();",
          "w = undefined;",
          "<!DOCTYPE html><html><body><p>Count numbers: <output id=\"result\"></output></p><button onclick=\"startWorker()\">Start Worker</button><button onclick=\"stopWorker()\">Stop Worker</button><script>let w;function startWorker()\n{if (typeof(w) == \"undefined\") {w = new Worker(\"demo_workers.js\");}w.onmessage = function(event) {document.getElementById(\"result\").innerHTML = event.data;};}function stopWorker()\n{w.terminate();w = undefined;}</script></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_api_fetch.asp",
    "cours": {
      "titre": "JavaScript Fetch API",
      "description": "The Fetch API interface allows web browser to make HTTP requests to web servers.😀No need for XMLHttpRequest anymore.",
      "lien": "https://www.w3schools.com/js/js_api_fetch.asp",
      "contenus": {
        "paragraphs": [
          "The Fetch API interface allows web browser to make HTTP requests to web servers.",
          "😀No need for XMLHttpRequest anymore.",
          "The numbers in the table specify the first browser versions that fully support Fetch API:",
          "The example below fetches a file and displays the content:",
          "Since Fetch is based on async and await, the example above might be easier to understand like this:",
          "Or even better: Use understandable names instead of x and y:"
        ],
        "lists": [],
        "examples": [
          "fetch(file).then(x => x.text()).then(y => myDisplay(y));",
          "async function getText(file) {let x = await fetch(file);let y = await x.text();myDisplay(y);}",
          "async function getText(file) {let myObject = await fetch(file);let myText = await myObject.text();myDisplay(myText);}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_api_geolocation.asp",
    "cours": {
      "titre": "Web Geolocation API",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_api_geolocation.asp",
      "contenus": {
        "paragraphs": [
          "The HTML Geolocation API is used to get the geographical position of a user.",
          "Since this can compromise privacy, the position is not available unless the user approves it.",
          "Try It",
          "Geolocation is most accurate for devices with GPS, like smartphones.",
          "The Geolocation API is supported in all browsers:",
          "The Geolocation API will only work on secure contexts such \nas HTTPS.",
          "If your site is hosted on a non-secure origin (such as HTTP) the \nrequests to get the users location will no longer function.",
          "ThegetCurrentPosition()method is used to return the user's position.",
          "The example below returns the latitude and longitude of the user's position:",
          "Example explained:",
          "The example above is a very basic Geolocation script, with no error handling.",
          "The second parameter of thegetCurrentPosition()method is used to handle \nerrors. It specifies a function to run if it fails to get the user's location:",
          "To display the result in a map, you need access to a map service, like Google \nMaps.",
          "In the example below, the returned latitude and longitude is used to show the location in a Google \nMap (using a static image):",
          "This page has demonstrated how to show a user's position on a map.",
          "Geolocation is also very useful for location-specific information, like:",
          "ThegetCurrentPosition()method returns an object on success. The latitude, \nlongitude and accuracy properties are always returned. The other properties are returned \nif available:",
          "The Geolocation object also has other interesting methods:",
          "The example below shows thewatchPosition()method. You need an accurate GPS device to test this (like \nsmartphone):"
        ],
        "lists": [
          [
            "Check if Geolocation is supported",
            "If supported, run the getCurrentPosition() method. If not, display a message to the user",
            "If the getCurrentPosition() method is successful, it returns a coordinates object to the function specified in the parameter (showPosition)",
            "The showPosition() function outputs the Latitude and Longitude"
          ],
          [
            "Up-to-date local information",
            "Showing Points-of-interest near the user",
            "Turn-by-turn navigation (GPS)"
          ],
          [
            "watchPosition()- Returns the current position of the user and continues to \nreturn updated position as the user moves (like the GPS in a car).",
            "clearWatch()- Stops thewatchPosition()method."
          ]
        ],
        "examples": [
          "<script>const x = document.getElementById(\"demo\");function getLocation() {if (navigator.geolocation) {navigator.geolocation.getCurrentPosition(showPosition);} else {x.innerHTML = \"Geolocation is not supported by this browser.\";}}function showPosition(position) {x.innerHTML = \"Latitude: \" + position.coords.latitude +\"<br>Longitude: \" + position.coords.longitude;}</script>",
          "function showError(error) {switch(error.code) {case error.PERMISSION_DENIED:x.innerHTML = \"User denied the request for Geolocation.\"break;case error.POSITION_UNAVAILABLE:x.innerHTML = \"Location information is unavailable.\"break;case error.TIMEOUT:x.innerHTML = \"The request to get user location timed out.\"break;case error.UNKNOWN_ERROR:x.innerHTML = \"An unknown error occurred.\"break;}}",
          "function showPosition(position) {let latlon = position.coords.latitude + \",\" + position.coords.longitude;let img_url = \"https://maps.googleapis.com/maps/api/staticmap?center=\"+latlon+\"&zoom=14&size=400x300&sensor=false&key=YOUR_KEY\";document.getElementById(\"mapholder\").innerHTML = \"<img src='\"+img_url+\"'>\";}",
          "<script>const x = document.getElementById(\"demo\");function getLocation() {if (navigator.geolocation) {navigator.geolocation.watchPosition(showPosition);} else {x.innerHTML = \"Geolocation is not supported by this browser.\";}}function showPosition(position) {x.innerHTML = \"Latitude: \" + position.coords.latitude +\"<br>Longitude: \" + position.coords.longitude;}</script>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_ajax_intro.asp",
    "cours": {
      "titre": "AJAXIntroduction",
      "description": "AJAX is a developer's dream, because you can:Read data from a web server - after the page has loadedUpdate a web page without reloading the pageSend data to a web server - in the background",
      "lien": "https://www.w3schools.com/js/js_ajax_intro.asp",
      "contenus": {
        "paragraphs": [
          "AJAX is a developer's dream, because you can:",
          "Try it Yourself »",
          "The HTML page contains a <div> section and a <button>.",
          "The <div> \nsection is used to display information from a server.",
          "The <button> calls a function (if it is clicked).",
          "The function requests data from a web \nserver and displays it:",
          "AJAX =AsynchronousJavaScriptAndXML.",
          "AJAX is not a programming language.",
          "AJAX just uses a combination of:",
          "AJAX is a misleading name. AJAX applications might use XML to transport data,\nbut it is equally common to transport data as plain text or JSON text.",
          "AJAX allows web pages to be updated asynchronously by exchanging data with a web server behind the scenes.\nThis means that it is possible to update parts of a web page, without reloading the whole page.",
          "",
          "Modern Browsers can use Fetch API instead of the XMLHttpRequest Object.",
          "The Fetch API interface allows web browser to make HTTP requests to web servers.",
          "If you use the XMLHttpRequest Object, Fetch can do the same in a simpler way."
        ],
        "lists": [
          [
            "Read data from a web server - after the page has loaded",
            "Update a web page without reloading the page",
            "Send data to a web server - in the background"
          ],
          [
            "A browser built-inXMLHttpRequestobject (to request data from a web server)",
            "JavaScript and HTML DOM (to display or use the data)"
          ],
          [
            "1. An event occurs in a web page (the page is loaded, a button is clicked)",
            "2. An XMLHttpRequest object is created by JavaScript",
            "3. The XMLHttpRequest object sends a request to a web server",
            "4. The server processes the request",
            "5. The server sends a response back to the web page",
            "6. The response is read by JavaScript",
            "7. Proper action (like page update) is performed by JavaScript"
          ]
        ],
        "examples": [
          "<!DOCTYPE html><html><body><div id=\"demo\"><h2>Let AJAX change this text</h2><button type=\"button\" onclick=\"loadDoc()\">Change Content</button></div></body></html>",
          "function loadDoc() {const xhttp = new XMLHttpRequest();xhttp.onload = function() {document.getElementById(\"demo\").innerHTML = this.responseText;}xhttp.open(\"GET\", \"ajax_info.txt\", true);xhttp.send();}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_ajax_http.asp",
    "cours": {
      "titre": "AJAX - The XMLHttpRequest Object",
      "description": "The keystone of AJAX is the XMLHttpRequest object.Create an XMLHttpRequest objectDefine a callback functionOpen the XMLHttpRequest objectSend a Request to a server",
      "lien": "https://www.w3schools.com/js/js_ajax_http.asp",
      "contenus": {
        "paragraphs": [
          "The keystone of AJAX is the XMLHttpRequest object.",
          "All modern browsers support theXMLHttpRequestobject.",
          "TheXMLHttpRequestobject can be used to exchange data with a web server behind the \nscenes. This means that it is possible to update parts of a web page, without \nreloading the whole page.",
          "All modern browsers (Chrome, Firefox, IE, Edge, Safari, Opera) have a built-inXMLHttpRequestobject.",
          "Syntax for creating anXMLHttpRequestobject:",
          "A callback function is a function passed as a parameter to another function.",
          "In this case, the callback function should contain the code to execute when the \nresponse is ready.",
          "To send a request to a server, you can use the open() and send() methods of theXMLHttpRequestobject:",
          "For security reasons, modern browsers do not allow access across domains.",
          "This means that both the web page and the XML file it tries to load, must be located on the same server.",
          "The examples on W3Schools all open XML files located on the W3Schools domain.",
          "If you want to use the example above on one of your own web pages,\nthe XML files you load must be located on your own server.",
          "With theXMLHttpRequestobject you can define a callback function to be executed when \nthe request receives an answer.",
          "The function is defined in theonloadproperty of theXMLHttpRequestobject:",
          "If you have more than one AJAX task in a website, you should create one function for \nexecuting theXMLHttpRequestobject, and one callback function for each \nAJAX task.",
          "The function call should contain the URL and what function to call when the \nresponse is ready.",
          "ThereadyStateproperty holds the status of the XMLHttpRequest.",
          "Theonreadystatechangeproperty defines a callback function to be executed when the readyState changes.",
          "Thestatusproperty and thestatusTextproperties hold the status of the XMLHttpRequest object.",
          "Theonreadystatechangefunction is called every time the readyState changes.",
          "WhenreadyStateis 4 and status is 200, the response is ready:",
          "Theonreadystatechangeevent is triggered four times (1-4), one time for each change in the readyState."
        ],
        "lists": [
          [
            "Create an XMLHttpRequest object",
            "Define a callback function",
            "Open the XMLHttpRequest object",
            "Send a Request to a server"
          ]
        ],
        "examples": [
          "variable= new XMLHttpRequest();",
          "xhttp.onload = function() {// What to do when the response is ready}",
          "xhttp.open(\"GET\", \"ajax_info.txt\");xhttp.send();",
          "// Create an XMLHttpRequest objectconst xhttp = new XMLHttpRequest();// Define a callback functionxhttp.onload = function() {// Here you can use the Data}// Send a requestxhttp.open(\"GET\", \"ajax_info.txt\");xhttp.send();",
          "xhttp.onload = function() {document.getElementById(\"demo\").innerHTML = this.responseText;}xhttp.open(\"GET\", \"ajax_info.txt\");xhttp.send();",
          "loadDoc(\"url-1\", myFunction1);loadDoc(\"url-2\", myFunction2);function loadDoc(url, cFunction) {const xhttp = new XMLHttpRequest();xhttp.onload = function() {cFunction(this);}xhttp.open(\"GET\", url);xhttp.send();}function myFunction1(xhttp) {// action goes here}function myFunction2(xhttp) {// action goes here}",
          "function loadDoc() {const xhttp = new XMLHttpRequest();xhttp.onreadystatechange = function() {if (this.readyState == 4 && this.status == 200) {document.getElementById(\"demo\").innerHTML =this.responseText;}};xhttp.open(\"GET\", \"ajax_info.txt\");xhttp.send();}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_ajax_http_send.asp",
    "cours": {
      "titre": "AJAX - XMLHttpRequest",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_ajax_http_send.asp",
      "contenus": {
        "paragraphs": [
          "The XMLHttpRequest object is used to request data from a server.",
          "To send a request to a server, we use the open() and send() methods of theXMLHttpRequestobject:",
          "The url parameter of theopen()method, is an address to a file on a server:",
          "The file can be any kind of file, like .txt and \n.xml, or server scripting files like .asp and .php (which can perform  \nactions on the server before sending the response back).",
          "Server requests should be sent asynchronously.",
          "The async parameter of the open() \nmethod should be set to true:",
          "By sending asynchronously, the \nJavaScript does not have to wait for the server response, but can instead:",
          "The default value for the async parameter is async = true.",
          "You can safely remove the third parameter from your code.",
          "Synchronous XMLHttpRequest (async = false) is not recommended because the JavaScript will \nstop executing until the server response is ready. If the server is busy or slow, the \napplication will hang or stop.",
          "GETis simpler and faster thanPOST, and can be used in most cases.",
          "However, always use POST requests when:",
          "A simpleGETrequest:",
          "In the example above, you may get a cached result. To avoid this, add a unique ID to the URL:",
          "If you want to send information with theGETmethod, add the information to the URL:",
          "How the server uses the input and how the server responds to a request, is explained in a later chapter.",
          "A simplePOSTrequest:",
          "To POST data like an HTML form, add an HTTP header withsetRequestHeader(). \nSpecify the data you want to send in thesend()method:",
          "To execute a synchronous request, change the third parameter in theopen()method tofalse:",
          "Sometimes async = false are used for quick testing. You will also find \nsynchronous requests in older JavaScript code.",
          "Since the code will wait for server completion, there is no need for anonreadystatechangefunction:",
          "Synchronous XMLHttpRequest (async = false) is not recommended because the JavaScript will \nstop executing until the server response is ready. If the server is busy or slow, the \napplication will hang or stop.",
          "Modern developer tools are encouraged to warn about using \nsynchronous requests and may throw an InvalidAccessError exception when it occurs."
        ],
        "lists": [
          [
            "execute other scripts while waiting for server response",
            "deal with the response after the response is ready"
          ],
          [
            "A cached file is not an option (update a file or database on the server).",
            "Sending a large amount of data to the server (POST has no size limitations).",
            "Sending user input (which can contain unknown characters), POST is more robust and secure than GET."
          ]
        ],
        "examples": [
          "xhttp.open(\"GET\", \"ajax_info.txt\", true);xhttp.send();",
          "xhttp.open(\"GET\", \"ajax_test.asp\", true);",
          "xhttp.open(\"GET\", \"ajax_test.asp\", true);",
          "xhttp.open(\"GET\", \"demo_get.asp\");xhttp.send();",
          "xhttp.open(\"GET\", \"demo_get.asp?t=\" + Math.random());xhttp.send();",
          "xhttp.open(\"GET\", \"demo_get2.asp?fname=Henry&lname=Ford\");xhttp.send();",
          "xhttp.open(\"POST\", \"demo_post.asp\");xhttp.send();",
          "xhttp.open(\"POST\", \"ajax_test.asp\");xhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");xhttp.send(\"fname=Henry&lname=Ford\");",
          "xhttp.open(\"GET\", \"ajax_info.txt\", false);",
          "xhttp.open(\"GET\", \"ajax_info.txt\", false);xhttp.send();document.getElementById(\"demo\").innerHTML = xhttp.responseText;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_ajax_http_response.asp",
    "cours": {
      "titre": "AJAX - ServerResponse",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_ajax_http_response.asp",
      "contenus": {
        "paragraphs": [
          "TheresponseTextproperty returns the server response as a \nJavaScript string, and you can use it accordingly:",
          "The XMLHttpRequest object has an in-built XML parser.",
          "TheresponseXMLproperty returns the server response as an XML DOM object.",
          "Using this property you can parse the response as an XML DOM object:",
          "Request the filecd_catalog.xmland parse the response:",
          "ThegetAllResponseHeaders()method returns all header information from the server response.",
          "ThegetResponseHeader()method returns specific header information from the server response."
        ],
        "lists": [],
        "examples": [
          "document.getElementById(\"demo\").innerHTML = xhttp.responseText;",
          "const xmlDoc = xhttp.responseXML;const x = xmlDoc.getElementsByTagName(\"ARTIST\");let txt = \"\";for (let i = 0; i < x.length; i++) {txt += x[i].childNodes[0].nodeValue + \"<br>\";}document.getElementById(\"demo\").innerHTML = txt;xhttp.open(\"GET\", \n \"cd_catalog.xml\");xhttp.send();",
          "const xhttp = new XMLHttpRequest();xhttp.onload = function() {document.getElementById(\"demo\").innerHTML =this.getAllResponseHeaders();}xhttp.open(\"GET\", \"ajax_info.txt\");xhttp.send();",
          "const xhttp = new XMLHttpRequest();xhttp.onload = function() {document.getElementById(\"demo\").innerHTML =this.getResponseHeader(\"Last-Modified\");}xhttp.open(\"GET\", \"ajax_info.txt\");xhttp.send();"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_ajax_xmlfile.asp",
    "cours": {
      "titre": "AJAXXML Example",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_ajax_xmlfile.asp",
      "contenus": {
        "paragraphs": [
          "AJAX can be used for interactive communication with an XML file.",
          "The following example will demonstrate how a web page can fetch information \nfrom an XML file with AJAX:",
          "Try it Yourself »",
          "When a user clicks on the \"Get CD info\" button above, theloadDoc()function is executed.",
          "TheloadDoc()function creates anXMLHttpRequestobject, adds the function \nto be executed when the server response is ready, and sends the request off to the server.",
          "When the server response is ready, an HTML \ntable is built, nodes (elements) are extracted from the XML file, and it finally updates the \nelement \"demo\" with the HTML table filled with XML data:",
          "The XML file used in the example above looks like this: \"cd_catalog.xml\"."
        ],
        "lists": [],
        "examples": [
          "function loadDoc() {const xhttp = new XMLHttpRequest();xhttp.onload = function() {myFunction(this);}xhttp.open(\"GET\", \"cd_catalog.xml\");xhttp.send();}function myFunction(xml) {const xmlDoc = xml.responseXML;const x = xmlDoc.getElementsByTagName(\"CD\");let table=\"<tr><th>Artist</th><th>Title</th></tr>\";for (let i = 0; i <x.length; \n i++) {table += \"<tr><td>\" +x[i].getElementsByTagName(\"ARTIST\")[0].childNodes[0].nodeValue \n +\"</td><td>\" +x[i].getElementsByTagName(\"TITLE\")[0].childNodes[0].nodeValue \n +\"</td></tr>\";}document.getElementById(\"demo\").innerHTML = table;}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_ajax_php.asp",
    "cours": {
      "titre": "AJAXPHP Example",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_ajax_php.asp",
      "contenus": {
        "paragraphs": [
          "AJAX is used to create more interactive applications.",
          "The following example demonstrates how a web page can communicate with a \nweb server while a user types characters in an input field:",
          "Start typing a name in the input field below:",
          "Suggestions:",
          "First name:",
          "In the example above, when a user types a character in the input field, a function \ncalledshowHint()is executed.",
          "The function is triggered by theonkeyupevent.",
          "Here is the code:",
          "Code explanation:",
          "First, check if the input field is empty (str.length == 0). If it is, clear the \ncontent of the txtHint placeholder and exit the function.",
          "However, if the input field is not empty, do the following:",
          "The PHP file checks an array of names, and returns the corresponding name(s) to the \nbrowser:"
        ],
        "lists": [
          [
            "Create an XMLHttpRequest object",
            "Create the function to be executed when the server response is ready",
            "Send the request off to a PHP file (gethint.php) on the server",
            "Notice that q parameter is added gethint.php?q=\"+str",
            "The str variable holds the content of the input field"
          ]
        ],
        "examples": [
          "<p>Start typing a name in the input field below:</p><p>Suggestions: <span id=\"txtHint\"></span></p><form>First name: <input type=\"text\" onkeyup=\"showHint(this.value)\"></form><script>function showHint(str) {if (str.length == 0) {document.getElementById(\"txtHint\").innerHTML = \"\";return;} else {const xmlhttp = new XMLHttpRequest();xmlhttp.onload = function() {document.getElementById(\"txtHint\").innerHTML = this.responseText;}xmlhttp.open(\"GET\", \"gethint.php?q=\" + str);xmlhttp.send();}}</script>",
          "<?php// Array with names$a[] = \"Anna\";$a[] = \"Brittany\";$a[] = \"Cinderella\";$a[] = \"Diana\";$a[] = \"Eva\";$a[] = \"Fiona\";$a[] = \"Gunda\";$a[] = \"Hege\";$a[] = \"Inga\";$a[] = \"Johanna\";$a[] = \"Kitty\";$a[] = \"Linda\";$a[] = \"Nina\";$a[] = \"Ophelia\";$a[] = \"Petunia\";$a[] = \"Amanda\";$a[] = \"Raquel\";$a[] = \"Cindy\";$a[] = \"Doris\";$a[] = \"Eve\";$a[] = \"Evita\";$a[] = \"Sunniva\";$a[] = \"Tove\";$a[] = \"Unni\";$a[] = \"Violet\";$a[] = \"Liza\";$a[] = \"Elizabeth\";$a[] = \"Ellen\";$a[] = \"Wenche\";$a[] = \"Vicky\";// get the q parameter from URL$q = $_REQUEST[\"q\"];$hint = \"\";// lookup all hints from array if $q is different from \"\"if ($q !== \"\") {$q = strtolower($q);$len=strlen($q);foreach($a as $name) {if (stristr($q, substr($name, 0, $len))) {if ($hint === \"\") {$hint = $name;} else {$hint .= \", $name\";}}}}// Output \"no suggestion\" if no hint was found or output correct valuesecho $hint === \"\" ? \"no suggestion\" : $hint;?>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_ajax_asp.asp",
    "cours": {
      "titre": "AJAXASP Example",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_ajax_asp.asp",
      "contenus": {
        "paragraphs": [
          "AJAX is used to create more interactive applications.",
          "The following example will demonstrate how a web page can communicate with a \nweb server while a user type characters in an input field:",
          "Start typing a name in the input field below:",
          "Suggestions:",
          "First name:",
          "In the example above, when a user types a character in the input field, a function \ncalledshowHint()is executed.",
          "The function is triggered by theonkeyupevent.",
          "Here is the code:",
          "Code explanation:",
          "First, check if the input field is empty (str.length == 0). If it is, clear the \ncontent of the txtHint placeholder and exit the function.",
          "However, if the input field is not empty, do the following:",
          "The ASP file checks an array of names, and returns the corresponding name(s) to the \nbrowser:"
        ],
        "lists": [
          [
            "Create an XMLHttpRequest object",
            "Create the function to be executed when the server response is ready",
            "Send the request off to an ASP file (gethint.asp) on the server",
            "Notice that q parameter is added gethint.asp?q=\"+str",
            "The str variable holds the content of the input field"
          ]
        ],
        "examples": [
          "<p>Start typing a name in the input field below:</p><p>Suggestions: <span id=\"txtHint\"></span></p><form>First name: <input type=\"text\" onkeyup=\"showHint(this.value)\"></form><script>function showHint(str) {if (str.length == 0) {document.getElementById(\"txtHint\").innerHTML = \"\";return;} else {const xmlhttp = new XMLHttpRequest();xmlhttp.onload = function() {document.getElementById(\"txtHint\").innerHTML = this.responseText;}xmlhttp.open(\"GET\", \"gethint.asp?q=\" + str);xmlhttp.send();}}</script>",
          "<%response.expires=-1dim a(30)'Fill up array with namesa(1)=\"Anna\"a(2)=\"Brittany\"a(3)=\"Cinderella\"a(4)=\"Diana\"a(5)=\"Eva\"a(6)=\"Fiona\"a(7)=\"Gunda\"a(8)=\"Hege\"a(9)=\"Inga\"a(10)=\"Johanna\"a(11)=\"Kitty\"a(12)=\"Linda\"a(13)=\"Nina\"a(14)=\"Ophelia\"a(15)=\"Petunia\"a(16)=\"Amanda\"a(17)=\"Raquel\"a(18)=\"Cindy\"a(19)=\"Doris\"a(20)=\"Eve\"a(21)=\"Evita\"a(22)=\"Sunniva\"a(23)=\"Tove\"a(24)=\"Unni\"a(25)=\"Violet\"a(26)=\"Liza\"a(27)=\"Elizabeth\"a(28)=\"Ellen\"a(29)=\"Wenche\"a(30)=\"Vicky\"'get the q parameter from URLq=ucase(request.querystring(\"q\"))'lookup all hints from array if length of q>0if len(q)>0 thenhint=\"\"for i=1 to 30if q=ucase(mid(a(i),1,len(q))) thenif hint=\"\" thenhint=a(i)elsehint=hint & \" , \" & a(i)end ifend ifnextend if'Output \"no suggestion\" if no hint were found'or output the correct valuesif hint=\"\" thenresponse.write(\"no suggestion\")elseresponse.write(hint)end if%>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_ajax_database.asp",
    "cours": {
      "titre": "AJAXDatabase Example",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_ajax_database.asp",
      "contenus": {
        "paragraphs": [
          "AJAX can be used for interactive communication with a database.",
          "The following example will demonstrate how a web page can fetch \ninformation from a database with AJAX:",
          "Try it Yourself »",
          "When a user selects a customer in the dropdown list above, a function calledshowCustomer()is executed. The \nfunction is triggered by theonchangeevent:",
          "TheshowCustomer()function does the following:",
          "The page on the server called by the JavaScript above is a PHP file called \"getcustomer.php\".",
          "The source code in \"getcustomer.php\" runs a query against a database, and returns the result in an HTML \ntable:"
        ],
        "lists": [
          [
            "Check if a customer is selected",
            "Create an XMLHttpRequest object",
            "Create the function to be executed when the server response is ready",
            "Send the request off to a file on the server",
            "Notice that a parameter (q) is added to the URL (with the content of the dropdown list)"
          ]
        ],
        "examples": [
          "function showCustomer(str) {if (str == \"\") {document.getElementById(\"txtHint\").innerHTML = \"\";return;}const xhttp = new XMLHttpRequest();xhttp.onload = function() {document.getElementById(\"txtHint\").innerHTML = this.responseText;}xhttp.open(\"GET\", \"getcustomer.php?q=\"+str);xhttp.send();}",
          "<?php$mysqli = new mysqli(\"servername\", \"username\", \n  \"password\", \"dbname\");if($mysqli->connect_error) {exit('Could not connect');}$sql = \"SELECT customerid, companyname, \n  contactname, address, city, postalcode, countryFROM customers WHERE \n  customerid = ?\";$stmt = $mysqli->prepare($sql);$stmt->bind_param(\"s\", $_GET['q']);$stmt->execute();$stmt->store_result();$stmt->bind_result($cid, \n  $cname, $name, $adr, $city, $pcode, $country);$stmt->fetch();$stmt->close();echo \"<table>\";echo \"<tr>\";echo \"<th>CustomerID</th>\";echo \n  \"<td>\" . $cid . \"</td>\";echo \"<th>CompanyName</th>\";echo \"<td>\" . $cname \n  . \"</td>\";echo \"<th>ContactName</th>\";echo \"<td>\" . $name . \"</td>\";echo \"<th>Address</th>\";echo \"<td>\" . \n  $adr . \"</td>\";echo \"<th>City</th>\";echo \"<td>\" . $city . \"</td>\";echo \"<th>PostalCode</th>\";echo \"<td>\" . \n  $pcode . \"</td>\";echo \"<th>Country</th>\";echo \"<td>\" . $country . \n  \"</td>\";echo \"</tr>\";echo \"</table>\";?>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_ajax_applications.asp",
    "cours": {
      "titre": "XMLApplications",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_ajax_applications.asp",
      "contenus": {
        "paragraphs": [
          "This chapter demonstrates some HTML applications using \nXML, HTTP, DOM, and JavaScript.",
          "In this chapter we will use the XML file called\"cd_catalog.xml\".",
          "This example loops through each <CD> element, and displays the values of the <ARTIST> and the \n<TITLE> elements in an HTML table:",
          "For more information about using JavaScript and the XML DOM, go toDOM Intro.",
          "This example uses a function to display the first CD element in an HTML element with id=\"showCD\":",
          "To navigate between the CDs in the example above, create anext()andprevious()function:",
          "The last example shows how you can show album information when the user clicks on a CD:"
        ],
        "lists": [],
        "examples": [
          "<table id=\"demo\"></table><script>function loadXMLDoc() {const xhttp = new XMLHttpRequest();xhttp.onload = function() {const xmlDoc = xhttp.responseXML;const cd = xmlDoc.getElementsByTagName(\"CD\");myFunction(cd);}xhttp.open(\"GET\", \"cd_catalog.xml\");xhttp.send();}function myFunction(cd) {let table=\"<tr><th>Artist</th><th>Title</th></tr>\";for (let i = 0; i < cd.length; i++) {table += \"<tr><td>\" +cd[i].getElementsByTagName(\"ARTIST\")[0].childNodes[0].nodeValue \n +\"</td><td>\" +cd[i].getElementsByTagName(\"TITLE\")[0].childNodes[0].nodeValue \n +\"</td></tr>\";}document.getElementById(\"demo\").innerHTML = table;}</script></body></html>",
          "const xhttp = new XMLHttpRequest();xhttp.onload = function() {const xmlDoc = xhttp.responseXML;const cd = xmlDoc.getElementsByTagName(\"CD\");myFunction(cd, 0);}xhttp.open(\"GET\", \"cd_catalog.xml\");xhttp.send();function myFunction(cd, i) {document.getElementById(\"showCD\").innerHTML =\"Artist: \" +cd[i].getElementsByTagName(\"ARTIST\")[0].childNodes[0].nodeValue +\"<br>Title: \" +cd[i].getElementsByTagName(\"TITLE\")[0].childNodes[0].nodeValue +\"<br>Year: \" +cd[i].getElementsByTagName(\"YEAR\")[0].childNodes[0].nodeValue;}",
          "function next()\n{// display the next CD, unless you are on the last CDif (i < len-1) {i++;displayCD(i);}}function previous()\n{// display the previous CD, unless you are on the first CDif (i > 0) {i--;displayCD(i);}}",
          "function displayCD(i) {document.getElementById(\"showCD\").innerHTML =\"Artist: \" +cd[i].getElementsByTagName(\"ARTIST\")[0].childNodes[0].nodeValue +\"<br>Title: \" +cd[i].getElementsByTagName(\"TITLE\")[0].childNodes[0].nodeValue +\"<br>Year: \" +cd[i].getElementsByTagName(\"YEAR\")[0].childNodes[0].nodeValue;}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_ajax_examples.asp",
    "cours": {
      "titre": "AJAXExamples",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_ajax_examples.asp",
      "contenus": {
        "paragraphs": [
          "Examples explained",
          "Examples explained",
          "Examples explained",
          "Examples explained",
          "Examples explained",
          "Examples explained"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_json_intro.asp",
    "cours": {
      "titre": "JSON- Introduction",
      "description": "JSONJSON stands forJavaScriptObjectNotationJSON is atext formatfor storing and transporting dataJSON is \"self-describing\" and easy to understand",
      "lien": "https://www.w3schools.com/js/js_json_intro.asp",
      "contenus": {
        "paragraphs": [
          "JSON stands forJavaScriptObjectNotation",
          "JSON is atext formatfor storing and transporting data",
          "JSON is \"self-describing\" and easy to understand",
          "This example is a JSON string:",
          "It defines an object with 3 properties:",
          "Each property has a value.",
          "If you parse the JSON string with a JavaScript program, you can access the data\nas an object:",
          "*The JSON syntax is derived from JavaScript object notation, but the JSON format is text only.",
          "Code for reading and generating JSON exists in many programming languages.",
          "The JSON format was originally specified byDouglas Crockford.",
          "The JSON format is syntactically similar to the code for creating \nJavaScript objects.\nBecause of this, a JavaScript program \ncan easily convert JSON data into JavaScript objects.",
          "Since the format is text only, JSON data can easily be sent between computers,\nand used by any programming language.",
          "JavaScript has a built in function for converting JSON strings into JavaScript objects:",
          "JSON.parse()",
          "JavaScript also has a built in function for converting an object into a JSON string:",
          "JSON.stringify()",
          "You can receive pure text from a server and use it as a JavaScript object.",
          "You can send a JavaScript object to a server in pure text format.",
          "You can work with data as JavaScript objects, with no complicated \nparsing and translations.",
          "When storing data, the data has to be a certain format, and regardless of where you choose to store it,textis always one of the legal formats.",
          "JSON makes it possible to store JavaScript objects as text."
        ],
        "lists": [
          [
            "name",
            "age",
            "car"
          ],
          [
            "JSON stands forJavaScriptObjectNotation",
            "JSON is a lightweight data-interchange format",
            "JSON is plain text written in JavaScript object notation",
            "JSON is used to send data between computers",
            "JSON is language independent*"
          ]
        ],
        "examples": [
          "'{\"name\":\"John\", \"age\":30, \"car\":null}'",
          "let personName = obj.name;let personAge = obj.age;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_json_syntax.asp",
    "cours": {
      "titre": "JSONSyntax",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_json_syntax.asp",
      "contenus": {
        "paragraphs": [
          "The JSON syntax is a subset of the JavaScript syntax.",
          "JSON syntax is derived from JavaScript object notation syntax:",
          "JSON data is written as name/value pairs (aka key/value pairs).",
          "A name/value pair consists of a field name (in double quotes), \nfollowed by a colon, followed by a value:",
          "JSON names require double quotes.",
          "The JSON format is almost identical to JavaScript objects.",
          "In JSON,keysmust be strings, written with double quotes:",
          "In JavaScript, keys can be strings, numbers, or identifier names:",
          "JSON Values",
          "InJSON,valuesmust be one of the following data types:",
          "InJavaScriptvalues can be all of the above, plus any other valid JavaScript \nexpression, including:",
          "In JSON,string valuesmust be written with double quotes:",
          "In JavaScript, you can write string values with doubleorsingle quotes:",
          "Because JSON syntax is derived from JavaScript object notation, very little extra \nsoftware is needed to work with JSON within JavaScript.",
          "With JavaScript you can create an object and assign data to \nit, like this:",
          "You can access a JavaScript object like this:",
          "It can also be accessed like this:",
          "Data can be modified like this:",
          "It can also be modified like this:",
          "You will learn how to convert JavaScript objects into JSON later in this \ntutorial.",
          "The same way JavaScript objects can be written as JSON, JavaScript arrays can \nalso be written as JSON.",
          "You will learn more about objects and arrays later in this tutorial."
        ],
        "lists": [
          [
            "Data is in name/value pairs",
            "Data is separated by commas",
            "Curly braces hold objects",
            "Square brackets hold arrays"
          ],
          [
            "a string",
            "a number",
            "an object",
            "an array",
            "a boolean",
            "null"
          ],
          [
            "a function",
            "a date",
            "undefined"
          ],
          [
            "The file type for JSON files is \".json\"",
            "The MIME type for JSON text is \"application/json\""
          ]
        ],
        "examples": [
          "\"name\":\"John\"",
          "{\"name\":\"John\"}",
          "{name:\"John\"}",
          "{\"name\":\"John\"}",
          "{name:'John'}",
          "person = {name:\"John\", age:31, city:\"New York\"};",
          "// returns Johnperson.name;",
          "// returns Johnperson[\"name\"];",
          "person.name = \"Gilbert\";",
          "person[\"name\"] = \"Gilbert\";"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_json_xml.asp",
    "cours": {
      "titre": "JSONvs XML",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_json_xml.asp",
      "contenus": {
        "paragraphs": [
          "Both JSON and XML can be used to receive data from a web server.",
          "The following JSON and XML examples both define an employees object, with an array of 3 employees:",
          "The biggest difference is:",
          "XML has to be parsed with an XML parser. JSON can be parsed by a \nstandard JavaScript function.",
          "XML is much more difficult to parse than JSON.JSON is parsed into a ready-to-use JavaScript object.",
          "For AJAX applications, JSON is faster and easier than XML:",
          "Using XML",
          "Using JSON"
        ],
        "lists": [
          [
            "Both JSON and XML are \"self describing\" (human readable)",
            "Both JSON and XML are hierarchical (values within values)",
            "Both JSON and XML can be parsed and used by lots of programming languages",
            "Both JSON and XML can be fetched with an XMLHttpRequest"
          ],
          [
            "JSON doesn't use end tag",
            "JSON is shorter",
            "JSON is quicker to read and write",
            "JSON can use arrays"
          ],
          [
            "Fetch an XML document",
            "Use the XML DOM to loop through the document",
            "Extract values and store in variables"
          ],
          [
            "Fetch a JSON string",
            "JSON.Parse the JSON string"
          ]
        ],
        "examples": [
          "{\"employees\":[{ \"firstName\":\"John\", \"lastName\":\"Doe\" },{ \"firstName\":\"Anna\", \"lastName\":\"Smith\" },{ \"firstName\":\"Peter\", \"lastName\":\"Jones\" }]}",
          "<employees><employee><firstName>John</firstName> <lastName>Doe</lastName></employee><employee><firstName>Anna</firstName> <lastName>Smith</lastName></employee><employee><firstName>Peter</firstName> <lastName>Jones</lastName></employee></employees>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_json_datatypes.asp",
    "cours": {
      "titre": "JSONData Types",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_json_datatypes.asp",
      "contenus": {
        "paragraphs": [
          "In JSON, values must be one of the following data types:",
          "JSON valuescannotbe one of the following data types:",
          "Strings in JSON must be written in double quotes.",
          "Numbers in JSON must be an integer or a floating point.",
          "Values in JSON can be objects.",
          "Objects as values in JSON must follow the JSON syntax.",
          "Values in JSON can be arrays.",
          "Values in JSON can be true/false.",
          "Values in JSON can be null."
        ],
        "lists": [
          [
            "a string",
            "a number",
            "an object (JSON object)",
            "an array",
            "a boolean",
            "null"
          ],
          [
            "a function",
            "a date",
            "undefined"
          ]
        ],
        "examples": [
          "{\"name\":\"John\"}",
          "{\"age\":30}",
          "{\"employee\":{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}}",
          "{\"employees\":[\"John\", \"Anna\", \"Peter\"]}",
          "{\"sale\":true}",
          "{\"middlename\":null}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_json_parse.asp",
    "cours": {
      "titre": "JSON.parse()",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_json_parse.asp",
      "contenus": {
        "paragraphs": [
          "A common use of JSON is to exchange data to/from a web server.",
          "When receiving data from a web server, the data is always a string.",
          "Parse the data withJSON.parse(), and the data becomes a JavaScript object.",
          "Imagine we received this text from a web server:",
          "Use the JavaScript functionJSON.parse()to convert text into a JavaScript object:",
          "Make sure the text is in JSON format, or else you will get a syntax error.",
          "Use the JavaScript object in your page:",
          "When using theJSON.parse()on a JSON derived from an array, the method will \nreturn a JavaScript array, instead of a JavaScript object.",
          "Date objects are not allowed in JSON.",
          "If you need to include a date, write it as a string.",
          "You can convert it back into a date object later:",
          "Convert a string into a date:",
          "Or, you can use the second parameter, of theJSON.parse()function, calledreviver.",
          "Thereviverparameter is a function that checks each property, \nbefore returning the value.",
          "Convert a string into a date, using thereviverfunction:",
          "Functions are not allowed in JSON.",
          "If you need to include a function, write it as a string.",
          "You can convert it back into a function later:",
          "Convert a string into a function:",
          "You should avoid using functions in JSON, the functions will lose their scope, \nand you would have to useeval()to convert them back into functions."
        ],
        "lists": [],
        "examples": [
          "'{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}'",
          "const obj = JSON.parse('{\"name\":\"John\", \"age\":30, \"city\":\"New \n  York\"}');",
          "<p id=\"demo\"></p><script>document.getElementById(\"demo\").innerHTML = obj.name;</script>",
          "const text = '[\"Ford\", \"BMW\", \"Audi\", \"Fiat\"]';const myArr = JSON.parse(text);",
          "const text =\n  '{\"name\":\"John\", \"birth\":\"1986-12-14\", \"city\":\"New York\"}';const obj = JSON.parse(text);obj.birth = new Date(obj.birth);document.getElementById(\"demo\").innerHTML = obj.name + \", \" + obj.birth;",
          "const text =\n  '{\"name\":\"John\", \"birth\":\"1986-12-14\", \"city\":\"New York\"}';const obj = JSON.parse(text, function (key, value) {if \n  (key == \"birth\") {return new \n  Date(value);} else {return value;}});document.getElementById(\"demo\").innerHTML = obj.name + \", \" + obj.birth;",
          "const text =\n  '{\"name\":\"John\", \"age\":\"function () {return \n  30;}\", \"city\":\"New York\"}';const obj = JSON.parse(text);obj.age = eval(\"(\" + obj.age + \")\");document.getElementById(\"demo\").innerHTML = obj.name + \", \" + \n  obj.age();"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_json_stringify.asp",
    "cours": {
      "titre": "JSON.stringify()",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_json_stringify.asp",
      "contenus": {
        "paragraphs": [
          "A common use of JSON is to exchange data to/from a web server.",
          "When sending data to a web server, the data has to be \na string.",
          "Convert a JavaScript object into a string withJSON.stringify().",
          "Imagine we have this object in JavaScript:",
          "Use the JavaScript functionJSON.stringify()to convert it into a string.",
          "The result will be a string following the JSON notation.",
          "myJSONis now a string, and ready to be sent to a server:",
          "You will learn how to send JSON to a server in the next chapters.",
          "It is also possible to stringify JavaScript arrays:",
          "Imagine we have this array in JavaScript:",
          "Use the JavaScript functionJSON.stringify()to convert it into a string.",
          "The result will be a string following the JSON notation.",
          "myJSONis now a string, and ready to be sent to a server:",
          "You will learn how to send a JSON string to a server in the next chapters.",
          "When storing data, the data has to be a certain format, and regardless of where you choose to store it,textis always one of the legal formats.",
          "JSON makes it possible to store JavaScript objects as text.",
          "Storing data in local storage",
          "In JSON, date objects are not allowed. TheJSON.stringify()function will convert \nany dates into strings.",
          "You can convert the string back into a date object at the receiver.",
          "In JSON, functions are not allowed as object values.",
          "TheJSON.stringify()function will remove any functions from a JavaScript \nobject, both the key and the value:",
          "This can be omitted if you convert your functions into strings before running \ntheJSON.stringify()function.",
          "If you send functions using JSON, the functions will lose their scope, and the receiver \nwould have to use eval() to convert them back into functions."
        ],
        "lists": [],
        "examples": [
          "const obj = {name: \"John\", age: 30, city: \"New York\"};",
          "const myJSON = JSON.stringify(obj);",
          "const obj = {name: \"John\", age: 30, city: \"New York\"};const myJSON = \n  JSON.stringify(obj);",
          "const arr = [\"John\", \"Peter\", \"Sally\", \"Jane\"];",
          "const myJSON = JSON.stringify(arr);",
          "const arr = [\"John\", \"Peter\", \"Sally\", \"Jane\"];const myJSON = \n  JSON.stringify(arr);",
          "// Storing data:const myObj = {name: \"John\", \n  age: 31, city: \"New York\"};const myJSON = \n  JSON.stringify(myObj);localStorage.setItem(\"testJSON\", myJSON);// Retrieving data:let text = localStorage.getItem(\"testJSON\");let obj = \n  JSON.parse(text);document.getElementById(\"demo\").innerHTML = obj.name;",
          "const obj = {name: \"John\", today: new Date(), city : \"New York\"};const myJSON = JSON.stringify(obj);",
          "const obj = {name: \"John\", age: function () {return 30;}, city: \"New York\"};const myJSON = JSON.stringify(obj);",
          "const obj = {name: \"John\", age: function () {return 30;}, city: \"New York\"};obj.age = obj.age.toString();const myJSON = JSON.stringify(obj);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_json_objects.asp",
    "cours": {
      "titre": "JSON Object Literals",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_json_objects.asp",
      "contenus": {
        "paragraphs": [
          "This is a JSON string:",
          "Inside the JSON string there is a JSON object literal:",
          "JSON object literals are surrounded by curly braces {}.",
          "JSON object literals contains key/value pairs.",
          "Keys and values are separated by a colon.",
          "Keys must be strings, \nand values must be a valid JSON data type:stringnumberobjectarraybooleannull",
          "Each key/value pair is separated by a comma.",
          "It is a common mistake to call a JSON object literal \"a JSON object\".",
          "JSON cannot be an object. JSON is a string format.",
          "The data is only JSON when it is in a string format. \nWhen it is converted to a JavaScript variable, it becomes a JavaScript object.",
          "You can create a JavaScript object from a JSON object literal:ExamplemyObj = {\"name\":\"John\", \"age\":30, \"car\":null};Try it Yourself »Normally, you create a JavaScript object by parsing a JSON string:ExamplemyJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';myObj = JSON.parse(myJSON);Try it Yourself »Accessing Object ValuesYou can access object values by using dot (.) notation:Exampleconst myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';const myObj = JSON.parse(myJSON);x = myObj.name;Try it Yourself »You can also access object values by using bracket ([]) notation:Exampleconst myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';const myObj = JSON.parse(myJSON);x = myObj[\"name\"];Try it Yourself »Looping an ObjectYou can loop through object properties with a for-in loop:Exampleconst myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';const myObj = JSON.parse(myJSON);let text = \"\";for (const x in myObj) {text += x + \", \";}Try it Yourself »In a for-in loop, use the bracket notation to access the propertyvalues:Exampleconst myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';const myObj = JSON.parse(myJSON);let text = \"\";for (const x in myObj) {text += myObj[x] + \", \";}Try it Yourself »❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "Normally, you create a JavaScript object by parsing a JSON string:ExamplemyJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';myObj = JSON.parse(myJSON);Try it Yourself »Accessing Object ValuesYou can access object values by using dot (.) notation:Exampleconst myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';const myObj = JSON.parse(myJSON);x = myObj.name;Try it Yourself »You can also access object values by using bracket ([]) notation:Exampleconst myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';const myObj = JSON.parse(myJSON);x = myObj[\"name\"];Try it Yourself »Looping an ObjectYou can loop through object properties with a for-in loop:Exampleconst myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';const myObj = JSON.parse(myJSON);let text = \"\";for (const x in myObj) {text += x + \", \";}Try it Yourself »In a for-in loop, use the bracket notation to access the propertyvalues:Exampleconst myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';const myObj = JSON.parse(myJSON);let text = \"\";for (const x in myObj) {text += myObj[x] + \", \";}Try it Yourself »❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "You can access object values by using dot (.) notation:",
          "You can also access object values by using bracket ([]) notation:",
          "You can loop through object properties with a for-in loop:",
          "In a for-in loop, use the bracket notation to access the propertyvalues:"
        ],
        "lists": [
          [
            "string",
            "number",
            "object",
            "array",
            "boolean",
            "null"
          ]
        ],
        "examples": [
          "'{\"name\":\"John\", \"age\":30, \"car\":null}'",
          "{\"name\":\"John\", \"age\":30, \"car\":null}",
          "myObj = {\"name\":\"John\", \"age\":30, \"car\":null};",
          "myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';myObj = JSON.parse(myJSON);",
          "const myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';const myObj = JSON.parse(myJSON);x = myObj.name;",
          "const myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';const myObj = JSON.parse(myJSON);x = myObj[\"name\"];",
          "const myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';const myObj = JSON.parse(myJSON);let text = \"\";for (const x in myObj) {text += x + \", \";}",
          "const myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';const myObj = JSON.parse(myJSON);let text = \"\";for (const x in myObj) {text += myObj[x] + \", \";}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_json_arrays.asp",
    "cours": {
      "titre": "JSON Array Literals",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_json_arrays.asp",
      "contenus": {
        "paragraphs": [
          "This is a JSON string:",
          "Inside the JSON string there is a JSON array literal:",
          "Arrays in JSON are almost the same as arrays in JavaScript.",
          "In JSON, array values must be of type string, number, object, array, boolean \nornull.",
          "In JavaScript, array values can be all of the above, plus any other valid \nJavaScript expression, including functions, dates, andundefined.",
          "You can create a JavaScript array from a literal:ExamplemyArray = [\"Ford\", \"BMW\", \"Fiat\"];Try it Yourself »You can create a JavaScript array by parsing a JSON string:ExamplemyJSON = '[\"Ford\", \"BMW\", \"Fiat\"]';myArray = JSON.parse(myJSON);Try it Yourself »Accessing Array ValuesYou access array values by index:ExamplemyArray[0];Try it Yourself »Arrays in ObjectsObjects can contain arrays:Example{\"name\":\"John\",\"age\":30,\"cars\":[\"Ford\", \"BMW\", \"Fiat\"]}You access array values by index:ExamplemyObj.cars[0];Try it Yourself »Looping Through an ArrayYou can access array values by using afor inloop:Examplefor (let i in myObj.cars) {x \n  += myObj.cars[i];}Try it Yourself »Or you can use aforloop:Examplefor (let i \n  = 0; i < myObj.cars.length; i++) {x \n  += myObj.cars[i];}Try it Yourself »❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "You can create a JavaScript array by parsing a JSON string:ExamplemyJSON = '[\"Ford\", \"BMW\", \"Fiat\"]';myArray = JSON.parse(myJSON);Try it Yourself »Accessing Array ValuesYou access array values by index:ExamplemyArray[0];Try it Yourself »Arrays in ObjectsObjects can contain arrays:Example{\"name\":\"John\",\"age\":30,\"cars\":[\"Ford\", \"BMW\", \"Fiat\"]}You access array values by index:ExamplemyObj.cars[0];Try it Yourself »Looping Through an ArrayYou can access array values by using afor inloop:Examplefor (let i in myObj.cars) {x \n  += myObj.cars[i];}Try it Yourself »Or you can use aforloop:Examplefor (let i \n  = 0; i < myObj.cars.length; i++) {x \n  += myObj.cars[i];}Try it Yourself »❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "You access array values by index:",
          "Objects can contain arrays:",
          "You access array values by index:",
          "You can access array values by using afor inloop:",
          "Or you can use aforloop:"
        ],
        "lists": [],
        "examples": [
          "'[\"Ford\", \"BMW\", \"Fiat\"]'",
          "[\"Ford\", \"BMW\", \"Fiat\"]",
          "myArray = [\"Ford\", \"BMW\", \"Fiat\"];",
          "myJSON = '[\"Ford\", \"BMW\", \"Fiat\"]';myArray = JSON.parse(myJSON);",
          "myArray[0];",
          "{\"name\":\"John\",\"age\":30,\"cars\":[\"Ford\", \"BMW\", \"Fiat\"]}",
          "myObj.cars[0];",
          "for (let i in myObj.cars) {x \n  += myObj.cars[i];}",
          "for (let i \n  = 0; i < myObj.cars.length; i++) {x \n  += myObj.cars[i];}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_json_server.asp",
    "cours": {
      "titre": "JSON Server",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_json_server.asp",
      "contenus": {
        "paragraphs": [
          "A common use of JSON is to exchange data to/from a web server.",
          "When receiving data from a web server, the data is always a string.",
          "Parse the data withJSON.parse(), and the data becomes a JavaScript object.",
          "If you have data stored in a JavaScript object, you can convert the object \ninto JSON, and send it to a server:",
          "If you receive data in JSON format, you can easily convert it into a JavaScript \nobject:",
          "You can request JSON from the server by using an AJAX request",
          "As long as the response from the server is written in JSON format, you can \nparse the string into a JavaScript object.",
          "Use the XMLHttpRequest to get data from the server:",
          "Take a look atjson_demo.txt",
          "When using theJSON.parse()on JSON derived from an array, the method will \nreturn a JavaScript array, instead of a JavaScript object.",
          "JSON returned from a server as an array:",
          "Take a look atjson_demo_array.txt"
        ],
        "lists": [],
        "examples": [
          "const myObj = {name: \"John\", \n  age: 31, city: \"New York\"};const myJSON = \n  JSON.stringify(myObj);window.location = \"demo_json.php?x=\" + myJSON;",
          "const myJSON =\n  '{\"name\":\"John\", \n  \"age\":31, \"city\":\"New York\"}';const myObj = \n  JSON.parse(myJSON);document.getElementById(\"demo\").innerHTML = myObj.name;",
          "const xmlhttp = new XMLHttpRequest();xmlhttp.onload = function() {const myObj = JSON.parse(this.responseText);document.getElementById(\"demo\").innerHTML = myObj.name;};xmlhttp.open(\"GET\", \"json_demo.txt\");xmlhttp.send();",
          "const xmlhttp = new XMLHttpRequest();xmlhttp.onload = function() {const myArr = JSON.parse(this.responseText);document.getElementById(\"demo\").innerHTML = myArr[0];}}xmlhttp.open(\"GET\", \"json_demo_array.txt\", true);xmlhttp.send();"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_json_php.asp",
    "cours": {
      "titre": "JSONPHP",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_json_php.asp",
      "contenus": {
        "paragraphs": [
          "A common use of JSON is to read data from a web server, \nand display the data in a web page.",
          "This chapter will teach you how to exchange JSON data between \nthe client and a PHP server.",
          "PHP has some built-in functions to handle JSON.",
          "Objects in PHP can be converted into JSON by using the PHP functionjson_encode():",
          "Here is a JavaScript on the client, using an AJAX call to request the PHP \nfile from the example above:",
          "Use JSON.parse() to convert the result into a JavaScript object:",
          "Arrays in PHP will also be converted into JSON when using the PHP functionjson_encode():",
          "Here is a JavaScript on the client, using an AJAX call to request the PHP \nfile from the array example above:",
          "Use JSON.parse() to convert the result into a JavaScript array:",
          "PHP is a server side programming language, and can be used to access a database.",
          "Imagine you have a database on your server, and you want to send a request to \nit from the client where you ask for the 10 first rows in a table called \n\"customers\".",
          "On the client, make a JSON object that describes the numbers of rows you want to return.",
          "Before you send the request to the server, convert the JSON object into a \nstring and send it as a parameter to the url of the PHP page:",
          "Use JSON.stringify() to convert the JavaScript object into JSON:",
          "Take a look at the PHP file:",
          "When sending data to the server, it is often best to use the HTTPPOSTmethod.",
          "To send AJAX requests using thePOSTmethod, specify the method, and the correct header.",
          "The data sent to the server must now be an argument to thesend()method:",
          "The only difference in the PHP file is the method for getting the transferred data.",
          "Use $_POST instead of $_GET:"
        ],
        "lists": [
          [
            "Define an object containing a \"limit\" property and value.",
            "Convert the object into a JSON string.",
            "Send a request to the PHP file, with the JSON string as a parameter.",
            "Wait until the request returns with the result (as JSON)",
            "Display the result received from the PHP file."
          ],
          [
            "Convert the request into an object, using the PHP functionjson_decode().",
            "Access the database, and fill an array with the requested data.",
            "Add the array to an object, and return the object as JSON using \nthejson_encode()function."
          ]
        ],
        "examples": [
          "<?php$myObj->name = \"John\";$myObj->age = 30;$myObj->city = \"New \n  York\";$myJSON = json_encode($myObj);echo $myJSON;?>",
          "const xmlhttp = new XMLHttpRequest();xmlhttp.onload = function() {const myObj = JSON.parse(this.responseText);document.getElementById(\"demo\").innerHTML = myObj.name;}xmlhttp.open(\"GET\", \"demo_file.php\");xmlhttp.send();",
          "<?php$myArr = array(\"John\", \"Mary\", \"Peter\", \"Sally\");$myJSON = json_encode($myArr);echo $myJSON;?>",
          "var xmlhttp = new XMLHttpRequest();xmlhttp.onload = function() {const myObj = JSON.parse(this.responseText);document.getElementById(\"demo\").innerHTML = myObj[2];}xmlhttp.open(\"GET\", \"demo_file_array.php\", true);xmlhttp.send();",
          "const limit = {\"limit\":10};const dbParam = JSON.stringify(limit);xmlhttp = new XMLHttpRequest();xmlhttp.onload = function() {document.getElementById(\"demo\").innerHTML = this.responseText;}xmlhttp.open(\"GET\",\"json_demo_db.php?x=\" + dbParam);xmlhttp.send();",
          "<?phpheader(\"Content-Type: application/json; charset=UTF-8\");$obj = \n  json_decode($_GET[\"x\"], false);$conn = new mysqli(\"myServer\", \"myUser\", \"myPassword\", \"Northwind\");$stmt = $conn->prepare(\"SELECT name FROM customers LIMIT ?\");$stmt->bind_param(\"s\", $obj->limit);$stmt->execute();$result = $stmt->get_result();$outp = $result->fetch_all(MYSQLI_ASSOC);echo json_encode($outp);?>",
          "xmlhttp.onload = function() {const myObj = JSON.parse(this.responseText);let text = \"\";for (let x in myObj) {text += myObj[x].name + \"<br>\";}document.getElementById(\"demo\").innerHTML = text;}",
          "const dbParam = JSON.stringify({\"limit\":10});const xmlhttp = new XMLHttpRequest();xmlhttp.onload = function() {const myObj = JSON.parse(this.responseText);let text =\"\";for (let x in myObj) {text += myObj[x].name + \"<br>\";}document.getElementById(\"demo\").innerHTML = text;}xmlhttp.open(\"POST\", \"json_demo_db_post.php\");xmlhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");xmlhttp.send(\"x=\" + dbParam);",
          "<?phpheader(\"Content-Type: application/json; charset=UTF-8\");$obj = \n  json_decode($_POST[\"x\"], false);$conn = new mysqli(\"myServer\", \"myUser\", \"myPassword\", \"Northwind\");$stmt = $conn->prepare(\"SELECT name FROM customers LIMIT ?\");$stmt->bind_param(\"s\", \n  $obj->limit);$stmt->execute();$result = $stmt->get_result();$outp = $result->fetch_all(MYSQLI_ASSOC);echo json_encode($outp);?>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_json_html.asp",
    "cours": {
      "titre": "JSONHTML",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_json_html.asp",
      "contenus": {
        "paragraphs": [
          "JSON can very easily be translated into JavaScript.",
          "JavaScript can be used to make HTML in your web pages.",
          "Make an HTML table with data received as JSON:",
          "Make the HTML table based on the value of a drop down menu:Choose an option:CustomersProductsSuppliers",
          "Make an HTML drop down list with data received as JSON:"
        ],
        "lists": [],
        "examples": [
          "const dbParam = JSON.stringify({table:\"customers\",limit:20});const xmlhttp = new XMLHttpRequest();xmlhttp.onload = function() {myObj = JSON.parse(this.responseText);let text = \"<table border='1'>\"for (let x in myObj) {text += \"<tr><td>\" + myObj[x].name + \"</td></tr>\";}text += \"</table>\"document.getElementById(\"demo\").innerHTML   = text;}xmlhttp.open(\"POST\", \"json_demo_html_table.php\");xmlhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");xmlhttp.send(\"x=\" + dbParam);",
          "<select id=\"myselect\" onchange=\"change_myselect(this.value)\"><option value=\"\">Choose an option:</option><option \nvalue=\"customers\">Customers</option><option \nvalue=\"products\">Products</option><option \nvalue=\"suppliers\">Suppliers</option></select><script>function change_myselect(sel) {const dbParam = JSON.stringify({table:sel,limit:20});const xmlhttp = new XMLHttpRequest();xmlhttp.onload = function() {const myObj = JSON.parse(this.responseText);let text = \"<table border='1'>\"for (let x in myObj) {text += \"<tr><td>\" + myObj[x].name + \"</td></tr>\";}text += \"</table>\"document.getElementById(\"demo\").innerHTML = text;}xmlhttp.open(\"POST\", \"json_demo_html_table.php\");xmlhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");xmlhttp.send(\"x=\" + dbParam);}</script>",
          "const dbParam = JSON.stringify({table:\"customers\",limit:20});const xmlhttp = new XMLHttpRequest();xmlhttp.onload = function() {const myObj = JSON.parse(this.responseText);let text = \"<select>\"for (let x in myObj) {text += \"<option>\" + myObj[x].name + \"</option>\";}text += \"</select>\"document.getElementById(\"demo\").innerHTML = text;}}xmlhttp.open(\"POST\", \"json_demo_html_table.php\", true);xmlhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");xmlhttp.send(\"x=\" + dbParam);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_json_jsonp.asp",
    "cours": {
      "titre": "JSONP",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_json_jsonp.asp",
      "contenus": {
        "paragraphs": [
          "JSONP is a method for sending JSON data without worrying about cross-domain issues.",
          "JSONP does not use theXMLHttpRequestobject.",
          "JSONP uses the<script>tag instead.",
          "JSONP stands for JSON with Padding.",
          "Requesting a file from another domain can cause problems, due to cross-domain policy.",
          "Requesting an externalscriptfrom another domain does not have this problem.",
          "JSONP uses this advantage, and request files using the script tag \ninstead of theXMLHttpRequestobject.",
          "The file on the server wraps the result inside a \nfunction call:",
          "The result returns a call to a function named \"myFunc\" with the JSON data as \na parameter.",
          "Make sure that the function exists on the client.",
          "The function named \"myFunc\" is located on the client, and ready to handle \nJSON data:",
          "The example above will execute the \"myFunc\" function when the page is \nloading, based on where you put the script tag, which is not very satisfying.",
          "The script tag should only be created when needed:",
          "Create and insert the <script> tag when a button is clicked:",
          "The examples above are still very static.",
          "Make the example dynamic by sending JSON to the php file, and let the php file return a JSON object based on \nthe information it gets.",
          "The \"myFunc\" function will be called from the php file:",
          "When you have no control over the server file, how do you get the server file \nto call the correct function?",
          "Sometimes the server file offers a callback function as \na parameter:",
          "The php file will call the function you pass as a callback parameter:"
        ],
        "lists": [
          [
            "Convert the request into an object, using the PHP functionjson_decode().",
            "Access the database, and fill an array with the requested data.",
            "Add the array to an object.",
            "Convert the array into JSON using \nthejson_encode()function.",
            "Wrap \"myFunc()\" around the return object."
          ]
        ],
        "examples": [
          "<script src=\"demo_jsonp.php\">",
          "<?php$myJSON = '{ \"name\":\"John\", \"age\":30, \"city\":\"New York\" }';echo \"myFunc(\".$myJSON.\");\";?>",
          "function myFunc(myObj) \n  {document.getElementById(\"demo\").innerHTML = \n  myObj.name;}",
          "function clickButton() {let s = document.createElement(\"script\");s.src = \"demo_jsonp.php\";document.body.appendChild(s);}",
          "<?phpheader(\"Content-Type: application/json; charset=UTF-8\");$obj = \n  json_decode($_GET[\"x\"], false);$conn = new mysqli(\"myServer\", \"myUser\", \"myPassword\", \"Northwind\");$result = $conn->query(\"SELECT name FROM \n  \".$obj->$table.\" LIMIT \".$obj->$limit);$outp = array();$outp = $result->fetch_all(MYSQLI_ASSOC);echo \"myFunc(\".json_encode($outp).\")\";?>",
          "const obj = { table: \"products\", limit: 10 };let s = document.createElement(\"script\");s.src = \"jsonp_demo_db.php?x=\" + JSON.stringify(obj);document.body.appendChild(s);function myFunc(myObj) {let txt = \"\";for (let x in myObj) \n  {txt += myObj[x].name + \"<br>\";}document.getElementById(\"demo\").innerHTML = txt;}",
          "let s = document.createElement(\"script\");s.src = \"jsonp_demo_db.php?callback=myDisplayFunction\";document.body.appendChild(s);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_jquery_selectors.asp",
    "cours": {
      "titre": "JavaScript / jQuery DOM Selectors",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_jquery_selectors.asp",
      "contenus": {
        "paragraphs": [
          "jQuerywas created in 2006 by John Resig. \nIt was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.",
          "However, after JavaScriptVersion 5(2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:",
          "Return the element with id=\"id01\":",
          "Try it Yourself »",
          "Try it Yourself »",
          "Return all <p> elements:",
          "Try it Yourself »",
          "Try it Yourself »",
          "Return all elements with class=\"intro\".",
          "Try it Yourself »",
          "Try it Yourself »",
          "Return a list of all <p> elements with class=\"intro\".",
          "Try it Yourself »",
          "Try it Yourself »"
        ],
        "lists": [],
        "examples": [
          "myElement = $(\"#id01\");",
          "myElement = document.getElementById(\"id01\");",
          "myElements = $(\"p\");",
          "myElements = document.getElementsByTagName(\"p\");",
          "myElements = $(\".intro\");",
          "myElements = document.getElementsByClassName(\"intro\");",
          "myElements = $(\"p.intro\");",
          "myElements = document.querySelectorAll(\"p.intro\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_jquery_elements.asp",
    "cours": {
      "titre": "JavaScript / jQuery HTML Elements",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_jquery_elements.asp",
      "contenus": {
        "paragraphs": [
          "jQuerywas created in 2006 by John Resig. \nIt was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.",
          "However, after JavaScriptVersion 5(2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:",
          "Set the inner text of an HTML element:",
          "Try it Yourself »",
          "Try it Yourself »",
          "Get the inner text of an HTML element:",
          "Try it Yourself »",
          "Try it Yourself »",
          "Set the HTML content of an element:",
          "Try it Yourself »",
          "Try it Yourself »",
          "Get the HTML content of an element:",
          "Try it Yourself »",
          "Try it Yourself »"
        ],
        "lists": [],
        "examples": [
          "myElement.text(\"Hello Sweden!\");",
          "myElement.textContent = \"Hello Sweden!\";",
          "myText = $(\"#02\").text();",
          "myText = document.getElementById(\"02\").textContent;",
          "myElement.html(\"<p>Hello World</p>\");",
          "myElement.innerHTML = \"<p>Hello World</p>\";",
          "content = myElement.html();",
          "content = myElement.innerHTML;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_jquery_css.asp",
    "cours": {
      "titre": "JavaScript / jQuery CSS Styles",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_jquery_css.asp",
      "contenus": {
        "paragraphs": [
          "jQuerywas created in 2006 by John Resig. \nIt was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.",
          "However, after JavaScriptVersion 5(2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:",
          "Hide an HTML Element:",
          "Try it Yourself »",
          "Try it Yourself »",
          "Show an HTML Element:",
          "Try it Yourself »",
          "Try it Yourself »",
          "Change the font size of an HTML element:",
          "Try it Yourself »",
          "Try it Yourself »"
        ],
        "lists": [],
        "examples": [
          "myElement.hide();",
          "myElement.style.display = \"none\";",
          "myElement.show();",
          "myElement.style.display = \"\";",
          "$(\"#demo\").css(\"font-size\",\"35px\");",
          "document.getElementById(\"demo\").style.fontSize = \"35px\";"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_jquery_dom.asp",
    "cours": {
      "titre": "JavaScript / jQuery HTML DOM",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_jquery_dom.asp",
      "contenus": {
        "paragraphs": [
          "jQuerywas created in 2006 by John Resig. \nIt was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.",
          "However, after JavaScriptVersion 5(2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:",
          "Remove an HTML element:",
          "Try it Yourself »",
          "Try it Yourself »",
          "Return the parent of an HTML element:",
          "Try it Yourself »",
          "Try it Yourself »"
        ],
        "lists": [],
        "examples": [
          "$(\"#id02\").remove();",
          "document.getElementById(\"id02\").remove();",
          "myParent = $(\"#02\").parent().prop(\"nodeName\"); ;",
          "myParent = document.getElementById(\"02\").parentNode.nodeName;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_graphics.asp",
    "cours": {
      "titre": "JavaScript Graphics",
      "description": "Graphic LibrariesJavaScript libraries to use for all kinds of graphs:Plotly.jsChart.jsGoogle Chart",
      "lien": "https://www.w3schools.com/js/js_graphics.asp",
      "contenus": {
        "paragraphs": [
          "JavaScript libraries to use for all kinds of graphs:",
          "Plotly.js is a charting library that comes with over 40 chart types, 3D charts, statistical graphs, and SVG maps.",
          "Learn More ...Chart.jsChart.js comes with many built-in chart types:ScatterLineBarRadarPie and DoughnutPolar AreaBubbleLearn More ...Google ChartFrom simple line charts to complex tree maps,\nGoogle Chart provides a number of built-in chart types:Scatter ChartLine ChartBar / Column ChartArea ChartPie ChartDonut ChartOrg ChartMap / Geo ChartLearn More ...❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "Chart.js comes with many built-in chart types:",
          "Learn More ...Google ChartFrom simple line charts to complex tree maps,\nGoogle Chart provides a number of built-in chart types:Scatter ChartLine ChartBar / Column ChartArea ChartPie ChartDonut ChartOrg ChartMap / Geo ChartLearn More ...❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "From simple line charts to complex tree maps,\nGoogle Chart provides a number of built-in chart types:",
          "Learn More ...❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up"
        ],
        "lists": [
          [
            "Plotly.js",
            "Chart.js",
            "Google Chart"
          ],
          [
            "Scatter",
            "Line",
            "Bar",
            "Radar",
            "Pie and Doughnut",
            "Polar Area",
            "Bubble"
          ],
          [
            "Scatter Chart",
            "Line Chart",
            "Bar / Column Chart",
            "Area Chart",
            "Pie Chart",
            "Donut Chart",
            "Org Chart",
            "Map / Geo Chart"
          ]
        ],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_graphics_canvas.asp",
    "cours": {
      "titre": "HTML Canvas",
      "description": "HTML Canvas is perfect forScatter PlotsHTML Canvas is perfect forLine GraphsHTML Canvas is perfect for combiningScatterandLines",
      "lien": "https://www.w3schools.com/js/js_graphics_canvas.asp",
      "contenus": {
        "paragraphs": [
          "HTML Canvas is perfect forScatter Plots",
          "HTML Canvas is perfect forLine Graphs",
          "HTML Canvas is perfect for combiningScatterandLines",
          "Try it Yourself »",
          "Try it Yourself »",
          "Try it Yourself »"
        ],
        "lists": [],
        "examples": [
          "const xArray = [50,60,70,80,90,100,110,120,130,140,150];const yArray = [7,8,8,9,9,9,10,11,14,14,15];// Plot Scatterctx.fillStyle = \"red\";for (let i = 0; i < xArray.length-1; i++) {let x = xArray[i]*400/150;let y = yArray[i]*400/15;ctx.beginPath();ctx.ellipse(x, y, 2, 3, 0, 0, Math.PI * 2);ctx.fill();}",
          "let xMax = canvas.height;let slope = 1.2;let intercept = 70;// Plot Scatterctx.moveTo(0, intercept);ctx.lineTo(xMax, f(xMax));ctx.strokeStyle = \"black\";ctx.stroke();// Line Functionfunction f(x) {return x * slope + intercept;}",
          "let xMax = canvas.height;let yMax = canvas.width;let slope = 1.2;let intercept = 70;const xArray = [50,60,70,80,90,100,110,120,130,140,150];const yArray = [7,8,8,9,9,9,10,11,14,14,15];// Plot Scatterctx.fillStyle = \"red\";for (let i = 0; i < xArray.length-1; i++) {let x = xArray[i]*400/150;let y = yArray[i]*400/15;ctx.beginPath();ctx.ellipse(x, y, 2, 3, 0, 0, Math.PI * 2);ctx.fill();}// Plot Linectx.moveTo(0, intercept);ctx.lineTo(xMax, f(xMax));ctx.strokeStyle = \"black\";ctx.stroke();// Line Functionfunction f(x) {return x * slope + intercept;}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_graphics_plotly.asp",
    "cours": {
      "titre": "Plotly.js",
      "description": "Plotly.jsis a charting library that comes with over 40 chart types:Horizontal and Vertical Bar ChartsPie and Donut ChartsLine ChartsScatter and Bubble PlotsEquation Plots3D ChartsStatistical GraphsSVG Maps...Plotly.js is free and open-source under the MIT license.\nIt costs nothing to install and use.\nYou can view the source, report issues and contribute using Github.",
      "lien": "https://www.w3schools.com/js/js_graphics_plotly.asp",
      "contenus": {
        "paragraphs": [
          "Plotly.jsis a charting library that comes with over 40 chart types:",
          "Plotly.js is free and open-source under the MIT license.\nIt costs nothing to install and use.\nYou can view the source, report issues and contribute using Github.",
          "Try it Yourself »",
          "Try it Yourself »",
          "To display a pie instead of bars, change x and y to labels and values, and change the type to \"pie\":",
          "Try it Yourself »",
          "To display a donut instead of a pie, add a hole:",
          "Try it Yourself »",
          "To display scatters instead, change mode to markers:",
          "Try it Yourself »",
          "Try it Yourself »",
          "Bubble Plots are Scatter Plots whose markers have variable color, size, and symbols.",
          "It is a type of 3-dimensional chart with only two axes (x and y) where the size of the bubble\ncommunicates the third dimention.",
          "Try it Yourself »",
          "Try it Yourself »",
          "Try it Yourself »"
        ],
        "lists": [
          [
            "Horizontal and Vertical Bar Charts",
            "Pie and Donut Charts",
            "Line Charts",
            "Scatter and Bubble Plots",
            "Equation Plots",
            "3D Charts",
            "Statistical Graphs",
            "SVG Maps",
            "..."
          ]
        ],
        "examples": [
          "const xArray = [\"Italy\",\"France\",\"Spain\",\"USA\",\"Argentina\"];const yArray = [55, 49, 44, 24, 15];const data = [{x: xArray,y: yArray,type: \"bar\",orientation:\"v\",marker: {color:\"rgba(0,0,255)\"}}];const layout = {title:\"World Wide Wine Production\"};Plotly.newPlot(\"myPlot\", data, layout);",
          "const xArray = [55, 49, 44, 24, 15];const yArray = [\"Italy\",\"France\",\"Spain\",\"USA\",\"Argentina\"];const data = [{x: xArray,y: yArray,type: \"bar\",orientation: \"h\",marker: {color:\"rgba(255,0,0,0.6)\"}}];const layout = {title:\"World Wide Wine Production\"};Plotly.newPlot(\"myPlot\", data, layout);",
          "const data = [{labels: xArray,values: yArray,type: \"pie\"}];",
          "const data = [{labels: xArray,values: yArray,hole: .4,type: \"pie\"}];",
          "let exp = \"Math.sin(x)\";// Generate valuesconst xValues = [];const yValues = [];for (let x = 0; x <= 10; x += 0.1) {xValues.push(x);yValues.push(eval(exp));}// Display using Plotlyconst data = [{x:xValues, y:yValues, mode:\"lines\"}];const layout = {title: \"y = \" + exp};Plotly.newPlot(\"myPlot\", data, layout);",
          "// Display using Plotlyconst data = [{x:xValues, y:yValues,mode:\"markers\"}];const layout = {title: \"y = \" + exp};Plotly.newPlot(\"myPlot\", data, layout);",
          "const xArray = [50,60,70,80,90,100,110,120,130,140,150];const yArray = [7,8,8,9,9,9,10,11,14,14,15];// Define Dataconst data = [{x: xArray,y: yArray,mode:\"markers\",type:\"scatter\"}];// Define Layoutconst layout = {xaxis: {range: [40, 160], title: \"Square Meters\"},yaxis: {range: [5, 16], title: \"Price in Millions\"},title: \"House Prices vs. Size\"};Plotly.newPlot(\"myPlot\", data, layout);",
          "const xArray = [50,60,70,80,90,100,110,120,130,140,150];const yArray = [7,8,8,9,9,9,10,11,14,14,15];// Define Dataconst data = [{x: xArray,y: yArray,mode: \"lines\",type: \"scatter\"}];// Define Layoutconst layout = {xaxis: {range: [40, 160], title: \"Square Meters\"},yaxis: {range: [5, 16], title: \"Price in Millions\"},title: \"House Prices vs Size\"};// Display using PlotlyPlotly.newPlot(\"myPlot\", data, layout);",
          "const xArray = [1,2,3,4];const yArray = [10,20,30,40];const trace1 = {x: xArray,y: yArray,mode: 'markers',marker: {color: ['red', 'green',  'blue', 'orange'],size: [20, 30, 40, 50]}};const data = [trace1];const layout = {title: \"Plotting Bubbles\"};Plotly.newPlot('myPlot', data, layout);",
          "let exp = \"x + 17\";// Generate valuesconst xValues = [];const yValues = [];for (let x = 0; x <= 10; x += 1) {yValues.push(eval(exp));xValues.push(x);}// Define Dataconst data = [{x: xValues,y: yValues,mode: \"lines\"}];// Define Layoutconst layout = {title: \"y = \" + exp};// Display using PlotlyPlotly.newPlot(\"myPlot\", data, layout);",
          "let exp1 = \"x\";let exp2 = \"1.5*x\";let exp3 = \"1.5*x + 7\";// Generate valuesconst x1Values = [];const x2Values = [];const x3Values = [];const y1Values = [];const y2Values = [];const y3Values = [];for (let x = 0; x <= 10; x += 1) {x1Values.push(x);x2Values.push(x);x3Values.push(x);y1Values.push(eval(exp1));y2Values.push(eval(exp2));y3Values.push(eval(exp3));}// Define Dataconst data = [{x: x1Values, y: y1Values, mode:\"lines\"},{x: x2Values, y: y2Values, mode:\"lines\"},{x: x3Values, y: y3Values, mode:\"lines\"}];// Define Layoutconst layout = {title: \"[y=\" + exp1 + \"]  [y=\" + exp2 + \"]  [y=\" + exp3 + \"]\"};// Display using PlotlyPlotly.newPlot(\"myPlot\", data, layout);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_graphics_chartjs.asp",
    "cours": {
      "titre": "Chart.js",
      "description": "Chart.jsis an free JavaScript library for making HTML-based charts.\nIt is one of the simplest visualization libraries for JavaScript, and \ncomes with the many built-in chart types:Scatter PlotLine ChartBar ChartPie ChartDonut ChartBubble ChartArea ChartRadar ChartMixed Chart",
      "lien": "https://www.w3schools.com/js/js_graphics_chartjs.asp",
      "contenus": {
        "paragraphs": [
          "Chart.jsis an free JavaScript library for making HTML-based charts.\nIt is one of the simplest visualization libraries for JavaScript, and \ncomes with the many built-in chart types:",
          "1.Add a link to the providing CDN (Content Delivery Network):",
          "2.Add a <canvas> to where in the HTML you want to draw the chart:",
          "The canvas element must have a unique id.",
          "Try it Yourself »",
          "Color only one bar:",
          "Try it Yourself »",
          "Same color all bars:",
          "Try it Yourself »",
          "Color Shades:",
          "Try it Yourself »",
          "Just change type from \"bar\" to \"horizontalBar\":",
          "Try it Yourself »",
          "Try it Yourself »",
          "Just change type from \"pie\" to \"doughnut\":",
          "Try it Yourself »",
          "House Prices vs. Size",
          "Try it Yourself »",
          "House Prices vs. Size",
          "Try it Yourself »",
          "If you set the borderColor to zero, you canscatter plotthe line graph:",
          "Try it Yourself »",
          "Try it Yourself »",
          "Try it Yourself »",
          "Same as Linear Graph. Just change the generateData parameter(s):",
          "Try it Yourself »"
        ],
        "lists": [
          [
            "Scatter Plot",
            "Line Chart",
            "Bar Chart",
            "Pie Chart",
            "Donut Chart",
            "Bubble Chart",
            "Area Chart",
            "Radar Chart",
            "Mixed Chart"
          ]
        ],
        "examples": [
          "<scriptsrc=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js\"></script>",
          "<canvas id=\"myChart\" style=\"width:100%;max-width:700px\"></canvas>",
          "const myChart = new Chart(\"myChart\", {type: \"bar\",data: {},options: {}});",
          "const myChart = new Chart(\"myChart\", {type: \"line\",data: {},options: {}});",
          "const xValues = [\"Italy\", \"France\", \"Spain\", \"USA\", \"Argentina\"];const yValues = [55, 49, 44, 24, 15];const barColors = [\"red\", \"green\",\"blue\",\"orange\",\"brown\"];new Chart(\"myChart\", {type: \"bar\",data: {labels: xValues,datasets: [{backgroundColor: barColors,data: yValues}]},options: {...}});",
          "const barColors = [\"blue\"];",
          "const barColors =\"red\";",
          "const barColors = [\"rgba(0,0,255,1.0)\",\"rgba(0,0,255,0.8)\",\"rgba(0,0,255,0.6)\",\"rgba(0,0,255,0.4)\",\"rgba(0,0,255,0.2)\",];",
          "type: \"horizontalBar\",",
          "new Chart(\"myChart\", {type: \"pie\",data: {labels: xValues,datasets: [{backgroundColor: barColors,data: yValues}]},options: {title: {display: true,text: \"World Wide Wine Production\"}}});",
          "type: \"doughnut\";",
          "const xyValues = [{x:50, y:7},{x:60, y:8},{x:70, y:8},{x:80, y:9},{x:90, y:9},{x:100, y:9},{x:110, y:10},{x:120, y:11},{x:130, y:14},{x:140, y:14},{x:150, y:15}];new Chart(\"myChart\", {type: \"scatter\",data: {datasets: [{pointRadius: 4,pointBackgroundColor: \"rgba(0,0,255,1)\",data: xyValues}]},options:{...}});",
          "const xValues = [50,60,70,80,90,100,110,120,130,140,150];const yValues = [7,8,8,9,9,9,10,11,14,14,15];new Chart(\"myChart\", {type: \"line\",data: {labels: xValues,datasets: [{backgroundColor:\"rgba(0,0,255,1.0)\",borderColor: \"rgba(0,0,255,0.1)\",data: yValues}]},options:{...}});",
          "borderColor: \"rgba(0,0,0,0)\",",
          "const xValues = [100,200,300,400,500,600,700,800,900,1000];new Chart(\"myChart\", {type: \"line\",data: {labels: xValues,datasets: [{data: [860,1140,1060,1060,1070,1110,1330,2210,7830,2478],borderColor: \"red\",fill: false},{data: [1600,1700,1700,1900,2000,2700,4000,5000,6000,7000],borderColor: \"green\",fill: false},{data: [300,700,2000,5000,6000,4000,2000,1000,200,100],borderColor: \"blue\",fill: false}]},options: {legend: {display: false}}});",
          "const xValues = [];const yValues = [];generateData(\"x * 2 + 7\", 0, 10, 0.5);new Chart(\"myChart\", {type: \"line\",data: {labels: xValues,datasets: [{fill: false,pointRadius: 1,borderColor: \"rgba(255,0,0,0.5)\",data: yValues}]},options: {...}});function generateData(value, i1, i2, step = 1) {for (let x = i1; x <= i2; x += step) {yValues.push(eval(value));xValues.push(x);}}",
          "generateData(\"Math.sin(x)\", 0, 10, 0.5);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_graphics_google_chart.asp",
    "cours": {
      "titre": "Google Chart",
      "description": "From simple line charts to complex hierarchical tree maps,\nthe Google Chart gallery provides a large number of ready-to-use chart types:Scatter ChartLine ChartBar / Column ChartArea ChartPie ChartDonut ChartOrg ChartMap / Geo Chart",
      "lien": "https://www.w3schools.com/js/js_graphics_google_chart.asp",
      "contenus": {
        "paragraphs": [
          "From simple line charts to complex hierarchical tree maps,\nthe Google Chart gallery provides a large number of ready-to-use chart types:",
          "1.Add a <div> element (with a unique id) in the HTML where you want to display the chart:",
          "2.Add a link to the charts loader:",
          "3.Load the Graph API, and add the function to run when the API is loaded:",
          "Try it Yourself »",
          "To convert aBarChart to aPiechart, just replace:google.visualization.BarChartwith:google.visualization.PieChart",
          "Try it Yourself »",
          "To display the Pie in 3D, just addis3D: trueto the options:",
          "Try it Yourself »",
          "Try it Yourself »",
          "Toscatter plotthe same data, change google.visualization to ScatterChart:",
          "Try it Yourself »"
        ],
        "lists": [
          [
            "Scatter Chart",
            "Line Chart",
            "Bar / Column Chart",
            "Area Chart",
            "Pie Chart",
            "Donut Chart",
            "Org Chart",
            "Map / Geo Chart"
          ]
        ],
        "examples": [
          "<div id=\"myChart\" style=\"max-width:700px; height:400px\"></div>",
          "<script src=\"https://www.gstatic.com/charts/loader.js\"></script>",
          "<script>google.charts.load('current',{packages:['corechart']});google.charts.setOnLoadCallback(drawChart);// Your Functionfunction drawChart() {...}</script>",
          "function drawChart() {// Set Dataconst data = google.visualization.arrayToDataTable([['Contry', 'Mhl'],['Italy', 55],['France', 49],['Spain', 44],['USA', 24],['Argentina', 15]]);// Set Optionsconst options = {title: 'World Wide Wine Production'};// Drawconst chart = new google.visualization.BarChart(document.getElementById('myChart'));chart.draw(data, options);}",
          "const chart = new google.visualization.PieChart(document.getElementById('myChart'));",
          "const options = {title: 'World Wide Wine Production',is3D: true};",
          "function drawChart() {// Set Dataconst data = google.visualization.arrayToDataTable([['Price', 'Size'],[50,7],[60,8],[70,8],[80,9],[90,9],[100,9],[110,10],[120,11],[130,14],[140,14],[150,15]]);// Set Optionsconst options = {title: 'House Prices vs Size',hAxis: {title: 'Square Meters'},vAxis: {title: 'Price in Millions'},legend: 'none'};// Draw Chartconst chart = new google.visualization.LineChart(document.getElementById('myChart'));chart.draw(data, options);}",
          "const chart = new google.visualization.ScatterChart(document.getElementById('myChart'));"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_graphics_d3js.asp",
    "cours": {
      "titre": "D3.js",
      "description": "D3.js is a JavaScript library for manipulating HTML data.D3.js is easy to use.",
      "lien": "https://www.w3schools.com/js/js_graphics_d3js.asp",
      "contenus": {
        "paragraphs": [
          "D3.js is a JavaScript library for manipulating HTML data.D3.js is easy to use.",
          "D3.js is easy to use.",
          "To use D3.js in your web page,add a linkto the library:",
          "This script selects the body element and appends a paragraph with the text \"Hello World!\":",
          "Try it Yourself »",
          "Try it Yourself »"
        ],
        "lists": [],
        "examples": [
          "<script src=\"//d3js.org/d3.v3.min.js\"></script>",
          "d3.select(\"body\").append(\"p\").text(\"Hello World!\");",
          "// Set Dimensionsconst xSize = 500;const ySize = 500;const margin = 40;const xMax = xSize - margin*2;const yMax = ySize - margin*2;// Create Random Pointsconst numPoints = 100;const data = [];for (let i = 0; i < numPoints; i++) {data.push([Math.random() * xMax, Math.random() * yMax]);}// Append SVG Object to the Pageconst svg = d3.select(\"#myPlot\").append(\"svg\").append(\"g\").attr(\"transform\",\"translate(\" + margin + \",\" + margin + \")\");// X Axisconst x = d3.scaleLinear().domain([0, 500]).range([0, xMax]);svg.append(\"g\").attr(\"transform\", \"translate(0,\" + yMax + \")\").call(d3.axisBottom(x));// Y Axisconst y = d3.scaleLinear().domain([0, 500]).range([ yMax, 0]);svg.append(\"g\").call(d3.axisLeft(y));// Dotssvg.append('g').selectAll(\"dot\").data(data).enter().append(\"circle\").attr(\"cx\", function (d) { return d[0] } ).attr(\"cy\", function (d) { return d[1] } ).attr(\"r\", 3).style(\"fill\", \"Red\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_examples.asp",
    "cours": {
      "titre": "JavaScriptExamples",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_examples.asp",
      "contenus": {
        "paragraphs": [
          "Examples Explained",
          "Where to Explained",
          "Output Explained",
          "Syntax Explained",
          "Statements Explained",
          "Comments Explained",
          "Variables Explained",
          "Arithmetic Explained",
          "Assignment Explained",
          "Concatenation Explained",
          "Data types Explained",
          "Objects Explained",
          "Functions Explained",
          "Events Explained",
          "Strings Explained",
          "Numbers Explained",
          "Numbers Methods Explained",
          "Maths Explained",
          "Random Explained",
          "Dates Explained",
          "Arrays Explained",
          "Array Methods Explained",
          "Array Sort Explained",
          "Array Iteration Explained",
          "Type Conversion Explained",
          "Booleans Explained",
          "Comparisons Explained",
          "Conditionals Explained",
          "Loops Explained",
          "Errors Explained",
          "Regular Expressions Explained",
          "Objects Explained",
          "Object Properties Explained",
          "JSON Object Properties Explained",
          "JSON Arrays Explained",
          "JSON Parse Explained",
          "JSON Stringify Explained",
          "JSON PHP Explained",
          "JSON HTML Explained",
          "JSON JSONP Explained"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_dom_examples.asp",
    "cours": {
      "titre": "JavaScriptHTML DOMExamples",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_dom_examples.asp",
      "contenus": {
        "paragraphs": [
          "Examples of using JavaScript to access and manipulate DOM objects.",
          "Document Object Explained"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_input_examples.asp",
    "cours": {
      "titre": "JavaScriptHTML InputExamples",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_input_examples.asp",
      "contenus": {
        "paragraphs": [
          "Examples of using JavaScript to access and manipulate HTML \ninput objects."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_ex_dom.asp",
    "cours": {
      "titre": "JavaScriptHTML ObjectsExamples",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_ex_dom.asp",
      "contenus": {
        "paragraphs": [
          "Examples of using JavaScript to access and manipulate HTML objects."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_events_examples.asp",
    "cours": {
      "titre": "JavaScriptHTML DOM EventsExamples",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_events_examples.asp",
      "contenus": {
        "paragraphs": [
          "Examples of using JavaScript to react to events",
          "Examples explained"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_ex_browser.asp",
    "cours": {
      "titre": "JavaScriptBrowser ObjectsExamples",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_ex_browser.asp",
      "contenus": {
        "paragraphs": [
          "Examples of using JavaScript to access and manipulate the Browser objects.",
          "Window explained",
          "Screen explained",
          "Location explained",
          "History explained",
          "Navigator explained",
          "Popup explained",
          "Timing explained",
          "Cookies explained"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_editor.asp",
    "cours": {
      "titre": "JavaScriptOnline Editor",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_editor.asp",
      "contenus": {
        "paragraphs": [
          "With our online JavaScript editor, you can edit HTML, CSS and JavaScript code, and view the result in your browser.",
          "Click on the \"Try it Yourself\" button to see how it works.",
          "If you want to save your HTML, CSS and JavaScript code, and create your own website, check outW3Schools Spaces.",
          "W3Schools Spacesis a website-building tool that lets you make and share your own website.",
          "You can change the website's look and how it works by editing the code right in your web browser.",
          "It's easy to use and doesn't require any setup:",
          "The code editor is packed with features to help you achieve more:",
          "Practice is key to mastering coding, and the best way to put your JavaScript knowledge into practice is by getting practical with code.",
          "UseW3Schools Spacesto build, test and deploy code.",
          "The code editor lets you write and practice different types of computer languages. It includes HTML/CSS/JavaScript, and you can use it for other languages too.",
          "New languages are added all the time:",
          "If you do not know JavaScript, we suggest that you read ourJavaScript Tutorialfrom scratch.",
          "You can also use the code editor inW3School Spacesto build frontend or full-stack websites from scratch.",
          "Or you can use the 60+ templates available and save time:",
          "Create your Spaces account today and explore them all!",
          "Host and publish your websites in no time withW3School Spaces.",
          "W3Schools subdomain and SSL certificate are included for free withW3School Spaces. An SSL certificate makes your website safe and secure. It also helps people trust your website and makes it easier to find it online.",
          "Want a custom domain for your website?",
          "You can buy a domain or transfer an existing one and connect it to your space.",
          "Get started in a few clicks withW3School Spaces."
        ],
        "lists": [
          [
            "Templates:Start from scratch or use a template",
            "Cloud-based:no installations required. You only need your browser",
            "Terminal & Log:debug and troubleshoot your code easily",
            "File Navigator:switch between files inside the code editor",
            "And much more!"
          ]
        ],
        "examples": [
          "let x = 5;let y = 6;let z = x + y;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_exercises.asp",
    "cours": {
      "titre": "JavaScriptExercises",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_exercises.asp",
      "contenus": {
        "paragraphs": [
          "Test your JavaScript skills with exercises from all categories:",
          "If you haven't already,sign upto become a W3Schooler, and get points for every exercise you complete.",
          "As a logged on W3Schools user you will have access to many features like havingyour own web page,track your learning progress,receive personal guided paths, andmore.",
          "We have gathered a variety of React exercises from most of the chapters in ourJavaScript Tutorial.",
          "The exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. \nThe answer can be found in the corresponding tutorial chapter. If you're stuck, \nor answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer.",
          "Get certified by completingthecourse"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_quiz.asp",
    "cours": {
      "titre": "JavaScriptQuiz Test",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_quiz.asp",
      "contenus": {
        "paragraphs": [
          "You can test your JavaScript skills with W3Schools' Quiz.",
          "The test contains 25 questions and there is no time limit.",
          "The test is not official, it's just a nice way to see how much you know, or don't know, about JavaScript.",
          "You will get 1 point for each correct answer. At the end of the Quiz,\nyour total score will be displayed. Maximum score is 25 points.",
          "Good luck!",
          "Start the JavaScript Quiz ❯",
          "If you don't know JavaScript, we suggest that you read ourJavaScript Tutorialfrom scratch.",
          "Get certified by completingthecourse"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_website.asp",
    "cours": {
      "titre": "JavaScript and HTML WebsiteHosting",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_website.asp",
      "contenus": {
        "paragraphs": [
          "Coding Skills",
          "AI Tutor",
          "Projects",
          "Securely",
          "By subscribing to a plan you support the W3Schools mission to makelearning available to everyone - no matter their background.",
          "$0/Forever",
          "This is for you that are beginning to explore coding and web development",
          "$14.99/Month",
          "This is for you that want to learn and reach your goals faster. Build fullstack projects, ad free experience.",
          "Contact us for information",
          "W3Schools right to use and Plus for educational institutions or enterprise customers",
          "You can also buy a domain or connect an existing one.",
          "Just landed inSpaces",
          "Learn to code more effectivelyand intelligently with kAI - AI tutor",
          "Hi! I'm kAI, W3Schools AI Tutor...",
          "Feel free to ask me any coding-related questions, and I'll do my best to assist you.",
          "I can help you checking your code for errors, improving your code's structure, explaining coding concepts in a clear and understandable way, and more...",
          "I can even create complete websites for you based on your input, so what are you waiting for?",
          "Cloud-based",
          "Terminal & Log",
          "How To Libraries",
          "Database",
          "File Navigator",
          "Package Manager",
          "Analytics",
          "Environment Manager",
          "With Basic Spaces, you can build frontend websites. Whereas with Fullstack Spaces, you can build frontend and backend websites.",
          "Basic Spaces include HTML, CSS, and Javascript. Full Stack Spaces include everything in Basic Spaces plus PHP, Python, React.js, Vue.js, Node.js, Handlebars, and Django.",
          "Your subscription will be automatically renewed every month.",
          "Your access to all the benefits for the paid period of time will continue. However, the subscription will not be renewed automatically.",
          "To subscribe W3Schools accounts for multiple users, you can contact sales@w3schools.com"
        ],
        "lists": [
          [
            "Build and host 1 static website",
            "100 credits/monthAccess various AI features like W3Schools kAI coding tutor and interview preparation.",
            "No support"
          ],
          [
            "Ad-free experience",
            "Build and host 15 static websites",
            "Build and host 1 full stack server",
            "Choose from 18 frameworks / languages",
            "Choose from 75+ templates",
            "50000 credits/monthAccess various AI features like W3Schools kAI coding tutor and interview preparation.",
            "Priority Support",
            "Cancel anytime"
          ],
          [
            "Everything in W3Schools Plus",
            "Certification Exams",
            "And much more!"
          ]
        ],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_syllabus.asp",
    "cours": {
      "titre": "JavaScriptSyllabus",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_syllabus.asp",
      "contenus": {
        "paragraphs": [
          "TheW3Schools JavaScript Tutorialis comprehensive and beginner-friendly.",
          "It will give you a fundamental knowledge of JavaScript.",
          "It is designed for beginners and requires no prior experience with programming.",
          "The content has been carefully made to be bite-sized, simple, and easy to understand.",
          "The content has been proven by millions of users over the years. It is updated and improved frequently.",
          "The syllabus outline and its sequence are structured so you can learn JavaScript step by step, from the introduction to creating your first application with JavaScript.",
          "Get Started With JavaScript »",
          "Note:Are you a teacher teaching JavaScript?W3Schools Academyis a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more aboutAcademy here.",
          "Get Started",
          "In this tutorial we offer different activities for you to learn JavaScript for free:",
          "You can also create a free account to track your progress.",
          "As a signed-in user, you get access to features such as:",
          "Sign Up - It's free",
          "Get Started",
          "JavaScript, like any other programming language, is best learned by working hands-on with code.",
          "Easily try code with our \"Try it Yourself\" editor.",
          "Here, you can edit JavaScript code and view the result:",
          "If you want to explore more and host your JavaScript project, we have a feature calledSpacesthat allows you to build, test and deploy static websites for free.",
          "Here you get a secure sandbox environment called Spaces, where you can practice coding and test projects in real-time.",
          "Spaces allow you to test, build, and deploy code. This includes a W3Schools subdomain, hosting, and secure SSL certificates.",
          "Spaces require no installation and run directly in the browser.",
          "Features include:",
          "Create a Spaces Account",
          "W3Schools offers an end-of-pathway certification program.",
          "Here you can take exams to get certified.",
          "The JavaScript exam is a test that summarizes the W3Schools JavaScript syllabus.",
          "After passing the exam you get the \"Certified JavaScript Developer\" Certification.",
          "There are two different types of certifications:",
          "The non-adaptive is pass or no pass.",
          "The adaptive certification is adaptive and graded; students will get a grade from intermediate, advanced to professional.",
          "Buy Certificate »",
          "Are you interested in learning how you can useW3Schools Academyto Teach \nJavaScript?",
          "Join our upcoming webinar for a guided demo ofW3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.",
          "Join our FREE Webinar »"
        ],
        "lists": [
          [
            "Learn how JavaScript works and how it is used in web development.",
            "Make web pages interactive by typing and running JavaScript code.",
            "Use variables to store and change data.",
            "Use data types and operators to do logic and calculations.",
            "Organize and reuse code by functions.",
            "Conditions, like \"if\" and \"else,\" let you control how a program runs. Learn how to use them.",
            "Use loops (like for and while) to do things over and over again.",
            "Learn how to use Document Object Model (DOM) to change HTML elements.",
            "Make interactive user experiences by handling events like button clicks and form submissions.",
            "Debugging JavaScript code."
          ],
          [
            "Computer Science (CS) / Information Technology (IT):JavaScript is a fundamental programming language used to teach coding, algorithms, and how to make websites that people can interact with.",
            "Math:JavaScript can be used for mathematical operations and algorithms. It can help you develop logical thinking and problem-solving skills.",
            "Physics and Engineering:JavaScript can be used for simulations and modeling to help you understand advanced concepts and engineering problems better.",
            "Digital Media:JavaScript is used to make websites interactive, making your digital projects more relevant and interesting.",
            "Business and Entrepreneurship:JavaScript makes your web applications, prototypes, and digital presentations interactive.",
            "Art and Design:JavaScript lets you make animations, interactive graphs, and can be used for generative art.",
            "STEM (Science, Technology, Engineering, Mathematics):JavaScript as a programming language can be an important part of technology-based projects because it teaches students about logic, automation, and how to use code in the real world.",
            "Robotics and the Internet of Things (IoT):JavaScript is used by some platforms to program robots and IoT devices."
          ],
          [
            "Lessons",
            "Exercises",
            "Quizzes"
          ],
          [
            "Learning paths",
            "Sandbox and lab environments",
            "Achievements",
            "And much more!"
          ],
          [
            "JavaScript HOME",
            "JavaScript Introduction",
            "JavaScript Where To",
            "JavaScript Output",
            "JavaScript Statements",
            "JavaScript Syntax",
            "JavaScript Comments",
            "JavaScript Variables",
            "JavaScript Let",
            "JavaScript Const",
            "JavaScript Operators",
            "JavaScript Arithmetic",
            "JavaScript Assignment",
            "JavaScript Data Types",
            "JavaScript Functions",
            "JavaScript Objects",
            "JavaScript Events",
            "JavaScript Strings",
            "JavaScript String Methods",
            "JavaScript String Search",
            "JavaScript String Templates",
            "JavaScript Numbers",
            "JavaScript BigInt",
            "JavaScript Number Methods",
            "JavaScript Number Properties",
            "JavaScript Arrays",
            "JavaScript Array Methods",
            "JavaScript Array Search",
            "JavaScript Array Sort",
            "JavaScript Array Iteration",
            "JavaScript Array Const",
            "JavaScript Dates",
            "JavaScript Date Formats",
            "JavaScript Date Methods",
            "JavaScript Set Methods",
            "JavaScript Math",
            "JavaScript Random",
            "JavaScript Booleans",
            "JavaScript Comparisons",
            "JavaScript If Else",
            "JavaScript Switch",
            "JavaScript For Loop",
            "JavaScript For In",
            "JavaScript For Of",
            "JavaScript While Loop",
            "JavaScript Break and Continue",
            "JavaScript Iterables",
            "JavaScript Sets",
            "JavaScript Set Methods",
            "JavaScript Maps",
            "JavaScript Map Methods",
            "JavaScript typeof",
            "JavaScript Type Conversion",
            "JavaScript Destructing",
            "JavaScript Bitwise",
            "JavaScript RegExp",
            "JavaScript Precedence",
            "JavaScript Errors",
            "JavaScript Scope",
            "JavaScript Hoisting",
            "JavaScript Strict Mode",
            "JavaScript this Keyword",
            "JavaScript Arrow Function",
            "JavaScript Classes",
            "JavaScript Modules",
            "JavaScript JSON",
            "JavaScript Debugging",
            "JavaScript Style Guide",
            "JavaScript Best Practices",
            "JavaScript Mistakes",
            "JavaScript Performance",
            "JavaScript Reserved Words",
            "JavaScript Versions",
            "JavaScript Objects",
            "JavaScript Functions",
            "JavaScript Classes",
            "JavaScript Async",
            "JavaScript HTML DOM",
            "JavaScript Browser DOM",
            "JavaScript Web APIs",
            "JavaScript AJAX",
            "JavaScript JSON",
            "JavaScript vs. jQuery",
            "JavaScript Graphics"
          ],
          [
            "Collaboration",
            "File navigator",
            "Terminal & log",
            "Package manager",
            "Database",
            "Environment manager",
            "Analytics"
          ],
          [
            "Non-adaptive",
            "Adaptive"
          ]
        ],
        "examples": [
          "document.getElementById(\"demo\").innerHTML = \"Hello JavaScript\";"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_study_plan.asp",
    "cours": {
      "titre": "JavaScriptStudy Plan",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_study_plan.asp",
      "contenus": {
        "paragraphs": [
          "The JavaScript study plan helps you teach your students JavaScript step-by-step.",
          "Creating a study plan for JavaScript is easy.",
          "You can use a pre-built study plan or customize it.",
          "Students have different skill levels. The study plans can be customized to ensure that everyone is challenged.",
          "Save time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of JavaScript to the final exam.",
          "This study plan is a feature of W3Schools Academy.",
          "W3Schools Academy is a platform that has everything you need to teach coding, all in one place.",
          "It offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom.",
          "You need to have an active subscription to access the study plan feature. There are two different subscription tiers:",
          "Learn More »",
          "Academy also offer other features such as:",
          "Get a free demo »",
          "W3Schools has everything you need to teach JavaScript.",
          "The JavaScript training materials is available for you to include and use in your study plan:",
          "With the JavaScript Syllabus, your students will start with the basics, like creating simple web pages, and move to more advanced topics, like adding images, links, and forms. Each chapter has examples, try-its, exercises, and quizzes to make learning easy, interactive and fun.",
          "Read more about JavaScript Syllabus.",
          "The study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level.",
          "Learn More »",
          "You choose the timeline and paceof your study plans.",
          "Schools have different preferences.",
          "Some would like more intensive pace, e.g. 5 weeks, others 12 or more weeks.",
          "It is completely up to you.",
          "For example, this is how a 5-week JavaScript study plan could look like:",
          "Image of Sample JavaScript study plan:",
          "Start withJavaScript Study Planstoday.",
          "Get Started »",
          "Are you interested in learning how you can useW3Schools Academyto Teach JavaScript programming?",
          "Join our upcoming webinar for a guided demo ofW3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.",
          "Join our FREE Webinar »"
        ],
        "lists": [
          [
            "Essentials ($1.99 / month per student)",
            "Full Access ($5.99 / month per student)",
            "Calculate your price and orderhere."
          ],
          [
            "Managing your classroom",
            "Tracking of student progress and reports",
            "Labs, assignments, and code challenges (prebuilt challenges or create your own ones)",
            "Auto-grading",
            "Teaching materials",
            "Certification exams"
          ],
          [
            "W3Schools JavaScript Tutorial",
            "JavaScript Exercises",
            "JavaScript Quiz",
            "JavaScript Challenges (Coding challenges)",
            "JavaScript Certification Exam (End of Pathway Exam)"
          ],
          [
            "Learning PathsYou can add ready-made learning paths.The learning paths are by default ordered by our recommended order.You can change the order.You can add custom activities with text, links, or multi-media files.Drag and drop or click to make changes to the path.",
            "You can add ready-made learning paths.",
            "The learning paths are by default ordered by our recommended order.",
            "You can change the order.",
            "You can add custom activities with text, links, or multi-media files.",
            "Drag and drop or click to make changes to the path.",
            "Interactive ContentTutorialsTry-its (test code snippets)ExercisesQuizChallengesLabs",
            "Tutorials",
            "Try-its (test code snippets)",
            "Exercises",
            "Quiz",
            "Challenges",
            "Labs",
            "Timeline and PaceYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).You can decide the learning pace for your class.Different study plans can be assigned to different students in the same class.The flexibility can help to make sure that everyone is challenged.",
            "You can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).",
            "You can decide the learning pace for your class.",
            "Different study plans can be assigned to different students in the same class.",
            "The flexibility can help to make sure that everyone is challenged.",
            "Track Student ProgressThere are tools to track student progress.The analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.The challenges can be auto-graded or manually graded. The results are available to you as a teacher.",
            "There are tools to track student progress.",
            "The analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.",
            "The challenges can be auto-graded or manually graded. The results are available to you as a teacher.",
            "End of Pathway ExamThe JavaScript study plan aligns with the JavaScript Certification Exam.The exam can be taken at the end of the study plan, at your selected date.The exam summarizes the JavaScript Tutorial.You get reports of the students' results.",
            "The JavaScript study plan aligns with the JavaScript Certification Exam.",
            "The exam can be taken at the end of the study plan, at your selected date.",
            "The exam summarizes the JavaScript Tutorial.",
            "You get reports of the students' results.",
            "AccessibilityStudy plans and learning materials are accessible on desktops, tablets, and smartphones.This ensures students can learn anytime, anywhere.",
            "Study plans and learning materials are accessible on desktops, tablets, and smartphones.",
            "This ensures students can learn anytime, anywhere."
          ],
          [
            "You can add ready-made learning paths.",
            "The learning paths are by default ordered by our recommended order.",
            "You can change the order.",
            "You can add custom activities with text, links, or multi-media files.",
            "Drag and drop or click to make changes to the path."
          ],
          [
            "Tutorials",
            "Try-its (test code snippets)",
            "Exercises",
            "Quiz",
            "Challenges",
            "Labs"
          ],
          [
            "You can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).",
            "You can decide the learning pace for your class.",
            "Different study plans can be assigned to different students in the same class.",
            "The flexibility can help to make sure that everyone is challenged."
          ],
          [
            "There are tools to track student progress.",
            "The analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.",
            "The challenges can be auto-graded or manually graded. The results are available to you as a teacher."
          ],
          [
            "The JavaScript study plan aligns with the JavaScript Certification Exam.",
            "The exam can be taken at the end of the study plan, at your selected date.",
            "The exam summarizes the JavaScript Tutorial.",
            "You get reports of the students' results."
          ],
          [
            "Study plans and learning materials are accessible on desktops, tablets, and smartphones.",
            "This ensures students can learn anytime, anywhere."
          ],
          [
            "Week 1: Introduction, Variables, Let, Const & Data Types, Booleans, Numbers",
            "Week 2: Operators, Assignment, Arithmetic Operators, Assignment, Arithmetic and Math, Strings, Dates, Arrays, Events, Precidence & Conditionals, Loops & Iterables",
            "Week 3: Maps & Sets, Typeof & Type Conversion, Destructing, Scope, Hoisting & this keyword, Functions, Miscellaneous, Versions, Errors, Debugging & Coding Best Practices",
            "Week 4: Objects, Modules, Classes, Async, HTML DOM, Browser DOM, Web APIs, AJAX, JSON, JS vs jQuery",
            "Week 5: Graphics, JavaScript Certification Exam"
          ]
        ],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_interview_prep.asp",
    "cours": {
      "titre": "JavaScriptInterview Preparation",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_interview_prep.asp",
      "contenus": {
        "paragraphs": [
          "Try W3Schools' comprehensive Front-End interview preparation feature.",
          "A tool that will help you get ready for your next interview.",
          "W3Schools interview preparation is an interactive feature powered by AI, where you can select the role of the interviewer, ask questions, and receive guidance.",
          "After the interview training you will get an evaluation of your performance that you can use to improve yourself.",
          "Get Started",
          "If you are going to a Front-End interview, there are a few things you can expect:",
          "Coding Questions:",
          "You will be asked coding questions, and you possibly also get a task to solve.",
          "Examples of technical questions:",
          "Tell me about your experience as a Front-End developer.Tell me about a personal project where you worked on implementing the user interface for a website.",
          "Examples of a task:",
          "Create a webpage that shows a greeting message to the user.Use HTML and CSS to structure and style it. You can add a JavaScript function to change the message based on the time of the day.",
          "If you don't know how to solve the task or answer the question, do not panic. It happens to everyone, even pro Front-End developers.",
          "Showcase your skills and projects:",
          "They would like to see projects to understand your work better.You can include current projects in your portfolio even if they are unfinished.",
          "Examples of projects to have in your portfolio:",
          "Before you go to an interview, you should check out the company.",
          "It will give you a better understanding of their values and what they do.",
          "Check out:",
          "Make sure you understand the job description:",
          "Read the description and take notes if you need help understanding something. You can call them before the interview and ask about the things you don't understand.",
          "You can also ask a friend or a community member to help you.",
          "There is a big community of Front-End developers on social media.",
          "Reflect on why you are the right fit for this role:",
          "Companies hire people they believe will be the right fit.",
          "Think about what value you can add to the role and the team.",
          "Write them down.",
          "It will help you discuss how you are the right candidate for the role.",
          "We have created an interview tool to help you prepare:",
          "Try it out",
          "",
          "Front-End development is an exciting career that allows you to create dynamic and responsive websites and apps. It's a good choice if you're interested in good user engagement and experience.",
          "Typical Languages Used in Front-End Development:",
          "The demand for Front-End developers is high.",
          "You can expect:",
          "The Average Salary is $112,328 in the US.",
          "Typical Job Titles for a Front-End Developer:",
          "Try W3Schools Pathfinder Jobs, where companies post in-demand job roles such as Front-End development, web development, Java development, and more.",
          "Our best tip: Prepare yourself so you can go in with confidence and enjoy the process!",
          "",
          "Try W3Schools interview preparation here:Interview Preperation",
          "Best of luck!"
        ],
        "lists": [
          [
            "To-do list app",
            "Blog template",
            "Weather dashboard",
            "E-commerce product page",
            "Interactive game or application"
          ],
          [
            "Their webpage",
            "Their social media platforms",
            "Articles and reviews"
          ],
          [
            "HTML",
            "CSS",
            "JavaScript",
            "React.js",
            "Bootstrap",
            "and other CSS frameworks"
          ],
          [
            "Competitive salary",
            "Possibility of working remotely",
            "Opportunity to grow as the industry innovates and adopts new technologies."
          ],
          [
            "Front-End developer",
            "Web Developer",
            "UI/UX Designer",
            "Web App Developer",
            "and many more."
          ]
        ],
        "examples": [
          "<head><title>Simple Greeting Page</title><style>body {font-family: Arial, sans-serif;background-color: #f0f0f0;color: #333;padding: 20px;}</style></head><body><h1>Hello, welcome to our website!</h1></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_bootcamp.asp",
    "cours": {
      "titre": "W3SchoolsJavaScript Bootcamp",
      "description": "",
      "lien": "https://www.w3schools.com/js/js_bootcamp.asp",
      "contenus": {
        "paragraphs": [
          "Learn More",
          "Start learning Front-end with the W3Schools program and lay the foundations of your Web Development skills. This program is a great foundation for you that wants to get started with Front-end Development. It covers HTML, CSS and JavaScript.",
          "HTML is the standard markup language for Web pages. With HTML you can create your own Website.",
          "CSS is the language we use to style an HTML document. CSS describes how HTML elements should be displayed.",
          "JavaScript is the programming language of the Web.",
          "This is a structured and interactive version of the w3schools HTML, CSS, and JavaScript Tutorials together with the \nW3schools certification.",
          "The program is a set of self-paced courses with text based modules, practical interactive examples and exercises to check your understanding as you progress. Complete the modules and the final certification exams to get the w3schools certification.",
          "4x Certifications:",
          "You get sharable certificates that can be added to your CV, Resume or LinkedIn.",
          "Check out what it looks like in this example!",
          "Learn More",
          "Enroll by paying the enrollment fee and gain access to the course and final exam.\nThere is no deadline to take the exam. All questions in the exam are based on W3Schools content.",
          "The courses are self-paced with text based modules, practical interactive examples and exercises\nto check your understanding as you progress. Complete the learning modules to unlock the final exam.",
          "The exams are taken at the end of each course after finishing the course learning modules.\nImmediately after completing the exam, you will be informed of your score and of your pass/fail status.\nYou will get three attempts to pass each exam. You can use the new attempts to improve \nyour score.\nThe best result of the attempts will count.",
          "Pass the exams and get your certifications and your Certified Developer titles!\nEach certificate gets a unique link that can be shared with others. Validate your certificates with \na link or a QR code.",
          "Learn More"
        ],
        "lists": [
          [
            "How to use the latest HTML 5 standard to create your own Website.",
            "How to format text, add graphics, create links, input forms, frames and tables, etc.",
            "How to save it all in a text file that any browser can read and display."
          ],
          [
            "How to control the style and layout of multiple web pages all at once.",
            "How to change the appearance and layout of all the pages in a Web site."
          ],
          [
            "How to program the behavior of web pages.",
            "How to change the content and style of web pages."
          ],
          [
            "Certified HTML Developer",
            "Certified CSS Developer",
            "Certified JavaScript Developer",
            "Certified Front End Developer"
          ]
        ],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/js/js_exam.asp",
    "cours": {
      "titre": "W3SchoolsJavaScript Certificate",
      "description": "How Does It Work?Study for free at W3Schools.comStudy at your own speedTest your skills with W3Schools online quizzesApply for your certificate by paying an exam feeTake your exam online, at any time, and from any location",
      "lien": "https://www.w3schools.com/js/js_exam.asp",
      "contenus": {
        "paragraphs": [
          "W3Schools offers an Online Certification Program.",
          "The perfect solution for busy professionals who need to balance work, family, and career building.",
          "More than 50 000 certificates already issued!",
          "Get Your Certificate »",
          "W3Schools offers an Online Certification Program.",
          "The perfect solution for busy professionals who need to balance work, family, and career building.",
          "More than 50 000 certificates already issued!",
          "Get Your Certificate »",
          "Any student or professional within the digital industry.",
          "Certifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.",
          "W3Schools has over two decades of experience with teaching coding online.",
          "Our certificates are recognized and valued by companies looking to employ skilled developers.",
          "Show the world your coding skills by getting a certification.",
          "The prices is a small fraction compared to the price of traditional education.",
          "Document and validate your competence by getting certified!",
          "Fee:95 USD",
          "Achievable certification levels:Intermediate (40%)Advanced (75%)Professional (90%)",
          "Number of questions:Adaptive,60on average",
          "Requirement to pass:Minimum 40% - Intermediate level",
          "Time limit:60 minutes",
          "Number of attempts to pass:3",
          "Exam deadline:None",
          "Certification Expiration:None",
          "Format:Online, multiple choice",
          "Register now »",
          "Getting a certificate proves your commitment to upgrading your skills.",
          "The certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.",
          "It gives you the credibility needed for more responsibilities, larger projects, and a higher salary.",
          "Knowledge is power, especially in the current job market.",
          "Documentation of your skills enables you to advance your career or helps you to start a new one.",
          "Example certificate:",
          "Each certificate gets a unique link that can be shared with others.",
          "Validate your certification with the link or QR code.",
          "Check how it looks like in thisExample.",
          "Share your certificate on Linkedin the Certifications section in just one click!",
          "Getting a certificate proves your commitment to upgrade your skills,\ngives you the credibility needed for more responsibilities, larger projects, and a higher salary.",
          "Get Your Certificate »",
          "Are you an educator, manager or business owner looking for courses or certifications?",
          "We are working with schools, companies and organizations from all over the world.",
          "Get courses and/or certifications for your team here."
        ],
        "lists": [
          [
            "Study for free at W3Schools.com",
            "Study at your own speed",
            "Test your skills with W3Schools online quizzes",
            "Apply for your certificate by paying an exam fee",
            "Take your exam online, at any time, and from any location"
          ]
        ],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/default.asp",
    "cours": {
      "titre": "JavaScript and HTML DOM",
      "description": "Complete JavaScript and HTML DOM ReferencesAll Properties and Methods with Full ExamplesRevised April 2024",
      "lien": "https://www.w3schools.com/jsref/default.asp",
      "contenus": {
        "paragraphs": [
          "",
          "Visit Our JavaScript Tutorial »"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/jsref_reference.asp",
    "cours": {
      "titre": "JavaScriptReference",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/jsref_reference.asp",
      "contenus": {
        "paragraphs": [
          "Visit Our JavaScript Tutorial »"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/jsref_obj_array.asp",
    "cours": {
      "titre": "JavaScriptArray Reference",
      "description": "The JavaScript Array ObjectThe Array object is used to store multiple values in a single variable.Exampleconst cars = [\"Saab\", \"Volvo\", \"BMW\"];Try it Yourself »",
      "lien": "https://www.w3schools.com/jsref/jsref_obj_array.asp",
      "contenus": {
        "paragraphs": [
          "The Array object is used to store multiple values in a single variable.",
          "The JavaScript Array Tutorial"
        ],
        "lists": [],
        "examples": [
          "const cars = [\"Saab\", \"Volvo\", \"BMW\"];"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/jsref_obj_boolean.asp",
    "cours": {
      "titre": "JavaScriptBoolean Reference",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/jsref_obj_boolean.asp",
      "contenus": {
        "paragraphs": [
          "JavaScript booleans can have one of two values:trueorfalse.",
          "You can use theBoolean()function to find out if an expression is \ntrue:",
          "Or even easier:",
          "The JavaScript Boolean Tutorial."
        ],
        "lists": [],
        "examples": [
          "Boolean(10 > 9)",
          "(10 > 9)"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/jsref_classes.asp",
    "cours": {
      "titre": "JavaScriptClass Reference",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/jsref_classes.asp",
      "contenus": {
        "paragraphs": [
          "Aclassis a type of function, but instead of using the keywordfunctionto initiate it, we use the keywordclass, and the properties are assigned inside aconstructor()method:",
          "Create a Car class, and then create an object called \"mycar\" based on the Car class:",
          "Try it Yourself »",
          "The JavaScript Classes Tutorial."
        ],
        "lists": [],
        "examples": [
          "class Car {  // Create a classconstructor(brand) {  // Class constructorthis.carname = brand;  \n  // Class body/properties}}mycar = new Car(\"Ford\");  // Create an object of Car \n  class"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/jsref_obj_date.asp",
    "cours": {
      "titre": "JavaScript Date Reference",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/jsref_obj_date.asp",
      "contenus": {
        "paragraphs": [
          "The Date object works with dates and times.",
          "Date objects are created withnew Date().",
          "The JavaScript Date Tutorial."
        ],
        "lists": [],
        "examples": [
          "const time = new Date();",
          "const time = new Date(dateString);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/jsref_obj_error.asp",
    "cours": {
      "titre": "JavaScriptError Reference",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/jsref_obj_error.asp",
      "contenus": {
        "paragraphs": [
          "The Error object provides error information when an error occurs.",
          "In this example we have written \"alert\" as \"adddlert\" to \ndeliberately produce an error.",
          "Return the error name and a description of the \nerror:",
          "For a tutorial about JavaScript Errors, read ourJavaScript Error Tutorial.",
          "Do not use these properties and methods in public web sites. They will not work in all browsers."
        ],
        "lists": [],
        "examples": [
          "try {adddlert(\"Welcome\");}catch(err) {document.getElementById(\"demo\").innerHTML =err.name + \"<br>\" + err.message;}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/jsref_obj_global.asp",
    "cours": {
      "titre": "JavaScriptGlobal Reference",
      "description": "The JavaScript global properties and methods can be used with all JavaScript objects.",
      "lien": "https://www.w3schools.com/jsref/jsref_obj_global.asp",
      "contenus": {
        "paragraphs": [
          "The JavaScript global properties and methods can be used with all JavaScript objects.",
          "Since these methods are global, and global the object is the browser window, these methods are actually window methods:",
          "isNaN() is the same as window.isNaN()."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/jsref_obj_json.asp",
    "cours": {
      "titre": "JavaScriptJSON Reference",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/jsref_obj_json.asp",
      "contenus": {
        "paragraphs": [
          "JSON is a format for storing and transporting data.",
          "JSON is text, and text can be transported anywhere, and read by any programming language.",
          "JavaScript Objects can be converted into JSON, and JSON can be converted back into JavaScript Objects.",
          "This way we can work with the data as JavaScript objects, with no complicated \nparsing or translations.",
          "Sending JSON:",
          "For a tutorial about JSON, read ourJSON Tutorial.",
          "In JSON, values must be one of the following data types:",
          "JSON valuescannotbe one of the following data types:",
          "Receiving JSON:",
          "Storing data as JSON, using localStorage",
          "Learn more about JSON in ourJSON tutorial."
        ],
        "lists": [
          [
            "a string",
            "a number",
            "an object (containing valid JSON values)",
            "an array",
            "a boolean",
            "null"
          ],
          [
            "a function",
            "a date",
            "undefined"
          ]
        ],
        "examples": [
          "// a JavaScript object...:var myObj =\n{ \"name\":\"John\", \n  \"age\":31, \"city\":\"New York\" };// ...converted into JSON:var myJSON = \n  JSON.stringify(myObj);// send JSON:window.location = \"demo_json.php?x=\" + myJSON;",
          "// myJSON is text received in JSON format.// Convert JSON into a JavaScript \n  object:var myObj = \n  JSON.parse(myJSON);document.getElementById(\"demo\").innerHTML = myObj.name;",
          "// Storing data:myObj =\n{ \"name\":\"John\", \n  \"age\":31, \"city\":\"New York\" };myJSON = \n  JSON.stringify(myObj);localStorage.setItem(\"testJSON\", myJSON);// Retrieving data:text = localStorage.getItem(\"testJSON\");obj = \n  JSON.parse(text);document.getElementById(\"demo\").innerHTML = obj.name;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/jsref_obj_map.asp",
    "cours": {
      "titre": "JavaScript Map Reference",
      "description": "A Map holds key-value pairs where the keys can be any datatype.A Map remembers the original insertion order of the keys.",
      "lien": "https://www.w3schools.com/jsref/jsref_obj_map.asp",
      "contenus": {
        "paragraphs": [
          "A Map holds key-value pairs where the keys can be any datatype.",
          "A Map remembers the original insertion order of the keys.",
          "You can add elements to a map with theset()method:",
          "You can get elements from a map with theget()method:"
        ],
        "lists": [],
        "examples": [
          "// Create a Mapconst fruits = new Map([[\"apples\", 500],[\"bananas\", 300],[\"oranges\", 200]]);",
          "// Create a Mapconst fruits = new Map();// Set Map Valuesfruits.set(\"apples\", 500);fruits.set(\"bananas\", 300);fruits.set(\"oranges\", 200);",
          "// Get the Value of \"apples\"let value = fruits.get(\"apples\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/jsref_obj_math.asp",
    "cours": {
      "titre": "JavaScript Math Reference",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/jsref_obj_math.asp",
      "contenus": {
        "paragraphs": [
          "The Math object allows you to perform mathematical tasks.",
          "Math is not a constructor. All properties/methods of Math can be called by using Math as an object, without creating it:",
          "JavaScript Math Tutorial.",
          "JavaScript Math",
          "JavaScript Numbers",
          "JavaScript Number Reference"
        ],
        "lists": [],
        "examples": [
          "let x = Math.PI;let y = Math.sqrt(16);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/jsref_obj_number.asp",
    "cours": {
      "titre": "JavaScriptNumber Reference",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/jsref_obj_number.asp",
      "contenus": {
        "paragraphs": [
          "JavaScript has only one type of number.",
          "Numbers can be written with, or without, decimals:",
          "Extra large or extra small numbers can be written with scientific (exponent) notation:",
          "For a tutorial about JavaScript numbers, read ourJavaScript Number Tutorial.",
          "All number methods return a new value. They do not change the original value."
        ],
        "lists": [],
        "examples": [
          "let x = 3.14;     // A number with decimalslet y = 34;       // A number without decimals",
          "let x = 123e5;    // 12300000let y = 123e-5;   // 0.00123"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/jsref_obj_object.asp",
    "cours": {
      "titre": "JavaScript Object Reference",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/jsref_obj_object.asp",
      "contenus": {
        "paragraphs": [
          "Objects are one of JavaScript's data types.",
          "Objects are used to store key/value (name/value) collections.",
          "A JavaScript object is a collection ofnamed values.",
          "The following example creates a JavaScript object with four key/value properties:",
          "For a tutorial about objects, read ourJavaScript Object Tutorial."
        ],
        "lists": [],
        "examples": [
          "const person = {firstName: \"John\",lastName: \"Doe\",age: 50,eyeColor: \"blue\"};"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/jsref_operators.asp",
    "cours": {
      "titre": "JavaScriptOperators Reference",
      "description": "JavaScript OperatorsOperatorsare used to assign values, compare values, \nperform arithmetic operations, and more.There are different types of JavaScript operators:Arithmetic OperatorsAssignment OperatorsComparison OperatorsLogical OperatorsConditional OperatorsType Operators",
      "lien": "https://www.w3schools.com/jsref/jsref_operators.asp",
      "contenus": {
        "paragraphs": [
          "Operatorsare used to assign values, compare values, \nperform arithmetic operations, and more.",
          "There are different types of JavaScript operators:",
          "Arithmetic operators are used to perform arithmetic between variables and/or values.",
          "Given thaty = 5, the table below explains the arithmetic operators:",
          "For a tutorial about arithmetic operators, read ourJavaScript Arithmetic Tutorial.JavaScript Assignment OperatorsAssignment operators are used to assign values to JavaScript variables.Given thatx = 10andy = 5, the table below explains the assignment operators:OperExampleSame AsResultTry it=x = yx = yx = 5Try it »+=x += yx = x + yx = 15Try it »-=x -= yx = x - yx = 5Try it »*=x *= yx = x * yx = 50Try it »/=x /= yx = x / yx = 2Try it »%=x %= yx = x % yx = 0Try it »:x: 45size.x = 45x = 45Try it »For a tutorial about assignment operators, read ourJavaScript Assignment Tutorial.JavaScript String OperatorsThe + operator, and the += operator can also be used to concatenate (add) \nstrings.Given thatt1 = \"Good \",t2 = \"Morning\",and t3 = \"\", the table below explains the operators:OperExamplet1t2t3Try it+t3 = t1 + t2\"Good \"\"Morning\"\"Good Morning\"Try it »+=t1 += t2\"Good Morning\"\"Morning\"Try it »Comparison OperatorsComparison operators are used in logical statements to determine equality or difference between variables or values.Given thatx = 5, the table below explains the comparison operators:OperNameComparingReturnsTry it==equal tox == 8falseTry it »==equal tox == 5trueTry it »===equal value and typex === \"5\"falseTry it »===equal value and typex === 5trueTry it »!=not equalx != 8trueTry it »!==not equal value or typex !== \"5\"trueTry it »!==not equal value or typex !== 5falseTry it »>greater thanx > 8falseTry it »<less thanx < 8trueTry it »>=greater or equal tox >= 8falseTry it »<=less or equal tox <= 8trueTry it »For a tutorial about comparison operators, read ourJavaScript \nComparisons Tutorial.Conditional (Ternary) OperatorThe conditional operator assigns a value to a variable based on a condition.SyntaxExampleTry it(condition) ? x : y(z < 18) ? x : yTry it »Logical OperatorsLogical operators are used to determine the logic between variables or values.Given thatx = 6 and y = 3, the table below explains the logical operators:OperNameExampleTry it&&AND(x < 10 && y > 1) is trueTry it »||OR(x === 5 || y === 5) is falseTry it »!NOT!(x === y) is trueTry it »The Nullish Coalescing Operator (??)The??operator returns the first argument if it is notnullish(nullorundefined).Otherwise it returns the second argument.Examplelet name = null;let text = \"missing\";let result = name ?? text;Try it Yourself »The nullish operator is supported in all browsers since March 2020:Chrome 80Edge 80Firefox 72Safari 13.1Opera 67Feb 2020Feb 2020Jan 2020Mar 2020Mar 2020The Optional Chaining Operator (?.)The?.operator returnsundefinedif an object isundefinedornull(instead of throwing an error).Example// Create an object:const car = {type:\"Fiat\", model:\"500\", color:\"white\"};// Ask for car name:document.getElementById(\"demo\").innerHTML = car?.name;Try it Yourself »The optional chaining operator is supported in all browsers since March 2020:Chrome 80Edge 80Firefox 72Safari 13.1Opera 67Feb 2020Feb 2020Jan 2020Mar 2020Mar 2020JavaScript Bitwise OperatorsBit operators work on 32 bits numbers. Any numeric operand in the operation is converted into a 32 bit number. The result is converted back to a JavaScript number.OperNameExampleSame asResultDecimalTry it&ANDx = 5 & 10101 & 000100011Try it »|ORx = 5 | 10101 | 000101015Try it »~NOTx = ~ 5~0101101010Try it »^XORx = 5 ^ 10101 ^ 000101004Try it »<<Left shiftx = 5 << 10101 << 1101010Try it »>>Right shiftx = 5 >> 10101 >> 100102Try it »>>>Unsigned rightx = 5 >>> 10101 >>> 100102Try it »NoteThe table above uses 4 bits unsigned number. Since JavaScript uses 32-bit signed numbers,\n ~ 5 will not return 10. It will return -6.~00000000000000000000000000000101 (~5)will return11111111111111111111111111111010 (-6)The typeof OperatorThetypeofoperator returns the type of a variable, object, function or \nexpression:Exampletypeof \"John\"   // Returns stringtypeof 3.14     // Returns numberTry it Yourself »Please observe:The data type of NaN is numberThe data type of an array is objectThe data type of a date is objectThe data type of null is objectThe data type of an undefined variable is undefinedExampletypeof \"John\"typeof 3.14typeof NaNtypeof falsetypeof [1, 2, 3, 4]typeof {name:'John', age:34}typeof new Date()typeof function () {}typeof myCartypeof nullTry it Yourself »NoteYou cannot usetypeofto define if a JavaScript object is an array or a date.Both array and date return object as type.The delete OperatorThedeleteoperator deletes a property from an object:Exampleconst person = {firstName:\"John\",lastName:\"Doe\",age:50,eyeColor:\"blue\"};delete person.age;Try it Yourself »The delete operator deletes both the value of the property and the property \nitself.After deletion, the property cannot be used before it is added back again.The delete operator is designed to be used on object properties. It has no \neffect on variables or functions.NoteThe delete operator should not be used on the properties \nof any predefined JavaScript objects (Array, Boolean, Date, Function, Math, Number, RegExp, and String).This can crash your application.The Spread (...) OperatorThe ... operator expands an iterable into more elements:Exampleconst q1 = [\"Jan\", \"Feb\", \"Mar\"];const q2 = [\"Apr\", \"May\", \"Jun\"];const q3 = [\"Jul\", \"Aug\", \"Sep\"];const q4 = [\"Oct\", \"Nov\", \"May\"];const year = [...q1, ...q2, ...q3, ...q4];Try it Yourself »The ... operator can be used to expand an iterable into more arguments for function calls:Exampleconst numbers = [23,55,21,87,56];let maxValue = Math.max(...numbers);Try it Yourself »The in OperatorTheinoperator returns true if a property is in an object, otherwise false:Object Exampleconst person = {firstName:\"John\", lastName:\"Doe\", age:50};(\"firstName\" in person);(\"age\" in person);Try it Yourself »NoteYou cannot useinto check for array content like (\"Volvo\" in cars).Array properties can only be index (0,1,2,3...) and length.See the examples below.Examplesconst cars = [\"Saab\", \"Volvo\", \"BMW\"];(\"Saab\" in cars);Try it Yourself »const cars = [\"Saab\", \"Volvo\", \"BMW\"];(0 in cars);(1 in cars);(4 in cars);(\"length\" in cars);Try it Yourself »Predefined Objects(\"PI\" in Math);(\"NaN\" in Number);(\"length\" in String);Try it Yourself »The instanceof OperatorTheinstanceofoperator returns true if an object is an instance of a specified object:Exampleconst cars = [\"Saab\", \"Volvo\", \"BMW\"];(cars instanceof Array)   // Returns true(cars instanceof Object)  // Returns true(cars instanceof String)  // Returns false(cars instanceof Number)  // Returns falseTry it Yourself »The void OperatorThevoidoperator evaluates an expression and returnsundefined. This operator is often used to obtain the undefined \nprimitive value, using \"void(0)\" (useful when evaluating an expression without \nusing the return value).Example<a href=\"javascript:void(0);\">Useless link</a><a href=\"javascript:void(document.body.style.backgroundColor='red');\">Click me to change the background color of body to red</a>Try it Yourself »See Also:JavaScript Operator Precedence❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "Assignment operators are used to assign values to JavaScript variables.",
          "Given thatx = 10andy = 5, the table below explains the assignment operators:",
          "For a tutorial about assignment operators, read ourJavaScript Assignment Tutorial.JavaScript String OperatorsThe + operator, and the += operator can also be used to concatenate (add) \nstrings.Given thatt1 = \"Good \",t2 = \"Morning\",and t3 = \"\", the table below explains the operators:OperExamplet1t2t3Try it+t3 = t1 + t2\"Good \"\"Morning\"\"Good Morning\"Try it »+=t1 += t2\"Good Morning\"\"Morning\"Try it »Comparison OperatorsComparison operators are used in logical statements to determine equality or difference between variables or values.Given thatx = 5, the table below explains the comparison operators:OperNameComparingReturnsTry it==equal tox == 8falseTry it »==equal tox == 5trueTry it »===equal value and typex === \"5\"falseTry it »===equal value and typex === 5trueTry it »!=not equalx != 8trueTry it »!==not equal value or typex !== \"5\"trueTry it »!==not equal value or typex !== 5falseTry it »>greater thanx > 8falseTry it »<less thanx < 8trueTry it »>=greater or equal tox >= 8falseTry it »<=less or equal tox <= 8trueTry it »For a tutorial about comparison operators, read ourJavaScript \nComparisons Tutorial.Conditional (Ternary) OperatorThe conditional operator assigns a value to a variable based on a condition.SyntaxExampleTry it(condition) ? x : y(z < 18) ? x : yTry it »Logical OperatorsLogical operators are used to determine the logic between variables or values.Given thatx = 6 and y = 3, the table below explains the logical operators:OperNameExampleTry it&&AND(x < 10 && y > 1) is trueTry it »||OR(x === 5 || y === 5) is falseTry it »!NOT!(x === y) is trueTry it »The Nullish Coalescing Operator (??)The??operator returns the first argument if it is notnullish(nullorundefined).Otherwise it returns the second argument.Examplelet name = null;let text = \"missing\";let result = name ?? text;Try it Yourself »The nullish operator is supported in all browsers since March 2020:Chrome 80Edge 80Firefox 72Safari 13.1Opera 67Feb 2020Feb 2020Jan 2020Mar 2020Mar 2020The Optional Chaining Operator (?.)The?.operator returnsundefinedif an object isundefinedornull(instead of throwing an error).Example// Create an object:const car = {type:\"Fiat\", model:\"500\", color:\"white\"};// Ask for car name:document.getElementById(\"demo\").innerHTML = car?.name;Try it Yourself »The optional chaining operator is supported in all browsers since March 2020:Chrome 80Edge 80Firefox 72Safari 13.1Opera 67Feb 2020Feb 2020Jan 2020Mar 2020Mar 2020JavaScript Bitwise OperatorsBit operators work on 32 bits numbers. Any numeric operand in the operation is converted into a 32 bit number. The result is converted back to a JavaScript number.OperNameExampleSame asResultDecimalTry it&ANDx = 5 & 10101 & 000100011Try it »|ORx = 5 | 10101 | 000101015Try it »~NOTx = ~ 5~0101101010Try it »^XORx = 5 ^ 10101 ^ 000101004Try it »<<Left shiftx = 5 << 10101 << 1101010Try it »>>Right shiftx = 5 >> 10101 >> 100102Try it »>>>Unsigned rightx = 5 >>> 10101 >>> 100102Try it »NoteThe table above uses 4 bits unsigned number. Since JavaScript uses 32-bit signed numbers,\n ~ 5 will not return 10. It will return -6.~00000000000000000000000000000101 (~5)will return11111111111111111111111111111010 (-6)The typeof OperatorThetypeofoperator returns the type of a variable, object, function or \nexpression:Exampletypeof \"John\"   // Returns stringtypeof 3.14     // Returns numberTry it Yourself »Please observe:The data type of NaN is numberThe data type of an array is objectThe data type of a date is objectThe data type of null is objectThe data type of an undefined variable is undefinedExampletypeof \"John\"typeof 3.14typeof NaNtypeof falsetypeof [1, 2, 3, 4]typeof {name:'John', age:34}typeof new Date()typeof function () {}typeof myCartypeof nullTry it Yourself »NoteYou cannot usetypeofto define if a JavaScript object is an array or a date.Both array and date return object as type.The delete OperatorThedeleteoperator deletes a property from an object:Exampleconst person = {firstName:\"John\",lastName:\"Doe\",age:50,eyeColor:\"blue\"};delete person.age;Try it Yourself »The delete operator deletes both the value of the property and the property \nitself.After deletion, the property cannot be used before it is added back again.The delete operator is designed to be used on object properties. It has no \neffect on variables or functions.NoteThe delete operator should not be used on the properties \nof any predefined JavaScript objects (Array, Boolean, Date, Function, Math, Number, RegExp, and String).This can crash your application.The Spread (...) OperatorThe ... operator expands an iterable into more elements:Exampleconst q1 = [\"Jan\", \"Feb\", \"Mar\"];const q2 = [\"Apr\", \"May\", \"Jun\"];const q3 = [\"Jul\", \"Aug\", \"Sep\"];const q4 = [\"Oct\", \"Nov\", \"May\"];const year = [...q1, ...q2, ...q3, ...q4];Try it Yourself »The ... operator can be used to expand an iterable into more arguments for function calls:Exampleconst numbers = [23,55,21,87,56];let maxValue = Math.max(...numbers);Try it Yourself »The in OperatorTheinoperator returns true if a property is in an object, otherwise false:Object Exampleconst person = {firstName:\"John\", lastName:\"Doe\", age:50};(\"firstName\" in person);(\"age\" in person);Try it Yourself »NoteYou cannot useinto check for array content like (\"Volvo\" in cars).Array properties can only be index (0,1,2,3...) and length.See the examples below.Examplesconst cars = [\"Saab\", \"Volvo\", \"BMW\"];(\"Saab\" in cars);Try it Yourself »const cars = [\"Saab\", \"Volvo\", \"BMW\"];(0 in cars);(1 in cars);(4 in cars);(\"length\" in cars);Try it Yourself »Predefined Objects(\"PI\" in Math);(\"NaN\" in Number);(\"length\" in String);Try it Yourself »The instanceof OperatorTheinstanceofoperator returns true if an object is an instance of a specified object:Exampleconst cars = [\"Saab\", \"Volvo\", \"BMW\"];(cars instanceof Array)   // Returns true(cars instanceof Object)  // Returns true(cars instanceof String)  // Returns false(cars instanceof Number)  // Returns falseTry it Yourself »The void OperatorThevoidoperator evaluates an expression and returnsundefined. This operator is often used to obtain the undefined \nprimitive value, using \"void(0)\" (useful when evaluating an expression without \nusing the return value).Example<a href=\"javascript:void(0);\">Useless link</a><a href=\"javascript:void(document.body.style.backgroundColor='red');\">Click me to change the background color of body to red</a>Try it Yourself »See Also:JavaScript Operator Precedence❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "The + operator, and the += operator can also be used to concatenate (add) \nstrings.",
          "Given thatt1 = \"Good \",t2 = \"Morning\",and t3 = \"\", the table below explains the operators:",
          "Comparison operators are used in logical statements to determine equality or difference between variables or values.",
          "Given thatx = 5, the table below explains the comparison operators:",
          "For a tutorial about comparison operators, read ourJavaScript \nComparisons Tutorial.Conditional (Ternary) OperatorThe conditional operator assigns a value to a variable based on a condition.SyntaxExampleTry it(condition) ? x : y(z < 18) ? x : yTry it »Logical OperatorsLogical operators are used to determine the logic between variables or values.Given thatx = 6 and y = 3, the table below explains the logical operators:OperNameExampleTry it&&AND(x < 10 && y > 1) is trueTry it »||OR(x === 5 || y === 5) is falseTry it »!NOT!(x === y) is trueTry it »The Nullish Coalescing Operator (??)The??operator returns the first argument if it is notnullish(nullorundefined).Otherwise it returns the second argument.Examplelet name = null;let text = \"missing\";let result = name ?? text;Try it Yourself »The nullish operator is supported in all browsers since March 2020:Chrome 80Edge 80Firefox 72Safari 13.1Opera 67Feb 2020Feb 2020Jan 2020Mar 2020Mar 2020The Optional Chaining Operator (?.)The?.operator returnsundefinedif an object isundefinedornull(instead of throwing an error).Example// Create an object:const car = {type:\"Fiat\", model:\"500\", color:\"white\"};// Ask for car name:document.getElementById(\"demo\").innerHTML = car?.name;Try it Yourself »The optional chaining operator is supported in all browsers since March 2020:Chrome 80Edge 80Firefox 72Safari 13.1Opera 67Feb 2020Feb 2020Jan 2020Mar 2020Mar 2020JavaScript Bitwise OperatorsBit operators work on 32 bits numbers. Any numeric operand in the operation is converted into a 32 bit number. The result is converted back to a JavaScript number.OperNameExampleSame asResultDecimalTry it&ANDx = 5 & 10101 & 000100011Try it »|ORx = 5 | 10101 | 000101015Try it »~NOTx = ~ 5~0101101010Try it »^XORx = 5 ^ 10101 ^ 000101004Try it »<<Left shiftx = 5 << 10101 << 1101010Try it »>>Right shiftx = 5 >> 10101 >> 100102Try it »>>>Unsigned rightx = 5 >>> 10101 >>> 100102Try it »NoteThe table above uses 4 bits unsigned number. Since JavaScript uses 32-bit signed numbers,\n ~ 5 will not return 10. It will return -6.~00000000000000000000000000000101 (~5)will return11111111111111111111111111111010 (-6)The typeof OperatorThetypeofoperator returns the type of a variable, object, function or \nexpression:Exampletypeof \"John\"   // Returns stringtypeof 3.14     // Returns numberTry it Yourself »Please observe:The data type of NaN is numberThe data type of an array is objectThe data type of a date is objectThe data type of null is objectThe data type of an undefined variable is undefinedExampletypeof \"John\"typeof 3.14typeof NaNtypeof falsetypeof [1, 2, 3, 4]typeof {name:'John', age:34}typeof new Date()typeof function () {}typeof myCartypeof nullTry it Yourself »NoteYou cannot usetypeofto define if a JavaScript object is an array or a date.Both array and date return object as type.The delete OperatorThedeleteoperator deletes a property from an object:Exampleconst person = {firstName:\"John\",lastName:\"Doe\",age:50,eyeColor:\"blue\"};delete person.age;Try it Yourself »The delete operator deletes both the value of the property and the property \nitself.After deletion, the property cannot be used before it is added back again.The delete operator is designed to be used on object properties. It has no \neffect on variables or functions.NoteThe delete operator should not be used on the properties \nof any predefined JavaScript objects (Array, Boolean, Date, Function, Math, Number, RegExp, and String).This can crash your application.The Spread (...) OperatorThe ... operator expands an iterable into more elements:Exampleconst q1 = [\"Jan\", \"Feb\", \"Mar\"];const q2 = [\"Apr\", \"May\", \"Jun\"];const q3 = [\"Jul\", \"Aug\", \"Sep\"];const q4 = [\"Oct\", \"Nov\", \"May\"];const year = [...q1, ...q2, ...q3, ...q4];Try it Yourself »The ... operator can be used to expand an iterable into more arguments for function calls:Exampleconst numbers = [23,55,21,87,56];let maxValue = Math.max(...numbers);Try it Yourself »The in OperatorTheinoperator returns true if a property is in an object, otherwise false:Object Exampleconst person = {firstName:\"John\", lastName:\"Doe\", age:50};(\"firstName\" in person);(\"age\" in person);Try it Yourself »NoteYou cannot useinto check for array content like (\"Volvo\" in cars).Array properties can only be index (0,1,2,3...) and length.See the examples below.Examplesconst cars = [\"Saab\", \"Volvo\", \"BMW\"];(\"Saab\" in cars);Try it Yourself »const cars = [\"Saab\", \"Volvo\", \"BMW\"];(0 in cars);(1 in cars);(4 in cars);(\"length\" in cars);Try it Yourself »Predefined Objects(\"PI\" in Math);(\"NaN\" in Number);(\"length\" in String);Try it Yourself »The instanceof OperatorTheinstanceofoperator returns true if an object is an instance of a specified object:Exampleconst cars = [\"Saab\", \"Volvo\", \"BMW\"];(cars instanceof Array)   // Returns true(cars instanceof Object)  // Returns true(cars instanceof String)  // Returns false(cars instanceof Number)  // Returns falseTry it Yourself »The void OperatorThevoidoperator evaluates an expression and returnsundefined. This operator is often used to obtain the undefined \nprimitive value, using \"void(0)\" (useful when evaluating an expression without \nusing the return value).Example<a href=\"javascript:void(0);\">Useless link</a><a href=\"javascript:void(document.body.style.backgroundColor='red');\">Click me to change the background color of body to red</a>Try it Yourself »See Also:JavaScript Operator Precedence❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "The conditional operator assigns a value to a variable based on a condition.",
          "Logical operators are used to determine the logic between variables or values.",
          "Given thatx = 6 and y = 3, the table below explains the logical operators:",
          "The??operator returns the first argument if it is notnullish(nullorundefined).",
          "Otherwise it returns the second argument.",
          "The nullish operator is supported in all browsers since March 2020:",
          "The?.operator returnsundefinedif an object isundefinedornull(instead of throwing an error).",
          "The optional chaining operator is supported in all browsers since March 2020:",
          "Bit operators work on 32 bits numbers. Any numeric operand in the operation is converted into a 32 bit number. The result is converted back to a JavaScript number.",
          "The table above uses 4 bits unsigned number. Since JavaScript uses 32-bit signed numbers,\n ~ 5 will not return 10. It will return -6.~00000000000000000000000000000101 (~5)will return11111111111111111111111111111010 (-6)",
          "Thetypeofoperator returns the type of a variable, object, function or \nexpression:",
          "Please observe:",
          "You cannot usetypeofto define if a JavaScript object is an array or a date.",
          "Both array and date return object as type.",
          "Thedeleteoperator deletes a property from an object:",
          "The delete operator deletes both the value of the property and the property \nitself.",
          "After deletion, the property cannot be used before it is added back again.",
          "The delete operator is designed to be used on object properties. It has no \neffect on variables or functions.",
          "The delete operator should not be used on the properties \nof any predefined JavaScript objects (Array, Boolean, Date, Function, Math, Number, RegExp, and String).",
          "This can crash your application.",
          "The ... operator expands an iterable into more elements:Exampleconst q1 = [\"Jan\", \"Feb\", \"Mar\"];const q2 = [\"Apr\", \"May\", \"Jun\"];const q3 = [\"Jul\", \"Aug\", \"Sep\"];const q4 = [\"Oct\", \"Nov\", \"May\"];const year = [...q1, ...q2, ...q3, ...q4];Try it Yourself »The ... operator can be used to expand an iterable into more arguments for function calls:Exampleconst numbers = [23,55,21,87,56];let maxValue = Math.max(...numbers);Try it Yourself »The in OperatorTheinoperator returns true if a property is in an object, otherwise false:Object Exampleconst person = {firstName:\"John\", lastName:\"Doe\", age:50};(\"firstName\" in person);(\"age\" in person);Try it Yourself »NoteYou cannot useinto check for array content like (\"Volvo\" in cars).Array properties can only be index (0,1,2,3...) and length.See the examples below.Examplesconst cars = [\"Saab\", \"Volvo\", \"BMW\"];(\"Saab\" in cars);Try it Yourself »const cars = [\"Saab\", \"Volvo\", \"BMW\"];(0 in cars);(1 in cars);(4 in cars);(\"length\" in cars);Try it Yourself »Predefined Objects(\"PI\" in Math);(\"NaN\" in Number);(\"length\" in String);Try it Yourself »The instanceof OperatorTheinstanceofoperator returns true if an object is an instance of a specified object:Exampleconst cars = [\"Saab\", \"Volvo\", \"BMW\"];(cars instanceof Array)   // Returns true(cars instanceof Object)  // Returns true(cars instanceof String)  // Returns false(cars instanceof Number)  // Returns falseTry it Yourself »The void OperatorThevoidoperator evaluates an expression and returnsundefined. This operator is often used to obtain the undefined \nprimitive value, using \"void(0)\" (useful when evaluating an expression without \nusing the return value).Example<a href=\"javascript:void(0);\">Useless link</a><a href=\"javascript:void(document.body.style.backgroundColor='red');\">Click me to change the background color of body to red</a>Try it Yourself »See Also:JavaScript Operator Precedence❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "The ... operator can be used to expand an iterable into more arguments for function calls:",
          "Theinoperator returns true if a property is in an object, otherwise false:",
          "You cannot useinto check for array content like (\"Volvo\" in cars).",
          "Array properties can only be index (0,1,2,3...) and length.",
          "See the examples below.",
          "Theinstanceofoperator returns true if an object is an instance of a specified object:",
          "Thevoidoperator evaluates an expression and returnsundefined. This operator is often used to obtain the undefined \nprimitive value, using \"void(0)\" (useful when evaluating an expression without \nusing the return value).",
          "JavaScript Operator Precedence"
        ],
        "lists": [
          [
            "Arithmetic Operators",
            "Assignment Operators",
            "Comparison Operators",
            "Logical Operators",
            "Conditional Operators",
            "Type Operators"
          ],
          [
            "The data type of NaN is number",
            "The data type of an array is object",
            "The data type of a date is object",
            "The data type of null is object",
            "The data type of an undefined variable is undefined"
          ]
        ],
        "examples": [
          "let name = null;let text = \"missing\";let result = name ?? text;",
          "// Create an object:const car = {type:\"Fiat\", model:\"500\", color:\"white\"};// Ask for car name:document.getElementById(\"demo\").innerHTML = car?.name;",
          "typeof \"John\"   // Returns stringtypeof 3.14     // Returns number",
          "typeof \"John\"typeof 3.14typeof NaNtypeof falsetypeof [1, 2, 3, 4]typeof {name:'John', age:34}typeof new Date()typeof function () {}typeof myCartypeof null",
          "const person = {firstName:\"John\",lastName:\"Doe\",age:50,eyeColor:\"blue\"};delete person.age;",
          "const q1 = [\"Jan\", \"Feb\", \"Mar\"];const q2 = [\"Apr\", \"May\", \"Jun\"];const q3 = [\"Jul\", \"Aug\", \"Sep\"];const q4 = [\"Oct\", \"Nov\", \"May\"];const year = [...q1, ...q2, ...q3, ...q4];",
          "const numbers = [23,55,21,87,56];let maxValue = Math.max(...numbers);",
          "const person = {firstName:\"John\", lastName:\"Doe\", age:50};(\"firstName\" in person);(\"age\" in person);",
          "const cars = [\"Saab\", \"Volvo\", \"BMW\"];(\"Saab\" in cars);",
          "const cars = [\"Saab\", \"Volvo\", \"BMW\"];(0 in cars);(1 in cars);(4 in cars);(\"length\" in cars);",
          "(\"PI\" in Math);(\"NaN\" in Number);(\"length\" in String);",
          "const cars = [\"Saab\", \"Volvo\", \"BMW\"];(cars instanceof Array)   // Returns true(cars instanceof Object)  // Returns true(cars instanceof String)  // Returns false(cars instanceof Number)  // Returns false",
          "<a href=\"javascript:void(0);\">Useless link</a><a href=\"javascript:void(document.body.style.backgroundColor='red');\">Click me to change the background color of body to red</a>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/jsref_precedence.asp",
    "cours": {
      "titre": "JavaScript Operator Precedence",
      "description": "Precedencedescribes the order in which operations are performed in \nan arithmetic expression.",
      "lien": "https://www.w3schools.com/jsref/jsref_precedence.asp",
      "contenus": {
        "paragraphs": [
          "Precedencedescribes the order in which operations are performed in \nan arithmetic expression.",
          "As in traditional mathematics, multiplication is done first:",
          "When using parentheses, operations inside the parentheses are computed first:",
          "When operators have the same precedence (like + and -), they are computed from left to right:"
        ],
        "lists": [],
        "examples": [
          "let x = 100 + 50 * 3;",
          "let x = (100 + 50) * 3;",
          "let x = 100 / 50 * 3;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/jsref_obj_promise.asp",
    "cours": {
      "titre": "JavaScript Promise Object",
      "description": "ThePromise Objectrepresents the completion or failure of an asynchronous operation and its results.A Promise can have 3 states:pendinginitial staterejectedoperation failedfulfilledoperation completed",
      "lien": "https://www.w3schools.com/jsref/jsref_obj_promise.asp",
      "contenus": {
        "paragraphs": [
          "ThePromise Objectrepresents the completion or failure of an asynchronous operation and its results.",
          "A Promise can have 3 states:",
          "Try it Yourself »",
          "The JavaScript Promise Tutorial"
        ],
        "lists": [],
        "examples": [
          "// Create a Promise Objectlet myPromise = new Promise(function(myResolve, myReject) {let result = true;// Code that may take some time goes hereif (result == true) {myResolve(\"OK\");} else {myReject(\"Error\");}});// Using then() to display resultmyPromise.then(x => myDisplay(x), x => myDisplay(x));"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/jsref_obj_regexp.asp",
    "cours": {
      "titre": "JavaScriptRegExp Reference",
      "description": "The RegExp ObjectA regular expression is apatternof characters.The pattern is used forsearching and replacingcharacters in strings.TheRegExp Objectis a regular expression with addedPropertiesandMethods.",
      "lien": "https://www.w3schools.com/jsref/jsref_obj_regexp.asp",
      "contenus": {
        "paragraphs": [
          "A regular expression is apatternof characters.",
          "The pattern is used forsearching and replacingcharacters in strings.",
          "TheRegExp Objectis a regular expression with addedPropertiesandMethods.",
          "Example explained:",
          "For a tutorial about Regular Expressions, read ourJavaScript RegExp Tutorial.",
          "/regexp/is an ECMAScript1 (JavaScriopt 1997) feature.",
          "It is supported in all browsers:",
          "Modifiers define how to perform the seach:",
          "Brackets are used to find a range of characters:",
          "Metacharacters are characters with a special meaning:"
        ],
        "lists": [],
        "examples": [
          "/pattern/modifier(s);",
          "let pattern = /w3schools/i;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/jsref_obj_set.asp",
    "cours": {
      "titre": "JavaScript Set Reference",
      "description": "A JavaScript Set is a collection of unique values.Each value can only occur once in a Set.The values can be of any type, primitive values or objects.",
      "lien": "https://www.w3schools.com/jsref/jsref_obj_set.asp",
      "contenus": {
        "paragraphs": [
          "A JavaScript Set is a collection of unique values.",
          "Each value can only occur once in a Set.",
          "The values can be of any type, primitive values or objects.",
          "You can create a JavaScript Set by:",
          "Pass an Array to thenew Set()constructor:",
          "Create a Set and add values:",
          "Sets have only one property:",
          "Pass an Array to thenew Set()constructor:",
          "You can list all Set elements (values) with afor..ofloop:"
        ],
        "lists": [
          [
            "Passing an Array tonew Set()",
            "Create a Set and useadd()to add values"
          ]
        ],
        "examples": [
          "// Create a Setconst letters = new Set([\"a\",\"b\",\"c\"]);",
          "// Create a Setconst letters = new Set();// Add Values to the Setletters.add(\"a\");letters.add(\"b\");letters.add(\"c\");",
          "// Create a Setconst letters = new Set([\"a\",\"b\",\"c\"]);",
          "// Create a Setconst letters = new Set([\"a\",\"b\",\"c\"]);// List all Elementslet text = \"\";for (const x of letters) {text += x;}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/jsref_statements.asp",
    "cours": {
      "titre": "JavaScript Statements Reference",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/jsref_statements.asp",
      "contenus": {
        "paragraphs": [
          "In HTML, JavaScript statements are \"instructions\" to be \"executed\" by the web \nbrowser.",
          "This statement tells the browser to write \"Hello Dolly.\" inside an HTML \nelement with id=\"demo\":",
          "For a tutorial about Statements, read ourJavaScript Statements Tutorial.",
          "JavaScript statements often start with astatement identifierto identify the JavaScript action to be performed.",
          "Statement identifiers are reserved words and cannot be used as variable names \n(or any other things).",
          "The following table lists all JavaScript statement identifiers:"
        ],
        "lists": [],
        "examples": [
          "document.getElementById(\"demo\").innerHTML = \"Hello Dolly.\";"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/jsref_obj_string.asp",
    "cours": {
      "titre": "JavaScriptString Reference",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/jsref_obj_string.asp",
      "contenus": {
        "paragraphs": [
          "A JavaScript string stores a series of characters like \"John Doe\".",
          "A string can be any text inside double or single quotes:",
          "String indexes are zero-based:",
          "The first character is in position 0, the \nsecond in 1, and so on.",
          "For a tutorial about Strings, read ourJavaScript String Tutorial.",
          "Normally, strings like \"John Doe\", cannot have methods or properties \nbecause they are not objects.",
          "But with JavaScript, methods and properties are also available to \nstrings, because JavaScript treats strings as objects when executing methods and properties.",
          "All string methods return a new value.",
          "They do not change the original variable.",
          "HTML wrapper methods return a string wrapped inside an HTML tag.",
          "These are not standard methods, and may not work as expected."
        ],
        "lists": [],
        "examples": [
          "let carName1 = \"Volvo XC60\";let carName2 = 'Volvo XC60';"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/jsref_obj_typed_array.asp",
    "cours": {
      "titre": "JavaScript Typed Array Reference",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/jsref_obj_typed_array.asp",
      "contenus": {
        "paragraphs": [
          "In Javascript, a typed array is an array-like buffer of binary data.",
          "There is no JavaScript property or object named TypedArray,\nbut properties and methods can be used with typed array objects:",
          "Typed arrays are not arrays.",
          "isArray() on a typed array returns false.",
          "Many array methods (like push and pop) are not supported by typed arrays.",
          "Typed arrays are array-like objects for storing binary data in memory.",
          "The difference between an Uint8Array and  an Uint8ClampedArray is how values are added.",
          "If you set one element in an Uint8ClampedArray to a value outside the 0-255 range,\nit will default to 0 or 255.",
          "A typed array will just take the first 8 bits of the value.",
          "Typed arrays provide a way to handle binary data as efficiently as arrays work in C.",
          "Typed arrays are raw memory, so JavaScript can pass them directly to any function\nwithout converting the data to another representation.",
          "Typed arrays are seriously faster than normal arrays for passing data\nto functions that can use raw binary data (Computer Games, WebGL,\nCanvas, File APIs, Media APIs).",
          "typedArrayis an ECMAScript6 (ES6) feature.",
          "ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:",
          "typedArrayis not supported in Internet Explorer."
        ],
        "lists": [],
        "examples": [
          "const myArr = new Int8Array(10);",
          "fetch(url).then(request => request.arrayBuffer()).then(arrayBuffer =>...);",
          "const canvas = document.getElementById('my_canvas');const context = canvas.getContext('2d');const imageData = context.getImageData(0, 0, canvas.width, canvas.height);const uint8ClampedArray = imageData.data;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/obj_window.asp",
    "cours": {
      "titre": "TheWindowObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/obj_window.asp",
      "contenus": {
        "paragraphs": [
          "The window object represents an open window in a browser.",
          "If a document contain frames (<iframe> tags), the browser creates one window object for the HTML document, and one additional window object for each frame."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/obj_console.asp",
    "cours": {
      "titre": "Window Console Object",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/obj_console.asp",
      "contenus": {
        "paragraphs": [
          "Theconsole objectprovides access to the browser's debugging console.",
          "Theconsole objectis a property of thewindow object.",
          "Theconsole objectis accessed with:",
          "window.consoleor justconsole"
        ],
        "lists": [],
        "examples": [
          "window.console.error(\"You made a mistake\");",
          "console.error(\"You made a mistake\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/obj_history.asp",
    "cours": {
      "titre": "Window History",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/obj_history.asp",
      "contenus": {
        "paragraphs": [
          "Thehistory objectcontains the URLs visited by the user (in the browser window).",
          "Thehistory objectis a property of thewindow object.",
          "Thehistory objectis accessed with:",
          "window.historyor justhistory:"
        ],
        "lists": [],
        "examples": [
          "let length = window.history.length;",
          "let length = history.length;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/obj_location.asp",
    "cours": {
      "titre": "Window Location",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/obj_location.asp",
      "contenus": {
        "paragraphs": [
          "Thelocation objectcontains information about the current URL.",
          "Thelocation objectis a property of thewindow object.",
          "Thelocation objectis accessed with:",
          "window.locationor justlocation"
        ],
        "lists": [],
        "examples": [
          "let origin = window.location.origin;",
          "let origin = location.origin;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/obj_navigator.asp",
    "cours": {
      "titre": "Window Navigator",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/obj_navigator.asp",
      "contenus": {
        "paragraphs": [
          "Thenavigator objectcontains information about the browser.",
          "Thenavigator objectis a property of thewindow object.",
          "Thenavigator objectis accessed with:",
          "window.navigatoror justnavigator:"
        ],
        "lists": [],
        "examples": [
          "let url = window.navigator.language;",
          "let url = navigator.language;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/obj_screen.asp",
    "cours": {
      "titre": "Window Screen",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/obj_screen.asp",
      "contenus": {
        "paragraphs": [
          "The screen object contains information about the visitor's screen."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_document.asp",
    "cours": {
      "titre": "HTML DOM Documents",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_document.asp",
      "contenus": {
        "paragraphs": [
          "When an HTML document is loaded into a web browser, it becomes adocument object.",
          "Thedocument objectis the root node of the HTML document.",
          "Thedocument objectis a property of thewindow object.",
          "Thedocument objectis accessed with:",
          "window.documentor justdocument",
          "The following properties and methods can be used on HTML documents:"
        ],
        "lists": [],
        "examples": [
          "let url = window.document.URL;",
          "let url = document.URL;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_all.asp",
    "cours": {
      "titre": "HTML DOM Elements",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_all.asp",
      "contenus": {
        "paragraphs": [
          "In the HTML DOM, theElement objectrepresents an HTML element, \nlike P, DIV, A, TABLE, or any other HTML element.",
          "The following properties and methods can be used on all HTML elements:"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_attributes.asp",
    "cours": {
      "titre": "HTML DOM Attributes",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_attributes.asp",
      "contenus": {
        "paragraphs": [
          "In the HTML DOM, anAttr objectrepresents anHTML attribute.",
          "An HTML attribute always belongs to anHTML element.",
          "ANamedNodeMapis an array-like unordered collection of an element's attributes.In other words: a NamedNodeMap is a list ofAttr objects.A NamedNodeMap has alengthproperty that returns the number of nodes.The nodes can be accessed by name or index numbers. The index starts at 0.Attribute PropertiesPropertyDescriptionisIdDeprecatednameReturns an attribute's namevalueSets or returns an attribute's valuespecifiedReturns true if the attribute is specifiedNamedNodeMap Properties and MethodsMethodDescriptiongetNamedItem()Returns an attribute node (by name) from a NamedNodeMapitem()Returns an attribute node (by index) from a NamedNodeMaplengthReturns the number of attributes in a NamedNodeMapremoveNamedItem()Removes an attribute (node)setNamedItem()Sets an attribute (node) by name❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "In other words: a NamedNodeMap is a list ofAttr objects.",
          "A NamedNodeMap has alengthproperty that returns the number of nodes.",
          "The nodes can be accessed by name or index numbers. The index starts at 0."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_htmlcollection.asp",
    "cours": {
      "titre": "DOMHTMLCollection",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_htmlcollection.asp",
      "contenus": {
        "paragraphs": [
          "An HTMLCollection is an array-like collection (list) of HTML elements.",
          "The elements in a collection can be accessed by index (starts at 0).",
          "The length Propertyreturns the number of elements in the collection.",
          "An HTMLCollection is almost the same as aNodeList.",
          "See the description below.",
          "The getElementsByTagName() Method",
          "The getElementsByClassName() Method",
          "The children Property",
          "The following properties and methods can be used on an HTMLCollection:",
          "Get all parapgraphs:",
          "The number of <p> elements in the document are:",
          "Loop over the elements in an HTMLCollection:",
          "An HTMLCollection is not an Array!",
          "An HTMLCollection may look like an array, but it is not.",
          "You can loop through an HTMLCollection and refer to its elements with an index.",
          "But you cannot use Array methods like push(), pop(), or join() on an HTMLCollection.",
          "ANodeListand anHTMLcollectionis very much the same thing.",
          "Both are array-like collections (lists) of nodes (elements) extracted from a \ndocument. The nodes can be accessed by index numbers. The index starts at 0.",
          "Both have alengthproperty that returns the number of elements in the list (collection).",
          "An HTMLCollection is a collection ofdocument elements.",
          "A NodeList is a collection ofdocument nodes(element nodes, attribute nodes, and text nodes).",
          "HTMLCollection items can be accessed by their name, id, or index number.",
          "NodeList items can only be accessed by their index number.",
          "An HTMLCollection is always alivecollection. Example: If you add a <li> element to a list in the DOM, the list in the HTMLCollection will also change.",
          "A NodeList is most often astaticcollection. Example: If you add a <li> element to a list in the DOM, the list in NodeList will not change.",
          "ThegetElementsByClassName()andgetElementsByTagName()methods return a live HTMLCollection.",
          "ThequerySelectorAll()method returns a static NodeList.",
          "ThechildNodesproperty returns a live NodeList."
        ],
        "lists": [],
        "examples": [
          "const elements = document.getElementsByTagName(\"p\");",
          "const elements = document.getElementsByTagName(\"p\");let numb = elements.length;",
          "const elements = document.getElementsByTagName(\"*\");for (let i = 0; i < elements.length; i++) {.. some code ..}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_html_nodelist.asp",
    "cours": {
      "titre": "HTML DOM NodeList",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_html_nodelist.asp",
      "contenus": {
        "paragraphs": [
          "A NodeList is an array-like collection (list) of Node Objects.",
          "The nodes in a NodeList can be accessed by index (starts at 0).",
          "The length propertyreturns the number of nodes in a NodeList.",
          "A NodeList is almost the same as anHTMLCollection.",
          "See the description below.",
          "The childNodes() Method",
          "The querySelectorAll() Method",
          "The getElementsByName() Method",
          "The following properties and methods can be used on a NodeList:",
          "Select all<p>nodes in a document:",
          "The elements in the NodeList can be accessed by an index number.",
          "To access the \nsecond <p> node you can write:",
          "Note:The index starts at 0.",
          "Thelengthproperty defines the number of nodes in a node list:",
          "Thelengthproperty is useful when you want to loop through the nodes in a node \nlist:",
          "Change the color of all <p> elements in a node \nlist:",
          "A NodeList is not an Array!",
          "A NodeList may look like an array, but it is not.",
          "You can loop through a NodeList and refer to its nodes with an index.",
          "But you cannot use Array methods like push(), pop(), or join() on a NodeList.",
          "ANodeListand anHTMLcollectionis very much the same thing.",
          "Both are array-like collections (lists) of nodes (elements) extracted from a \ndocument. The nodes can be accessed by index numbers. The index starts at 0.",
          "Both have alengthproperty that returns the number of elements in the list (collection).",
          "An HTMLCollection is a collection ofdocument elements.",
          "A NodeList is a collection ofdocument nodes(element nodes, attribute nodes, and text nodes).",
          "HTMLCollection items can be accessed by their name, id, or index number.",
          "NodeList items can only be accessed by their index number.",
          "An HTMLCollection is always alivecollection. Example: If you add a <li> element to a list in the DOM, the list in the HTMLCollection will also change.",
          "A NodeList is most often astaticcollection. Example: If you add a <li> element to a list in the DOM, the list in NodeList will not change.",
          "ThegetElementsByClassName()andgetElementsByTagName()methods return a live HTMLCollection.",
          "ThequerySelectorAll()method returns a static NodeList.",
          "ThechildNodesproperty returns a live NodeList.",
          "In some cases, the NodeList islive: A change in the DOM updates the NodeList.",
          "ThechildNodesmethod returns a live NodeList."
        ],
        "lists": [],
        "examples": [
          "const myNodeList = document.querySelectorAll(\"p\");",
          "myNodeList[1]",
          "myNodelist.length",
          "const myNodelist = document.querySelectorAll(\"p\");for (let i = 0; i < myNodelist.length; i++) {myNodelist[i].style.color = \"red\";}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_html_domtokenlist.asp",
    "cours": {
      "titre": "HTML DOMTokenList",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_html_domtokenlist.asp",
      "contenus": {
        "paragraphs": [
          "ADOMTokenListis a set of space separated tokens.",
          "ADOMTokenListcan be accessed by index (starts at 0).",
          "The length Propertyreturns the number of tokens in a DOMTokenList.",
          "TheThe classList Propertyof an HTML element represents a DOMTokenList.",
          "Add a \"myStyle\" class to an element:",
          "Remove the \"myStyle\" class from an element:",
          "Toggle \"myStyle\" on and off:",
          "More examples below.",
          "A DOMTokenList is not an Array!",
          "A DOMTokenList may look like an array, but it is not.",
          "You can loop through a DOMTokenList and refer to its token with an index.",
          "But you cannot use Array methods like push(), pop(), or join() on a DOMTokenList.",
          "Add multiple classes to the an element:",
          "Remove multiple classes from an element:",
          "Get the number of class names for an element:",
          "Get the class names of the \"myDIV\" element:",
          "Get the first class of an element:",
          "Does an an element has a \"myStyle\" class?",
          "Remove \"anotherClass\" if an element has a \"myStyle\" class.",
          "Toggle between classes to create a dropdown button:",
          "Create a sticky navigation bar:"
        ],
        "lists": [],
        "examples": [
          "element.classList.add(\"myStyle\");",
          "element.classList.remove(\"myStyle\");",
          "element.classList.toggle(\"myStyle\");",
          "element.classList.add(\"myStyle\", \"anotherClass\", \"thirdClass\");",
          "element.classList.remove(\"myStyle\", \"anotherClass\", \"thirdClass\");",
          "let numb = element.classList.length;",
          "<div id=\"myDIV\" class=\"myStyle anotherClass thirdClass\"><p>I am myDIV.</p></div>const list = document.getElementById(\"myDIV\").classList;",
          "let className = element.classList.item(0);",
          "let x = element.classList.contains(\"myStyle\");",
          "if (element.classList.contains(\"mystyle\")) {element.classList.remove(\"anotherClass\");}",
          "document.getElementById(\"myBtn\").onclick = function() {myFunction()};function myFunction() {document.getElementById(\"myDropdown\").classList.toggle(\"show\");}",
          "// Get the navbarconst navbar = document.getElementById(\"navbar\");// Get the offset position of the navbarconst sticky = navbar.offsetTop;// Add the sticky class to the navbar when you reach its scroll position// Remove it when you leave the scroll positionfunction myFunction() {if (window.pageYOffset  \n  >= sticky) {navbar.classList.add(\"sticky\")} \n  else {navbar.classList.remove(\"sticky\");}}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_style.asp",
    "cours": {
      "titre": "HTML DOMStyleObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_style.asp",
      "contenus": {
        "paragraphs": [
          "The Style object represents an individual style statement.",
          "The Style object can be accessed from the head section of the document, or from specific HTML element(s).",
          "Accessing style object(s) from the head section of the document:",
          "Accessing a specified element's style object:",
          "You can create a <style> element by using the document.createElement() method:",
          "You can also set the style properties of an existing element:",
          "HTML tutorial:HTML CSS",
          "CSS tutorial:CSS Tutorial",
          "HTML reference:HTML <style> tag",
          "CSS reference:CSS Properties"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementsByTagName(\"STYLE\");",
          "var x = document.getElementById(\"myH1\").style;",
          "var x = document.createElement(\"STYLE\");",
          "document.getElementById(\"myH1\").style.color = \"red\";"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_event.asp",
    "cours": {
      "titre": "HTML DOMEvents",
      "description": "DOM Eventsallow JavaScript to addevent listenerorevent handlersto HTML elements.For a tutorial about Events, read ourJavaScript Events Tutorial.",
      "lien": "https://www.w3schools.com/jsref/dom_obj_event.asp",
      "contenus": {
        "paragraphs": [
          "DOM Eventsallow JavaScript to addevent listenerorevent handlersto HTML elements.",
          "For a tutorial about Events, read ourJavaScript Events Tutorial.",
          "In HTML onclick is the event listener, myFunction is the event handler:",
          "In JavaScript click is the event, myFunction is the event handler:"
        ],
        "lists": [],
        "examples": [
          "<button onclick=\"myFunction()\">Click me</button>",
          "button.addEventListener(\"click\", myFunction);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/obj_events.asp",
    "cours": {
      "titre": "HTML DOM Event Objects",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/obj_events.asp",
      "contenus": {
        "paragraphs": [
          "When an event occurs in HTML, the event belongs to a certain event object, \nlike a mouse click event belongs to the MouseEvent object.",
          "For a tutorial about Events, read ourJavaScript Events Tutorial.",
          "All event objects are based on the Event Object.",
          "All event objects inherit the Event Object's properties and methods."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_event_prop.asp",
    "cours": {
      "titre": "HTML Event Properties",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_event_prop.asp",
      "contenus": {
        "paragraphs": [
          "HTML DOM events allow JavaScript to register different event handlers on \nelements in an HTML document.",
          "Events are normally used in combination with functions, and the function will not be executed before the event occurs \n(such as when a user clicks a button).",
          "For a tutorial about Events, read ourJavaScript Events Tutorial."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_event_methods.asp",
    "cours": {
      "titre": "HTML Event Methods",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_event_methods.asp",
      "contenus": {
        "paragraphs": [
          "HTML DOM events allow JavaScript to register different event handlers on \nelements in an HTML document.",
          "Events are normally used in combination with functions, and the function will not be executed before the event occurs \n(such as when a user clicks a button).",
          "For a tutorial about Events, read ourJavaScript Events Tutorial."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/api_canvas.asp",
    "cours": {
      "titre": "Canvas API",
      "description": "The HTML<canvas>element is abitmappedarea in an HTML page.TheCanvas APIallows JavaScript todraw graphicson the canvas.The Canvas API can draw shapes, lines, curves, boxes, text, and images, with colors,\nrotations, transparencies, and other pixel manipulations.",
      "lien": "https://www.w3schools.com/jsref/api_canvas.asp",
      "contenus": {
        "paragraphs": [
          "The HTML<canvas>element is abitmappedarea in an HTML page.",
          "TheCanvas APIallows JavaScript todraw graphicson the canvas.",
          "The Canvas API can draw shapes, lines, curves, boxes, text, and images, with colors,\nrotations, transparencies, and other pixel manipulations.",
          "You access a<canvas>element with theHTML \nDOMmethodgetElementById().",
          "To draw in the canvas you need to create a2D contextobject:",
          "The HTML<canvas>element itself has no drawing abilities.",
          "You must use JavaScript to draw any graphics.",
          "ThegetContext()method returns an object \nwith tools (methods) for drawing.",
          "The common way to draw on the canvas is to:Begin a Path - beginPath()Move to a Point - moveTo()Draw in the Path - lineTo()Draw the Path - stroke()",
          "Example",
          "This reference covers all Properties and Methods of the getContext(\"2d\") Object,\nused to draw text, lines, boxes, circles, pictures, and more on the canvas.",
          "There are only 3 methods to draw directly on the canvas:",
          "The canvas object also supports the standardpropertiesandevents.",
          "Canvas tutorial:Canvas Tutorial",
          "HTML tutorial:HTML5 Canvas",
          "HTML reference:HTML <canvas> tag",
          "The<canvas>element is an HTML5 standard (2014).",
          "Canvas APIis supported in all modern browsers:"
        ],
        "lists": [
          [
            "Begin a Path - beginPath()",
            "Move to a Point - moveTo()",
            "Draw in the Path - lineTo()",
            "Draw the Path - stroke()"
          ]
        ],
        "examples": [
          "<canvas id=\"myCanvas\" width=\"300\" height=\"150\"></canvas>",
          "const myCanvas = document.getElementById(\"myCanvas\");const ctx = myCanvas.getContext(\"2d\");",
          "const canvas = document.getElementById(\"myCanvas\");const ctx = canvas.getContext(\"2d\");ctx.beginPath();ctx.moveTo(20, 20);ctx.lineTo(20, 100);ctx.lineTo(70, 100);ctx.stroke();"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/api_console.asp",
    "cours": {
      "titre": "Console API",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/api_console.asp",
      "contenus": {
        "paragraphs": [
          "Theconsole objectprovides access to the browser's debugging console.",
          "Theconsole objectis a property of thewindow object.",
          "Theconsole objectis accessed with:",
          "window.consoleor justconsole"
        ],
        "lists": [],
        "examples": [
          "window.console.error(\"You made a mistake\");",
          "console.error(\"You made a mistake\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/api_fetch.asp",
    "cours": {
      "titre": "JavaScript Fetch API",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/api_fetch.asp",
      "contenus": {
        "paragraphs": [
          "Fetch is based on async and await. The example might be easier to understand like this:",
          "Use understandable names instead of x and y:",
          "Thefetch()method starts the process of fetching a resource from a server.",
          "Thefetch()method returns a Promise that resolves to a Response object.",
          "😀No need for XMLHttpRequest anymore.",
          "fetch()is an ECMAScript6 (ES6) feature.",
          "ES6 (JavaScript 2015) is supported in all modern browsers since June 2017:",
          "fetch()is not supported in Internet Explorer."
        ],
        "lists": [],
        "examples": [
          "fetch(file).then(x => x.text()).then(y => myDisplay(y));",
          "async function getText(file) {let x = await fetch(file);let y = await x.text();myDisplay(y);}",
          "async function getText(file) {let myObject = await fetch(file);let myText = await myObject.text();myDisplay(myText);}",
          "fetch(file)"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/api_fullscreen.asp",
    "cours": {
      "titre": "JavaScript Fullscreen API",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/api_fullscreen.asp",
      "contenus": {
        "paragraphs": [
          "The Fullscreen API has methods and properties to handle HTML elements in full-screen.",
          "Show a <video> element in fullscreen mode:"
        ],
        "lists": [],
        "examples": [
          "/* Get the element you want to display in fullscreen \n  */var elem = document.getElementById(\"myvideo\");/* Execute the openFullscreen() function to open the video in fullscreen.\n  Include prefixes for browsers that do not support the requestFullscreen property */function openFullscreen() {if (elem.requestFullscreen) {elem.requestFullscreen();} else if (elem.webkitRequestFullscreen) \n  { /* Safari \n  */elem.webkitRequestFullscreen();} else if (elem.msRequestFullscreen) \n  { /* IE11\n   */elem.msRequestFullscreen();}}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/api_geolocation.asp",
    "cours": {
      "titre": "Geolocation API",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/api_geolocation.asp",
      "contenus": {
        "paragraphs": [
          "The Geolocation object allows the user to provide their location to web \napplications. For privacy reasons, the user is asked for permission to report \nlocation information.",
          "Note:This feature is available only in secure contexts (HTTPS).",
          "Note:Geolocation is most accurate for devices with GPS, like iPhone.",
          "The Geolocation API is published through thenavigator.geolocationobject."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/api_history.asp",
    "cours": {
      "titre": "History API",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/api_history.asp",
      "contenus": {
        "paragraphs": [
          "Thehistory objectcontains the URLs visited by the user (in the browser window).",
          "Thehistory objectis a property of thewindow object.",
          "Thehistory objectis accessed with:",
          "window.historyor justhistory:"
        ],
        "lists": [],
        "examples": [
          "let length = window.history.length;",
          "let length = history.length;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/api_mediaquerylist.asp",
    "cours": {
      "titre": "MediaQueryList API",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/api_mediaquerylist.asp",
      "contenus": {
        "paragraphs": [
          "TheMediaQueryList objectstores information from a media query.",
          "TheMediaQueryList objectis a property of thewindow object.",
          "TheMediaQueryList objectis accessed with:",
          "window.matchMedia()or justmatchMedia():",
          "The window.matchMedia() Method",
          "The media queries of thematchMedia()method can be any of the media features of theCSS @media rule, like min-height, min-width, orientation, etc."
        ],
        "lists": [],
        "examples": [
          "const mqlObj = window.matchMedia();",
          "const mqlObj = matchMedia();",
          "matchMedia(\"(max-height: 480px)\").matches);",
          "matchMedia(\"(max-width: 640px)\").matches);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/api_storage.asp",
    "cours": {
      "titre": "Storage API",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/api_storage.asp",
      "contenus": {
        "paragraphs": [
          "The Storage object of the Web Storage API provides access to the session \nstorage or local storage for a particular domain. This allows you to read, \nadd, modify, and delete stored data items.",
          "Cookies are for client-server (browser-server) applications.",
          "Local storage are for client (browser) applications.",
          "Cookies are associated with websites. If the data is for client use,\nsending cookies in every HTTP header is waste of bandwith.",
          "Some users have cookies disabled as a rule in their browsers.",
          "A Cookie has a size limit of 4 Kilobytes. Local Storage has a limit of 5 Megabytes per domain.",
          "A Cookie have expiration date. Local Storage has not.",
          "Storage APIis supported in all browsers:"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/api_validation.asp",
    "cours": {
      "titre": "JavaScriptValidation API",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/api_validation.asp",
      "contenus": {
        "paragraphs": [
          "If an input field contains invalid data, display a message:",
          "Thevalidity propertyof an input element contains a number \nof properties related to the validity of data:",
          "If the number in an input field is greater than 100 (the input'smaxattribute), display a message:",
          "If the number in an input field is less than 100 (the input'sminattribute), display a message:"
        ],
        "lists": [],
        "examples": [
          "<input id=\"id1\" type=\"number\" min=\"100\" max=\"300\" \n    required><button onclick=\"myFunction()\">OK</button><p id=\"demo\"></p><script>function myFunction() {const inpObj = document.getElementById(\"id1\");if (!inpObj.checkValidity()) {document.getElementById(\"demo\").innerHTML = inpObj.validationMessage;}}</script>",
          "<input id=\"id1\" type=\"number\" max=\"100\"><button onclick=\"myFunction()\">OK</button><p id=\"demo\"></p><script>function myFunction() {let text = \"Value OK\";if (document.getElementById(\"id1\").validity.rangeOverflow) {text = \"Value too large\";}}</script>",
          "<input id=\"id1\" type=\"number\" min=\"100\"><button onclick=\"myFunction()\">OK</button><p id=\"demo\"></p><script>function myFunction() {let text =  = \"Value OK\";if (document.getElementById(\"id1\").validity.rangeUnderflow) {text = \"Value too small\";}}</script>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/api_web.asp",
    "cours": {
      "titre": "JavaScript Web API",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/api_web.asp",
      "contenus": {
        "paragraphs": [
          "The Web API has methods and properties that can extend the functionality of the browser."
        ],
        "lists": [],
        "examples": [
          "const myArray = new Uint32Array(10);crypto.getRandomValues(myArray);"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_anchor.asp",
    "cours": {
      "titre": "HTML DOMAnchorObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_anchor.asp",
      "contenus": {
        "paragraphs": [
          "The Anchor object represents an HTML <a> element.",
          "You can access an <a> element by using getElementById():",
          "You can create an <a> element by using the document.createElement() method:",
          "The Anchor object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML links",
          "HTML reference:HTML <a> tag"
        ],
        "lists": [],
        "examples": [
          "const element = document.getElementById(\"myAnchor\");",
          "const element = document.createElement(\"a\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_abbr.asp",
    "cours": {
      "titre": "HTML DOMAbbreviationObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_abbr.asp",
      "contenus": {
        "paragraphs": [
          "The Abbreviation object represents an HTML <abbr> element.",
          "You can access an <abbr> element by using getElementById():",
          "You can create an <abbr> element by using the document.createElement() method:",
          "The Abbreviation object supports the standardpropertiesandevents.",
          "HTML reference:HTML <abbr> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myAbbr\");",
          "var x = document.createElement(\"ABBR\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_address.asp",
    "cours": {
      "titre": "HTML DOMAddressObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_address.asp",
      "contenus": {
        "paragraphs": [
          "The Address object represents an HTML <address> element.",
          "You can access an <address> element by using getElementById():",
          "You can create an <address> element by using the document.createElement() method:",
          "The Address object supports the standardpropertiesandevents.",
          "HTML reference:HTML <address> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myAdr\");",
          "var x = document.createElement(\"ADDRESS\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_area.asp",
    "cours": {
      "titre": "HTML DOMAreaObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_area.asp",
      "contenus": {
        "paragraphs": [
          "The Area object represents an HTML <area> element.",
          "You can access an <area> element by using getElementById():",
          "You can create an <area> element by using the document.createElement() method:",
          "The Area object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <area> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myArea\");",
          "var x = document.createElement(\"AREA\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_article.asp",
    "cours": {
      "titre": "HTML DOMArticleObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_article.asp",
      "contenus": {
        "paragraphs": [
          "The Article object represents an HTML <article> element.",
          "You can access an <article> element by using getElementById():",
          "You can create an <article> element by using the document.createElement() method:",
          "The Article object supports the standardpropertiesandevents.",
          "HTML reference:HTML <article> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myArticle\");",
          "var x = document.createElement(\"ARTICLE\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_aside.asp",
    "cours": {
      "titre": "HTML DOMAsideObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_aside.asp",
      "contenus": {
        "paragraphs": [
          "The Aside object represents an HTML <aside> element.",
          "You can access an <aside> element by using getElementById():",
          "You can create an <aside> element by using the document.createElement() method:",
          "The Aside object supports the standardpropertiesandevents.",
          "HTML reference:HTML <aside> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myAside\");",
          "var x = document.createElement(\"ASIDE\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_audio.asp",
    "cours": {
      "titre": "HTML DOMAudioObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_audio.asp",
      "contenus": {
        "paragraphs": [
          "The Audio object represents an HTML <audio> element.",
          "You can access an <audio> element by using getElementById():",
          "You can create an <audio> element by using the document.createElement() method:",
          "The Audio object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML5 audio",
          "HTML reference:HTML <audio> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myAudio\");",
          "var x = document.createElement(\"AUDIO\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_b.asp",
    "cours": {
      "titre": "HTML DOMBoldObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_b.asp",
      "contenus": {
        "paragraphs": [
          "The Bold object represents an HTML <b> element.",
          "You can access a <b> element by using getElementById():",
          "You can create a <b> element by using the document.createElement() method:",
          "The Bold object supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Text Formatting Elements",
          "HTML reference:HTML <b> tag",
          "JavaScript reference:HTML DOM Strong Object"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myB\");",
          "var x = document.createElement(\"B\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_base.asp",
    "cours": {
      "titre": "HTML DOMBaseObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_base.asp",
      "contenus": {
        "paragraphs": [
          "The Base object represents an HTML <base> element.",
          "You can access a <base> element by using getElementById():",
          "You can create a <base> element by using the document.createElement() method:",
          "The Base object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <base> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myBase\");",
          "var x = document.createElement(\"BASE\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_bdo.asp",
    "cours": {
      "titre": "HTML DOMBdoObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_bdo.asp",
      "contenus": {
        "paragraphs": [
          "The Bdo object represents an HTML <bdo> element.",
          "You can access a <bdo> element by using getElementById():",
          "You can create a <bdo> element by using the document.createElement() method:",
          "The Bdo object supports the standardpropertiesandevents.",
          "HTML reference:HTML <bdo> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myBdo\");",
          "var x = document.createElement(\"BDO\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_blockquote.asp",
    "cours": {
      "titre": "HTML DOMBlockquoteObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_blockquote.asp",
      "contenus": {
        "paragraphs": [
          "The Blockquote object represents an HTML <blockquote> element.",
          "You can access a <blockquote> element by using getElementById():",
          "You can create a <blockquote> element by using the document.createElement() method:",
          "The Blockquote object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <blockquote> tag",
          "JavaScript reference:HTML DOM Quote Object"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myBlockquote\");",
          "var x = document.createElement(\"BLOCKQUOTE\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_body.asp",
    "cours": {
      "titre": "HTML DOMBodyObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_body.asp",
      "contenus": {
        "paragraphs": [
          "The Body object represents an HTML <body> element.",
          "You can access a <body> element by using getElementsByTagName():",
          "Tip:You can also access a <body> element by using thedocument.bodyproperty.",
          "You can create a <body> element by using the document.createElement() method:",
          "The Body object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <body> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementsByTagName(\"BODY\")[0];",
          "var x = document.createElement(\"BODY\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_br.asp",
    "cours": {
      "titre": "HTML DOMBRObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_br.asp",
      "contenus": {
        "paragraphs": [
          "The BR object represents an HTML <br> element.",
          "You can access a <br> element by using getElementById():",
          "You can create a <br> element by using the document.createElement() method:",
          "The BR object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <br> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myBR\");",
          "var x = document.createElement(\"BR\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_pushbutton.asp",
    "cours": {
      "titre": "HTML DOMButtonObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_pushbutton.asp",
      "contenus": {
        "paragraphs": [
          "The Button object represents an HTML <button> element.",
          "You can access a <button> element by using getElementById():",
          "You can create a <button> element by using the document.createElement() method:",
          "The Button object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <button> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myBtn\");",
          "var x = document.createElement(\"BUTTON\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_canvas.asp",
    "cours": {
      "titre": "HTML DOM Canvas",
      "description": "The<canvas>element defines abitmappedarea in an HTML page.TheCanvas APIallows JavaScript todraw graphicson the canvas.The Canvas API can draw shapes, lines, curves, boxes, text, and images, with colors,\nrotations, transparencies, and other pixel manipulations.",
      "lien": "https://www.w3schools.com/jsref/dom_obj_canvas.asp",
      "contenus": {
        "paragraphs": [
          "The<canvas>element defines abitmappedarea in an HTML page.",
          "TheCanvas APIallows JavaScript todraw graphicson the canvas.",
          "The Canvas API can draw shapes, lines, curves, boxes, text, and images, with colors,\nrotations, transparencies, and other pixel manipulations.",
          "You can add a canvas element anywhere in an HTML page with the<canvas>tag:",
          "You can access a<canvas>element with theHTML \nDOMmethodgetElementById():",
          "To draw in the canvas you need to create a2D contextobject:",
          "The HTML<canvas>element itself has no drawing abilities.",
          "You must use JavaScript to draw any graphics.",
          "ThegetContext()method returns an object \nwith tools (methods) for drawing.",
          "After you have created a 2D context, you can draw on the canvas.",
          "ThefillRect()method draws a black rectangle with a top-left corner at position 20,20.\nThe rectangle is 150 pixel wide and 100 pixels high.",
          "ThefillStyleproperty sets the fill color of the drawing object:",
          "You can also create a new<canvas>element \nwith thedocument.createElement()method,\nand add the element to an existing HTML page:",
          "The common way to draw on the canvas is to:Begin a Path - beginPath()Move to a Point - moveTo()Draw in the Path - lineTo()Draw the Path - stroke()",
          "Example",
          "This reference covers all Properties and Methods of the getContext(\"2d\") Object,\nused to draw text, lines, boxes, circles, pictures, and more on the canvas.",
          "There are only 3 methods to draw directly on the canvas:",
          "The canvas object also supports the standardpropertiesandevents.",
          "Canvas tutorial:Canvas Tutorial",
          "HTML tutorial:HTML5 Canvas",
          "HTML reference:HTML <canvas> tag",
          "The<canvas>element is an HTML5 standard (2014).",
          "Canvas APIis supported in all modern browsers:"
        ],
        "lists": [
          [
            "Begin a Path - beginPath()",
            "Move to a Point - moveTo()",
            "Draw in the Path - lineTo()",
            "Draw the Path - stroke()"
          ]
        ],
        "examples": [
          "<canvas id=\"myCanvas\" width=\"300\" height=\"150\"></canvas>",
          "const myCanvas = document.getElementById(\"myCanvas\");",
          "const ctx = myCanvas.getContext(\"2d\");",
          "const myCanvas = document.getElementById(\"myCanvas\");const ctx = myCanvas.getContext(\"2d\");ctx.fillRect(20, 20, 150, 100);",
          "const myCanvas = document.getElementById(\"myCanvas\");const ctx = myCanvas.getContext(\"2d\");ctx.fillStyle = \"red\";ctx.fillRect(20, 20, 150, 100);",
          "const myCanvas = document.createElement(\"canvas\");document.body.appendChild(myCanvas);const ctx = myCanvas.getContext(\"2d\");ctx.fillStyle = \"red\";ctx.fillRect(20, 20, 150, 100);",
          "const canvas = document.getElementById(\"myCanvas\");const ctx = canvas.getContext(\"2d\");ctx.beginPath();ctx.moveTo(20, 20);ctx.lineTo(20, 100);ctx.lineTo(70, 100);ctx.stroke();"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_caption.asp",
    "cours": {
      "titre": "HTML DOMCaptionObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_caption.asp",
      "contenus": {
        "paragraphs": [
          "The Caption object represents an HTML <caption> element.",
          "You can access a <caption> element by using getElementById():",
          "Try it Yourself »",
          "You can create a <caption> element by using the document.createElement() method:",
          "Tip:You can also create a <caption> element by using thecreateCaptionmethod of the Table \nobject.",
          "The Caption object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Tables",
          "HTML reference:HTML <caption> tag",
          "JavaScript reference:HTML DOM Table Object"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myCaption\");",
          "var x = document.createElement(\"CAPTION\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_cite.asp",
    "cours": {
      "titre": "HTML DOMCiteObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_cite.asp",
      "contenus": {
        "paragraphs": [
          "The Cite object represents an HTML <cite> element.",
          "You can access a <cite> element by using getElementById():",
          "You can create a <cite> element by using the document.createElement() method:",
          "The Cite object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <cite> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myCite\");",
          "var x = document.createElement(\"CITE\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_code.asp",
    "cours": {
      "titre": "HTML DOMCodeObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_code.asp",
      "contenus": {
        "paragraphs": [
          "The Code object represents an HTML <code> element.",
          "You can access a <code> element by using getElementById():",
          "You can create a <code> element by using the document.createElement() method:",
          "The Code object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Text Formatting Elements",
          "HTML reference:HTML <code> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myCode\");",
          "var x = document.createElement(\"CODE\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_col.asp",
    "cours": {
      "titre": "HTML DOMColumnObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_col.asp",
      "contenus": {
        "paragraphs": [
          "The Column object represents an HTML <col> element.",
          "You can access a <col> element by using getElementById():",
          "You can create a <col> element by using the document.createElement() method:",
          "The Column object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML tables",
          "HTML reference:HTML <col> tag",
          "JavaScript reference:HTML DOM Columngroup Object"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myCol\");",
          "var x = document.createElement(\"COL\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_colgroup.asp",
    "cours": {
      "titre": "HTML DOMColumnGroupObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_colgroup.asp",
      "contenus": {
        "paragraphs": [
          "The ColumnGroup object represents an HTML <colgroup> element.",
          "You can access a <colgroup> element by using getElementById():",
          "The ColumnGroup object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML tables",
          "HTML reference:HTML <colgroup> tag",
          "JavaScript reference:HTML DOM Column Object"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myColgroup\");",
          "var x = document.createElement(\"COLGROUP\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_datalist.asp",
    "cours": {
      "titre": "HTML DOMDatalistObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_datalist.asp",
      "contenus": {
        "paragraphs": [
          "The Datalist object represents an HTML <datalist> element.",
          "Note:The <datalist> element is not \nsupported in Internet Explorer 11 (and earlier versions).",
          "You can access a <datalist> element by using getElementById():",
          "You can create a <datalist> element by using the document.createElement() method:",
          "The Datalist object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <datalist> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myDatalist\");",
          "var x = document.createElement(\"DATALIST\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_dd.asp",
    "cours": {
      "titre": "HTML DOMDDObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_dd.asp",
      "contenus": {
        "paragraphs": [
          "The DD object represents an HTML <dd> element.",
          "You can access a <dd> element by using getElementById():",
          "You can create a <dd> element by using the document.createElement() method:",
          "The DD object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <dd> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myDD\");",
          "var x = document.createElement(\"DD\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_del.asp",
    "cours": {
      "titre": "HTML DOMDelObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_del.asp",
      "contenus": {
        "paragraphs": [
          "The Del object represents an HTML <del> element.",
          "You can access a <del> element by using getElementById():",
          "You can create a <del> element by using the document.createElement() method:",
          "The Del object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Text Formatting",
          "HTML reference:HTML <del> tag",
          "JavaScript reference:HTML DOM ins Object"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myDel\");",
          "var x = document.createElement(\"DEL\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_details.asp",
    "cours": {
      "titre": "HTML DOMDetailsObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_details.asp",
      "contenus": {
        "paragraphs": [
          "The Details object represents an HTML <details> element.",
          "Note:The <details> element is not \nsupported in Internet Explorer.",
          "You can access a <details> element by using getElementById():",
          "You can create a <details> element by using the document.createElement() method:",
          "The Details object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <details> tag",
          "HTML reference:HTML <summary> tag",
          "JavaScript reference:HTML DOM Details Object"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myDetails\");",
          "var x = document.createElement(\"DETAILS\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_dfn.asp",
    "cours": {
      "titre": "HTML DOMDFNObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_dfn.asp",
      "contenus": {
        "paragraphs": [
          "The DFN object represents an HTML <dfn> element.",
          "You can access a <dfn> element by using getElementById():",
          "You can create a <dfn> element by using the document.createElement() method:",
          "The DFN object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <dfn> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myDFN\");",
          "var x = document.createElement(\"DFN\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_dialog.asp",
    "cours": {
      "titre": "HTML DOMDialogObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_dialog.asp",
      "contenus": {
        "paragraphs": [
          "The Dialog object represents an HTML <dialog> element.",
          "You can access a <dialog> element by using getElementById():",
          "You can create a <dialog> element by using the document.createElement() method:",
          "The Dialog object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <dialog> tag"
        ],
        "lists": [],
        "examples": [
          "const element = document.getElementById(\"myDialog\");element.open = true;",
          "const dialog = document.createElement(\"DIALOG\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_div.asp",
    "cours": {
      "titre": "HTML DOMDivObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_div.asp",
      "contenus": {
        "paragraphs": [
          "The Div object represents an HTML <div> element.",
          "You can access a <div> element by using getElementById():",
          "You can create a <div> element by using the document.createElement() method:",
          "The Div object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Blocks",
          "HTML reference:HTML <div> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myDIV\");",
          "var x = document.createElement(\"DIV\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_dl.asp",
    "cours": {
      "titre": "HTML DOMDListObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_dl.asp",
      "contenus": {
        "paragraphs": [
          "The DList object represents an HTML <dl> element.",
          "You can access a <dl> element by using getElementById():",
          "You can create a <dl> element by using the document.createElement() method:",
          "The DList object supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Lists",
          "HTML reference:HTML <dl> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myDL\");",
          "var x = document.createElement(\"DL\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_dt.asp",
    "cours": {
      "titre": "HTML DOMDTObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_dt.asp",
      "contenus": {
        "paragraphs": [
          "The DT object represents an HTML <dt> element.",
          "You can access a <dt> element by using getElementById():",
          "You can create a <dt> element by using the document.createElement() method:",
          "The DT object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <dt> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myDT\");",
          "var x = document.createElement(\"DT\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_em.asp",
    "cours": {
      "titre": "HTML DOMEmphasizedObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_em.asp",
      "contenus": {
        "paragraphs": [
          "The Emphasized object represents an HTML <em> element.",
          "You can access an <em> element by using getElementById():",
          "You can create an <em> element by using the document.createElement() method:",
          "The Emphasized object supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Text Formatting Elements",
          "HTML reference:HTML <em> tag",
          "JavaScript reference:HTML DOM Italic Object"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myEm\");",
          "var x = document.createElement(\"EM\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_embed.asp",
    "cours": {
      "titre": "HTML DOMEmbedObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_embed.asp",
      "contenus": {
        "paragraphs": [
          "The Embed object represents an HTML <embed> element.",
          "You can access an <embed> element by using getElementById():",
          "You can create an <embed> element by using the document.createElement() method:",
          "The Embed object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Plug-ins",
          "HTML reference:HTML <embed> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myEmbed\");",
          "var x = document.createElement(\"EMBED\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_fieldset.asp",
    "cours": {
      "titre": "HTML DOMFieldsetObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_fieldset.asp",
      "contenus": {
        "paragraphs": [
          "The Fieldset object represents an HTML <fieldset> element.",
          "You can access a <fieldset> element by using getElementById():",
          "Tip:You can also access a Fieldset object by searching through theelementscollection of a form.",
          "You can create a <fieldset> element by using the document.createElement() method:",
          "The Fieldset object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <fieldset> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myFieldset\");",
          "var x = document.createElement(\"FIELDSET\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_figcaption.asp",
    "cours": {
      "titre": "HTML DOMFigcaptionObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_figcaption.asp",
      "contenus": {
        "paragraphs": [
          "The Figcaption object represents an HTML <figcaption> element.",
          "You can access a <figcaption> element by using getElementById():",
          "You can create a <figcaption> element by using the document.createElement() method:",
          "The Figcaption object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <figcaption> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myFigCap\");",
          "var x = document.createElement(\"FIGCAPTION\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_figure.asp",
    "cours": {
      "titre": "HTML DOMFigureObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_figure.asp",
      "contenus": {
        "paragraphs": [
          "The Figure object represents an HTML <figure> element.",
          "You can access a <figure> element by using getElementById():",
          "You can create a <figure> element by using the document.createElement() method:",
          "The Figure object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <figure> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myFigure\");",
          "var x = document.createElement(\"FIGURE\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_footer.asp",
    "cours": {
      "titre": "HTML DOMFooterObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_footer.asp",
      "contenus": {
        "paragraphs": [
          "The Footer object represents an HTML <footer> element.",
          "You can access a <footer> element by using getElementById():",
          "You can create a <footer> element by using the document.createElement() method:",
          "The Footer object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML5 Semantic Elements",
          "HTML reference:HTML <footer> tag",
          "JavaScript reference:HTML DOM Header Object"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myFooter\");",
          "var x = document.createElement(\"FOOTER\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_form.asp",
    "cours": {
      "titre": "HTML DOMFormObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_form.asp",
      "contenus": {
        "paragraphs": [
          "The Form object represents an HTML <form> element.",
          "You can access a <form> element by using getElementById():",
          "Tip:You can also access a <form> element by using theformscollection.",
          "You can create a <form> element by using the document.createElement() method:",
          "The Form object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "JavaScript tutorial:JS Forms/Validation",
          "HTML reference:HTML <form> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myForm\");",
          "var x = document.createElement(\"FORM\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_head.asp",
    "cours": {
      "titre": "HTML DOMHeadObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_head.asp",
      "contenus": {
        "paragraphs": [
          "The Head object represents an HTML <head> element.",
          "You can access a <head> element by using getElementsByTagName():",
          "You can create a <head> element by using the document.createElement() method:",
          "The Head object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Head",
          "HTML reference:HTML <head> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementsByTagName(\"HEAD\")[0];",
          "var x = document.createElement(\"HEAD\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_header.asp",
    "cours": {
      "titre": "HTML DOMHeaderObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_header.asp",
      "contenus": {
        "paragraphs": [
          "The Header object represents an HTML <header> element.",
          "You can access a <header> element by using getElementById():",
          "You can create a <header> element by using the document.createElement() method:",
          "The Header object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML5 Semantic Elements",
          "HTML reference:HTML <header> tag",
          "JavaScript reference:HTML DOM Footer Object"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myHeader\");",
          "var x = document.createElement(\"HEADER\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_heading.asp",
    "cours": {
      "titre": "HTML DOMHeadingObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_heading.asp",
      "contenus": {
        "paragraphs": [
          "The Heading object represents an HTML heading element: <h1> to <h6>.",
          "You can access a heading element by using getElementById():",
          "You can create a heading element by using the document.createElement() method:",
          "The Heading object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Headings",
          "HTML reference:HTML <h1> to <h6> Tags"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myHeading\");",
          "var x = document.createElement(\"H1\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_hr.asp",
    "cours": {
      "titre": "HTML DOMHRObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_hr.asp",
      "contenus": {
        "paragraphs": [
          "The HR object represents an HTML <hr> element.",
          "You can access a <hr> element by using getElementById():",
          "You can create a <hr> element by using the document.createElement() method:",
          "The HR object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <hr> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myHR\");",
          "var x = document.createElement(\"HR\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_html.asp",
    "cours": {
      "titre": "HTML DOMHTMLObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_html.asp",
      "contenus": {
        "paragraphs": [
          "The HTML object represents an HTML <html> element.",
          "You can access the <html> element by using getElementsByTagName():",
          "Tip:You can also access the <html> element by using thedocument.documentElementproperty.",
          "The HTML object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Introduction",
          "HTML reference:HTML <html> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementsByTagName(\"HTML\")[0];"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_i.asp",
    "cours": {
      "titre": "HTML DOMItalicObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_i.asp",
      "contenus": {
        "paragraphs": [
          "The Italic object represents an HTML <i> element.",
          "You can access an <i> element by using getElementById():",
          "You can create an <i> element by using the document.createElement() method:",
          "The Italic object supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Text Formatting Elements",
          "HTML reference:HTML <i> tag",
          "JavaScript reference:HTML DOM Emphasized Object"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myItalic\");",
          "var x = document.createElement(\"I\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_frame.asp",
    "cours": {
      "titre": "HTML DOMIFrameObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_frame.asp",
      "contenus": {
        "paragraphs": [
          "The IFrame object represents an HTML <iframe> element.",
          "You can access an <iframe> element by using getElementById():",
          "Tip:You can also access an <iframe> element by using thewindow.framesproperty.",
          "You can create an <iframe> element by using the document.createElement() method:",
          "The IFrame object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <iframe> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myFrame\");",
          "var x = document.createElement(\"IFRAME\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_image.asp",
    "cours": {
      "titre": "HTML DOMImageObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_image.asp",
      "contenus": {
        "paragraphs": [
          "The Image object represents an HTML <img> element.",
          "You can access an <img> element by using getElementById():",
          "Tip:You can also access an <img> element by using theimagescollection.",
          "You can create an <img> element by using the document.createElement() method:",
          "The Image object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Images",
          "HTML reference:HTML <img> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myImg\");",
          "var x = document.createElement(\"IMG\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_ins.asp",
    "cours": {
      "titre": "HTML DOMInsObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_ins.asp",
      "contenus": {
        "paragraphs": [
          "The Ins object represents an HTML <ins> element.",
          "You can access an <ins> element by using getElementById():",
          "You can create an <ins> element by using the document.createElement() method:",
          "The Ins object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Text Formatting",
          "HTML reference:HTML <ins> tag",
          "JavaScript reference:HTML DOM del Object"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myIns\");",
          "var x = document.createElement(\"INS\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_button.asp",
    "cours": {
      "titre": "HTML DOMInput ButtonObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_button.asp",
      "contenus": {
        "paragraphs": [
          "The Input Button object represents an HTML <input> element with \ntype=\"button\".",
          "You can access an <input> element with type=\"button\" by using getElementById():",
          "Tip:You can also access <input type=\"button\"> by searching through theelementscollection of a form.",
          "You can create an <input> element with type=\"button\" by using the document.createElement() method:",
          "The Input Button object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <input> tag",
          "HTML reference:HTML <input> type attribute"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myBtn\");",
          "var x = document.createElement(\"INPUT\");x.setAttribute(\"type\", \"button\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_checkbox.asp",
    "cours": {
      "titre": "HTML DOMInput CheckboxObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_checkbox.asp",
      "contenus": {
        "paragraphs": [
          "The Input Checkbox object represents an HTML <input> element with \ntype=\"checkbox\".",
          "You can access an <input> element with type=\"checkbox\" by using getElementById():",
          "Tip:You can also access <input type=\"checkbox\"> by searching through theelementscollection of a form.",
          "You can create an <input> element with type=\"checkbox\" by using the document.createElement() method:",
          "The Input Checkbox object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <input> tag",
          "HTML reference:HTML <input> type attribute"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myCheck\");",
          "var x = document.createElement(\"INPUT\");x.setAttribute(\"type\", \"checkbox\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_color.asp",
    "cours": {
      "titre": "HTML DOMInput ColorObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_color.asp",
      "contenus": {
        "paragraphs": [
          "The Input Color object represents an HTML <input> element with type=\"color\".",
          "Note:<input type=\"color\"> \nis not supported in \nIE 11 and earlier versions, or in Safari 9.1 and earlier versions.",
          "You can access an <input> element with type=\"color\" by using getElementById():",
          "Tip:You can also access <input type=\"color\"> by searching through theelementscollection of a form.",
          "You can create an <input> element with type=\"color\" by using the document.createElement() method:",
          "The Input Color object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <input> tag",
          "HTML reference:HTML <input> type attribute"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myColor\");",
          "var x = document.createElement(\"INPUT\");x.setAttribute(\"type\", \"color\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_date.asp",
    "cours": {
      "titre": "HTML DOMInput DateObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_date.asp",
      "contenus": {
        "paragraphs": [
          "The Input Date object represents an HTML <input> element with type=\"date\".",
          "Note:<input type=\"date\"> \ndoes not show as a proper date field in IE11, and earlier.",
          "You can access an <input> element with type=\"date\" by using getElementById():",
          "Tip:You can also access <input type=\"date\"> by searching through theelementscollection of a form.",
          "You can create an <input> element with type=\"date\" by using the document.createElement() method:",
          "The Input Date object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <input> tag",
          "HTML reference:HTML <input> type attribute"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myDate\");",
          "var x = document.createElement(\"INPUT\");x.setAttribute(\"type\", \"date\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_datetime.asp",
    "cours": {
      "titre": "HTML DOMInput DatetimeObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_datetime.asp",
      "contenus": {
        "paragraphs": [
          "The Input Datetime object represents an HTML <input> element with type=\"datetime\".",
          "You can access an <input> element with type=\"datetime\" by using getElementById():",
          "Tip:You can also access <input type=\"datetime\"> by searching through theelementscollection of a form.",
          "You can create an <input> element with type=\"datetime\" by using the document.createElement() method:",
          "The Input Datetime object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <input> tag",
          "HTML reference:HTML <input> type attribute"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myDatetime\");",
          "var x = document.createElement(\"INPUT\");x.setAttribute(\"type\", \"datetime\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_datetime-local.asp",
    "cours": {
      "titre": "HTML DOMInput DatetimeLocalObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_datetime-local.asp",
      "contenus": {
        "paragraphs": [
          "The Input DatetimeLocal object represents an HTML <input> element with \ntype=\"datetime-local\".",
          "You can access an <input> element with type=\"datetime-local\" by using getElementById():",
          "Tip:You can also access <input type=\"datetime-local\"> by searching through theelementscollection of a form.",
          "You can create an <input> element with type=\"datetime-local\" by using the document.createElement() method:",
          "The Input DatetimeLocal object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <input> tag",
          "HTML reference:HTML <input> type attribute"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myLocalDate\");",
          "var x = document.createElement(\"INPUT\");x.setAttribute(\"type\", \"datetime-local\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_email.asp",
    "cours": {
      "titre": "HTML DOMInput EmailObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_email.asp",
      "contenus": {
        "paragraphs": [
          "The Input Email object represents an HTML <input> element with type=\"email\".",
          "You can access an <input> element with type=\"email\" by using getElementById():",
          "Tip:You can also access <input type=\"email\"> by searching through theelementscollection of a form.",
          "You can create an <input> element with type=\"email\" by using the document.createElement() method:",
          "The Input Email object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <input> tag",
          "HTML reference:HTML <input> type attribute"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myEmail\");",
          "var x = document.createElement(\"INPUT\");x.setAttribute(\"type\", \"email\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_fileupload.asp",
    "cours": {
      "titre": "HTML DOMInput FileUploadObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_fileupload.asp",
      "contenus": {
        "paragraphs": [
          "The Input FileUpload object represents an HTML <input> element with \ntype=\"file\".",
          "You can access an <input> element with type=\"file\" by using getElementById():",
          "Tip:You can also access <input type=\"file\"> by searching through theelementscollection of a form.",
          "You can create an <input> element with type=\"file\" by using the document.createElement() method:",
          "The Input FileUpload object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <input> tag",
          "HTML reference:HTML <input> type attribute"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myFile\");",
          "var x = document.createElement(\"INPUT\");x.setAttribute(\"type\", \"file\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_hidden.asp",
    "cours": {
      "titre": "HTML DOMInput HiddenObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_hidden.asp",
      "contenus": {
        "paragraphs": [
          "The Input Hidden object represents an HTML <input> element with \ntype=\"hidden\".",
          "You can access an <input> element with type=\"hidden\" by using getElementById():",
          "Tip:You can also access <input type=\"hidden\"> by searching through theelementscollection of a form.",
          "You can create an <input> element with type=\"hidden\" by using the document.createElement() method:",
          "The Input Hidden object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <input> tag",
          "HTML reference:HTML <input> type attribute"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myInput\");",
          "var x = document.createElement(\"INPUT\");x.setAttribute(\"type\", \"hidden\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_input_image.asp",
    "cours": {
      "titre": "HTML DOMInput ImageObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_input_image.asp",
      "contenus": {
        "paragraphs": [
          "The Input Image object represents an HTML <input> element with \ntype=\"image\".",
          "You can access an <input> element with type=\"image\" by using getElementById():",
          "Tip:You can also access <input type=\"image\"> by searching through theelementscollection of a form.",
          "You can create an <input> element with type=\"image\" by using the document.createElement() method:",
          "The Input Image object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <input> tag",
          "HTML reference:HTML <input> type attribute"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myImage\");",
          "var x = document.createElement(\"INPUT\");x.setAttribute(\"type\", \"image\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_month.asp",
    "cours": {
      "titre": "HTML DOMInput MonthObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_month.asp",
      "contenus": {
        "paragraphs": [
          "The Input Month object represents an HTML <input> element with type=\"month\".",
          "Note:<input \ntype=\"month\"> does not show as a proper month/year field in IE11 or in Firefox.",
          "You can access an <input> element with type=\"month\" by using getElementById():",
          "Tip:You can also access <input type=\"month\"> by searching through theelementscollection of a form.",
          "You can create an <input> element with type=\"month\" by using the document.createElement() method:",
          "The Input Month object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <input> tag",
          "HTML reference:HTML <input> type attribute"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myMonth\");",
          "var x = document.createElement(\"INPUT\");x.setAttribute(\"type\", \"month\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_number.asp",
    "cours": {
      "titre": "HTML DOMInput NumberObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_number.asp",
      "contenus": {
        "paragraphs": [
          "The Input Number object represents an HTML <input> element with \ntype=\"number\".",
          "You can access an <input> element with type=\"number\" by using getElementById():",
          "Tip:You can also access <input type=\"number\"> by searching through theelementscollection of a form.",
          "You can create an <input> element with type=\"number\" by using the document.createElement() method:",
          "The Input Number object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <input> tag",
          "HTML reference:HTML <input> type attribute"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myNumber\");",
          "var x = document.createElement(\"INPUT\");x.setAttribute(\"type\", \"number\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_password.asp",
    "cours": {
      "titre": "HTML DOMInput PasswordObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_password.asp",
      "contenus": {
        "paragraphs": [
          "The Input Password object represents an HTML <input> element with \ntype=\"password\".",
          "You can access an <input> element with type=\"password\" by using getElementById():",
          "Tip:You can also access <input type=\"password\"> by searching through theelementscollection of a form.",
          "You can create an <input> element with type=\"password\" by using the document.createElement() method:",
          "The Input Password object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <input> tag",
          "HTML reference:HTML <input> type attribute"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myPsw\");",
          "var x = document.createElement(\"INPUT\");x.setAttribute(\"type\", \"password\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_radio.asp",
    "cours": {
      "titre": "HTML DOMInput RadioObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_radio.asp",
      "contenus": {
        "paragraphs": [
          "The Input Radio object represents an HTML <input> element with \ntype=\"radio\".",
          "You can access an <input> element with type=\"radio\" by using getElementById():",
          "Tip:You can also access <input type=\"radio\"> by searching through theelementscollection of a form.",
          "You can create an <input> element with type=\"radio\" by using the document.createElement() method:",
          "The Input Radio object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <input> tag",
          "HTML reference:HTML <input> type attribute"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myRadio\");",
          "var x = document.createElement(\"INPUT\");x.setAttribute(\"type\", \"radio\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_range.asp",
    "cours": {
      "titre": "HTML DOMInput RangeObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_range.asp",
      "contenus": {
        "paragraphs": [
          "The Input Range object represents an HTML <input> element with \ntype=\"range\".",
          "You can access an <input> element with type=\"range\" by using getElementById():",
          "Tip:You can also access <input type=\"range\"> by searching through theelementscollection of a form.",
          "You can create an <input> element with type=\"range\" by using the document.createElement() method:",
          "The Input Range object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <input> tag",
          "HTML reference:HTML <input> type attribute"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myRange\");",
          "var x = document.createElement(\"INPUT\");x.setAttribute(\"type\", \"range\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_reset.asp",
    "cours": {
      "titre": "HTML DOMInput ResetObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_reset.asp",
      "contenus": {
        "paragraphs": [
          "The Input Reset object represents an HTML <input> element with \ntype=\"reset\".",
          "You can access an <input> element with type=\"reset\" by using getElementById():",
          "Tip:You can also access <input type=\"reset\"> by searching through theelementscollection of a form.",
          "You can create an <input> element with type=\"reset\" by using the document.createElement() method:",
          "The Input Reset object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <input> tag",
          "HTML reference:HTML <input> type attribute"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myReset\");",
          "var x = document.createElement(\"INPUT\");x.setAttribute(\"type\", \"reset\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_search.asp",
    "cours": {
      "titre": "HTML DOMInput SearchObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_search.asp",
      "contenus": {
        "paragraphs": [
          "The Input Search object represents an HTML <input> element with \ntype=\"search\".",
          "You can access an <input> element with type=\"search\" by using getElementById():",
          "Tip:You can also access <input type=\"search\"> by searching through theelementscollection of a form.",
          "You can create an <input> element with type=\"search\" by using the document.createElement() method:",
          "The Input Search object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <input> tag",
          "HTML reference:HTML <input> type attribute"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"mySearch\");",
          "var x = document.createElement(\"INPUT\");x.setAttribute(\"type\", \"search\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_submit.asp",
    "cours": {
      "titre": "HTML DOMInput SubmitObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_submit.asp",
      "contenus": {
        "paragraphs": [
          "The Input Submit object represents an HTML <input> element with \ntype=\"submit\".",
          "You can access an <input> element with type=\"submit\" by using getElementById():",
          "Tip:You can also access <input type=\"submit\"> by searching through theelementscollection of a form.",
          "You can create an <input> element with type=\"submit\" by using the document.createElement() method:",
          "The Input Submit object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <input> tag",
          "HTML reference:HTML <input> type attribute"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"mySubmit\");",
          "var x = document.createElement(\"INPUT\");x.setAttribute(\"type\", \"submit\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_text.asp",
    "cours": {
      "titre": "HTML DOMInput TextObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_text.asp",
      "contenus": {
        "paragraphs": [
          "The Input Text object represents an HTML <input> element with \ntype=\"text\".",
          "You can access an <input> element with type=\"text\" by using getElementById():",
          "Tip:You can also access <input type=\"text\"> by searching through theelementscollection of a form.",
          "You can create an <input> element with type=\"text\" by using the document.createElement() method:",
          "The Input Text object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <input> tag",
          "HTML reference:HTML <input> type attribute"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myText\");",
          "var x = document.createElement(\"INPUT\");x.setAttribute(\"type\", \"text\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_input_time.asp",
    "cours": {
      "titre": "HTML DOMInput TimeObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_input_time.asp",
      "contenus": {
        "paragraphs": [
          "The Input Time object represents an HTML <input> element with type=\"time\".",
          "Note:<input type=\"time\"> \ndoes not show as a proper time field in IE11, and earlier.",
          "You can access an <input> element with type=\"time\" by using getElementById():",
          "Tip:You can also access <input type=\"time\"> by searching through theelementscollection of a form.",
          "You can create an <input> element with type=\"time\" by using the document.createElement() method:",
          "The Input Time object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <input> tag",
          "HTML reference:HTML <input> type attribute"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myTime\");",
          "var x = document.createElement(\"INPUT\");x.setAttribute(\"type\", \"time\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_url.asp",
    "cours": {
      "titre": "HTML DOMInput URLObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_url.asp",
      "contenus": {
        "paragraphs": [
          "The Input URL object represents an HTML <input> element with type=\"url\".",
          "You can access an <input> element with type=\"url\" by using getElementById():",
          "Tip:You can also access <input type=\"url\"> by searching through theelementscollection of a form.",
          "You can create an <input> element with type=\"url\" by using the document.createElement() method:",
          "The Input URL object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <input> tag",
          "HTML reference:HTML <input> type attribute"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myUrl\");",
          "var x = document.createElement(\"INPUT\");x.setAttribute(\"type\", \"url\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_week.asp",
    "cours": {
      "titre": "HTML DOMInput WeekObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_week.asp",
      "contenus": {
        "paragraphs": [
          "The Input Week object represents an HTML <input> element with \ntype=\"week\".",
          "Note:<input type=\"week\"> \nis not \nsupported in IE11, Firefox, or Safari.",
          "You can access an <input> element with type=\"week\" by using getElementById():",
          "Tip:You can also access <input type=\"week\"> by searching through theelementscollection of a form.",
          "You can create an <input> element with type=\"week\" by using the document.createElement() method:",
          "The Input Week object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <input> tag",
          "HTML reference:HTML <input> type attribute"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myWeek\");",
          "var x = document.createElement(\"INPUT\");x.setAttribute(\"type\", \"week\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_kbd.asp",
    "cours": {
      "titre": "HTML DOMKbdObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_kbd.asp",
      "contenus": {
        "paragraphs": [
          "The Kbd object represents an HTML <kbd> element.",
          "You can access a <kbd> element by using getElementById():",
          "You can create a <kbd> element by using the document.createElement() method:",
          "The Kbd object supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Text Formatting Elements",
          "HTML reference:HTML <kbd> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myKbd\");",
          "var x = document.createElement(\"KBD\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_label.asp",
    "cours": {
      "titre": "HTML DOMLabelObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_label.asp",
      "contenus": {
        "paragraphs": [
          "The Label object represents an HTML <label> element.",
          "You can access a <label> element by using getElementById():",
          "You can create a <label> element by using the document.createElement() method:",
          "The Label object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <label> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myLabel\");",
          "var x = document.createElement(\"LABEL\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_legend.asp",
    "cours": {
      "titre": "HTML DOMLegendObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_legend.asp",
      "contenus": {
        "paragraphs": [
          "The Legend object represents an HTML <legend> element.",
          "You can access a <legend> element by using getElementById():",
          "You can create a <legend> element by using the document.createElement() method:",
          "The Legend object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <fieldset> tag",
          "HTML reference:HTML <legend> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myLegend\");",
          "var x = document.createElement(\"LEGEND\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_li.asp",
    "cours": {
      "titre": "HTML DOMLiObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_li.asp",
      "contenus": {
        "paragraphs": [
          "The Li object represents an HTML <li> element.",
          "You can access a <li> element by using getElementById():",
          "You can create a <li> element by using the document.createElement() method:",
          "The Li object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <li> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myLi\");",
          "var x = document.createElement(\"LI\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_link.asp",
    "cours": {
      "titre": "HTML DOMLinkObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_link.asp",
      "contenus": {
        "paragraphs": [
          "The Link object represents an HTML <link> element.",
          "You can access a <link> element by using getElementById():",
          "You can create a <link> element by using the document.createElement() method:",
          "The Link object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <link> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myLink\");",
          "var x = document.createElement(\"LINK\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_map.asp",
    "cours": {
      "titre": "HTML DOMMapObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_map.asp",
      "contenus": {
        "paragraphs": [
          "The Map object represents an HTML <map> element.",
          "You can access a <map> element by using getElementById():",
          "You can create a <map> element by using the document.createElement() method:",
          "The Map object also supports the standardpropertiesandevents.",
          "HTML DOM reference:Area object",
          "HTML reference:HTML <map> tag",
          "HTML reference:HTML <area> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myMap\");",
          "var x = document.createElement(\"MAP\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_mark.asp",
    "cours": {
      "titre": "HTML DOMMarkObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_mark.asp",
      "contenus": {
        "paragraphs": [
          "The Mark object represents an HTML <mark> element.",
          "You can access a <mark> element by using getElementById():",
          "You can create a <mark> element by using the document.createElement() method:",
          "The Mark object supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Text Formatting Elements",
          "HTML reference:HTML <mark> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myMark\");",
          "var x = document.createElement(\"MARK\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_menu.asp",
    "cours": {
      "titre": "HTML DOMMenuObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_menu.asp",
      "contenus": {
        "paragraphs": [
          "The Menu object represents an HTML <menu> element.",
          "Note:The <menu> element is currently \nNOT supported in any of the major browsers.",
          "You can access a <menu> element by using getElementById():",
          "You can create a <menu> element by using the document.createElement() method:",
          "The Menu object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <menu> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myMenu\");",
          "var x = document.createElement(\"MENU\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_menuitem.asp",
    "cours": {
      "titre": "HTML DOMMenuItemObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_menuitem.asp",
      "contenus": {
        "paragraphs": [
          "The MenuItem object represents an HTML <menuitem> element.",
          "Note:The <menuitem> element is currently \nONLY supported in Firefox.",
          "You can access a <menuitem> element by using getElementById():",
          "You can create a <menuitem> element by using the document.createElement() method:",
          "The MenuItem object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <menuitem> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myMenuItem\");",
          "var x = document.createElement(\"MENUITEM\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_meta.asp",
    "cours": {
      "titre": "HTML DOMMetaObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_meta.asp",
      "contenus": {
        "paragraphs": [
          "The Meta object represents an HTML <meta> element.",
          "You can access a <meta> element by using getElementsByTagName():",
          "You can create a <meta> element by using the document.createElement() method:",
          "The Meta object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <meta> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementsByTagName(\"META\")[0];",
          "var x = document.createElement(\"META\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_meter.asp",
    "cours": {
      "titre": "HTML DOMMeterObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_meter.asp",
      "contenus": {
        "paragraphs": [
          "The Meter object represents an HTML <meter> element.",
          "Note:The <meter> element is not supported in Internet Explorer \n/ Edge or Safari 5 (and earlier versions).",
          "You can access a <meter> element by using getElementById():",
          "You can create a <meter> element by using the document.createElement() method:",
          "The Meter object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <meter> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myMeter\");",
          "var x = document.createElement(\"METER\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_nav.asp",
    "cours": {
      "titre": "HTML DOMNavObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_nav.asp",
      "contenus": {
        "paragraphs": [
          "The Nav object represents an HTML <nav> element.",
          "You can access a <nav> element by using getElementById():",
          "You can create a <nav> element by using the document.createElement() method:",
          "The Nav object supports the standardpropertiesandevents.",
          "HTML reference:HTML <nav> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myNav\");",
          "var x = document.createElement(\"NAV\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_object.asp",
    "cours": {
      "titre": "HTML DOMObjectObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_object.asp",
      "contenus": {
        "paragraphs": [
          "The Object object represents an HTML <object> element.",
          "You can access an <object> element by using getElementById():",
          "You can create an <object> element by using the document.createElement() method:",
          "The Object object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <object> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myObject\");",
          "var x = document.createElement(\"OBJECT\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_ol.asp",
    "cours": {
      "titre": "HTML DOMOlObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_ol.asp",
      "contenus": {
        "paragraphs": [
          "The Ol object represents an HTML <ol> element.",
          "You can access an <ol> element by using getElementById():",
          "You can create an <ol> element by using the document.createElement() method:",
          "The Ol object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <ol> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myOl\");",
          "var x = document.createElement(\"OL\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_optgroup.asp",
    "cours": {
      "titre": "HTML DOMOptionGroupObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_optgroup.asp",
      "contenus": {
        "paragraphs": [
          "The OptionGroup object represents an HTML <optgroup> element.",
          "You can access an <optgroup> element by using getElementById():",
          "You can create an <optgroup> element by using the document.createElement() method:",
          "The OptionGroup object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <optgroup> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myOptgroup\");",
          "var x = document.createElement(\"OPTGROUP\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_option.asp",
    "cours": {
      "titre": "HTML DOMOptionObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_option.asp",
      "contenus": {
        "paragraphs": [
          "The Option object represents an HTML <option> element.",
          "You can access an <option> element by using getElementById():",
          "Tip:You can also access an Option object by searching through theelementscollection of a form, or theoptionscollection of a drop-down list.",
          "You can create an <option> element by using the document.createElement() method:",
          "The Option object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <option> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myOption\");",
          "var x = document.createElement(\"OPTION\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_output.asp",
    "cours": {
      "titre": "HTML DOMOutputObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_output.asp",
      "contenus": {
        "paragraphs": [
          "The Output object represents an HTML <output> element.",
          "Note:The <output> element is not \nsupported in Internet Explorer / Edge.",
          "You can access an <output> element by using getElementById():",
          "Tip:You can also access an <output> element by searching through theelementscollection of a form.",
          "You can create an <output> element by using the document.createElement() method:",
          "The Output object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <output> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myOutput\");",
          "var x = document.createElement(\"OUTPUT\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_paragraph.asp",
    "cours": {
      "titre": "HTML DOMParagraphObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_paragraph.asp",
      "contenus": {
        "paragraphs": [
          "The Paragraph object represents an HTML <p> element.",
          "You can access a <p> element by using getElementById():",
          "You can create a <p> element by using the document.createElement() method:",
          "The Paragraph object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Paragraphs",
          "HTML reference:HTML <p> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myP\");",
          "var x = document.createElement(\"P\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_param.asp",
    "cours": {
      "titre": "HTML DOMParameterObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_param.asp",
      "contenus": {
        "paragraphs": [
          "The Parameter object represents an HTML <param> element.",
          "The <param> element is used to define parameters for plugins embedded with an \n<object> element.",
          "You can access a <param> element by using getElementById():",
          "You can create a <param> element by using the document.createElement() method:",
          "The Parameter object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Plug-ins",
          "HTML reference:HTML <param> tag",
          "HTML reference:HTML <object> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myParam\");",
          "var x = document.createElement(\"PARAM\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_pre.asp",
    "cours": {
      "titre": "HTML DOMPreObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_pre.asp",
      "contenus": {
        "paragraphs": [
          "The Pre object represents an HTML <pre> element.",
          "You can access a <pre> element by using getElementById():",
          "You can create a <pre> element by using the document.createElement() method:",
          "The Pre object also supports the standardpropertiesandevents.",
          "HTML Tutorial:HTML Text Formatting",
          "HTML Reference:HTML <pre> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myPre\");",
          "var x = document.createElement(\"PRE\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_progress.asp",
    "cours": {
      "titre": "HTML DOMProgressObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_progress.asp",
      "contenus": {
        "paragraphs": [
          "The Progress object represents an HTML <progress> element.",
          "The <progress> element represents the progress of a task.",
          "You can access a <progress> element by using getElementById():",
          "You can create a <progress> element by using the document.createElement() method:",
          "The Progress object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <progress> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myProgress\");",
          "var x = document.createElement(\"PROGRESS\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_quote.asp",
    "cours": {
      "titre": "HTML DOMQuoteObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_quote.asp",
      "contenus": {
        "paragraphs": [
          "The Quote object represents an HTML <q> element.",
          "You can access a <q> element by using getElementById():",
          "You can create a <q> element by using the document.createElement() method:",
          "The Quote object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <q> tag",
          "JavaScript reference:HTML DOM Blockquote Object"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myQuote\");",
          "var x = document.createElement(\"Q\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_s.asp",
    "cours": {
      "titre": "HTML DOMSObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_s.asp",
      "contenus": {
        "paragraphs": [
          "The S object represents an HTML <s> element.",
          "You can access a <s> element by using getElementById():",
          "You can create a <s> element by using the document.createElement() method:",
          "The S object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Text Formatting",
          "HTML reference:HTML <s> tag",
          "JavaScript reference:HTML DOM Del Object"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myS\");",
          "var x = document.createElement(\"S\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_samp.asp",
    "cours": {
      "titre": "HTML DOMSampObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_samp.asp",
      "contenus": {
        "paragraphs": [
          "The Samp object represents an HTML <samp> element.",
          "You can access a <samp> element by using getElementById():",
          "You can create a <samp> element by using the document.createElement() method:",
          "The Samp object supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Text Formatting Elements",
          "HTML reference:HTML <samp> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"mySamp\");",
          "var x = document.createElement(\"SAMP\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_script.asp",
    "cours": {
      "titre": "HTML DOMScriptObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_script.asp",
      "contenus": {
        "paragraphs": [
          "The Script object represents an HTML <script> element.",
          "You can access a <script> element by using getElementById():",
          "Tip:You can also access a <script> element by using thescriptscollection.",
          "You can create a <script> element by using the document.createElement() method:",
          "The Script object also supports the standardpropertiesandevents.",
          "HTML reference:HTML <script> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myScript\");",
          "var x = document.createElement(\"SCRIPT\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_section.asp",
    "cours": {
      "titre": "HTML DOMSectionObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_section.asp",
      "contenus": {
        "paragraphs": [
          "The Section object represents an HTML <section> element.",
          "You can access a <section> element by using getElementById():",
          "You can create a <section> element by using the document.createElement() method:",
          "The Section object supports the standardpropertiesandevents.",
          "HTML reference:HTML <section> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"mySection\");",
          "var x = document.createElement(\"SECTION\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_select.asp",
    "cours": {
      "titre": "HTML DOMSelectObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_select.asp",
      "contenus": {
        "paragraphs": [
          "The Select object represents an HTML <select> element.",
          "You can access a <select> element by using getElementById():",
          "Tip:You can also access a Select object by searching through theelementscollection of a form.",
          "You can create a <select> element by using the document.createElement() method:",
          "The Select object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Forms",
          "HTML reference:HTML <select> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"mySelect\");",
          "var x = document.createElement(\"SELECT\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_small.asp",
    "cours": {
      "titre": "HTML DOMSmallObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_small.asp",
      "contenus": {
        "paragraphs": [
          "The Small object represents an HTML <small> element.",
          "You can access a <small> element by using getElementById():",
          "You can create a <small> element by using the document.createElement() method:",
          "The Small object supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Text Formatting Elements",
          "HTML reference:HTML <small> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"mySmall\");",
          "var x = document.createElement(\"SMALL\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_source.asp",
    "cours": {
      "titre": "HTML DOMSourceObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_source.asp",
      "contenus": {
        "paragraphs": [
          "The Source object represents an HTML <source> element.",
          "You can access a <source> element by using getElementById():",
          "You can create a <source> element by using the document.createElement() method:",
          "The Source object also supports the standardpropertiesandevents.",
          "HTML tutorial:HTML5 Video",
          "HTML tutorial:HTML5 Audio",
          "HTML reference:HTML <source> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"mySource\");",
          "var x = document.createElement(\"SOURCE\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_span.asp",
    "cours": {
      "titre": "HTML DOMSpanObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_span.asp",
      "contenus": {
        "paragraphs": [
          "The Span object represents an HTML <span> element.",
          "You can access a <span> element by using getElementById():",
          "You can create a <span> element by using the document.createElement() method:",
          "The Span object supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Blocks",
          "HTML reference:HTML <span> tag"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"mySpan\");",
          "var x = document.createElement(\"SPAN\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/jsref/dom_obj_strong.asp",
    "cours": {
      "titre": "HTML DOMStrongObject",
      "description": "",
      "lien": "https://www.w3schools.com/jsref/dom_obj_strong.asp",
      "contenus": {
        "paragraphs": [
          "The Strong object represents an HTML <strong> element.",
          "You can access a <strong> element by using getElementById():",
          "You can create a <strong> element by using the document.createElement() method:",
          "The Strong object supports the standardpropertiesandevents.",
          "HTML tutorial:HTML Text Formatting Elements",
          "HTML reference:HTML <strong> tag",
          "JavaScript reference:HTML DOM Bold Object"
        ],
        "lists": [],
        "examples": [
          "var x = document.getElementById(\"myStrong\");",
          "var x = document.createElement(\"STRONG\");"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  }
]