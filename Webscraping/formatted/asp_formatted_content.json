[
  {
    "url": "https://www.w3schools.com/asp/default.asp",
    "cours": {
      "titre": "ASP and ASP.NET Tutorials",
      "description": "ASP stands forActiveServerPagesASP is a development framework for building web pages.",
      "lien": "https://www.w3schools.com/asp/default.asp",
      "contenus": {
        "paragraphs": [
          "ASP stands forActiveServerPages",
          "ASP is a development framework for building web pages.",
          "ASP supports many different development models:",
          "ASP and ASP.NET are server side technologies.",
          "Both technologies enable computer code to be executed by an Internet server.",
          "When a browser requests an ASP or ASP.NET file, the ASP engine reads the file, executes \nany code in the file, and returns the result to the browser.",
          "ASP (aka Classic ASP) was introduced in 1998 \nas Microsoft's first server side scripting language.",
          "Classic ASP pages have the file extension.aspand are normally written in VBScript.",
          "ASP.NET was released in 2002 as a successor to Classic ASP.",
          "ASP.NET pages have the extension.aspxand are normally written in C# (C sharp).",
          "ASP.NET 4.6 is the latest official version of ASP.NET.",
          "ASP.NET 5 was expected to be an important redesign of ASP.NET.",
          "However, the development of ASP.NET 5 was stopped in favor ofASP.NET Core.",
          "ASP.NET Web Pages is an SPA application model (Single Page Application).",
          "The SPA model is quite similar to PHP and Classic ASP.",
          "ASP.NET Web Pages is being merged into the new ASP.NET Core.",
          "ASP.NET MVC is an MVC application model (Model-View-Controller).",
          "ASP.NET MVC is being merged into the new ASP.NET Core.",
          "ASP.NET MVC is not covered in this tutorial.My LearningTrack your progress with the free \"My Learning\" program here at W3Schools.Log in to your account, and start earning points!This is an optional feature. You can study at W3Schools without using My Learning.ASP.NET Web APIASP.NET API is an API application model (Application Programming Interface).ASP.NET API is being merged into the new ASP.NET Core.ASP.NET API is not covered in this tutorial.ASP.NET Web FormsASP.NET Web Forms is an event driven application model.ASP.NET Web Forms isnota part of the new ASP.NET Core.ASP.NET Web Forms isnotcovered in this tutorial.ASP.NET CoreASP.NET Core was released in 2016.ASP.NET Core merges ASP.NET MVC, ASP.NET Web API, and ASP.NET Web Pages into \none application framework.ASP.NET Core is not covered in this tutorial.❮ HomeNext ❯★+1Track your progress - it's free!Log inSign Up",
          "Track your progress with the free \"My Learning\" program here at W3Schools.",
          "Log in to your account, and start earning points!",
          "This is an optional feature. You can study at W3Schools without using My Learning.",
          "ASP.NET API is an API application model (Application Programming Interface).",
          "ASP.NET API is being merged into the new ASP.NET Core.",
          "ASP.NET API is not covered in this tutorial.",
          "ASP.NET Web Forms is an event driven application model.",
          "ASP.NET Web Forms isnota part of the new ASP.NET Core.",
          "ASP.NET Web Forms isnotcovered in this tutorial.",
          "ASP.NET Core was released in 2016.",
          "ASP.NET Core merges ASP.NET MVC, ASP.NET Web API, and ASP.NET Web Pages into \none application framework.",
          "ASP.NET Core is not covered in this tutorial."
        ],
        "lists": [
          [
            "Classic ASP",
            "ASP.NET Web Forms",
            "ASP.NET MVC",
            "ASP.NET Web Pages",
            "ASP.NET API",
            "ASP.NET Core"
          ]
        ],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/webpages_intro.asp",
    "cours": {
      "titre": "ASP.NET Web Pages- Tutorial",
      "description": "",
      "lien": "https://www.w3schools.com/asp/webpages_intro.asp",
      "contenus": {
        "paragraphs": [
          "Our \"Run Example\" tool displays the ASP.NET code and the HTML output simultaneously.",
          "Click on the \"Run Example\" button to see how it works:",
          "Web Pages is one of many programming models for creating ASP.NET web sites and \nweb applications.",
          "Web Pages provides an easy way to combine HTML, \nCSS, and server code:",
          "In addition, Web Pages applications are easily extendable with programmable helpers \nfor \ndatabases, videos, graphics, social \nnetworking and more.",
          "If you are new to ASP.NET, Web Pages is a perfect place to start.",
          "In this Web Pages tutorial you will learn how to combine HTML, CSS, JavaScript \nand server code, using server code written in VB \nor C# .",
          "You will also learn how to extend your web pages with programmable Web \nHelpers.",
          "Learn by examples!",
          "Because ASP.NET code is executed on the server, you\ncannot view the code in your browser. You will only see the output as plain HTML.",
          "At W3Schools every example displays the hidden \nASP.NET code. This\nmakes it easier for you to understand how it works.",
          "Web Pages Examples",
          "At the end of this tutorial you will find a complete set of ASP.NET references with objects, \ncomponents, properties and methods.",
          "Web Pages References"
        ],
        "lists": [
          [
            "Easy to learn, understand, and use",
            "Uses an SPA application model (Single Page Application)",
            "Similar to PHP and Classic ASP",
            "VB (Visual Basic) or C# (C sharp) scripting languages"
          ]
        ],
        "examples": [
          "<html><body><h1>Hello Web Pages</h1><p>The time is@DateTime.Now</p></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/webpages_razor.asp",
    "cours": {
      "titre": "ASP.NET Web Pages- Adding Razor Code",
      "description": "",
      "lien": "https://www.w3schools.com/asp/webpages_razor.asp",
      "contenus": {
        "paragraphs": [
          "ASP.NET Web Pages use Razor markup with C# or VB code",
          "Razor is a simplemarkup syntaxfor embedding server code \n(C# or VB) into ASP.NET web pages.",
          "The page above contains both ordinary HTML markup and Razor markup.",
          "If you want to learn more about Razor, and the C# and Visual Basic \nprogramming languages:",
          "Go to theRazor sectionof \nthis tutorial."
        ],
        "lists": [
          [
            "C# code blocks are enclosed in @{ ... }",
            "Inline expressions (variables or functions) start with @",
            "Code statements end with semicolon",
            "Variables are declared with the var keyword, or the datatype (int, string, \n  etc.)",
            "Strings are enclosed with quotation marks",
            "C# code is case sensitive",
            "C# files have the extension .cshtml"
          ],
          [
            "VB code blocks are enclosed in @Code ... End Code",
            "Inline expressions (variables or functions) start with @",
            "Variables are declared with the Dim keyword",
            "Strings are enclosed with quotation marks",
            "VB code is not case sensitive",
            "VB files have the extension .vbhtml"
          ]
        ],
        "examples": [
          "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"utf-8\" /><title>Web Pages Demo</title></head><body><h1>Hello Web Pages</h1><p>The time is@DateTime.Now</p></body></html>",
          "<!-- Single statement block -->@{ var myMessage =    \"Hello World\"; }<!-- Inline expression or variable --><p>The value of myMessage is:@myMessage</p><!--    Multi-statement block -->@{var greeting = \"Welcome to our site!\";var weekDay = DateTime.Now.DayOfWeek;var greetingMessage = greeting + \" Today is: \" + weekDay;}<p>The greeting is:@greetingMessage</p>",
          "<!-- Single statement block  -->@Code dim myMessage = \"Hello World\" End Code<!-- Inline expression or variable --><p>The value of myMessage is:@myMessage</p><!-- Multi-statement block -->@Codedim greeting = \"Welcome to our site!\"dim weekDay = DateTime.Now.DayOfWeekdim greetingMessage = greeting & \" Today is: \" & weekDayEnd Code<p>The greeting is:@greetingMessage</p>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/webpages_layout.asp",
    "cours": {
      "titre": "ASP.NET Web Pages- Page Layout",
      "description": "",
      "lien": "https://www.w3schools.com/asp/webpages_layout.asp",
      "contenus": {
        "paragraphs": [
          "With Web Pages it is easy to create a web site with a \nconsistent layout.",
          "On the Internet you will discover many web sites with a consistent look and \nfeel:",
          "With Web Pages this can be done very efficiently. You can have reusable \nblocks of content (content blocks), like headers and footers, in separate files.",
          "You can \nalso define a consistent layout for all your pages, using a layout template \n(layout file).",
          "Many websites have content that is displayed on every \npage (like headers and footers).",
          "With Web Pages you can use the@RenderPage()method to import content from separate \nfiles.",
          "Content block (from another file) can be imported anywhere in a web page, and \ncan contain text, markup, and code, just like any regular web page.",
          "Using common headers and footers as an example, this saves you a lot of work. You don't have to write the \nsame content in every page, and when you change the header or footer files, the \ncontent is \nupdated in all your pages.",
          "This is how it looks in code:",
          "In the previous section, you saw that including the same content in many \nweb pages is easy.",
          "Another approach to creating a consistent look is to use a layout page. A layout page \ncontains the structure, but not the content, of a web page. When a web page \n(content page) is linked to a layout page, it will be displayed \naccording to the layout page (template).",
          "The layout page is just like a normal web page, except from a call to the@RenderBody()method where the content page will be \nincluded.",
          "Each content page must start with aLayout directive.",
          "This is how it looks in code:",
          "With two ASP.NET tools, Content Blocks and Layout Pages, you can give your \nweb applications a consistent look.",
          "These tools also save you a lot of work, since you don't have to repeat the \nsame information on all pages. Centralizing markup, style, and code makes web \napplications much more manageable and easier to maintain.",
          "With ASP.NET, files with a name that starts with an underscore cannot be \nbrowsed from the web.",
          "If you want to prevent your content blocks or layout files from being viewed \nby your users, rename the files to:",
          "_header.cshtml",
          "_footer.cshtml",
          "_Layout.cshtml",
          "With ASP.NET, the common way to hide sensitive information (database passwords, \nemail passwords, etc.) is to keep the information in a separate file named \n\"_AppStart\"."
        ],
        "lists": [
          [
            "Every page have the same header",
            "Every page have the same footer",
            "Every page have the same style and layout"
          ]
        ],
        "examples": [
          "<html><body>@RenderPage(\"header.cshtml\")<h1>Hello Web Pages</h1><p>This is a paragraph</p>@RenderPage(\"footer.cshtml\")</body></html>",
          "<html><body><p>This is header text</p>@RenderBody()<p>&copy; 2014 W3Schools. All rights reserved.</p></body></html>",
          "@{Layout=\"Layout.cshtml\";}<h1>Welcome to W3Schools</h1><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit,sed do eiusmod tempor \nincididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis \nnostrud exercitation ullamco laborisnisi ut aliquip ex ea commodo consequat.</p>",
          "@{WebMail.SmtpServer = \"mailserver.example.com\";WebMail.EnableSsl = true;WebMail.UserName = \"username@example.com\";WebMail.Password = \"your-password\";WebMail.From = \"your-name-here@example.com\";}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/webpages_folders.asp",
    "cours": {
      "titre": "ASP.NET Web Pages- Folders",
      "description": "",
      "lien": "https://www.w3schools.com/asp/webpages_folders.asp",
      "contenus": {
        "paragraphs": [
          "This chapter is about folders and folder paths.",
          "In this chapter you will learn:",
          "Below is a typical folder structure for an ASP.NET web pages web site:",
          "The physical  \nstructure for the \"Images\" folder at the website above might look like this on a computer:",
          "C:\\Johnny\\Documents\\MyWebSites\\Demo\\Images",
          "From the example above:",
          "The virtual name of a web picture might be \"Images/pic31.jpg\".",
          "But the physical name is \"C:\\Johnny\\Documents\\MyWebSites\\Demo\\Images\\pic31.jpg\"",
          "URLs are used to access files from the web:https://www.w3schools.com/html/html5_intro.asp",
          "The URL corresponds \nto a physical file on a server: C:\\MyWebSites\\w3schools\\html\\html5_intro.asp",
          "A virtual \npath is shorthand to represent physical paths. If you use virtual paths, you can move your \npages to a different domain \n(or server) without having to update the paths.",
          "The root on a disk drive is written like C:\\, but the root on a web site is  / \n(forward slash).",
          "The virtual path of a \nweb folder is (almost) never the same as the physical folder.",
          "In your code you will, reference both the physical path and the virtual path, depending on what \nyou are coding.",
          "ASP.NET has 3 tools for working with folder paths: the ~ operator, the Server.MapPath method, \nand the Href method.",
          "To specify the virtual root in programming code, use the ~ operator.",
          "If you use the ~ operator, instead of a path, you can move your website to a different folder or \nlocation without changing any code:",
          "The Server.MapPath method converts a virtual path (/default.cshtml) to a \nphysical path that the server can understand (C:\\Johnny\\MyWebSited\\Demo\\default.cshtml).",
          "You will use this method when you need to open data \nfiles located on the server (data files can only be accessed with a full \nphysical path):",
          "You will learn more about reading from (and writing to) data files on the server in \nthe next chapter of this tutorial.",
          "The Href method converts a path used in the code to a path that the browser \ncan understand (the browser cannot understand the ~ operator).",
          "You use the Href method to create paths to resources like image files, and CSS files.",
          "You will often use this method in HTML \n<a>, <img>, and <link> elements:",
          "The Href method is a method of the WebPage Object."
        ],
        "lists": [
          [
            "About Logical and Physical folder structures",
            "About Virtual and Physical names",
            "About web URLs and Paths"
          ],
          [
            "The \"Account\" folder contains logon and security files",
            "The \"App_Data\" folder contains databases and data files",
            "The \"Images\" folder contains images",
            "The \"Scripts\" folder contains browser scripts",
            "The \"Shared\" folder contains common files (like layout and style files)"
          ]
        ],
        "examples": [
          "var myImagesFolder = \"~/images\";var myStyleSheet = \"~/styles/StyleSheet.css\";",
          "var pathName = \"~/dataFile.txt\";var fileName = Server.MapPath(pathName);",
          "@{var myStyleSheet = \"~/Shared/Site.css\";}<!-- This creates a link \nto the CSS file. --><link rel=\"stylesheet\" type=\"text/css\" href=\"@Href(myStyleSheet)\" \n/><!-- Same as : --><link rel=\"stylesheet\" type=\"text/css\" href=\"/Shared/Site.css\" \n/>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/webpages_global.asp",
    "cours": {
      "titre": "ASP.NET Web Pages- Global Pages",
      "description": "",
      "lien": "https://www.w3schools.com/asp/webpages_global.asp",
      "contenus": {
        "paragraphs": [
          "This chapter is about the global pages AppStart and PageStart.",
          "Most server side code are written inside individual web pages. For example, if a \nweb page contains an input form, the web page typically contains server code for \nreading the data.",
          "However, by creating a page named _AppStart in the root of your site, you can \nhave startup code executed before the site starts. If this page \nexists, ASP.NET runs it the first time any page in the site is requested.",
          "Typical use for _AppStart is startup code and initialization of global values \nlike counters and global names.",
          "Note 1:_AppStart should have the same file extension as your \nweb pages, like: _AppStart.cshtml.",
          "Note 2:_AppStart has an underscore prefix. Because of this, \nthe files cannot be browsed directly.",
          "Just like _AppStart runs before your site starts, you can write code that \nruns before any page in each folder.",
          "For each folder in your web, you can add a file named _PageStart.",
          "Typical use for _PageStart is setting the layout page for all pages in a \nfolder, or checking that a user is logged in before running a page.",
          "The following diagram shows how it works:",
          "",
          "When a request comes in, ASP.NET checks whether _AppStart exists. \nIf so, and this is the first request to the site, _AppStart runs.",
          "Then ASP.NET checks whether _PageStart exists. If so, _PageStart runs, before the requested page.",
          "If you include a call to RunPage() inside _PageStart you specify where you want \nthe requested page to run. If not, the _PageStart runs before the \nrequested page."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/webpages_forms.asp",
    "cours": {
      "titre": "ASP.NET Web Pages- HTML Forms",
      "description": "",
      "lien": "https://www.w3schools.com/asp/webpages_forms.asp",
      "contenus": {
        "paragraphs": [
          "A form is a section of an HTML document where you put input \ncontrols (text boxes, check boxes, radio buttons, and pull-down lists).",
          "Suppose you have 3 images in your image folder, and you want to display images dynamically \nby the users choice.",
          "This is easily done by a little Razor code.",
          "If you have an image called \"Photo1.jpg\" in your images folder on your web \nsite, you can display the image using an HTML \n<img> element like this:",
          "The example below shows how to display a selected \npicture which the user selects \nfrom a drop-down list:",
          "The server creates a variable calledimagePath.",
          "The HTML page has adrop-down list(a <select> element) namedChoice. \nIt lets the user select a friendly name (likePhoto 1), and passes a file \nname (likePhoto1.jpg) when the page is submitted to the web server.",
          "The Razor code reads the value of Choice byRequest[\"Choice\"]. If it has a value the \ncode constructs a path to the image images/Photo1.jpg, and stores it in the \nvariableimagePath.",
          "In the HTML page there is an <img>\nelement to display the image. The src attribute is set to the value of the imagePath \nvariable when the page displays.",
          "The <img> element is in an if block to \nprevent trying to display an image with no name (like the first time the page is \ndisplayed)."
        ],
        "lists": [],
        "examples": [
          "<html><body>@{if (IsPost) {string companyname = Request[\"CompanyName\"];string contactname = Request[\"ContactName\"];<p>You entered: <br />Company Name:@companyname<br />Contact Name:@contactname</p>}else{<form method=\"post\" action=\"\">Company Name:<br /><input type=\"text\" name=\"CompanyName\" value=\"\" /><br />Contact Name:<br /><input type=\"text\" name=\"ContactName\" value=\"\" /><br /><br /><input type=\"submit\" value=\"Submit\" class=\"submit\" /></form>}}</body></html>",
          "<img src=\"images/Photo1.jpg\" alt=\"Sample\" />",
          "@{var imagePath=\"\";if (Request[\"Choice\"] != null){imagePath=\"images/\" + Request[\"Choice\"];}}<!DOCTYPE html><html><body><h1>Display Images</h1><form method=\"post\" action=\"\">I want to see:<select name=\"Choice\"><option value=\"Photo1.jpg\">Photo 1</option><option value=\"Photo2.jpg\">Photo 2</option><option value=\"Photo3.jpg\">Photo 3</option></select><input type=\"submit\" value=\"Submit\" />@if (imagePath != \"\"){<p><img src=\"@imagePath\" alt=\"Sample\" /></p>}</form></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/webpages_objects.asp",
    "cours": {
      "titre": "ASP.NET Web Pages- Objects",
      "description": "",
      "lien": "https://www.w3schools.com/asp/webpages_objects.asp",
      "contenus": {
        "paragraphs": [
          "Web Pages is much often about Objects.",
          "You have already seen some Page Object methods in use:",
          "In the previous chapter you saw two Page Object properties being used (IsPost, and \nRequest):",
          "The Page property of the Page Object, provides property-like access to data shared between pages and layout \n    pages.",
          "You can use (add) your own properties to the Page property:",
          "The pages property is very helpful. For instance, it makes it possible to set \nthe page title in content files, and use it in the layout file:"
        ],
        "lists": [
          [
            "Page.Title",
            "Page.Version",
            "Page.anythingyoulike"
          ]
        ],
        "examples": [
          "@RenderPage(\"header.cshtml\")@RenderBody()",
          "If (IsPost) {if (Request[\"Choice\"] != null) {",
          "@{Layout=\"~/Shared/Layout.cshtml\";Page.Title=\"Home Page\"}<h1>Welcome to W3Schools</h1><h2>Web Site Main Ingredients</h2><p>A Home Page (Default.cshtml)</p><p>A Layout File (Layout.cshtml)</p><p>A Style Sheet (Site.css)</p>",
          "<!DOCTYPE html><html><head><title>@Page.Title</title></head><body>@RenderBody()</body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/webpages_files.asp",
    "cours": {
      "titre": "ASP.NET Web Pages- Files",
      "description": "",
      "lien": "https://www.w3schools.com/asp/webpages_files.asp",
      "contenus": {
        "paragraphs": [
          "This chapter is about working with text files.",
          "Sometimes you will want to access data stored in text files.",
          "Text files used to store data is often called flat files.",
          "Common flat file \nformats are .txt, .xml, and .csv (comma-delimited values).",
          "In this chapter you will learn:",
          "In the example to follow, you will need a text file to work with.",
          "On your web site, if you don't have an App_Data folder, create one.",
          "In the App_Data folder, create a new file named Persons.txt.",
          "Add the following content to the file:",
          "The example below shows how to display data from a text file:",
          "Server.MapPathfinds the exact text file path.",
          "File.ReadAllLinesopens the text file and reads all lines \nfrom the file into an array.",
          "For eachdataItemin eachdatalineof the \narray the data is displayed.",
          "With Microsoft Excel, you can save a spreadsheet as a comma separated text \nfile (.csv file). When you do so, each row in the spreadsheet is saved as a text \nline, and each data column is separated by a comma.",
          "You can use the example above to read an Excel .csv file (just change the \nfile name to the name of the Excel file)."
        ],
        "lists": [
          [
            "How to read and display data from a text file"
          ]
        ],
        "examples": [
          "George,LucasSteven,SpielbergAlfred,Hitchcock",
          "@{var dataFile = Server.MapPath(\"~/App_Data/Persons.txt\");Array userData = File.ReadAllLines(dataFile);}<!DOCTYPE \n    html><html><body><h1>Reading Data from a File</h1>@foreach (string dataLine in userData){foreach \n    (string dataItem in dataLine.Split(',')){@dataItem <text>&nbsp;</text>}<br />}</body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/webpages_database.asp",
    "cours": {
      "titre": "ASP.NET Web Pages- Databases",
      "description": "",
      "lien": "https://www.w3schools.com/asp/webpages_database.asp",
      "contenus": {
        "paragraphs": [
          "This chapter is about working with databases.",
          "In this chapter we will:",
          "With Web Pages, you can easily display data from a database.",
          "You can connect to an existing database, or create a new database from scratch.",
          "In this example we will connect to an existing SQL Server Compact database.",
          "In the \"DemoWebPages\" folder, create a new CSHTML file named \"Products.cshtml\".",
          "Replace the code in the file with the code from the example below:",
          "The Database.Open(name) method will connect to a database in two \nsteps:",
          "First, it searches the application's App_Data folder for a database that \nmatches thenameparameter without the file-name extension.",
          "If no file is found, it looks for a \"connection string\" in the \napplication's Web.config file.",
          "(A connection string contains information about how to connect to a database. It can include a file path, or the name of an SQL database, with full user name and password)",
          "This two-step search makes it possible to test the application with a local \ndatabase, and run the application on a web host using a connection string."
        ],
        "lists": [
          [
            "Create a web page to list data from a database"
          ]
        ],
        "examples": [
          "@{var db = Database.Open(\"SmallBakery\");var selectQueryString = \"SELECT * FROM Product ORDER BY Name\";}<html><body><h1>Small Bakery Products</h1><table><tr><th>Id</th><th>Product</th><th>Description</th><th>Price</th></tr>@foreach(var row in db.Query(selectQueryString)){<tr><td>@row.Id</td><td>@row.Name</td><td>@row.Description</td><td align=\"right\">@row.Price</td></tr>}</table></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/webpages_helpers.asp",
    "cours": {
      "titre": "ASP.NET Web Pages- Helpers",
      "description": "",
      "lien": "https://www.w3schools.com/asp/webpages_helpers.asp",
      "contenus": {
        "paragraphs": [
          "Web Helpers greatly simplifies web development and common \nprogramming tasks.",
          "ASP.NET helpers are components that can be accessed by single lines of \nRazor code.",
          "You can build your own helpers using Razor syntax stored as .cshtml files, or \nuse built-in ASP.NET helpers.",
          "You will learn how to use Razor helpers in the next chapters of this \ntutorial.",
          "Below is a short description of some useful Razor helpers:",
          "The WebGrid helper simplifies the way to display data:",
          "The \"Chart Helper\" can display chart images of different types with \nmany formatting options and labels.",
          "",
          "The Chart helper can display data from arrays , from databases, or from files.",
          "The WebMail helper provides functions for sending email messages using SMTP \n(Simple Mail Transfer Protocol).",
          "The WebImage helper provides functionality to manage images in a web page.",
          "Keywords: flip, rotate, resize, watermark.",
          "With Razor you can take advantage of built-in or third party helpers to \nsimplify the use of email, databases, multimedia, and social networks as well as \nmany other issues like navigation and web security."
        ],
        "lists": [
          [
            "Automatically sets up an HTML table to display data",
            "Supports different options for formatting",
            "Supports paging (First, next, previous, last) through data",
            "Supports sorting by clicking on column headings"
          ]
        ],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/webpages_webgrid.asp",
    "cours": {
      "titre": "ASP.NET Web Pages- The WebGrid Helper",
      "description": "",
      "lien": "https://www.w3schools.com/asp/webpages_webgrid.asp",
      "contenus": {
        "paragraphs": [
          "WebGrid - One of many useful ASP.NET Web Helpers.",
          "In a previous chapter, you displayed database data by using razor code,  \nand doing the HTML markup yourself:",
          "Using the WebGrid helper is an easier way to display data.",
          "The WebGrid helper:"
        ],
        "lists": [
          [
            "Automatically sets up an HTML table to display data",
            "Supports different options for formatting",
            "Supports paging through data",
            "Supports Sorting by clicking on column headings"
          ]
        ],
        "examples": [
          "@{var db = Database.Open(\"SmallBakery\");var selectQueryString = \"SELECT * FROM Product ORDER BY Name\";}<html><body><h1>Small Bakery Products</h1><table><tr><th>Id</th><th>Product</th><th>Description</th><th>Price</th></tr>@foreach(var row in db.Query(selectQueryString)){<tr><td>@row.Id</td><td>@row.Name</td><td>@row.Description</td><td style=\"text-align:right\">@row.Price</td></tr>}</table></body></html>",
          "@{var db = Database.Open(\"SmallBakery\") ;var selectQueryString = \"SELECT * FROM Product ORDER BY Name\";var data = db.Query(selectQueryString);var grid = new WebGrid(data);}<html><head><title>Displaying Data Using the WebGrid Helper</title></head><body><h1>Small Bakery Products</h1><div id=\"grid\">@grid.GetHtml()</div></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/webpages_chart.asp",
    "cours": {
      "titre": "ASP.NET Web Pages- The Chart Helper",
      "description": "",
      "lien": "https://www.w3schools.com/asp/webpages_chart.asp",
      "contenus": {
        "paragraphs": [
          "The Chart Helper - One of many useful ASP.NET Web Helpers.",
          "In the previous chapters, you learned how to use an ASP.NET \"Helper\".",
          "You learned how to display data in a grid using the \"WebGrid Helper\".",
          "This chapter explains how to display data in graphical form, using the \"Chart \nHelper\".",
          "The \"Chart Helper\" can create chart images of different types with many \nformatting options and labels. It can create standard charts like area charts, \nbar charts, column charts, line charts, and pie charts, along with more \nspecialized charts like stock charts.",
          "",
          "The data you display in a chart can be from an array, from a database, or from data in a file.",
          "The example below shows the code needed to display a chart from an array of values:",
          "-new Chartcreates a new chart object and sets its width and height",
          "- theAddTitlemethod \nspecifies the chart title",
          "- theAddSeriesmethod adds data to the chart",
          "- thechartTypeparameter defines the type of chart",
          "- thexValueparameter defines x-axis names",
          "- theyValuesparameter defines the y-axis values",
          "- theWrite()method displays the chart",
          "You can run a database query and then use data from the results to create a \nchart:",
          "-var db = Database.Openopens the database (and assigns the database \nobject to the variable db)",
          "-var dbdata = db.Queryruns a database query and stores the result in \ndbdata",
          "-new Chartcreates a chart new object and sets its width and height",
          "- theAddTitlemethod \nspecifies the chart title",
          "- theDataBindTablemethod binds the data source to the chart",
          "- theWrite()method displays the chart",
          "An alternative to using the DataBindTable method is to use AddSeries (See \nprevious example). DataBindTable is easier to use, but AddSeries is more flexible because you \ncan specify the chart and data more explicitly:",
          "The third option for charting is to use an XML file as the data for the \nchart:"
        ],
        "lists": [],
        "examples": [
          "@{var myChart = new Chart(width: 600, height: 400).AddTitle(\"Employees\").AddSeries(chartType: \"column\",xValue: new[] {  \"Peter\", \"Andrew\", \"Julie\", \"Mary\", \"Dave\" },yValues: new[] { \"2\", \"6\", \"4\", \"5\", \"3\" }).Write();}",
          "@{var db = Database.Open(\"SmallBakery\");var dbdata = db.Query(\"SELECT Name, Price FROM Product\");var myChart = new Chart(width: 600, height: 400).AddTitle(\"Product Sales\").DataBindTable(dataSource: dbdata, xField: \"Name\").Write();}",
          "@{var db = Database.Open(\"SmallBakery\");var dbdata = db.Query(\"SELECT Name, Price FROM Product\");var myChart = new Chart(width: 600, height: 400).AddTitle(\"Product Sales\").AddSeries(chartType:\"Pie\",xValue: dbdata, xField: \"Name\",yValues: dbdata, yFields: \"Price\").Write();}",
          "@using System.Data;@{var dataSet = new DataSet();dataSet.ReadXmlSchema(Server.MapPath(\"data.xsd\"));dataSet.ReadXml(Server.MapPath(\"data.xml\"));var dataView = new DataView(dataSet.Tables[0]);var myChart = new Chart(width: 600, height: 400).AddTitle(\"Sales Per Employee\").AddSeries(\"Default\", chartType: \"Pie\",xValue: dataView, xField: \"Name\",yValues: dataView, yFields: \"Sales\").Write();}}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/webpages_email.asp",
    "cours": {
      "titre": "ASP.NET Web Pages- The WebMail Helper",
      "description": "",
      "lien": "https://www.w3schools.com/asp/webpages_email.asp",
      "contenus": {
        "paragraphs": [
          "The WebMail Helper - One of many useful ASP.NET Web Helpers.",
          "With the WebMail object you can easily send emails from a web page.",
          "The WebMail Helper makes it easy to send an email from a web application \nusing SMTP (Simple Mail transfer Protocol).",
          "To demonstrate the use of email, we will create an input page for support, let \nthe user submit the page to another page, and send an email about the support \nproblem.",
          "If you have built the Demo application in this tutorial, you already have a page \ncalled _AppStart.cshtml with the following content:",
          "To initiate the WebMail helper, add the the following \nWebMail properties to your AppStart page:",
          "Properties explained:",
          "SmtpServer:The name the SMTP server that will be used to \nsend the emails.",
          "SmtpPort:The port the server will use to send SMTP \ntransactions (emails).",
          "EnableSsl:True, if the server should use SSL (Secure Socket \nLayer) encryption.",
          "UserName:The name of the SMTP email account used to send \nthe email.",
          "Password:The password of the SMTP email account.",
          "From:The email to appear in the from address (often the \nsame as UserName).",
          "Then create an input page, and name it Email_Input:",
          "The purpose of the input page is to collect information, then \nsubmit the data to a new page that can send the information as an email.",
          "Then create the page that will be used to send the email, and name it Email_Send:",
          "The Send() method has the following parameters:",
          "And the following optional parameters:",
          "To use the WebMail helper, you need access to an SMTP server. SMTP is the \n\"output\" part of email. If you use a web host, you probably already know the \nname of the SMTP server. If you work in a corporate network, your IT department \ncan give you the name. If you are working at home, you \nmight be able to use your ordinary email provider.",
          "In order to send an email you will need:",
          "In the root of your web, create a page (or edit the page ) named_AppStart.cshtml.",
          "Put the following code inside the file:",
          "The code above will run each time the web site (application) starts. It \nfeeds yourWebMail Objectwith initial values.",
          "Please substitute:",
          "smtp.example.comwith the name the SMTP server that will be used to \nsend the emails.",
          "25with the port number the server will use to send SMTP \ntransactions (emails).",
          "falsewith true, if the server should use SSL (Secure Socket \nLayer) encryption.",
          "support@example.comwith the name of the SMTP email account used to send \nemails.",
          "passwordwith the password of the SMTP email account.",
          "john@examplewith the email to appear in the from address.",
          "You don'thave toinitiate the WebMail object in your AppStart \nfile, but you must set these properties before you call theWebMail.Send()method."
        ],
        "lists": [
          [
            "The name of the SMTP server",
            "The port number (most often 25)",
            "An email user name",
            "An email password"
          ]
        ],
        "examples": [
          "@{WebSecurity.InitializeDatabaseConnection(\"Users\", \"UserProfile\", \"UserId\", \n\"Email\", true);}",
          "@{WebSecurity.InitializeDatabaseConnection(\"Users\", \"UserProfile\", \"UserId\", \n\"Email\", true);WebMail.SmtpServer = \"smtp.example.com\";WebMail.SmtpPort = 25;WebMail.EnableSsl = false;WebMail.UserName = \"support@example.com\";WebMail.Password = \"password-goes-here\";WebMail.From = \"john@example.com\";}",
          "<!DOCTYPE html><html><body><h1>Request for \nAssistance</h1><form method=\"post\" action=\"EmailSend.cshtml\"><label>Username:</label><input type=\"text\" name=\"customerEmail\" /><label>Details about the problem:</label><textarea name=\"customerRequest\" \ncols=\"45\" rows=\"4\"></textarea><p><input type=\"submit\" value=\"Submit\" \n/></p></form></body></html>",
          "@{ // Read inputvar customerEmail = Request[\"customerEmail\"];var customerRequest = Request[\"customerRequest\"];try{// Send emailWebMail.Send(to:\"someone@example.com\", subject: \"Help request from - \" + customerEmail, body: \ncustomerRequest );}catch (Exception ex ){<text>@ex</text>}}",
          "@{WebMail.SmtpServer = \"smtp.example.com\";WebMail.SmtpPort = 25;WebMail.EnableSsl = false;WebMail.UserName = \"support@example.com\";WebMail.Password = \"password\";WebMail.From = \"john@example.com\"}"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/webpages_security.asp",
    "cours": {
      "titre": "ASP.NET Web Pages- WebSecurity Object",
      "description": "",
      "lien": "https://www.w3schools.com/asp/webpages_security.asp",
      "contenus": {
        "paragraphs": [
          "TheWebSecurity Objectprovides security and authentication for \nASP.NET Web Pages applications.",
          "With the WebSecurity object you can create user accounts, login and logout users, \nreset or change passwords, and more.",
          "You must create or initialize an WebSecurity database before you can use the WebSecurity \nobject in your code.",
          "In the root of your web, create a page (or edit the page ) named_AppStart.cshtml.",
          "Put the following code inside the file:",
          "The code above will run each time the web site (application) starts. It \ninitializes the WebSecurity database.",
          "\"Users\"is the name of the WebSecurity database (Users.sdf).",
          "\"UserProfile\"is the name of the database table that \ncontains the user profile information.",
          "\"UserId\"is the name of the column that \ncontains the user IDs (primary key).",
          "\"Email\"is the name of the column that contains \nuser names.",
          "The last parametertrueis a boolean value indicating that \nthe user profile and \nmembership tables should be created automatically if they don't exist, otherwisefalse.",
          "Althoughtrueindicates automatic creation of the databasetables,the \ndatabase itself \nwill not be created automatically. It must exist.",
          "TheUserProfiletable contains one record for each user, \nwith a user ID (primary key) and the user's name (email):",
          "TheMembership tablewill contain membership information \nabout when the user was created and if (and when) the membership was confirmed.",
          "Much like this (some columns are not shown):",
          "You might get errors using the WebSecurity object, if your site is not configured to use the ASP.NET \nWeb Pages membership systemSimpleMembership.",
          "This can occur if a \nhosting provider's server is configured differently than your local server. To \nfix this, add the following element to the site's Web.config file:"
        ],
        "lists": [],
        "examples": [
          "@{WebSecurity.InitializeDatabaseConnection(\"Users\", \"UserProfile\", \n\"UserId\", \"Email\", true);}",
          "<appSettings><add key=\"enableSimpleMembership\" value=\"true\" /></appSettings>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/webpages_publish.asp",
    "cours": {
      "titre": "ASP.NET Web Pages- Publishing the Website",
      "description": "",
      "lien": "https://www.w3schools.com/asp/webpages_publish.asp",
      "contenus": {
        "paragraphs": [
          "Before you continue, make sure your hosting computer runs the latest version \nof ASP.NET (4.0 or 4.5).",
          "Copy your website (all folders and content) from your development computer to \nan application folder on your remote hosting computer (server).",
          "If your application contains data,don't copy the data(see point 4 below).",
          "Make sure the bin folder, on your remote hosting computer, contains the same dll files as on your development computer.",
          "After copying the bin folder, it should contain files like this:",
          "Microsoft.Web.Infrastructure.dllNuGet.Core.dllSystem.Web.Helpers.dllSystem.Web.Razor.dllSystem.Web.WebPages.Administration.dllSystem.Web.WebPages.Deployment.dllSystem.Web.WebPages.dllSystem.Web.WebPages.Razor.dllWebMatrix.Data.dllWebMatrix.WebData",
          "If your application contains data or a database. For instance an SQL Server Compact database (a .sdf file in App_Data \nfolder), consider the following:",
          "Do you want to publish your test data to the \nremote server?",
          "Most likely not.",
          "If you have test data on your development computer, it may overwrite production data on your remote hosting computer.",
          "If you have to copy an SQL database (.sdf file), perhaps you should delete \neverything in the database, and then copy the empty .sdf file from your development \ncomputer to the server.",
          "THAT'S IT. GOOD LUCK !"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/webpages_examples.asp",
    "cours": {
      "titre": "ASP.NET Web Pages- Examples in C# and VB",
      "description": "",
      "lien": "https://www.w3schools.com/asp/webpages_examples.asp",
      "contenus": {
        "paragraphs": [
          "Learn ASP.NET Web Pages by C# and Visual Basic examples.",
          "Display Date and TimeReusable Header and FooterBasic HTML Form",
          "Examples Explained",
          "Display Date and TimeReusable Header and FooterBasic HTML Form",
          "Examples Explained",
          "For LoopFor Each LoopWhile LoopArrayIf ConditionIf Else ConditionElse If ConditionSwitch Condition",
          "Examples Explained",
          "For LoopFor Each LoopWhile LoopArrayIf ConditionIf Else ConditionElse If ConditionSelect Condition",
          "Examples Explained",
          "Display Database DataDisplay Data with WebGrid",
          "Examples Explained",
          "Display Database DataDisplay Data with WebGrid",
          "Examples Explained",
          "Display a Bar Chart from an ArrayDisplay a Bar Chart from a DatabaseDisplay a Pie Chart from a DatabaseDisplay a Pie Chart from an XML File",
          "Examples Explained",
          "Display a Bar Chart from an ArrayDisplay a Bar Chart from a DatabaseDisplay a Pie Chart from a DatabaseDisplay a Pie Chart from an XML File",
          "Examples Explained"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/webpages_classes.asp",
    "cours": {
      "titre": "ASP.NET Web Pages- Classes",
      "description": "",
      "lien": "https://www.w3schools.com/asp/webpages_classes.asp",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/razor_intro.asp",
    "cours": {
      "titre": "ASP.NET Razor- Markup",
      "description": "",
      "lien": "https://www.w3schools.com/asp/razor_intro.asp",
      "contenus": {
        "paragraphs": [
          "Razor is not a programming language. It's a server side markup language.",
          "Razor is a markup syntax that \nlets you embed server-based code (Visual Basic and C#) into web pages.",
          "Server-based code can create dynamic web content on the fly, while a web page \nis written to the browser. When a web page is called, the server executes the \nserver-based code inside the page before it returns the page to the browser. By \nrunning on the server, the code can perform complex tasks, like accessing \ndatabases.",
          "Razor is based \non ASP.NET, and designed \nfor creating web applications. It has the power of traditional ASP.NET markup, \nbut it is easier to use, and easier to learn.",
          "Razor uses a syntax very similar to PHP and Classic ASP.",
          "Razor:",
          "PHP:",
          "Classic ASP:",
          "ASP.NET helpers are components that can be accessed by single lines of \nRazor code.",
          "You can build your own helpers using Razor syntax, or \nuse built-in ASP.NET helpers.",
          "Below is a short description of some useful Razor helpers:",
          "Razor supports both C# (C sharp) and VB (Visual Basic)."
        ],
        "lists": [
          [
            "Web Grid",
            "Web Graphics",
            "Google Analytics",
            "Facebook Integration",
            "Twitter \nIntegration",
            "Sending Email",
            "Validation"
          ]
        ],
        "examples": [
          "<ul>@for (int i = 0; i < 10; i++) {<li>@i</li>}</ul>",
          "<ul><?phpfor ($i = 0; $i < 10; $i++) {echo(\"<li>$i</li>\");}?></ul>",
          "<ul><%for i = 0 to 10%><li><%=i%></li><%next%></ul>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/razor_syntax.asp",
    "cours": {
      "titre": "ASP.NET Razor- C# and VB Code Syntax",
      "description": "",
      "lien": "https://www.w3schools.com/asp/razor_syntax.asp",
      "contenus": {
        "paragraphs": [
          "Razor supports both C# (C sharp) and VB (Visual Basic).",
          "Razor is a simple programming syntax for embedding server code in web pages.",
          "Razor syntax is based on the ASP.NET framework, the part of the Microsoft.NET Framework that's specifically designed for creating web \napplications.",
          "The Razor syntax gives you all the power of ASP.NET, but is using a simplified \nsyntax that's easier to learn if you're a beginner, and makes you more \nproductive if you're an expert.",
          "Razor web pages can be described as HTML pages with two kinds of content: \nHTML content and Razor code.",
          "When the server reads the page, it runs the Razor code first, before it sends \nthe HTML page to the browser. The code that is executed on the server can \nperform tasks that cannot be done in the browser, for example accessing a server \ndatabase. Server code can create dynamic HTML content on the fly, before it is \nsent to the browser. Seen from the browser, the HTML generated by server code is \nno different than static HTML content.",
          "ASP.NET web pages with Razor syntax have the special file extension cshtml \n(Razor using C#) or vbhtml (Razor using VB).",
          "Server coding often involves objects.The \"DateTime\" object is a typical \nbuilt-in ASP.NET object, but objects can also be self-defined, a web page, a text box, a file, \na database record, etc.Objects may have methods they can perform. A \ndatabase record might have a \"Save\" method, an image object might have a \n\"Rotate\" method, an email object might have a \"Send\" method, \nand so on.Objects \nalso have properties that describe their characteristics. A database record \nmight have a FirstName and a LastName property (among others).",
          "The ASP.NET \nDateTime object has a Now property (written as DateTime.Now), and the Now property has a \nDay property (written as DateTime.Now.Day). The example below shows how to \naccess some properties of the DateTime object:",
          "An important feature of dynamic web pages is that you can determine what to \ndo based on conditions.",
          "The common way to do this is with the if ... else statements:",
          "Another important feature of dynamic web pages is that you can read user \ninput.",
          "Input is read by the Request[] function, and posting (input) is tested by the \nIsPost condition:"
        ],
        "lists": [
          [
            "Razor code blocks are enclosed in @{ ... }",
            "Inline expressions (variables and functions) start with @",
            "Code statements end with semicolon",
            "Variables are declared with the var keyword",
            "Strings are enclosed with quotation marks",
            "C# code is case sensitive",
            "C# files have the extension .cshtml"
          ],
          [
            "Razor code blocks are enclosed in @Code ... End Code",
            "Inline expressions (variables and functions) start with @",
            "Variables are declared with the Dim keyword",
            "Strings are enclosed with quotation marks",
            "VB code is not case sensitive",
            "VB files have the extension .vbhtml"
          ]
        ],
        "examples": [
          "<!-- Single statement block -->@{ var myMessage =    \"Hello World\"; }<!-- Inline expression or variable --><p>The value of myMessage is:@myMessage</p><!--    Multi-statement block -->@{var greeting = \"Welcome to our site!\";var weekDay = DateTime.Now.DayOfWeek;var greetingMessage = greeting + \" Here in Huston it is: \" + weekDay;}<p>The greeting is:@greetingMessage</p>",
          "<!-- Single statement block  -->@Code dim myMessage = \"Hello World\" End Code<!-- Inline expression or variable --><p>The value of myMessage is:@myMessage</p><!-- Multi-statement block -->@Codedim greeting = \"Welcome to our site!\"dim weekDay = DateTime.Now.DayOfWeekdim greetingMessage = greeting & \" Here in Huston it is: \" & weekDayEnd Code<p>The greeting is:@greetingMessage</p>",
          "<table border=\"1\"><tr><th \nwidth=\"100px\">Name</th><td width=\"100px\">Value</td></tr><tr><td>Day</td><td>@DateTime.Now.Day</td></tr><tr><td>Hour</td><td>@DateTime.Now.Hour</td></tr><tr><td>Minute</td><td>@DateTime.Now.Minute</td></tr><tr><td>Second</td><td>@DateTime.Now.Second</td></tr></td></table>",
          "@{var txt = \"\";if(DateTime.Now.Hour > 12){txt = \"Good Evening\";}else{txt = \"Good Morning\";}}<html><body><p>The message is@txt</p></body></html>",
          "@{var totalMessage = \"\";if(IsPost){var num1 = Request[\"text1\"];var num2 = Request[\"text2\"];var total = num1.AsInt() + num2.AsInt();totalMessage = \n\"Total = \" + total;}}<html><body \nstyle=\"background-color: beige; font-family: Verdana, Arial;\"><form \naction=\"\" method=\"post\"><p><label for=\"text1\">First Number:</label><br><input type=\"text\" name=\"text1\" /></p><p><label for=\"text2\">Second \nNumber:</label><br><input type=\"text\" name=\"text2\" /></p><p><input \ntype=\"submit\" value=\" Add \" /></p></form><p>@totalMessage</p></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/razor_cs_variables.asp",
    "cours": {
      "titre": "ASP.NET Razor- C# Variables",
      "description": "",
      "lien": "https://www.w3schools.com/asp/razor_cs_variables.asp",
      "contenus": {
        "paragraphs": [
          "Variables are named entities used to store data.",
          "Variables are used to store data.",
          "The name of a variable must begin with an alphabetic character and \ncannot contain whitespace or reserved characters.A variable can be of a \nspecific type, indicating the kind of data it stores. String variables store \nstring values (\"Welcome to W3Schools\"), integer variables store number values \n(103), date variables store date values, etc.Variables are declared \nusing the var keyword, or by using the type (if you want to declare the type), \nbut ASP.NET can usually determine data types automatically.",
          "Below is a list of  common data types:",
          "An operator tells ASP.NET what kind of command to perform in an expression.",
          "The C# language supports many operators. Below is a list of common operators:",
          "Converting from one data type to another is sometimes useful.The most \ncommon example is to convert string input to another type, such as an integer or \na date.",
          "As a rule, user input comes as strings, even if the user entered a number. \nTherefore, numeric input values must be converted to numbers before they can be \nused in calculations.",
          "Below is a list of common conversion methods:"
        ],
        "lists": [],
        "examples": [
          "// \n    Using the var keyword:var greeting = \"Welcome to W3Schools\";var \n    counter = 103;var today = DateTime.Today;// Using data types:string greeting = \"Welcome to W3Schools\";int counter = 103;DateTime \n    today = DateTime.Today;"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/razor_cs_loops.asp",
    "cours": {
      "titre": "ASP.NET Razor- C# Loops and Arrays",
      "description": "",
      "lien": "https://www.w3schools.com/asp/razor_cs_loops.asp",
      "contenus": {
        "paragraphs": [
          "Statements can be executed repeatedly in loops.",
          "If you need to run the same statements repeatedly, you can program a loop.",
          "If you know how many times you want to loop, you can use afor loop. This \nkind of loop is especially useful for counting up or counting down:",
          "If you work with a collection or an array, you often use afor each loop.",
          "A collection is a group of similar objects, and the for each loop lets \nyou carry out a task on each item. The for each loop walks through a \ncollection until it is finished.",
          "The example below walks through the ASP.NET Request.ServerVariables \ncollection.",
          "Thewhile loopis a general purpose loop.",
          "A while loop begins with the while keyword, followed by parentheses, where you \nspecify how long the loop continues, then a block to repeat.",
          "While loops typically add to, or subtract from, a \nvariable used for counting.",
          "In the example below, the += operator adds 1 to the variable i, each time the \nloop runs.",
          "An array is useful when you want to store similar variables but don't want to \ncreate a separate variable for each of them:"
        ],
        "lists": [],
        "examples": [
          "<html><body>@for(var i = 10; i < 21; i++){<p>Line @i</p>}</body></html>",
          "<html><body><ul>@foreach (var x in \nRequest.ServerVariables){<li>@x</li>}</ul></body></html>",
          "<html><body>@{var i = 0;while (i < 5){i += 1;<p>Line @i</p>}}</body></html>",
          "@{string[] members = {\"Jani\", \"Hege\", \"Kai\", \n    \"Jim\"};int i = Array.IndexOf(members, \"Kai\")+1;int len = \n    members.Length;string x = members[2-1];}<html><body><h3>Members</h3>@foreach (var person in \n    members){<p>@person</p>}<p>The number of names \n    in Members are@len</p><p>The person at \n    position 2 is@x</p><p>Kai is now in \n    position@i</p></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/razor_cs_logic.asp",
    "cours": {
      "titre": "ASP.NET Razor- C# Logic Conditions",
      "description": "",
      "lien": "https://www.w3schools.com/asp/razor_cs_logic.asp",
      "contenus": {
        "paragraphs": [
          "Programming Logic: Execute code based on conditions.",
          "C# lets you execute code based on conditions.",
          "To test a condition you use anif statement. The if \nstatement returns true or false, based on your test:",
          "An if statement can include anelse condition.",
          "The else condition defines the code to be executed if the condition is false.",
          "Note:In the example above, if the first condition is true, it will be executed. \nThe else condition covers \"everything else\".",
          "Multiple conditions can be tested with anelse if condition:",
          "In the example above, if the first condition is true, it will be executed.",
          "If not, then if the next condition is true, this condition will be executed.",
          "You can have any number of else if conditions.",
          "If none of the if and else if conditions are true, the last else block \n(without a condition) covers \"everything else\".",
          "Aswitch blockcan be used to test a number of individual conditions:",
          "The test value (day) is in parentheses. Each individual test condition has a case \nvalue that ends with a colon, and any number of code lines ending with a break \nstatement. If the test value matches the case value, the code lines are \nexecuted.",
          "A switch block can have a default case (default:) for  \n\"everything else\" that runs if none of the cases are true."
        ],
        "lists": [
          [
            "The if statement starts a code block",
            "The condition is written inside parenthesis",
            "The code inside the braces is executed if the test is true"
          ]
        ],
        "examples": [
          "@{var \n    price=50;}<html><body>@if (price>30){<p>The price is too high.</p>}</body></html>",
          "@{var \n    price=20;}<html><body>@if (price>30){<p>The price is too high.</p>}else{<p>The price is OK.</p>}</body></html>",
          "@{var \n    price=25;}<html><body>@if (price>=30){<p>The price is \n    high.</p>}else if (price>20 && price<30){<p>The price is OK.</p>}else{<p>The price is low.</p>}</body></html>",
          "@{var weekday=DateTime.Now.DayOfWeek;var day=weekday.ToString();var message=\"\";}<html><body>@switch(day){case \"Monday\":message=\"This is the first weekday.\";break;case \n    \"Thursday\":message=\"Only one day before weekend.\";break;case \"Friday\":message=\"Tomorrow is \n    weekend!\";break;default:message=\"Today is \" + day;break;}<p>@message</p></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/razor_vb_variables.asp",
    "cours": {
      "titre": "ASP.NET Razor- VB Variables",
      "description": "",
      "lien": "https://www.w3schools.com/asp/razor_vb_variables.asp",
      "contenus": {
        "paragraphs": [
          "Variables are named entities used to store data.",
          "Variables are used to store data.",
          "The name of a variable must begin with an alphabetic character and \ncannot contain whitespace or reserved characters.A variable can be of a \nspecific type, indicating the kind of data it stores. String variables store \nstring values (\"Welcome to W3Schools\"), integer variables store number values \n(103), date variables store date values, etc.Variables are declared \nusing the Dim keyword, or by using the type (if you want to declare the type), \nbut ASP.NET can usually determine data types automatically.",
          "Below is a list of  common data types:",
          "An operator tells ASP.NET what kind of command to perform in an expression.",
          "The VB language supports many operators. Below is a list of common operators:",
          "Converting from one data type to another is sometimes useful.The most \ncommon example is to convert string input to another type, such as an integer or \na date.",
          "As a rule, user input comes as strings, even if the user entered a number. \nTherefore, numeric input values must be converted to numbers before they can be \nused in calculations.",
          "Below is a list of common conversion methods:"
        ],
        "lists": [],
        "examples": [
          "// \n    Using the Dim keyword:Dim greeting = \"Welcome to W3Schools\"Dim counter = 103Dim today = DateTime.Today// Using data types:Dim greeting As String = \"Welcome to W3Schools\"Dim counter As Integer = \n    103Dim today As DateTime = DateTime.Today"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/razor_vb_loops.asp",
    "cours": {
      "titre": "ASP.NET Razor- VB Loops and Arrays",
      "description": "",
      "lien": "https://www.w3schools.com/asp/razor_vb_loops.asp",
      "contenus": {
        "paragraphs": [
          "Statements can be executed repeatedly in loops.",
          "If you need to run the same statements repeatedly, you can program a loop.",
          "If you know how many times you want to loop, you can use afor loop. This \nkind of loop is especially useful for counting up or counting down:",
          "If you work with a collection or an array, you often use afor each loop.",
          "A collection is a group of similar objects, and the for each loop lets \nyou carry out a task on each item. The for each loop walks through a \ncollection until it is finished.",
          "The example below walks through the ASP.NET Request.ServerVariables \ncollection.",
          "Thewhile loopis a general purpose loop.",
          "A while loop begins with the while keyword, followed by parentheses, where you \nspecify how long the loop continues, then a block to repeat.",
          "While loops typically add to, or subtract from, a \nvariable used for counting.",
          "In the example below, the += operator adds 1 to the variable i, each time the \nloop runs.",
          "An array is useful when you want to store similar variables but don't want to \ncreate a separate variable for each of them:"
        ],
        "lists": [],
        "examples": [
          "<html><body>@For i=10 To 21@<p>Line #@i</p>Next i</body></html>",
          "<html><body><ul>@For Each x \n    In Request.ServerVariables@<li>@x</li>Next x</ul></body></html>",
          "<html><body>@CodeDim i=0Do While \n    i<5i += 1@<p>Line #@i</p>LoopEnd Code</body></html>",
          "@CodeDim members As String()={\"Jani\",\"Hege\",\"Kai\",\"Jim\"}i=Array.IndexOf(members,\"Kai\")+1len=members.Lengthx=members(2-1)end Code<html><body><h3>Members</h3>@For Each person In members@<p>@person</p>Next person<p>The number of names \n    in Members are@len</p><p>The person at \n    position 2 is@x</p><p>Kai is now in \n    position@i</p></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/razor_vb_logic.asp",
    "cours": {
      "titre": "ASP.NET Razor- VB Logic Conditions",
      "description": "",
      "lien": "https://www.w3schools.com/asp/razor_vb_logic.asp",
      "contenus": {
        "paragraphs": [
          "Programming Logic: Execute code based on conditions.",
          "VB lets you execute code based on conditions.",
          "To test a condition you use theif statement. The if \nstatement returns true or false, based on your test:",
          "An if statement can include anelse condition.",
          "The else condition defines the code to be executed if the condition is false.",
          "Note:In the example above, if the first condition is true, it will be executed. \nThe else condition covers \"everything else\".",
          "Multiple conditions can be tested with anelse if condition:",
          "In the example above, if the first condition is true, it will be executed.",
          "If not, then if the next condition is true, this condition will be executed.",
          "You can have any number of else if conditions.",
          "If none of the if or else if conditions are true, the last else block \n(without a condition) covers \"everything else\".",
          "Aselect blockcan be used to test a number of individual conditions:",
          "\"Select Case\" is followed by the test value (day). Each individual test condition has a case \nvalue, and any number of code lines. If the test value matches the case value, the code lines \nare \nexecuted.",
          "A select block can have a default case (Case Else) for  \n\"everything else\" that runs if none of the other cases are true."
        ],
        "lists": [
          [
            "The if statement starts a code block",
            "The condition is written between if and then",
            "The code between if ... then and end if is executed if the test is true"
          ]
        ],
        "examples": [
          "@CodeDim \n    price=50End Code<html><body>@If price>30 \n    Then@<p>The price is too high.</p>End \n    If</body></html>",
          "@CodeDim \n    price=20End Code<html><body>@if price>30 then@<p>The price is too high.</p>Else@<p>The price is OK.</p>End If</body></html>",
          "@CodeDim \n    price=25End Code<html><body>@If price>=30 Then@<p>The price is \n    high.</p>ElseIf price>20 And price<30 then@<p>The price is OK.</p>Else@<p>The price is low.</p>End If</body></html>",
          "@CodeDim weekday=DateTime.Now.DayOfWeekDim day=weekday.ToString()Dim message=\"\"End Code<html><body>@Select Case dayCase \"Monday\"message=\"This is the first \n    weekday.\"Case \"Thursday\"message=\"Only one day before weekend.\"Case \"Friday\"message=\"Tomorrow is weekend!\"Case Elsemessage=\"Today is \" & dayEnd Select<p>@message</p></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_introduction.asp",
    "cours": {
      "titre": "ASP Tutorial",
      "description": "Learn ASPASP is an old (but still powerful) tool for making dynamic Web pages.ASP is a technology (much like PHP) for executing scripts on a web server.In this tutorial you will learn all you need to know about ASP.",
      "lien": "https://www.w3schools.com/asp/asp_introduction.asp",
      "contenus": {
        "paragraphs": [
          "ASP is an old (but still powerful) tool for making dynamic Web pages.",
          "ASP is a technology (much like PHP) for executing scripts on a web server.",
          "In this tutorial you will learn all you need to know about ASP.",
          "This ASP tutorial contains hundreds of examples.",
          "Our \"Show Example\" tool makes it easy to learn ASP, because it shows ASP  \ncode with parallel HTML output.",
          "Click on the \"Show Example\" button to see how it works!",
          "When a browser requests a normal HTML file, the server just returns the file.",
          "When a browser requests an ASP file, the server passes the request to the ASP engine \nwhich reads the ASP file and executes the server scripts in the file.",
          "Finally the ASP file is returned to the browser as plain HTML.",
          "At W3Schools you will find complete ASP references about built-in objects and \ncomponents, and their properties and methods.",
          "ASP References",
          "Learn by 100 examples! Because ASP scripts are executed on the server, you\ncan not view ASP code in a browser, you will only see the output from ASP which\nis plain HTML. At W3Schools every example displays the hidden ASP code. This\nwill make it easier for you to understand how it works.",
          "ASP Examples!"
        ],
        "lists": [
          [
            "ASP stands forActiveServerPages",
            "ASP is a Microsoft Technology",
            "ASP is a program that runs inside a web server"
          ],
          [
            "An ASP file has the file extension \".asp\"",
            "An ASP file is just the same as an HTML file",
            "An ASP file can contain server scripts in addition to HTML",
            "Server scripts in an ASP file are executed on the server"
          ],
          [
            "Edit, change, add content, or customize any web page",
            "Respond to user queries or data submitted from HTML forms",
            "Access databases or other server data and return results to a browser",
            "Provide web security since ASP code cannot be viewed in a browser",
            "Offer simplicity and speed"
          ]
        ],
        "examples": [
          "<!DOCTYPE html><html><body><%response.write(\"My first ASP script!\")%></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_syntax.asp",
    "cours": {
      "titre": "ASPSyntax",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_syntax.asp",
      "contenus": {
        "paragraphs": [
          "All our examples shows the ASP code in red.",
          "This makes it easier for you to understand how \nASP works.",
          "The default scripting language in ASP is VBScript.",
          "A scripting language is a lightweight programming language.",
          "VBScript is a light version of Microsoft's Visual Basic.",
          "ASP files can be ordinary HTML files. In addition, ASP files can also contain server scripts.",
          "Scripts surrounded by <% and %> are executed on the server.",
          "TheResponse.Write()method is used by ASP to write output to HTML.",
          "The following example writes \"Hello World\" into HTML:",
          "VBScript is case insensitive. Response.Write() can be written as response.write().",
          "To set JavaScript as the scripting language for a web page you must insert a language specification at the top of the page:",
          "This tutorial uses the VBScript scripting language.",
          "There is an easy shortcut to Response.Write(). You can use an equal sign (=) \ninstead.",
          "The following example also writes \"Hello World\" into HTML:",
          "HTML tags can be a part of the output:",
          "HTML attributes can be a part of the output:",
          "This tutorial contains a lot of VBScript examples.",
          "VBScript Examples",
          "This tutorial has complete VBScript reference.",
          "VBScript Reference"
        ],
        "lists": [],
        "examples": [
          "<!DOCTYPE html><html><body><%Response.Write(\"Hello World!\")%></body></html>",
          "<%@ language=\"javascript\"%><!DOCTYPE html><html><body><%Response.Write(\"Hello World!\")%></body></html>",
          "<!DOCTYPE html><html><body><%=\"Hello World!\"%></body></html>",
          "<!DOCTYPE html><html><body><%Response.Write(\"<h2>You can use HTML tags to format the text!</h2>\")%></body></html>",
          "<!DOCTYPE html><html><body><%Response.Write(\"<p style='color:#0000ff'>This text is styled.</p>\")%></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_variables.asp",
    "cours": {
      "titre": "ASPVariables",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_variables.asp",
      "contenus": {
        "paragraphs": [
          "Variables are \"containers\" for storing information.",
          "Declare a variableThis example demonstrates how to declare a variable, assign a value to it, and use the value in a text.",
          "Create an arrayArrays are used to store a series of related data items. This example demonstrates how to \ncreate an array that stores names.",
          "Loop through the HTML headingsHow to loop through the six headings in HTML.",
          "Time-based greeting using VBScriptThis example will display a different message to the user depending on the time on the server.",
          "Time-based greeting using JavaScriptThis example is the same as the one above, but the syntax is different.",
          "Create and change a variableHow to create a variable, assign a value to it, and then change the value of it.",
          "Insert a variable value in a textHow to insert a variable value in a text.",
          "Do you remember algebra from school? x=5, y=6, z=x+y",
          "Do you remember that a letter (like x) could be used to hold a value (like 5), and that you could use the information above to calculate the value of z to be 11?",
          "These letters are calledvariables, and variables can be used to hold values (x=5) or expressions (z=x+y).",
          "As with algebra, VBScript variables are used to hold values or expressions.",
          "A variable can have a short name, like x, or a more descriptive name, like carname.",
          "Rules for VBScript variable names:",
          "In VBScript, all variables are of typevariant, that can store different types of data.",
          "Creating variables in VBScript is most often referred to as \"declaring\" variables.",
          "You can declare VBScript variables with the Dim, Public or the Private statement. Like this:",
          "Now you have created two variables. The name of the variables are \"x\" and \"carname\".",
          "You can also declare variables by using its name in a script. Like this:",
          "Now you have also created a variable. The name of the variable is \"carname\". However, this method is not a good practice, because you can misspell the variable name later\nin your script, and that can cause strange results when your script is running.",
          "If you misspell for example the \"carname\" variable to \"carnime\", \nthe script will automatically create a new variable called \"carnime\".  To prevent your script from doing this, you can use the Option Explicit statement.\nThis statement forces you to declare all your variables with the dim, public or \nprivate statement.",
          "Put the Option Explicit statement on the top of your script. Like this:",
          "You assign a value to a variable like this:",
          "The variable name is on the left side of the expression and the value you want to\nassign to the variable is on the right. Now the variable \"carname\" has\nthe value of \"Volvo\", and the variable \"x\" has the value of \"10\".",
          "An array variable is used to store multiple values in a single variable.",
          "In the following example, an array containing\n3 elements is declared:",
          "The number shown in the parentheses is 2. We start at zero so this array contains 3 elements. This is a fixed-size array.\nYou assign data to each of the elements of the array like this:",
          "Similarly, the data can be retrieved from any element using the index of the particular array element you want.\nLike this:",
          "You can have up to 60 dimensions in an array. Multiple dimensions are declared by separating\nthe numbers in the parentheses with commas. Here we have a two-dimensional array consisting of 5 rows and 7 columns:",
          "Assign data to a two-dimensional array:",
          "A variable declared outside a procedure can be accessed and changed by any script in the ASP file.",
          "A variable declared inside a procedure is created and destroyed every time the procedure is executed. No scripts outside the procedure can access or change the variable.",
          "To declare variables accessible to more than one ASP file, declare them as session variables or application variables.",
          "Session variables are used to store information about ONE single user, and are available to all pages in one application. Typically information stored in session variables are name, id, and preferences.",
          "Application variables are also available to all pages in one application. Application variables are used to store information about ALL users in one specific application."
        ],
        "lists": [
          [
            "Must begin with a letter",
            "Cannot contain a period (.)",
            "Cannot exceed 255 characters"
          ]
        ],
        "examples": [
          "Dim xDim carname",
          "carname=\"Volvo\"",
          "Option ExplicitDim carnamecarname=some value",
          "carname=\"Volvo\"x=10",
          "Dim names(2)",
          "names(0)=\"Tove\"names(1)=\"Jani\"names(2)=\"Stale\"",
          "mother=names(0)",
          "Dim table(4,6)",
          "<html><body><%Dim x(2,2)x(0,0)=\"Volvo\"x(0,1)=\"BMW\"x(0,2)=\"Ford\"x(1,0)=\"Apple\"x(1,1)=\"Orange\"x(1,2)=\"Banana\"x(2,0)=\"Coke\"x(2,1)=\"Pepsi\"x(2,2)=\"Sprite\"for i=0 to 2response.write(\"<p>\")for j=0 to 2response.write(x(i,j) & \"<br />\")nextresponse.write(\"</p>\")next%></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_procedures.asp",
    "cours": {
      "titre": "ASPProcedures",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_procedures.asp",
      "contenus": {
        "paragraphs": [
          "In ASP you can call a JavaScript procedure from a VBScript and vice versa.",
          "The ASP source code can contain procedures and functions:",
          "Insert the <%@ language=\"language\" %> line above the\n<html> tag to write the procedure/function in another scripting language:",
          "When calling a VBScript or a JavaScript procedure from an ASP file written in VBScript, you can use the\n\"call\" keyword followed by the procedure name. If a procedure requires\nparameters, the parameter list must be enclosed in parentheses when using the\n\"call\" keyword. If you omit the \"call\" keyword, the\nparameter list must not be enclosed in parentheses. If the procedure has no\nparameters, the parentheses are optional.",
          "When calling a JavaScript or a VBScript procedure from an ASP file written in JavaScript,\nalways use parentheses after the procedure name.",
          "VBScript has two kinds procedures:",
          "A Sub procedure:",
          "or",
          "A Function procedure:",
          "or",
          "This simple function procedures is called to calculate the sum of two arguments:",
          "The function \"myfunction\" will return the sum of argument \"a\" and argument \n\"b\". In this case 14.",
          "When you call a procedure you can use the Call statement, like this:",
          "Or, you can omit the Call statement, like this:",
          "Call procedures using VBScriptHow to call both a JavaScript procedure and a VBScript procedure in an ASP file."
        ],
        "lists": [
          [
            "Sub procedure",
            "Function procedure"
          ],
          [
            "is a series of statements, enclosed by the Sub and End Sub statements",
            "can perform actions, butdoes not returna value",
            "can take arguments"
          ],
          [
            "is a series of statements, enclosed by the Function and End Function statements",
            "can perform actions andcan returna value",
            "can take arguments that are passed to it by a calling procedure",
            "without arguments, must include an empty set of parentheses ()",
            "returns a value by assigning a value to its name"
          ]
        ],
        "examples": [
          "<!DOCTYPE html><html><head><%sub vbproc(num1,num2)response.write(num1*num2)end sub%></head><body><p>Result: <%call vbproc(3,4)%></p></body></html>",
          "<%@ language=\"javascript\" %><!DOCTYPE html><html><head><%function jsproc(num1,num2){Response.Write(num1*num2)}%></head><body><p>Result: <%jsproc(3,4)%></p></body></html>",
          "Sub mysub()some statementsEnd Sub",
          "Sub mysub(argument1,argument2)some statementsEnd Sub",
          "Sub mysub()response.write(\"I was written by a sub procedure\")End Sub",
          "Function myfunction()some statementsmyfunction=some valueEnd Function",
          "Function myfunction(argument1,argument2)some statementsmyfunction=some valueEnd Function",
          "function myfunction()myfunction=Date()end function",
          "Function myfunction(a,b)myfunction=a+bEnd Functionresponse.write(myfunction(5,9))",
          "Call MyProc(argument)",
          "MyProc argument"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_conditionals.asp",
    "cours": {
      "titre": "VBScriptConditional Statements",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_conditionals.asp",
      "contenus": {
        "paragraphs": [
          "Conditional statements are used to perform different actions for different decisions.",
          "In VBScript we have four conditional statements:",
          "Use the If...Then...Else statement if you want to",
          "If you want to execute onlyonestatement when a condition is true, you can write the code on one line:",
          "There is no ..Else.. in this syntax. You just tell the code to\nperformone actionif a condition is true (in this case If i=10).",
          "If you want to executemore than onestatement when a condition is true,\nyou must put each statement on separate lines, and end the statement with the\nkeyword \"End If\":",
          "There is no ..Else.. in the example above either. You just tell the code to performmultiple actionsif the condition is true.",
          "If you want to execute a statement if a condition is true and execute another statement if the condition is not true, you must add the \"Else\"\nkeyword:",
          "In the example above, the first block of code will be executed if the condition is true, and the other block\nwill be executed otherwise (if i is greater than 10).",
          "You can use the If...Then...ElseIf statement if you want to select one of many blocks of\ncode to execute:",
          "You can also use the \"Select Case\" statement if you want to select one of many blocks of\ncode to execute:",
          "This is how it works: First we have a single expression (most often a\nvariable), that is evaluated once. The value of the expression is then compared with the\nvalues for each Case in the structure. If there is a match, the block of code\nassociated with that Case is executed."
        ],
        "lists": [
          [
            "If statement- executes a set of code when a condition is true",
            "If...Then...Else statement- select one of two sets of lines to execute",
            "If...Then...ElseIf statement- select one of many sets of lines to execute",
            "Select Case statement- select one of many sets of lines to execute"
          ],
          [
            "execute some code if a condition is true",
            "select one of two blocks of code to execute"
          ]
        ],
        "examples": [
          "If i=10 Then response.write(\"Hello\")",
          "If i=10 Thenresponse.write(\"Hello\")i = i+1End If",
          "i=hour(time)If i < 10 Thenresponse.write(\"Good morning!\")Elseresponse.write(\"Have a nice day!\")End If",
          "i=hour(time)If i = 10 Thenresponse.write(\"Just started...!\")ElseIf i = 11 Thenresponse.write(\"Hungry!\")ElseIf i = 12 Thenresponse.write(\"Ah, lunch-time!\")ElseIf i = 16 Thenresponse.write(\"Time to go home!\")Elseresponse.write(\"Unknown\")End If",
          "d=weekday(date)Select Case dCase 1response.write(\"Sleepy Sunday\")Case 2response.write(\"Monday again!\")Case 3response.write(\"Just Tuesday!\")Case 4response.write(\"Wednesday!\")Case 5response.write(\"Thursday...\")Case 6response.write(\"Finally Friday!\")Case elseresponse.write(\"Super Saturday!!!!\")End Select"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_looping.asp",
    "cours": {
      "titre": "VBScriptLooping",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_looping.asp",
      "contenus": {
        "paragraphs": [
          "Looping statements are used to run the same block of code a specified number of times.",
          "In VBScript we have four looping statements:",
          "Use theFor...Nextstatement to run a block of code a specified number of times.",
          "TheForstatement specifies the counter variable (i), and its start and end\nvalues. TheNextstatement increases the counter variable (i) by one.",
          "With theStepkeyword, you can increase or decrease the counter variable by the value you specify.",
          "In the example below, the counter variable (i) is INCREASED by two, each time the loop repeats.",
          "To decrease the counter variable, you must use a negativeStepvalue. You must specify an end value that is less than the start value.",
          "In the example below, the counter variable (i) is DECREASED by two, each time the loop repeats.",
          "You can exit a For...Next statement with the Exit For keyword.",
          "AFor Each...Nextloop repeats a block of code for each item in a collection, or for each element of an array.",
          "If you don't know how many repetitions you want, use a Do...Loop statement.",
          "The Do...Loop statement repeats a block of code while a condition is\ntrue, or until a condition becomes true.",
          "You use the While keyword to check a condition in a Do...Loop statement.",
          "Ifiequals 9, the code inside the loop above will never be executed.",
          "The code inside this loop will be executed at least one time, even ifiis less than 10.",
          "You use the Until keyword to check a condition in a Do...Loop statement.",
          "Ifiequals 10, the code inside the loop will never be executed.",
          "The code inside this loop will be executed at least one time, even ifiis equal to 10.",
          "You can exit a Do...Loop statement with the Exit Do keyword.",
          "The code inside this loop will be executed as long asiis different\nfrom 10, and as long asiis greater than 10.",
          "Looping through headersHow to loop through the six headings in html.",
          "Do...While loopHow to make a simpleDo...Whileloop."
        ],
        "lists": [
          [
            "For...Next statement- runs code a specified number of times",
            "For Each...Next statement- runs code for each item in a collection or each element of an array",
            "Do...Loop statement- loops while or until a condition is true",
            "While...Wend statement- Do not use it - use the Do...Loop statement instead"
          ]
        ],
        "examples": [
          "<html><body><%For i = 0 To 5response.write(\"The number is \" & i & \"<br />\")Next%></body></html>",
          "For i=2 To 10 Step 2some codeNext",
          "For i=10 To 2 Step -2some codeNext",
          "For i=1 To 10If i=5 Then Exit Forsome codeNext",
          "<html><body><%Dim cars(2)cars(0)=\"Volvo\"cars(1)=\"Saab\"cars(2)=\"BMW\"For Each x In carsresponse.write(x & \"<br />\")Next%></body></html>",
          "Do While i>10some codeLoop",
          "Dosome codeLoop While i>10",
          "Do Until i=10some codeLoop",
          "Dosome codeLoop Until i=10",
          "Do Until i=10i=i-1If i<10 Then Exit DoLoop"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_inputforms.asp",
    "cours": {
      "titre": "ASPFormsandUser Input",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_inputforms.asp",
      "contenus": {
        "paragraphs": [
          "The Request.QueryString and Request.Form commands are used to retrieve user input from forms.",
          "A form with method=\"get\"How to interact with the user, with the Request.QueryString command.",
          "A form with method=\"post\"How to interact with the user, with the Request.Form command.",
          "A form with radio buttonsHow to interact with the user, through radio buttons, with the Request.Form command.",
          "The Request object can be used to retrieve user information from forms.",
          "User input can be retrieved with the Request.QueryString or Request.Form command.",
          "The Request.QueryString command is used to collect values in a form with method=\"get\".",
          "Information sent from a form with the GET method is visible to everyone (it will be displayed in the browser's address bar)\nand has limits on the amount of information to send.",
          "If a user typed \"Bill\" and \"Gates\" in the HTML form above, the URL sent to the server would look like this:",
          "Assume that \"simpleform.asp\" contains the following ASP script:",
          "The browser will display the following in the body of the document:",
          "The Request.Form\ncommand is used to collect values in a form with method=\"post\".",
          "Information sent from a form with the POST method \nis invisible to others and has no limits on the amount of information to send.",
          "If a user typed \"Bill\" and \"Gates\" in the HTML form \nabove, the URL sent to the server would look like this:",
          "Assume that \"simpleform.asp\" contains the following ASP script:",
          "The browser will display the following in the body of the document:",
          "User input should be validated on the browser whenever possible (by client scripts).\nBrowser validation is faster and reduces the server load.",
          "You should consider server validation if the user input will be\ninserted into a database. A good way to validate a form on the server is to post\nthe form to itself, instead of jumping to a different page. The user will then\nget the error messages on the same page as the form. This makes it easier to\ndiscover the error."
        ],
        "lists": [],
        "examples": [
          "<form method=\"get\" action=\"simpleform.asp\">First Name: <input type=\"text\" name=\"fname\"><br>Last Name: <input type=\"text\" name=\"lname\"><br><br><input type=\"submit\" value=\"Submit\"></form>",
          "https://www.w3schools.com/simpleform.asp?fname=Bill&lname=Gates",
          "<body>Welcome<%response.write(request.querystring(\"fname\"))response.write(\" \" & request.querystring(\"lname\"))%></body>",
          "Welcome Bill Gates",
          "<form method=\"post\" action=\"simpleform.asp\">First Name: <input type=\"text\" name=\"fname\"><br>Last Name: <input type=\"text\" name=\"lname\"><br><br><input type=\"submit\" value=\"Submit\"></form>",
          "https://www.w3schools.com/simpleform.asp",
          "<body>Welcome<%response.write(request.form(\"fname\"))response.write(\" \" & request.form(\"lname\"))%></body>",
          "Welcome Bill Gates"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_cookies.asp",
    "cours": {
      "titre": "ASPCookies",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_cookies.asp",
      "contenus": {
        "paragraphs": [
          "A cookie is often used to identify a user.",
          "Welcome cookieHow to create a Welcome cookie.",
          "A cookie is often used to identify a user. A cookie is a small file that the server\nembeds on the user's computer. Each time the same computer requests a page with a browser, it will send the cookie\ntoo. With ASP, you can both create and retrieve cookie values.",
          "The \"Response.Cookies\" command is used to create cookies.",
          "Note:The Response.Cookies command must appear BEFORE the <html> tag.",
          "In the example below, we will create a cookie named \"firstname\" and assign the value \"Alex\" to it:",
          "It is also possible to assign properties to a cookie, like setting a date when the cookie should expire:",
          "The \"Request.Cookies\" command is used to retrieve a cookie value.",
          "In the example below, we retrieve the value of the cookie named \"firstname\" and display it on a page:",
          "Output:Firstname=Alex",
          "If a cookie contains a collection of multiple values, we say that the cookie has Keys.",
          "In the example below, we will create a cookie collection named \"user\".\nThe \"user\" cookie has Keys that contains information about a user:",
          "Look at the following code:",
          "Assume that your server has sent all the cookies above to a user.",
          "Now we want to read all the cookies sent to a user. The example below shows \nhow to do it (note that the code below checks if a cookie has Keys with the HasKeys property):",
          "Output:",
          "firstname=Alex",
          "user:firstname=Johnuser:lastname=Smithuser:country=Norwayuser:age=25",
          "If your application deals with browsers that do not support cookies, you will\nhave to use other methods to pass information from one page to another in your application.\nThere are two ways of doing this:",
          "You can add parameters to a URL:",
          "And retrieve the values in the \"welcome.asp\" file like this:",
          "You can use a form. The form passes the user input to \"welcome.asp\" when the user clicks on the Submit button:",
          "Retrieve the values in the \"welcome.asp\" file like this:"
        ],
        "lists": [],
        "examples": [
          "<%Response.Cookies(\"firstname\")=\"Alex\"%>",
          "<%Response.Cookies(\"firstname\")=\"Alex\"Response.Cookies(\"firstname\").Expires=#May 10,2012#%>",
          "<%fname=Request.Cookies(\"firstname\")response.write(\"Firstname=\" & fname)%>",
          "<%Response.Cookies(\"user\")(\"firstname\")=\"John\"Response.Cookies(\"user\")(\"lastname\")=\"Smith\"Response.Cookies(\"user\")(\"country\")=\"Norway\"Response.Cookies(\"user\")(\"age\")=\"25\"%>",
          "<%Response.Cookies(\"firstname\")=\"Alex\"Response.Cookies(\"user\")(\"firstname\")=\"John\"Response.Cookies(\"user\")(\"lastname\")=\"Smith\"Response.Cookies(\"user\")(\"country\")=\"Norway\"Response.Cookies(\"user\")(\"age\")=\"25\"%>",
          "<!DOCTYPE html><html><body><%dim x,yfor each x in Request.Cookiesresponse.write(\"<p>\")if Request.Cookies(x).HasKeys thenfor each y in Request.Cookies(x)response.write(x & \":\" & y & \"=\" & Request.Cookies(x)(y))response.write(\"<br>\")nextelseResponse.Write(x & \"=\" & Request.Cookies(x) & \"<br>\")end ifresponse.write \"</p>\"next%></body></html>",
          "<a href=\"welcome.asp?fname=John&lname=Smith\">Go to Welcome Page</a>",
          "<%fname=Request.querystring(\"fname\")lname=Request.querystring(\"lname\")response.write(\"<p>Hello \" & fname & \" \" & lname & \"!</p>\")response.write(\"<p>Welcome to my Web site!</p>\")%>",
          "<form method=\"post\" action=\"welcome.asp\">First Name:  <input type=\"text\" name=\"fname\" value=\"\">Last Name: <input type=\"text\" name=\"lname\" value=\"\"><input type=\"submit\" value=\"Submit\"></form>",
          "<%fname=Request.form(\"fname\")lname=Request.form(\"lname\")response.write(\"<p>Hello \" & fname & \" \" & lname & \"!</p>\")response.write(\"<p>Welcome to my Web site!</p>\")%>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_sessions.asp",
    "cours": {
      "titre": "ASPSessionObject",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_sessions.asp",
      "contenus": {
        "paragraphs": [
          "A Session object stores information about, or change settings for a user session.",
          "When you are working with an application on your computer, you open it, do some changes and then\nyou close it. This is much like a Session. The computer knows who you are. It\nknows when you open the application and when you close it. However, on the internet there is one\nproblem: the web server does not know who you are and what you do, because the HTTP address doesn't maintain state.",
          "ASP solves this problem by creating a unique cookie for each user. The cookie\nis sent to the user's computer and it contains information that identifies the user. This\ninterface is called the Session object.",
          "The Session object stores information about, or change settings for a user session.",
          "Variables stored in a Session object hold information about one single user, and are available to all pages in one application. Common information\nstored in session variables are name, id, and preferences. The server creates a new Session object for each new user, and destroys the Session object when the session expires.",
          "A session starts when:",
          "A session ends if a user has not requested or refreshed a page in the application for a specified period. By default, this is 20 minutes.",
          "If you want to set a timeout interval that is shorter or longer than the default, \nuse theTimeoutproperty.",
          "The example below sets a timeout interval of 5 minutes:",
          "Use theAbandonmethod to end a session immediately:",
          "Note:The main problem with sessions is WHEN they should end. We do \nnot know if the user's last request was the final one or not. So we do not know \nhow long we should keep the session \"alive\". Waiting too long for an idle \nsession uses up resources on the server, but if the session is deleted too soon \nthe user has to start all over again because the server has deleted all the \ninformation. Finding the right timeout interval can be difficult!",
          "Tip:Only store SMALL amounts of data in session variables!",
          "The most important thing about the Session object is that you can store variables in it.",
          "The example below will set the Session variableusernameto \"Donald Duck\" and the Session variableageto \"50\":",
          "When the value is stored in a session variable it can be reached from ANY page in the ASP application:",
          "The line above returns: \"Welcome Donald Duck\".",
          "You can also store user preferences in the Session object, and then access\nthat preference to choose what page to return to the user.",
          "The example below specifies a text-only version of the page if the user has a low screen resolution:",
          "The Contents collection contains all session variables.",
          "It is possible to remove a session variable with the Remove method.",
          "The example below removes the session variable \"sale\" if the value of the session variable \"age\" is lower than 18:",
          "To remove all variables in a session, use the RemoveAll method:",
          "The Contents collection contains all session variables. You can loop through the Contents collection, to see what's stored in it:",
          "Result:",
          "If you do not know the number of items in the Contents collection, you can use the Count property:",
          "Result:",
          "You can loop through the StaticObjects collection, to see the values of all objects stored in the Session object:"
        ],
        "lists": [
          [
            "A new user requests an ASP file, and the Global.asa file includes a Session_OnStart procedure",
            "A value is stored in a Session variable",
            "A user requests an ASP file, and the Global.asa file uses the <object> tag to instantiate an object with session scope"
          ]
        ],
        "examples": [
          "<%Session.Timeout=5%>",
          "<%Session.Abandon%>",
          "<%Session(\"username\")=\"Donald Duck\"Session(\"age\")=50%>",
          "Welcome <%Response.Write(Session(\"username\"))%>",
          "<%If Session(\"screenres\")=\"low\" Then%>This is the text version of the page<%Else%>This is the multimedia version of the page<%End If%>",
          "<%If Session.Contents(\"age\")<18 thenSession.Contents.Remove(\"sale\")End If%>",
          "<%Session.Contents.RemoveAll()%>",
          "<%Session(\"username\")=\"Donald Duck\"Session(\"age\")=50dim iFor Each i in Session.ContentsResponse.Write(i & \"<br>\")Next%>",
          "usernameage",
          "<%dim idim jj=Session.Contents.CountResponse.Write(\"Session variables: \" & j)For i=1 to jResponse.Write(Session.Contents(i) & \"<br>\")Next%>",
          "Session variables: 2Donald Duck50",
          "<%dim iFor Each i in Session.StaticObjectsResponse.Write(i & \"<br>\")Next%>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_applications.asp",
    "cours": {
      "titre": "ASPApplicationObject",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_applications.asp",
      "contenus": {
        "paragraphs": [
          "A group of ASP files that work together to perform some purpose is called an application.",
          "An application on the Web may consist of several ASP files that work together to perform some purpose.\nThe Application object is used to tie these files together.",
          "The Application object is used to store and access variables from any page, just like the Session object. The difference\nis that ALL users share ONE Application object (with Sessions there is ONE Session object for EACH user).",
          "The Application object holds information that will be used by many pages in the application (like database connection information).\nThe information can be accessed from any page. The information can also be changed in one place, and the changes will automatically be reflected\non all pages.",
          "Application variables can be accessed and changed by any page in an application.",
          "You can create Application variables in \"Global.asa\" like this:",
          "In the example above we have created two Application variables: \"vartime\" and \"users\".",
          "You can access the value of an Application variable like this:",
          "The Contents collection contains all application variables. You can loop through the Contents collection, to see what's stored in it:",
          "If you do not know the number of items in the Contents collection, you can use the Count property:",
          "You can loop through the StaticObjects collection, to see the values of all objects stored in the Application object:",
          "You can lock an application with the \"Lock\" method. When an\napplication is locked, the users cannot change the Application variables (other than the one currently accessing\nit). You can unlock an application with the \"Unlock\" method. This method\nremoves the lock from the Application variable:"
        ],
        "lists": [],
        "examples": [
          "<script language=\"vbscript\" runat=\"server\">Sub Application_OnStartapplication(\"vartime\")=\"\"application(\"users\")=1End Sub</script>",
          "There are<%Response.Write(Application(\"users\"))%>active connections.",
          "<%dim iFor Each i in Application.ContentsResponse.Write(i & \"<br>\")Next%>",
          "<%dim idim jj=Application.Contents.CountFor i=1 to jResponse.Write(Application.Contents(i) & \"<br>\")Next%>",
          "<%dim iFor Each i in Application.StaticObjectsResponse.Write(i & \"<br>\")Next%>",
          "<%Application.Lock'do some application object operationsApplication.Unlock%>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_incfiles.asp",
    "cours": {
      "titre": "ASPIncluding Files",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_incfiles.asp",
      "contenus": {
        "paragraphs": [
          "You can insert the content of one ASP file into another ASP file before the\nserver executes it, with the #include directive.",
          "The #include directive is used to create functions, headers, footers, or \nelements that will be reused on multiple pages.",
          "Here is a file called \"mypage.asp\":",
          "Here is the \"wisdom.inc\" file:",
          "Here is the \"time.inc\" file:",
          "If you look at the source code in a browser, it will look something like this:",
          "To include a file in an ASP page, place the #include directive inside comment tags:",
          "Use the virtual keyword to indicate a path beginning with a virtual directory.",
          "If a file named \"header.inc\" resides in a virtual directory named /html, the following line would insert the contents of \"header.inc\":",
          "Use the file keyword to indicate a relative path. A relative path begins with the directory that contains the including file.",
          "If you have a file in the html directory, and the file \"header.inc\" resides in html\\headers, the following line would insert \"header.inc\" in your file:",
          "Note that the path to the included file (headers\\header.inc) is relative to the including file. \nIf the file containing this #include statement is not in the html directory, the statement will not work.",
          "In the sections above we have used the file extension \".inc\" for included files. Notice that if a user tries to browse an INC file directly,\nits content will be displayed. If your included file contains confidential information or information you do not want any users to see, it is better to use an \nASP extension. The source code in an ASP file will not be visible after the interpretation. An included file can also include other files,\nand one ASP file can include the same file more than once.",
          "Important:Included files are processed and inserted before the scripts are executed. The following script will NOT work because ASP executes the \n#include directive before it assigns a value to the variable:",
          "You cannot open or close a script delimiter in an INC file. The following script will NOT work:",
          "But this script will work:"
        ],
        "lists": [],
        "examples": [
          "<!DOCTYPE html><html><body><h3>Words of Wisdom:</h3><p><!--#include file=\"wisdom.inc\"--></p><h3>The time is:</h3><p><!--#include file=\"time.inc\"--></p></body></html>",
          "\"One should never increase, beyond what is necessary,the number of entities required to explain anything.\"",
          "<%Response.Write(Time)%>",
          "<!DOCTYPE html><html><body><h3>Words of Wisdom:</h3><p>\"One should never increase, beyond what is necessary,the number of entities required to explain anything.\"</p><h3>The time is:</h3><p>11:33:42 AM</p></body></html>",
          "<!--#include virtual=\"somefilename\"-->or<!--#include file =\"somefilename\"-->",
          "<!-- #include virtual =\"/html/header.inc\" -->",
          "<!-- #include file =\"headers\\header.inc\" -->",
          "<%fname=\"header.inc\"%><!--#include file=\"<%fname%>\"-->",
          "<%For i = 1 To n<!--#include file=\"count.inc\"-->Next%>",
          "<% For i = 1 to n %><!--#include file=\"count.inc\" --><% Next %>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_globalasa.asp",
    "cours": {
      "titre": "ASPThe Global.asa file",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_globalasa.asp",
      "contenus": {
        "paragraphs": [
          "The Global.asa file is an optional file that can contain declarations of objects, variables, and methods that\ncan be accessed by every page in an ASP application.",
          "All valid browser scripts (JavaScript, VBScript, JScript, PerlScript, etc.) can be used within Global.asa.",
          "The Global.asa file can contain only the following:",
          "Note:The Global.asa file must be stored in the root directory of the\nASP application, and each application can only have one Global.asa file.",
          "In  Global.asa you can tell the application and session objects what to do when the application/session starts and what to do when the\napplication/session ends. The code for this is placed in event handlers. The Global.asa file can contain four types of events:",
          "Session_OnStart- This event occurs EVERY time a NEW user requests his or her first page in the ASP application.",
          "Session_OnEnd- This event occurs EVERY time a user ends a session. A user-session ends after a page has not been requested by the user for a \nspecified time (by default this is 20 minutes).",
          "Application_OnEnd- This event occurs after the LAST user has ended the session. Typically, this event occurs when a Web server stops.\nThis procedure is used to clean up settings after the Application stops, like delete records or write information to text files.",
          "A Global.asa file could look something like this:",
          "Note:Because we cannot use the ASP script delimiters (<% and %>) to insert scripts in the Global.asa file, we put subroutines inside an HTML \n<script> element.",
          "It is possible to create objects with session or application scope in Global.asa by using the <object> tag.",
          "Note:The <object> tag should be outside the <script> tag!",
          "Either ProgID or ClassID must be specified.",
          "Either ProgID or ClassID must be specified.",
          "The first example creates an object of session scope named \"MyAd\" by using the ProgID parameter:",
          "The second example creates an object of application scope named \"MyConnection\" by using the ClassID parameter:",
          "The objects declared in the Global.asa file can be used by any script in the application:",
          "A TypeLibrary is a container for the contents of a DLL file corresponding to a COM object. By including a call to the TypeLibrary in the Global.asa file,\nthe constants of the COM object can be accessed, and errors can be better reported by the ASP code. If your Web application relies on COM objects that have\ndeclared data types in type libraries, you can declare the type libraries in Global.asa.",
          "Either the file parameter or the uuid parameter is required",
          "Either the file parameter or the uuid parameter is required",
          "The server can return one of the following error messages:",
          "Note:METADATA tags can appear anywhere in the Global.asa file (both inside and outside <script> tags). However, it is recommended that\nMETADATA tags appear near the top of the Global.asa file.",
          "Restrictions on what you can include in the Global.asa file:",
          "Global.asa is often used to initialize variables.",
          "The example below shows how to detect the exact time a visitor first arrives on a Web site. The time is stored in a Session variable named \n\"started\", and the value of the \"started\" variable can be accessed from any ASP page in the application:",
          "Global.asa can also be used to control page access.",
          "The example below shows how to redirect every new visitor to another page, in this case to a\npage called \"newpage.asp\":",
          "And you can include functions in the Global.asa file.",
          "In the example below the Application_OnStart subroutine occurs when the Web server starts. Then\nthe Application_OnStart subroutine calls another subroutine named \"getcustomers\".\nThe \"getcustomers\" subroutine opens a database and retrieves a record set from\nthe \"customers\" table. The record set is assigned to an array, where it\ncan be accessed from any ASP page without querying the database:",
          "In this example we will create a Global.asa file that counts the number of current visitors.",
          "The Global.asa file:",
          "To display the number of current visitors in an ASP file:"
        ],
        "lists": [
          [
            "Application events",
            "Session events",
            "<object> declarations",
            "TypeLibrary declarations",
            "the #include directive"
          ],
          [
            "You cannot display text written in the Global.asa file. This file can't display information",
            "You can only use Server and Application objects in the Application_OnStart and Application_OnEnd\nsubroutines. In the Session_OnEnd subroutine, you can use Server, Application, and Session\n    objects. In the Session_OnStart subroutine you can use any built-in object"
          ],
          [
            "The Application_OnStart sets the Application variable \"visitors\" to 0 when the server starts",
            "The Session_OnStart subroutine adds one to the variable \"visitors\" every time a new visitor arrives",
            "The Session_OnEnd subroutine subtracts one from \"visitors\" each time this subroutine is triggered"
          ]
        ],
        "examples": [
          "<script language=\"vbscript\" runat=\"server\">sub Application_OnStart'some codeend subsub Application_OnEnd'some codeend subsub Session_OnStart'some codeend subsub Session_OnEnd'some codeend sub</script>",
          "<object runat=\"server\" scope=\"scope\" id=\"id\"\n{progid=\"progID\"|classid=\"classID\"}>....</object>",
          "<object runat=\"server\" scope=\"session\" id=\"MyAd\"\nprogid=\"MSWC.AdRotator\"></object>",
          "<object runat=\"server\" scope=\"application\" id=\"MyConnection\"classid=\"Clsid:8AD3067A-B3FC-11CF-A560-00A0C9081C21\"></object>",
          "GLOBAL.ASA:<object runat=\"server\" scope=\"session\" id=\"MyAd\"\nprogid=\"MSWC.AdRotator\"></object>You could reference the object \"MyAd\" from any page in the ASP application:SOME .ASP FILE:<%=MyAd.GetAdvertisement(\"/banners/adrot.txt\")%>",
          "<!--METADATA TYPE=\"TypeLib\"file=\"filename\"\nuuid=\"id\"\nversion=\"number\"\nlcid=\"localeid\"-->",
          "<script language=\"vbscript\" runat=\"server\">sub Session_OnStartSession(\"started\")=now()end sub</script>",
          "<script language=\"vbscript\" runat=\"server\">sub Session_OnStartResponse.Redirect(\"newpage.asp\")end sub</script>",
          "<script language=\"vbscript\" runat=\"server\">sub Application_OnStartgetcustomersend subsub getcustomersset conn=Server.CreateObject(\"ADODB.Connection\")conn.Provider=\"Microsoft.Jet.OLEDB.4.0\"conn.Open \"c:/webdata/northwind.mdb\"set rs=conn.execute(\"select name from customers\")Application(\"customers\")=rs.GetRowsrs.Closeconn.Closeend sub</script>",
          "<script language=\"vbscript\" runat=\"server\">Sub Application_OnStartApplication(\"visitors\")=0End SubSub Session_OnStartApplication.LockApplication(\"visitors\")=Application(\"visitors\")+1Application.UnLockEnd SubSub Session_OnEndApplication.LockApplication(\"visitors\")=Application(\"visitors\")-1Application.UnLockEnd Sub</script>",
          "<!DOCTYPE html><html><head></head><body><p>There are <%response.write(Application(\"visitors\"))%>\nonline now!</p></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_ajax.asp",
    "cours": {
      "titre": "ASP AJAX",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_ajax.asp",
      "contenus": {
        "paragraphs": [
          "AJAX is about updating parts of a web page, without reloading the whole page.",
          "AJAX = Asynchronous JavaScript and XML.",
          "AJAX is a technique for creating fast and dynamic web pages.",
          "AJAX allows web pages to be updated asynchronously by exchanging small \namounts of data with the server behind the scenes. This means that it is \npossible to update parts of a web page, without reloading the whole page.",
          "Classic web pages, (which do not use AJAX) must reload the entire page if the \ncontent should change.",
          "Examples of applications using AJAX: Google Maps, Gmail, Youtube, and \nFacebook tabs.",
          "",
          "AJAX is based on internet standards, and uses a combination of:",
          "AJAX applications are browser- and platform-independent!",
          "AJAX was made popular in 2005 by Google, with Google Suggest.",
          "Google Suggestis using AJAX to create a very dynamic web interface: \nWhen you start typing in Google's search box, a JavaScript sends the letters off \nto a server and the server returns a list of suggestions.",
          "In our ASP tutorial, we will demonstrate how AJAX can update parts of a web \npage, without reloading the whole page. The server script will be written in ASP.",
          "If you want to learn more about AJAX, visit ourAJAX tutorial.",
          "The following example will demonstrate how a web page can communicate with a \nweb server while a user type characters in an input field:",
          "Start typing a name in the input field below:",
          "Suggestions:",
          "In the example above, when a user types a character in the input field, a function \ncalled \"showHint()\" is executed.",
          "The function is triggered by the onkeyup event.",
          "Here is the HTML code:",
          "Code explanation:",
          "First, check if the input field is empty (str.length == 0). If it is, clear the \ncontent of the txtHint placeholder and exit the function.",
          "However, if the input field is not empty, do the following:",
          "The ASP file checks an array of names, and returns the corresponding name(s) to the \nbrowser:",
          "AJAX can be used for interactive communication with a database.",
          "The following example will demonstrate how a web page can fetch \ninformation from a database with AJAX:",
          "Try it Yourself »",
          "When a user selects a customer in the dropdown list above, a function called \"showCustomer()\" is executed. The \nfunction is triggered by the \"onchange\" event:",
          "Source code explanation:",
          "If no customer is selected (str.length==0), the function clears the \ncontent of the txtHint placeholder and exits the function.",
          "If a customer is selected, the showCustomer() function executes the following:",
          "The page on the server called by the JavaScript above is an ASP file called \"getcustomer.asp\".",
          "The source code in \"getcustomer.asp\" runs a query against a database, and returns the result in an HTML \ntable:"
        ],
        "lists": [
          [
            "XMLHttpRequest object (to exchange data asynchronously with a server)",
            "JavaScript/DOM (to display/interact with the information)",
            "CSS (to style the data)",
            "XML (often used as the format for transferring data)"
          ],
          [
            "Create an XMLHttpRequest object",
            "Create the function to be executed when the server response is ready",
            "Send the request off to an ASP file (gethint.asp) on the server",
            "Notice that q parameter is added gethint.asp?q=\"+str",
            "The str variable holds the content of the input field"
          ],
          [
            "Create an XMLHttpRequest object",
            "Create the function to be executed when the server response is ready",
            "Send the request off to a file on the server",
            "Notice that a parameter (q) is added to the URL (with the content of the \n    dropdown list)"
          ]
        ],
        "examples": [
          "<html><head><script>function showHint(str) {if (str.length == 0) {document.getElementById(\"txtHint\").innerHTML = \"\";return;} else {var xmlhttp = new \n    XMLHttpRequest();xmlhttp.onreadystatechange = function() \n    {if (this.readyState == 4 && \n    this.status == 200) {document.getElementById(\"txtHint\").innerHTML = \n    this.responseText;}};xmlhttp.open(\"GET\", \"gethint.asp?q=\" + str, true);xmlhttp.send();}}</script></head><body><p><b>Start typing a name in the \n    input field below:</b></p><form>First name: <input type=\"text\" \n    onkeyup=\"showHint(this.value)\"></form><p>Suggestions: <span id=\"txtHint\"></span></p></body></html>",
          "<%response.expires=-1dim a(30)'Fill up array with namesa(1)=\"Anna\"a(2)=\"Brittany\"a(3)=\"Cinderella\"a(4)=\"Diana\"a(5)=\"Eva\"a(6)=\"Fiona\"a(7)=\"Gunda\"a(8)=\"Hege\"a(9)=\"Inga\"a(10)=\"Johanna\"a(11)=\"Kitty\"a(12)=\"Linda\"a(13)=\"Nina\"a(14)=\"Ophelia\"a(15)=\"Petunia\"a(16)=\"Amanda\"a(17)=\"Raquel\"a(18)=\"Cindy\"a(19)=\"Doris\"a(20)=\"Eve\"a(21)=\"Evita\"a(22)=\"Sunniva\"a(23)=\"Tove\"a(24)=\"Unni\"a(25)=\"Violet\"a(26)=\"Liza\"a(27)=\"Elizabeth\"a(28)=\"Ellen\"a(29)=\"Wenche\"a(30)=\"Vicky\"'get the q parameter from URLq=ucase(request.querystring(\"q\"))'lookup all hints from array if length of q>0if len(q)>0 thenhint=\"\"for i=1 to 30if q=ucase(mid(a(i),1,len(q))) thenif hint=\"\" thenhint=a(i)elsehint=hint & \" , \" & a(i)end ifend ifnextend if'Output \"no suggestion\" if no hint were found'or output the correct valuesif hint=\"\" thenresponse.write(\"no suggestion\")elseresponse.write(hint)end if%>",
          "<!DOCTYPE html><html><head><script>function showCustomer(str){if (str==\"\"){document.getElementById(\"txtHint\").innerHTML=\"\";return;}if (window.XMLHttpRequest){// code for IE7+, Firefox, Chrome, Opera, Safarixmlhttp=new XMLHttpRequest();}else{// code for IE6, IE5xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\");}xmlhttp.onreadystatechange=function(){if (this.readyState==4 && this.status==200){document.getElementById(\"txtHint\").innerHTML=this.responseText;}}xmlhttp.open(\"GET\",\"getcustomer.asp?q=\"+str,true);xmlhttp.send();}</script></head<body><form><select name=\"customers\" onchange=\"showCustomer(this.value)\"><option value=\"\">Select a customer:</option><option value=\"ALFKI\">Alfreds Futterkiste</option><option value=\"NORTS \">North/South</option><option value=\"WOLZA\">Wolski Zajazd</option></select></form><<div id=\"txtHint\">Customer info will be listed here...</div></body></html>",
          "<%response.expires=-1sql=\"SELECT * FROM CUSTOMERS WHERE CUSTOMERID=\"sql=sql & \"'\" & request.querystring(\"q\") & \"'\"set conn=Server.CreateObject(\"ADODB.Connection\")conn.Provider=\"Microsoft.Jet.OLEDB.4.0\"conn.Open(Server.Mappath(\"/datafolder/northwind.mdb\"))set rs=Server.CreateObject(\"ADODB.recordset\")rs.Open sql,connresponse.write(\"<table>\")do until rs.EOFfor each x in rs.Fieldsresponse.write(\"<tr><td><b>\" & x.name & \"</b></td>\")response.write(\"<td>\" & x.value & \"</td></tr>\")nextrs.MoveNextloopresponse.write(\"</table>\")%>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_send_email.asp",
    "cours": {
      "titre": "ASPSending e-mailwithCDOSYS",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_send_email.asp",
      "contenus": {
        "paragraphs": [
          "CDOSYS is a built-in component in ASP. This component is used to send e-mails with ASP.",
          "CDO (Collaboration Data Objects) is a Microsoft technology that is designed to simplify the creation of messaging applications.",
          "CDOSYS is a built-in component in ASP. We will show you how to use this component to send e-mail with ASP.",
          "Microsoft has discontinued the use of CDONTs on Windows 2000, Windows XP and Windows 2003. If you have used CDONTs in your ASP applications, you should \nupdate the code and use the new CDO technology.",
          "Sending a text e-mail:",
          "Sending a text e-mail with Bcc and CC fields:",
          "Sending an HTML e-mail:",
          "Sending an HTML e-mail that sends a webpage from a website:",
          "Sending an HTML e-mail that sends a webpage from a file on your computer:",
          "Sending a text e-mail with an Attachment:",
          "Sending a text e-mail using a remote server:"
        ],
        "lists": [],
        "examples": [
          "<%Set myMail = CreateObject(\"CDO.Message\")myMail.Subject = \"Sending email with CDO\"myMail.From = \"mymail@mydomain.com\"myMail.To = \"someone@somedomain.com\"myMail.TextBody = \"This is a message.\"myMail.Sendset myMail = nothing%>",
          "<%Set myMail = CreateObject(\"CDO.Message\")myMail.Subject = \"Sending email with CDO\"myMail.From = \"mymail@mydomain.com\"myMail.To = \"someone@somedomain.com\"myMail.Bcc = \"someoneelse@somedomain.com\"myMail.Cc = \"someoneelse2@somedomain.com\"myMail.TextBody = \"This is a message.\"myMail.Sendset myMail = nothing%>",
          "<%Set myMail = CreateObject(\"CDO.Message\")myMail.Subject = \"Sending email with CDO\"myMail.From = \"mymail@mydomain.com\"myMail.To = \"someone@somedomain.com\"myMail.HTMLBody = \"<h1>This is a message.</h1>\"myMail.Sendset myMail = nothing%>",
          "<%Set myMail = CreateObject(\"CDO.Message\")myMail.Subject = \"Sending email with CDO\"myMail.From = \"mymail@mydomain.com\"myMail.To =\"someone@somedomain.com\"myMail.CreateMHTMLBody \"https://www.w3schools.com/asp/\"myMail.Sendset myMail = nothing%>",
          "<%Set myMail = CreateObject(\"CDO.Message\")myMail.Subject = \"Sending email with CDO\"myMail.From = \"mymail@mydomain.com\"myMail.To = \"someone@somedomain.com\"myMail.CreateMHTMLBody \"file://c:/mydocuments/test.htm\"myMail.Sendset myMail = nothing%>",
          "<%Set myMail = CreateObject(\"CDO.Message\")myMail.Subject = \"Sending email with CDO\"myMail.From = \"mymail@mydomain.com\"myMail.To = \"someone@somedomain.com\"myMail.TextBody = \"This is a message.\"myMail.AddAttachment \"c:\\mydocuments\\test.txt\"myMail.Sendset myMail = nothing%>",
          "<%Set myMail = CreateObject(\"CDO.Message\")myMail.Subject = \"Sending email with CDO\"myMail.From = \"mymail@mydomain.com\"myMail.To = \"someone@somedomain.com\"myMail.TextBody = \"This is a message.\"myMail.Configuration.Fields.Item _(\"http://schemas.microsoft.com/cdo/configuration/sendusing\") = 2'Name or IP of remote SMTP servermyMail.Configuration.Fields.Item _(\"http://schemas.microsoft.com/cdo/configuration/smtpserver\") = \"smtp.server.com\"'Server portmyMail.Configuration.Fields.Item _(\"http://schemas.microsoft.com/cdo/configuration/smtpserverport\") = 25myMail.Configuration.Fields.UpdatemyMail.Sendset myMail = nothing%>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_examples.asp",
    "cours": {
      "titre": "ASPand VBScript Examples",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_examples.asp",
      "contenus": {
        "paragraphs": [
          "ASP Output",
          "Writing plain textWriting HTML TagsWriting HTML attributes",
          "VbScript Variables",
          "Create a variableCreate a variable \nand change its valueInsert a variable value in a textCreate an array",
          "VBScript Looping",
          "For..Next loopLooping through HTML headersFor..Each loopDo...While loop",
          "VBScript Date and Time Functions",
          "Date and timeGet the name of a dayGet the name of a monthGet todays' day and monthCountdown to year 3000Calculate the day which is n days from todayFormat date and timeIs this a date?",
          "Some Other Built-in VBScript Functions",
          "Uppercase or lowercase a stringTrim a stringHow to reverse a string?How to round a number?A random numberReturn a random number between 0-99Return a specified number of characters from left/right of a stringReplace some characters in a stringReturn a specified number of characters from a string",
          "Procedures",
          "Sub procedureFunction procedure",
          "VBScript vs JavaScript",
          "Call a procedure using VBScript in ASPCall a procedure using JavaScript in ASPCall a JavaScript procedure and a VBScript procedure using VBScript in ASPTime-based greeting using VBScriptTime-based greeting using JavaScript",
          "VBScript Conditional Statements",
          "If...Then..Else statementIf...Then..ElseIf statementSelect Case statementRandom link",
          "ASP Forms",
          "Interact with a user in a form that uses the \"get\" methodInteract with a user in a form that uses the \"post\" methodInteract with a user in a  form with radio buttons",
          "ASP Cookies",
          "Create a welcome cookie",
          "ASP Response Object",
          "Write text using ASPFormat text with HTML tagsRedirect the user to another URLRandom linksControlling the bufferClear the bufferEnd a script in the middle of processingSet how many minutes a page will be cached in a browser before it expiresSet a date/time when a page cached in a browser will expireCheck if the user is still connectedSet the type of contentSet the name of character set",
          "ASP Request Object",
          "Send extra information within a linkA QueryString collection in its simplest useHow to use information from formsMore information from a formA form collection in its simplest useHow to use information from formsMore information from a formA form with radio buttonsA form with checkboxesHow to find the visitors' browser type, IP address and moreList all servervariables you can ask forWelcome cookieTotal number of bytes the user sent",
          "ASP Session Object",
          "Return session id number for a userGet a session's timeout",
          "ASP Server Object",
          "When was a file last modified?Open a textfile for readingHome made hit counter",
          "ASP FileSystem Object",
          "Does a specified file exist?Does a specified folder exist?Does a specified drive exist?Get the name of a specified driveGet the name of the parent folder of a specified pathGet the file extensionGet the base name of a file or folder",
          "ASP TextStream Object",
          "Read textfileRead only a part of a textfileRead one line of a textfileRead all lines from a textfileSkip a part of a textfileSkip a line of a textfileReturn current line-number in a text fileGet column number of the current character in a text file",
          "ASP Drive Object",
          "Get the available space of a specified driveGet the free space of a specified driveGet the total size of a specified driveGet the drive letter of a specified driveGet the drive type of a specified driveGet the file system of a specified driveIs the drive ready?Get the path of a specified driveGet the root folder of a specified driveGet the serial \nnumber of a specified drive",
          "ASP File Object",
          "When was the file created?When was the file last modified?When was the file last accessed?Return the attributes of a specified file",
          "ASP Dictionary Object",
          "Does a specified key exist?Return an array of all itemsReturn an array of all keysReturn the value of an itemSet a keyReturn the number of key/item pairs",
          "ASP AdRotator",
          "Display a different image each time a user visits a page",
          "ASP Browser Capabilities",
          "Find the type, capabilities, and version of each browser that visits your site",
          "ASP ContentRotator",
          "Display a different content each time a user visits a page (ASP 3.0)",
          "ASP Content Linking",
          "Build a table of contentsNavigate between pages in a text file"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_exam.asp",
    "cours": {
      "titre": "W3SchoolsClassic ASP Certificate",
      "description": "How Does It Work?Study for free at W3Schools.comStudy at your own speedTest your skills with W3Schools online quizzesApply for your certificate by paying an exam feeTake your exam online, at any time, and from any location",
      "lien": "https://www.w3schools.com/asp/asp_exam.asp",
      "contenus": {
        "paragraphs": [
          "W3Schools offers an Online Certification Program.",
          "The perfect solution for busy professionals who need to balance work, family, and career building.",
          "More than 50 000 certificates already issued!",
          "Get Your Certificate »",
          "W3Schools offers an Online Certification Program.",
          "The perfect solution for busy professionals who need to balance work, family, and career building.",
          "More than 50 000 certificates already issued!",
          "Get Your Certificate »",
          "Any student or professional within the digital industry.",
          "Certifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.",
          "W3Schools has over two decades of experience with teaching coding online.",
          "Our certificates are recognized and valued by companies looking to employ skilled developers.",
          "Show the world your coding skills by getting a certification.",
          "The prices is a small fraction compared to the price of traditional education.",
          "Document and validate your competence by getting certified!",
          "Fee:95 USD",
          "Achievable certification levels:Intermediate (40%)Advanced (75%)Professional (90%)",
          "Number of questions:Adaptive,60on average",
          "Requirement to pass:Minimum 40% - Intermediate level",
          "Time limit:60 minutes",
          "Number of attempts to pass:3",
          "Exam deadline:None",
          "Certification Expiration:None",
          "Format:Online, multiple choice",
          "Register now »",
          "Getting a certificate proves your commitment to upgrading your skills.",
          "The certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.",
          "It gives you the credibility needed for more responsibilities, larger projects, and a higher salary.",
          "Knowledge is power, especially in the current job market.",
          "Documentation of your skills enables you to advance your career or helps you to start a new one.",
          "Example certificate:",
          "Each certificate gets a unique link that can be shared with others.",
          "Validate your certification with the link or QR code.",
          "Check how it looks like in thisExample.",
          "Share your certificate on Linkedin the Certifications section in just one click!",
          "Getting a certificate proves your commitment to upgrade your skills,\n    gives you the credibility needed for more responsibilities, larger projects, and a higher salary.",
          "Get Your Certificate »",
          "Are you an educator, manager or business owner looking for courses or certifications?",
          "We are working with schools, companies and organizations from all over the world.",
          "Get courses and/or certifications for your team here."
        ],
        "lists": [
          [
            "Study for free at W3Schools.com",
            "Study at your own speed",
            "Test your skills with W3Schools online quizzes",
            "Apply for your certificate by paying an exam fee",
            "Take your exam online, at any time, and from any location"
          ]
        ],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_ref_vbscript_functions.asp",
    "cours": {
      "titre": "VBScriptFunctions",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_ref_vbscript_functions.asp",
      "contenus": {
        "paragraphs": [
          "This page contains all the built-in VBScript functions. The page is divided into following sections:"
        ],
        "lists": [
          [
            "Date/Time functions",
            "Conversion functions",
            "Format functions"
          ],
          [
            "Math functions",
            "Array functions"
          ],
          [
            "String functions",
            "Other functions"
          ]
        ],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_ref_vbscript_keywords.asp",
    "cours": {
      "titre": "VBScriptKeywords",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_ref_vbscript_keywords.asp",
      "contenus": {
        "paragraphs": [
          "Used to indicate an uninitialized variable value. A \n    variable value is uninitialized when it is first created and no value is \n    assigned to it, or when a variable value is explicitly set to empty.",
          "Example:Dim x   \n    'the variable x is uninitialized!x=\"ff\"   'the variable x is NOT uninitialized anymorex=Empty   'the variable x is uninitialized!",
          "Note:This is not the same as Null!!",
          "Used to test if a variable is uninitialized.",
          "Example: If (IsEmpty(x)) 'is x uninitialized?",
          "Example: \n    Set myObject=Nothing",
          "Example: If (myObject Is Nothing) 'is it unset?",
          "Note:If you compare a value to Nothing, you will not get the \n    right result! Example: If (myObject = Nothing) 'always false!",
          "One way to think of Null is that someone has explicitly set the value to \n    \"invalid\", unlike Empty where the value is \"not set\".",
          "Note:This is not the same as Empty or Nothing!!",
          "Example: x=Null 'x contains no valid data",
          "Example: if (IsNull(x)) 'is x invalid?"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_ref_response.asp",
    "cours": {
      "titre": "ASPResponseObject",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_ref_response.asp",
      "contenus": {
        "paragraphs": [
          "The ASP Response object is used to send output to the user from the server.",
          "Write text with ASPHow to write text with ASP.",
          "Format text with HTML tags in ASPHow to combine text and HTML tags with ASP.",
          "Redirect the user to a different URLHow to redirect the user to a different URL.",
          "Show a random linkHow to create a random link.",
          "Controlling the bufferHow to control the buffer.",
          "Clear the bufferHow to clear the buffer.",
          "End a script in the middle of processing and return the resultHow to end a script in the middle of processing.",
          "Set how many minutes a page will be cached in a browser before it expiresHow to specify how many minutes a page will be cached\nin a browser before it expires.",
          "Set a date/time when a page cached in a browser will expireHow to specify a date/time a page cached in a browser\nwill expire.",
          "Check if the user is still connected to the serverHow to check if a user is disconnected from the server.",
          "Set the type of contentHow to specify the type of content.",
          "Set the name of the character setHow to specify the name of the character set.",
          "The ASP Response object is used to send output to the user from the server. Its\ncollections, properties, and methods are described below:"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_ref_request.asp",
    "cours": {
      "titre": "ASPRequestObject",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_ref_request.asp",
      "contenus": {
        "paragraphs": [
          "The Request object is used to get information from a visitor.",
          "Send query information when a user clicks on a linkHow to send query information to a page within a link, and retrieve that information on the\ndestination page (which is, in this example, the same page).",
          "A QueryString collection in its simplest useUse the QueryString collection to retrieve the values from a form (the form uses \nthe get method - the information sent is visible to everybody).",
          "How to use information from formsHow to use the values retrieved from a form.",
          "More information from a formWhat the QueryString collection contains if several input\nfields have equal names. It also shows how to use the Count keyword to count the \n\"name\" property.",
          "A form collection in its simplest useHow the Form collection retrieves the values from a form (the form uses the post\nmethod - the information sent is invisible to others).",
          "How to use information from formsHow to use the values retrieved from a form.",
          "More information from a formWhat the Form collection contains if several\ninput fields have equal names. It also shows how to use the Count keyword to \ncount the \"name\" property.",
          "A form with radio buttonsHow to interact with the user through radio buttons.",
          "A form with checkboxesHow to interact with the user through checkboxes.",
          "Get the server variablesHow to get the visitor's browser type, IP address, and more.",
          "Create a welcome cookieHow to create a Welcome Cookie.",
          "Find the total number of bytes the user sentHow to find\nthe total number of bytes the user sent in the Request object.",
          "When a browser asks for a page from a server, it is called a request. The Request \nobject is used to get information from a visitor.\nIts collections, properties, and methods are described below:"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_ref_application.asp",
    "cours": {
      "titre": "ASPApplicationObject",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_ref_application.asp",
      "contenus": {
        "paragraphs": [
          "A group of ASP files that work together to perform some purpose\nis called an application.\nThe Application object is used to tie these files together.",
          "An application on the Web may consists of several ASP files that work together to perform some purpose.\nThe Application object is used to tie these files together.",
          "The Application object is used to store and access variables from any page, just like the Session object. The difference\nis that ALL users share ONE Application object (with Sessions there is ONE Session object for EACH user).",
          "The Application object holds information that will be used by many pages in the application (like database connection information).\nThe information can be accessed from any page. The information can also be changed in one place, and the changes will automatically be reflected\non all pages.",
          "The Application object's collections, methods, and events are described \nbelow:"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_ref_session.asp",
    "cours": {
      "titre": "ASPSessionObject",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_ref_session.asp",
      "contenus": {
        "paragraphs": [
          "A Session object stores information about, or change settings for a user session.",
          "Set and return the LCIDSet or return an integer that specifies a location or region. Contents like date,\ntime, and currency will be displayed according to that location or region.",
          "Return the SessionIDReturn\na unique id for each user. The id is generated by the server.",
          "A session's timeoutSet and return the timeout (in minutes) of a session.",
          "When you are working with an application on your computer, you open it, do some changes and then\nyou close it. This is much like a Session. The computer knows who you are. It\nknows when you open the application and when you close it. However, on the internet there is one\nproblem: the web server does not know who you are and what you do, because the HTTP address doesn't maintain state.",
          "ASP solves this problem by creating a unique cookie for each user. The cookie\nis sent to the user's computer and it contains information that identifies the user. This\ninterface is called the Session object.",
          "The Session object stores information about, or change settings for a user session.",
          "Variables stored in a Session object hold information about one single user, and are available to all pages in one application. Common information\nstored in session variables are name, id, and preferences. The server creates a new Session object for each new user, and destroys the Session object when the session expires.",
          "The Session object's collections, properties, methods, and events are \ndescribed below:"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_ref_server.asp",
    "cours": {
      "titre": "ASPServerObject",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_ref_server.asp",
      "contenus": {
        "paragraphs": [
          "The Server object is used to access properties and methods on the server.",
          "When was a file last modified?Check when a file was last modified.",
          "Open a text file for readingOpen \"Textfile.txt\" for reading.",
          "Homemade hit counter",
          "The ASP Server object is used to access properties and methods on the server. Its properties and methods are described below:"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_ref_error.asp",
    "cours": {
      "titre": "ASPASPErrorObject",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_ref_error.asp",
      "contenus": {
        "paragraphs": [
          "The ASPError object displays information about errors in scripts.",
          "The ASPError object was implemented in ASP 3.0 and is available in IIS5 and later.",
          "The ASPError object is used to display detailed information of any error that occurs\nin scripts in an ASP page.",
          "Note:The ASPError object is created when Server.GetLastError is\ncalled, so the error information can only be accessed by using the Server.GetLastError method.",
          "The ASPError object's properties are described below (all properties are read-only):"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_ref_filesystem.asp",
    "cours": {
      "titre": "ASPFileSystemObjectObject",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_ref_filesystem.asp",
      "contenus": {
        "paragraphs": [
          "The FileSystemObject object is used to access the file system on \na server.",
          "Does a specified file exist?How to check if a file exists.",
          "Does a specified folder exist?How to check if a folder exists.",
          "Does a specified drive exist?How to check if a drive exists.",
          "Get the name of a specified driveHow to get the name of a specified drive.",
          "Get the name of the parent folder of a specified pathHow to get the name of the parent folder of a specified path.",
          "Get file nameHow to get the file name of the last component in a specified path.",
          "Get the file extensionHow to get the file extension of the last component in a specified path.",
          "Get the base name of a file or folderHow to get the base name of a file or folder, in a specified path.",
          "The FileSystemObject object is used to access the file system on a server.",
          "This object can manipulate files, folders, and directory paths. It is also\npossible to retrieve file system information with this object.",
          "The following code creates a text file (c:\\test.txt) and then writes some text to\nthe file:"
        ],
        "lists": [],
        "examples": [
          "<%dim fs,fnameset fs=Server.CreateObject(\"Scripting.FileSystemObject\")set fname=fs.CreateTextFile(\"c:\\test.txt\",true)fname.WriteLine(\"Hello World!\")fname.Closeset fname=nothingset fs=nothing%>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_ref_textstream.asp",
    "cours": {
      "titre": "ASPTextStreamObject",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_ref_textstream.asp",
      "contenus": {
        "paragraphs": [
          "The TextStream object is used to access the contents of a text file.",
          "Read textfileHow to \nread from a text file.",
          "Read only a part of a textfileHow to only read a part of a TextStream file.",
          "Read one line of a textfileHow to read one line from a TextStream file.",
          "Read all lines from a textfileHow to read all the lines from a TextStream file.",
          "Skip a part of a textfileHow to skip a specified number of characters when reading the TextStream file.",
          "Skip a line of a textfileHow to skip a line when reading the TextStream file.",
          "Return line-numberHow to return the current line number in a TextStream file.",
          "Get column numberHow to get the column number of the current character in a file.",
          "The TextStream object is used to access the contents of text files.",
          "The following code creates a text file (c:\\test.txt) and then writes some text\nto the file (the variable f is an instance of the TextStream object):",
          "To create an instance of the TextStream object you can use the CreateTextFile or OpenTextFile methods of the FileSystemObject object,\nor you can use the OpenAsTextStream method of the File object.The TextStream object's properties and methods are described below:PropertiesPropertyDescriptionAtEndOfLineReturns true if the file pointer is positioned immediately\n      before the end-of-line marker in a TextStream file, and false if notAtEndOfStreamReturns true if the file pointer is at the end of a\n      TextStream file, and false if notColumnReturns the column number of the current character position\n      in an input streamLineReturns the current line number in a TextStream fileMethodsMethodDescriptionCloseCloses an open TextStream fileReadReads a specified number of characters from a TextStream\n      file and returns the resultReadAllReads an entire TextStream file and returns the resultReadLineReads one line from a TextStream file and returns the resultSkipSkips a specified number of characters when reading a TextStream fileSkipLineSkips the next line when reading a TextStream fileWriteWrites a specified text to a TextStream fileWriteLineWrites a specified text and a new-line character to a TextStream fileWriteBlankLinesWrites a specified number of new-line character to a TextStream file❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "The TextStream object's properties and methods are described below:"
        ],
        "lists": [],
        "examples": [
          "<%dim fs,fset fs=Server.CreateObject(\"Scripting.FileSystemObject\")set f=fs.CreateTextFile(\"c:\\test.txt\",true)f.WriteLine(\"Hello World!\")f.Closeset f=nothingset fs=nothing%>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_ref_drive.asp",
    "cours": {
      "titre": "ASPDriveObject",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_ref_drive.asp",
      "contenus": {
        "paragraphs": [
          "The Drive object is used to get information about a local disk drive or a network share.",
          "Get the total size of a specified driveHow to get the total size of a specified drive.",
          "Get the available space of a specified driveHow to get the available space of a specified drive.",
          "Get the free space of a specified driveHow to get the free space of a specified drive.",
          "Get the drive letter of a specified driveHow to get the drive letter of a specified drive.",
          "Get the drive type of a specified driveHow to get the drive type of a specified drive.",
          "Get the file system of a specified driveHow to get the file system of a specified drive.",
          "Is the drive ready?How to check whether a specified drive is ready.",
          "Get the path of a specified driveHow to get the path of a specified drive.",
          "Get the root folder of a specified driveHow to get the root folder of a specified drive.",
          "Get the serialnumber of a specified driveHow to get the serialnumber of a specified drive.",
          "The Drive object is used to return information about a local disk drive or a network share.\nThe Drive object can return information about a drive's type of file system, free space,\nserial number, volume name, and more.",
          "Note:You cannot return information about a drive's content with the\nDrive object. For this purpose you will have to use the Folder object.",
          "To work with the properties of the Drive object, you will have to create an \ninstance of the Drive object through the FileSystemObject\nobject. First; create a FileSystemObject object and then instantiate the Drive object \nthrough the GetDrive method or\nthe Drives property of the FileSystemObject object.",
          "The Drive object's properties are described below:"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_ref_file.asp",
    "cours": {
      "titre": "ASPFileObject",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_ref_file.asp",
      "contenus": {
        "paragraphs": [
          "The File object is used to return information about a specified file.",
          "When was the file last modified?How to get the date and time a specified file was last modified.",
          "When was the file last accessed?How to get the date and time a specified file was last accessed.",
          "Return the attributes of a specified fileHow to return the attributes of a specified file.",
          "The File object is used to return information about a specified file.",
          "To work with the properties and methods of the File object, you will have to \ncreate an instance of\nthe File object through the FileSystemObject object. First; create a FileSystemObject\nobject and then instantiate the File object through the GetFile method of the\nFileSystemObject object or through the Files property of the Folder object.",
          "The following code uses the GetFile method of the FileSystemObject object to\ninstantiate the File object and the DateCreated property to return the date when\nthe specified file was created:",
          "The File object's properties and methods are described below:"
        ],
        "lists": [],
        "examples": [
          "<%Dim fs,fSet fs=Server.CreateObject(\"Scripting.FileSystemObject\")Set f=fs.GetFile(\"c:\\test.txt\")Response.Write(\"File created: \" & f.DateCreated)set f=nothingset fs=nothing%>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_ref_folder.asp",
    "cours": {
      "titre": "ASPFolderObject",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_ref_folder.asp",
      "contenus": {
        "paragraphs": [
          "The Folder Object is used to return information about a specified folder.",
          "The Folder object is used to return information about a specified folder.",
          "To work with the properties and methods of the Folder object, you will have to \ncreate an instance of the Folder object through the FileSystemObject object. First; create a FileSystemObject\nobject and then instantiate the Folder object through the GetFolder method of the FileSystemObject object.",
          "The following code uses the GetFolder method of the FileSystemObject object to instantiate the Folder object\nand the DateCreated property to return the date when the specified folder was created:",
          "The Folder object's collections, properties, and methods are described below:"
        ],
        "lists": [],
        "examples": [
          "<%Dim fs,foSet fs=Server.CreateObject(\"Scripting.FileSystemObject\")Set fo=fs.GetFolder(\"c:\\test\")Response.Write(\"Folder created: \" & fo.DateCreated)set fo=nothingset fs=nothing%>Output:Folder created: 10/22/2008 10:01:19 AM"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_ref_dictionary.asp",
    "cours": {
      "titre": "ASPDictionaryObject",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_ref_dictionary.asp",
      "contenus": {
        "paragraphs": [
          "The Dictionary object stores information in name/value pairs.",
          "Does a specified key exist?How to create a Dictionary object, and then use the Exists method to check if a specified key exists.",
          "Return an array of all itemsHow to use the Items method to return an array of all the items.",
          "Return an array of all keysHow to use the Keys method to return an array of all the keys.",
          "Return the value of an itemHow to use the Item property to return the value of an item.",
          "Set a keyHow to use the Key property to set a key in a Dictionary object.",
          "Return the number of key/item pairsHow to use the Count property to return the number of key/item pairs.",
          "The Dictionary object is used to store information in name/value pairs \n(referred to as key and item). The Dictionary object might seem similar to \nArrays, however, the Dictionary object is a more desirable solution to \nmanipulate related data.",
          "Comparing Dictionaries and Arrays:",
          "The following example creates a Dictionary object, adds some key/item \npairs to it, and retrieves the item value for the key gr:",
          "The Dictionary object's properties and methods are described below:"
        ],
        "lists": [
          [
            "Keys are used to identify the items in a Dictionary object",
            "You do not have to call ReDim to change the size of the Dictionary object",
            "When deleting an item from a Dictionary, the remaining items will   automatically shift up",
            "Dictionaries cannot be multidimensional, Arrays can",
            "Dictionaries have more built-in functions than Arrays",
            "Dictionaries work better than arrays on accessing random elements frequently",
            "Dictionaries work better than arrays on locating items by their content"
          ]
        ],
        "examples": [
          "<%Dim dSet d=Server.CreateObject(\"Scripting.Dictionary\")d.Add \"re\",\"Red\"d.Add \"gr\",\"Green\"d.Add \"bl\",\"Blue\"d.Add \"pi\",\"Pink\"Response.Write(\"The value of key gr is: \" & d.Item(\"gr\"))%>Output:The value of key gr is: Green"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_adrotator.asp",
    "cours": {
      "titre": "ASPAdRotatorComponent",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_adrotator.asp",
      "contenus": {
        "paragraphs": [
          "The ASP AdRotator component creates an AdRotator object that displays a different image each time a user enters or refreshes a page. A\ntext file includes information about the images.",
          "Note:The AdRotator does not work with Internet Information Server 7 (IIS7).",
          "Assume that we have the following text file, named \"ads.txt\":",
          "The lines below the asterisk in the text file above specifies the name of the images (ads) to be displayed, the\nhyperlink addresses, the alternate text (for the images), and the display rates (in percent).",
          "The first line in the text file above specifies what to happen when a visitor clicks on one of the images.\nThe redirection page (banners.asp) will receive a querystring with the URL to redirect to.",
          "Tip:To specify the height, width, and border of the image, you can insert the following lines under REDIRECT:",
          "The \"banners.asp\" file looks like this:",
          "That's all!!"
        ],
        "lists": [],
        "examples": [
          "<%set adrotator=server.createobject(\"MSWC.AdRotator\")adrotator.GetAdvertisement(\"textfile.txt\")%>",
          "REDIRECT banners.asp*w3s.gifhttps://www.w3schools.comFree Tutorials from W3Schools50xmlspy.gifhttps://www.altova.comXML Editor from Altova50",
          "REDIRECT banners.aspWIDTH 468HEIGHT 60BORDER 0*w3s.gif...",
          "<%url=Request.QueryString(\"url\")If url<>\"\" then Response.Redirect(url)%><!DOCTYPE html><html><body><%set adrotator=Server.CreateObject(\"MSWC.AdRotator\")response.write(adrotator.GetAdvertisement(\"textfile.txt\"))%></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_browser.asp",
    "cours": {
      "titre": "ASPBrowser CapabilitiesComponent",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_browser.asp",
      "contenus": {
        "paragraphs": [
          "The ASP Browser Capabilities component creates a BrowserType object that determines the type, capabilities and version number of a visitor's browser.",
          "When a browser connects to a server, a User Agent header is also sent to the server. This header contains information about the browser.",
          "The BrowserType object compares the information in the header with information in a file on the server called \"Browscap.ini\".",
          "If there is a match between the browser type and version number in the header and the information in the \"Browscap.ini\" file, the BrowserType object \ncan be used to list the properties of the matching browser. If there is no match for the browser type and version number in the Browscap.ini file, it \nwill set every property to \"UNKNOWN\".",
          "The example below creates a BrowserType object in an ASP file, and displays  \nsome of the capabilities of your browser:",
          "Output:",
          "Show Example »",
          "The \"Browscap.ini\" file is used to declare properties and to set default values for browsers.",
          "This section is not a tutorial on how to maintain \"Browscap.ini\" files, it only shows you the basics;\nso you get an idea what the file is all about.",
          "The \"Browscap.ini\" file can contain the following:",
          "A \"Browscap.ini\" file might look something like this:"
        ],
        "lists": [
          [
            "ActiveXControls - Support ActiveX controls?",
            "Backgroundsounds - Support background sounds?",
            "Cdf - Support Channel Definition Format for Webcasting?",
            "Tables - Support tables?",
            "Cookies - Support cookies?",
            "Frames - Support frames?",
            "Javaapplets - Support Java applets?",
            "Javascript - Supports JScript?",
            "Vbscript - Supports VBScript?",
            "Browser - Specifies the name of the browser",
            "Beta - Is the browser beta software?",
            "Platform - Specifies the platform that the browser runs on",
            "Version - Specifies the version number of the browser"
          ]
        ],
        "examples": [
          "<%Set MyBrow=Server.CreateObject(\"MSWC.BrowserType\")%>",
          "<!DOCTYPE html><html><body><%Set MyBrow=Server.CreateObject(\"MSWC.BrowserType\")%><table border=\"0\" width=\"100%\"><tr><th>Client OS</th><th><%=MyBrow.platform%></th></tr><tr><td >Web Browser</td><td ><%=MyBrow.browser%></td></tr><tr><td>Browser version</td><td><%=MyBrow.version%></td></tr><tr><td>Frame support?</td><td><%=MyBrow.frames%></td></tr><tr><td>Table support?</td><td><%=MyBrow.tables%></td></tr><tr><td>Sound support?</td><td><%=MyBrow.backgroundsounds%></td></tr><tr><td>Cookies support?</td><td><%=MyBrow.cookies%></td></tr><tr><td>VBScript support?</td><td><%=MyBrow.vbscript%></td></tr><tr><td>JavaScript support?</td><td><%=MyBrow.javascript%></td></tr></table></body></html>",
          "[;comments][HTTPUserAgentHeader][parent=browserDefinition][property1=value1][propertyN=valueN][Default Browser Capability Settings][defaultProperty1=defaultValue1][defaultPropertyN=defaultValueN]",
          ";IE 5.0[IE 5.0]browser=IEVersion=5.0majorver=#5minorver=#0frames=TRUEtables=TRUEcookies=TRUEbackgroundsounds=TRUEvbscript=TRUEjavascript=TRUEjavaapplets=TRUEActiveXControls=TRUEbeta=False;DEFAULT BROWSER[*]browser=Defaultframes=FALSEtables=TRUEcookies=FALSEbackgroundsounds=FALSEvbscript=FALSEjavascript=FALSE"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_contentlinking.asp",
    "cours": {
      "titre": "ASPContent LinkingComponent",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_contentlinking.asp",
      "contenus": {
        "paragraphs": [
          "The Content Linking ComponentBuild a table of contents.",
          "The Content Linking Component 2Use the Content Linking Component to navigate between the pages in a text file.",
          "The ASP Content Linking component is used to create a quick and easy navigation system!",
          "The Content Linking component returns a Nextlink object that is used to hold a list of Web pages to be navigated.",
          "First we create a text file - \"links.txt\":",
          "The text file above contains the pages to be navigated. The pages must be listed in the same order you want them to be \ndisplayed, and it must also contain a description for each file name (use the tab key to separate file name from description).",
          "Note:If you want to add a page, or change the order of the pages in the list; you only have to \nmodify the text file! The navigation will automatically be corrected!",
          "Then we create an include file, \"nlcode.inc\". The .inc file creates \na NextLink object to navigate between the pages listed in \"links.txt\".",
          "\"nlcode.inc\":",
          "In each of the .asp pages listed in the text file \"links.txt\", put one line of code:<!-- #include file=\"nlcode.inc\"-->. This line will include the code in\n\"nlcode.inc\" on every page listed in \"links.txt\" and the navigation will work.",
          "Output:",
          "There are 4 items in the list",
          "Output:",
          "Item number 3",
          "Next description is: ASP Variables",
          "Next URL is: asp_variables.asp",
          "Third description is: ASP Variables",
          "Third URL is: asp_variables.asp",
          "Previous description is: ASP Variables",
          "Previous URL is: asp_variables.asp"
        ],
        "lists": [],
        "examples": [
          "<%Set nl=Server.CreateObject(\"MSWC.NextLink\")%>",
          "asp_intro.asp    ASP Introasp_syntax.asp    ASP Syntaxasp_variables.asp    ASP Variablesasp_procedures.asp    ASP Procedures",
          "<%dim nlSet nl=Server.CreateObject(\"MSWC.NextLink\")if (nl.GetListIndex(\"links.txt\")>1) thenResponse.Write(\"<a href='\" & nl.GetPreviousURL(\"links.txt\"))Response.Write(\"'>Previous Page</a>\")end ifResponse.Write(\"<a href='\" & nl.GetNextURL(\"links.txt\"))Response.Write(\"'>Next Page</a>\")%>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_contentrotator.asp",
    "cours": {
      "titre": "ASPContent RotatorComponent (ASP 3.0)",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_contentrotator.asp",
      "contenus": {
        "paragraphs": [
          "The ASP Content Rotator component creates a ContentRotator object that displays a\ndifferent content string each time a visitor enters or refreshes a page.",
          "A\ntext file, called the Content Schedule File, includes the information about the content strings.",
          "The content strings can contain HTML tags so you can display any type \nof content that HTML can represent: text, images, colors, or hyperlinks.",
          "The following example displays a different content each time a visitor views \nthe Web page.",
          "First, create a text file named \"textads.txt\" and place it in a subfolder called \n\"text\".",
          "\"textads.txt\":",
          "Notice the #number at the beginning of each content string. This number is \nan optional parameter that indicates the relative weight of the HTML content \nstring. In the text file above, the Content Rotator will display the first and \nsecond content \nstring three-tenth of the time, and the third string four-tenths of \nthe time.",
          "Then, create an ASP file, and insert the following code:",
          "Output:",
          "Output:",
          "",
          "Visit W3Schools.com"
        ],
        "lists": [],
        "examples": [
          "<%Set cr=Server.CreateObject(\"MSWC.ContentRotator\")%>",
          "%% #3<h2>This is a great day!!</h2>%% #3<img src=\"smiley.gif\">%% #4<a href=\"https://www.w3schools.com\">Visit W3Schools.com</a>",
          "<html><body><%set cr=server.createobject(\"MSWC.ContentRotator\")response.write(cr.ChooseContent(\"text/textads.txt\"))%></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/asp_quickref.asp",
    "cours": {
      "titre": "ASPQuick Reference",
      "description": "",
      "lien": "https://www.w3schools.com/asp/asp_quickref.asp",
      "contenus": {
        "paragraphs": [
          "ASP Quick Reference from W3Schools. Print it, and fold it in your pocket.",
          "ASP scripts are surrounded by <% and %>.  To write some \noutput to a browser:",
          "<html><body><%\nresponse.write(\"Hello World!\")\n%></body></html>",
          "The default language in ASP is VBScript. To use another scripting language, \ninsert a language specification at the top of the ASP page:",
          "<%@ language=\"javascript\" %><html><body>",
          "<%....%>",
          "Request.QueryString is used to collect values in a form with method=\"get\". \nInformation sent from a form with the GET method is visible to everyone (it will \nbe displayed in the browser's address bar) and has limits on the amount of \ninformation to send.",
          "Request.Form is used to collect values in a form with method=\"post\". \nInformation sent from a form with the POST method is invisible to others and has \nno limits on the amount of information to send.",
          "A cookie is often used to identify a user. A cookie is a small file that the \nserver embeds on the user's computer. Each time the same computer requests for a \npage with a browser, it will send the cookie too.",
          "The Response.Cookies command is used to create cookies:",
          "<%Response.Cookies(\"firstname\")=\"Alex\"Response.Cookies(\"firstname\").Expires=\"May 10,2002\"%>",
          "Note:The Response.Cookies command must appear BEFORE the <html> tag!",
          "The \"Request.Cookies\" command is used to retrieve a cookie value:",
          "<%fname=Request.Cookies(\"firstname\")response.write(\"Firstname=\" & fname)%>",
          "You can insert the content of one ASP file into another ASP file before the \nserver executes it, with the #include directive. The #include directive is used \nto create functions, headers, footers, or elements that will be reused on \nmultiple pages",
          "Syntax:",
          "<!--#include virtual=\"somefile.inc\"-->or<!--#include file =\"somefile.inc\"-->",
          "Use the virtual keyword to indicate a path beginning with a virtual \ndirectory. If a file named \"header.inc\" resides in a virtual directory named \n/html, the following line would insert the contents of \"header.inc\":",
          "<!-- #include virtual =\"/html/header.inc\" -->",
          "Use the file keyword to indicate a relative path. A relative path begins with \nthe directory that contains the including file. If you have a file in the html \ndirectory, and the file \"header.inc\" resides in html\\headers, the following line \nwould insert \"header.inc\" in your file:",
          "<!-- #include file =\"headers\\header.inc\" -->",
          "Use the file keyword with the syntax (..\\) to include a file from a \nhigher-level directory.",
          "The Global.asa file is an optional file that can contain declarations of \nobjects, variables, and methods that can be accessed by every page in an ASP \napplication.",
          "Note:The Global.asa file must be stored in the\nroot directory of the ASP application, and each application can only have one\nGlobal.asa file.",
          "The Global.asa file can contain only the following:",
          "Application and Session Events",
          "In Global.asa you can tell the application and session objects what to do \nwhen the application/session starts and what to do when the application/session \nends. The code for this is placed in event handlers.Note:We do not use\n<% and %>, to\ninsert scripts in the Global.asa file, we have to put the subroutines inside the\nHTML <script> tag:",
          "<script language=\"vbscript\" runat=\"server\">sub Application_OnStart' some codeend subsub Application_OnEnd' some codeend subsub Session_OnStart' some codeend subsub Session_OnEnd' some codeend sub</script>",
          "<object> Declarations",
          "It is also possible to create objects with session or application scope in \n Global.asa by using the <object> tag.Note:The <object> tag should be \n outside the <script> tag!",
          "Syntax:",
          "<object runat=\"server\" scope=\"scope\" id=\"id\"{progid=\"progID\"|classid=\"classID\"}>.......</object>",
          "TypeLibrary Declarations",
          "A TypeLibrary is a container for the contents of a DLL file corresponding to \n a COM object. By including a call to the TypeLibrary in the Global.asa file, \n the constants of the COM object can be accessed, and errors can be better \n reported by the ASP code. If your Web application relies on COM objects that \n have declared data types in type libraries, you can declare the type libraries \n in Global.asa.",
          "Syntax:",
          "<!--METADATA TYPE=\"TypeLib\"file=\"filename\"uuid=\"typelibraryuuid\"version=\"versionnumber\"lcid=\"localeid\"-->",
          "The Session object is used to store information about, or change settings for \na user session. Variables stored in the Session object hold information about \none single user, and are available to all pages in one application.",
          "Collections",
          "Properties",
          "Method",
          "A group of ASP files that work together to perform some \n purpose is called an application. The Application object in ASP is used to tie \n these files together. All users share one Application object. The Application object\nshould hold information that will be used by many pages in the application (like\ndatabase connection information).",
          "Collections",
          "Methods",
          "The Response Object is used to send output to the user from the server.",
          "Collection",
          "Properties",
          "Methods",
          "When a browser asks for a page from a server, it is called a request. The\nRequest Object is used to get information from the user.",
          "Collection",
          "Property",
          "Method",
          "The Server Object is used to access properties and methods on the server.",
          "Property",
          "Method",
          "Source : https://www.w3schools.com/asp/asp_quickref.asp"
        ],
        "lists": [
          [
            "Application events",
            "Session events",
            "<object> declarations",
            "TypeLibrary declarations",
            "the #include directive"
          ],
          [
            "Contents - Holds every item added to the session with script commands",
            "StaticObjects - Holds every object added to the session with the <object> tag, and a given session",
            "Contents.Remove(item/index) - Deletes an item from the Contents collection",
            "Contents.RemoveAll() - Deletes every item from the Contents collection"
          ],
          [
            "CodePage - Sets the code page that will be used to display dynamic content",
            "LCID - Sets the locale identifier that will be used to display dynamic content",
            "SessionID - Returns the session id",
            "Timeout - Sets the timeout for the session"
          ],
          [
            "Abandon - Kills every object in a session object"
          ],
          [
            "Contents - Holds every item added to the application with script commands",
            "StaticObjects - Holds every object added to the application with the <object>\ntag",
            "Contents.Remove - Deletes an item from a collection",
            "Contents.RemoveAll - Deletes every item from a collection"
          ],
          [
            "Lock - Prevents a user from changing the application object properties",
            "Unlock - Allows a user to change the application object properties"
          ],
          [
            "Cookies(name) - Sets a cookie value. If the cookie does not exist, it will\n    be created, and take the value that is specified"
          ],
          [
            "Buffer - Whether to buffer the output or not. When the output is buffered,\n    the server will hold back the response until all of the server scripts have\n    been processed, or until the script calls the Flush or End method. If this\n    property is set, it should be before the <html> tag in the ASP file",
            "CacheControl - Sets whether proxy servers can cache the output or not.\n    When set to Public, the output can be cached by a proxy server",
            "Charset(charset_name) -Sets the name of the character set (like\n    \"ISO8859-1\") to the content type header",
            "ContentType - Sets the HTTP content type (like \"text/html\",\n    \"image/gif\", \"image/jpeg\", \"text/plain\"). Default\n    is \"text/html\"",
            "Expires - Sets how long a page will be cached on a browser before it\n    expires",
            "ExpiresAbsolute - Sets a date and time when a page cached on a browser\n    will expire",
            "IsClientConnected - Checks if the client is still connected to the server",
            "Pics(pics_label) - Adds a value to the pics label response header",
            "Status - Specifies the value of the status line"
          ],
          [
            "AddHeader(name, value) - Adds an HTML header with a specified value",
            "AppendToLogstring -Adds a string to the end of the server log\n    entry",
            "BinaryWrite(data_to_write) - Writes the given information without\n    any character-set conversion",
            "Clear - Clears the buffered output. Use this method to handle errors. If\n    Response.Buffer is not set to true, this method will cause a run-time error",
            "End - Stops processing the script, and return the current result",
            "Flush - Sends buffered output immediately. If Response.Buffer is not set\n    to true, this method will cause a run-time error",
            "Redirect(url) - Redirects the user to another url",
            "Write(data_to_write) - Writes a text to the user"
          ],
          [
            "ClientCertificate - Holds field values stored in the client certificate",
            "Cookies(name) - Holds cookie values",
            "Form(element_name) - Holds form (input) values. The form must use\n    the post method",
            "QueryString(variable_name) - Holds variable values in the query\n    string",
            "ServerVariables(server_variable) - Holds server variable values"
          ],
          [
            "TotalBytes - Holds the total number of bytes the client is sending in the\n    body of the request"
          ],
          [
            "BinaryRead - Fetches the data that is sent to the server from the client\n    as part of a post request"
          ],
          [
            "ScriptTimeout - Sets how long a script can run before it is terminated"
          ],
          [
            "CreateObject(type_of_object) - Creates an instance of an object",
            "Execute(path) - Executes an ASP file from inside another ASP\n    file. After executing the called ASP file, the control is\n    returned to the original ASP file",
            "GetLastError() - Returns an ASPError object that will describe the error\n    that occurred",
            "HTMLEncode(string) - Applies HTML encoding to a string",
            "MapPath(path) - Maps a relative or virtual path to a physical path",
            "Transfer(path) - Sends all of the state information to another ASP\n    file for processing. After the transfer, procedural control is not returned\n    to the original ASP file",
            "URLEncode(string) - Applies URL encoding rules to a string"
          ]
        ],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/ado_intro.asp",
    "cours": {
      "titre": "ADOIntroduction",
      "description": "",
      "lien": "https://www.w3schools.com/asp/ado_intro.asp",
      "contenus": {
        "paragraphs": [
          "ADO can be used to access databases from your web pages.",
          "Before you continue you should have a basic understanding of the\nfollowing:",
          "If you want to study these subjects first, go to ourHome page",
          "The common way to access a database from inside an ASP page is to:"
        ],
        "lists": [
          [
            "HTML",
            "ASP",
            "SQL"
          ],
          [
            "ADO is a Microsoft technology",
            "ADO stands forActiveXDataObjects",
            "ADO is a Microsoft Active-X component",
            "ADO is automatically installed with Microsoft IIS",
            "ADO is a programming interface to access data in a database"
          ],
          [
            "Create an ADO connection to a database",
            "Open the database connection",
            "Create an ADO recordset",
            "Open the recordset",
            "Extract the data you need from the recordset",
            "Close the recordset",
            "Close the connection"
          ]
        ],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/ado_connect.asp",
    "cours": {
      "titre": "ADODatabase Connection",
      "description": "",
      "lien": "https://www.w3schools.com/asp/ado_connect.asp",
      "contenus": {
        "paragraphs": [
          "Before a database can be accessed from a web page, a database connection has\nto be established.",
          "The easiest way to connect to a database is to use a DSN-less connection. A\nDSN-less connection can be used against any Microsoft Access database on your web site.",
          "If you have a database called \"northwind.mdb\" located in a web\ndirectory like \"c:/webdata/\",\nyou can connect to the database with the following ASP code:",
          "Note, from the example above, that you have to specify the Microsoft Access\ndatabase driver (Provider) and the physical path to the database on your\ncomputer.",
          "If you have an ODBC database called \"northwind\" you can connect to the database with the following\nASP code:",
          "With an ODBC connection, you can connect to any database, on any computer in\nyour network, as long as an ODBC connection is available.",
          "Here is how to create a connection to a MS Access Database:",
          "Note that this configuration has to be done on the computer where your web site\nis located. If you are running Personal Web Server (PWS)\nor Internet Information Server (IIS) on your own computer,\nthe instructions above will work, but if your web site is located on a remote server, you have to\nhave physical access to that server, or ask your web\nhost to do this for you.",
          "The ADO Connection object is used to create an open connection to a data\nsource. Through this connection, you can access and manipulate a database.",
          "View all methods and properties of the Connection object."
        ],
        "lists": [
          [
            "Open theODBCicon in your Control Panel.",
            "Choose theSystem DSNtab.",
            "Click onAddin the System DSN tab.",
            "Selectthe Microsoft Access Driver. ClickFinish.",
            "In the next screen, clickSelectto locate the database.",
            "Give the database aDataSourceName (DSN).",
            "ClickOK."
          ]
        ],
        "examples": [
          "<%set conn=Server.CreateObject(\"ADODB.Connection\")conn.Provider=\"Microsoft.Jet.OLEDB.4.0\"conn.Open \"c:/webdata/northwind.mdb\"%>",
          "<%set conn=Server.CreateObject(\"ADODB.Connection\")conn.Open \"northwind\"%>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/ado_recordset.asp",
    "cours": {
      "titre": "ADORecordset",
      "description": "",
      "lien": "https://www.w3schools.com/asp/ado_recordset.asp",
      "contenus": {
        "paragraphs": [
          "To be able to read database data, the data must first be loaded\ninto a\nrecordset.",
          "After an ADO Database Connection has been created, as demonstrated in the\nprevious chapter, it is possible to create an ADO Recordset.",
          "Suppose we have a database named \"Northwind\", we can get access to the\n\"Customers\" table inside the database with\nthe following lines:",
          "We can also get access to the data in the \"Customers\" table using\nSQL:",
          "After a recordset is opened, we can extract data from recordset.",
          "Suppose we have a database named \"Northwind\", we can get access to the\n\"Customers\" table inside the database with\nthe following lines:",
          "The ADO Recordset object is used to hold a set of records from a database table.",
          "View all methods and properties of the Recordset object."
        ],
        "lists": [],
        "examples": [
          "<%set conn=Server.CreateObject(\"ADODB.Connection\")conn.Provider=\"Microsoft.Jet.OLEDB.4.0\"conn.Open \"c:/webdata/northwind.mdb\"set rs=Server.CreateObject(\"ADODB.recordset\")rs.Open \"Customers\", conn%>",
          "<%set conn=Server.CreateObject(\"ADODB.Connection\")conn.Provider=\"Microsoft.Jet.OLEDB.4.0\"conn.Open \"c:/webdata/northwind.mdb\"set rs=Server.CreateObject(\"ADODB.recordset\")rs.Open \"Select * from Customers\", conn%>",
          "<%set conn=Server.CreateObject(\"ADODB.Connection\")conn.Provider=\"Microsoft.Jet.OLEDB.4.0\"conn.Open \"c:/webdata/northwind.mdb\"set rs=Server.CreateObject(\"ADODB.recordset\")rs.Open \"Select * from Customers\", connfor each x in rs.fieldsresponse.write(x.name)response.write(\" = \")response.write(x.value)next%>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/ado_display.asp",
    "cours": {
      "titre": "ADODisplay Data",
      "description": "",
      "lien": "https://www.w3schools.com/asp/ado_display.asp",
      "contenus": {
        "paragraphs": [
          "A common way to display data from a recordset, is to\ndisplay the data in an HTML table.",
          "We have a database named \"Northwind\" and we want to display the\ndata from the \"Customers\" table (remember to save the file with an \n.asp extension):",
          "We can also display the data from the \"Customers\" table inside an HTML\ntable with the following lines (remember to save the file with an .asp extension):",
          "We want to add headers to the HTML table to make it more readable (remember to save the file with an .asp extension):",
          "We want to add colors to the HTML table to make it look nice (remember to save the file with an .asp extension):"
        ],
        "lists": [],
        "examples": [
          "<html><body><%set conn=Server.CreateObject(\"ADODB.Connection\")conn.Provider=\"Microsoft.Jet.OLEDB.4.0\"conn.Open \"c:/webdata/northwind.mdb\"set rs = Server.CreateObject(\"ADODB.recordset\")rs.Open \"SELECT * FROM Customers\", conndo until rs.EOFfor each x in rs.FieldsResponse.Write(x.name)Response.Write(\" = \")Response.Write(x.value & \"<br>\")nextResponse.Write(\"<br>\")rs.MoveNextlooprs.closeconn.close%></body></html>",
          "<html><body><%set conn=Server.CreateObject(\"ADODB.Connection\")conn.Provider=\"Microsoft.Jet.OLEDB.4.0\"conn.Open \"c:/webdata/northwind.mdb\"set rs = Server.CreateObject(\"ADODB.recordset\")rs.Open \"SELECT Companyname, Contactname FROM Customers\", conn%><table border=\"1\" width=\"100%\"><%do until rs.EOF%><tr><%for each x in rs.Fields%><td><%Response.Write(x.value)%></td><%nextrs.MoveNext%></tr><%looprs.closeconn.close%></table></body></html>",
          "<html><body><%set conn=Server.CreateObject(\"ADODB.Connection\")conn.Provider=\"Microsoft.Jet.OLEDB.4.0\"conn.Open \"c:/webdata/northwind.mdb\"set rs = Server.CreateObject(\"ADODB.recordset\")sql=\"SELECT Companyname, Contactname FROM Customers\"rs.Open sql, conn%><table border=\"1\" width=\"100%\"><tr><%for each x in rs.Fieldsresponse.write(\"<th>\" & x.name & \"</th>\")next%></tr><%do until rs.EOF%><tr><%for each x in rs.Fields%><td><%Response.Write(x.value)%></td><%nextrs.MoveNext%></tr><%looprs.closeconn.close%></table></body></html>",
          "<html><body><%set conn=Server.CreateObject(\"ADODB.Connection\")conn.Provider=\"Microsoft.Jet.OLEDB.4.0\"conn.Open \"c:/webdata/northwind.mdb\"set rs = Server.CreateObject(\"ADODB.recordset\")sql=\"SELECT Companyname, Contactname FROM Customers\"rs.Open sql, conn%><table border=\"1\" \n  style=\"width:100%;background-color:#fff5ee;\"><tr><%for each x in rs.Fieldsresponse.write(\"<th \n  style='text-align:left;background-color:#b0c4de;'>\" & x.name & \"</th>\")next%></tr><%do until rs.EOF%><tr><%for each x in rs.Fields%><td><%Response.Write(x.value)%></td><%nextrs.MoveNext%></tr><%looprs.closeconn.close%></table></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/ado_query.asp",
    "cours": {
      "titre": "ADOQuery Data",
      "description": "",
      "lien": "https://www.w3schools.com/asp/ado_query.asp",
      "contenus": {
        "paragraphs": [
          "We may use SQL to create queries to specify only a selection of records \n(and fields) to view.",
          "Here we want to display only the records from the \"Customers\" table that have a \"Companyname\" \nthat starts with \"A\" (remember to save the file with an .asp extension):",
          "Here we want to display only the customers from Spain (remember to save the file with an .asp extension):",
          "Here we want to create a filter and let the user choose which country to show customers from (remember to save the file with an .asp extension):"
        ],
        "lists": [],
        "examples": [
          "<html><body><%set conn=Server.CreateObject(\"ADODB.Connection\")conn.Provider=\"Microsoft.Jet.OLEDB.4.0\"conn.Open \"c:/webdata/northwind.mdb\"set rs=Server.CreateObject(\"ADODB.recordset\")sql=\"SELECT Companyname, Contactname FROM Customers WHERE CompanyName LIKE 'A%'\"rs.Open sql, conn%><table border=\"1\" width=\"100%\"><tr><%for each x in rs.Fieldsresponse.write(\"<th>\" & x.name & \"</th>\")next%></tr><%do until rs.EOF%><tr><%for each x in rs.Fields%><td><%Response.Write(x.value)%></td><%nextrs.MoveNext%></tr><%looprs.closeconn.close%></table></body></html>",
          "<html><body><%set conn=Server.CreateObject(\"ADODB.Connection\")conn.Provider=\"Microsoft.Jet.OLEDB.4.0\"conn.Open \"c:/webdata/northwind.mdb\"set rs=Server.CreateObject(\"ADODB.recordset\")sql=\"SELECT Companyname, Contactname FROM Customers WHERE Country='Spain'\"rs.Open sql, conn%><table border=\"1\" width=\"100%\"><tr><%for each x in rs.Fieldsresponse.write(\"<th>\" & x.name & \"</th>\")next%></tr><%do until \n  rs.EOF%><tr><%for each x in rs.Fields%><td><%Response.Write(x.value)%> </td><%nextrs.MoveNext%></tr><%looprs.closeconn.close%></table></body></html>",
          "<html><body><%set conn=Server.CreateObject(\"ADODB.Connection\")conn.Provider=\"Microsoft.Jet.OLEDB.4.0\"conn.Open \"c:/webdata/northwind.mdb\"set rs=Server.CreateObject(\"ADODB.recordset\")sql=\"SELECT DISTINCT Country FROM Customers ORDER BY Country\"rs.Open sql, conncountry=request.form(\"country\")%><form method=\"post\">Choose Country <select name=\"country\"><% do \n  until rs.EOFresponse.write(\"<option\")if rs.fields(\"country\")=country \n  thenresponse.write(\" selected\")end ifresponse.write(\">\")response.write(rs.fields(\"Country\"))rs.MoveNextlooprs.Closeset \n  rs=Nothing %></select><input type=\"submit\" value=\"Show customers\"></form><%if country<>\"\" thensql=\"SELECT \n  Companyname,Contactname,Country FROM Customers WHERE country='\" & country & \n  \"'\"set rs=Server.CreateObject(\"ADODB.Recordset\")rs.Open \n  sql,conn%><table width=\"100%\" cellspacing=\"0\" cellpadding=\"2\" \n  border=\"1\"><tr><th>Companyname</th><th>Contactname</th><th>Country</th></tr><%do until rs.EOFresponse.write(\"<tr>\")response.write(\"<td>\" & rs.fields(\"companyname\") \n  & \"</td>\")response.write(\"<td>\" & rs.fields(\"contactname\") & \n  \"</td>\")response.write(\"<td>\" & rs.fields(\"country\") & \"</td>\")response.write(\"</tr>\")rs.MoveNextlooprs.closeconn.Closeset rs=Nothingset conn=Nothing%></table><% end if %></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/ado_sort.asp",
    "cours": {
      "titre": "ADOSort Data",
      "description": "",
      "lien": "https://www.w3schools.com/asp/ado_sort.asp",
      "contenus": {
        "paragraphs": [
          "We may use SQL to specify how to sort the data in the record set.",
          "Here we want to display the \"Companyname\" and \"Contactname\" fields from the \"Customers\" \ntable, ordered by \"Companyname\" (remember to save the file with an .asp extension):",
          "Here we want to display the \"Companyname\" and \"Contactname\" fields from the \"Customers\" \ntable, ordered descending by \"Companyname\" (remember to save the file with an .asp extension):"
        ],
        "lists": [],
        "examples": [
          "<html><body><%set conn=Server.CreateObject(\"ADODB.Connection\")conn.Provider=\"Microsoft.Jet.OLEDB.4.0\"conn.Open \"c:/webdata/northwind.mdb\"set rs = Server.CreateObject(\"ADODB.recordset\")sql=\"SELECT Companyname, Contactname FROM\nCustomers ORDER BY CompanyName\"rs.Open sql, conn%><table border=\"1\" width=\"100%\"><tr><%for each x in rs.Fieldsresponse.write(\"<th>\" & x.name & \"</th>\")next%></tr><%do until rs.EOF%><tr><%for each x in rs.Fields%><td><%Response.Write(x.value)%></td><%nextrs.MoveNext%></tr><%looprs.closeconn.close%></table></body></html>",
          "<html><body><%set conn=Server.CreateObject(\"ADODB.Connection\")conn.Provider=\"Microsoft.Jet.OLEDB.4.0\"conn.Open \"c:/webdata/northwind.mdb\"set rs = Server.CreateObject(\"ADODB.recordset\")sql=\"SELECT Companyname, Contactname FROM\nCustomers ORDER BY CompanyName DESC\"rs.Open sql, conn%><table border=\"1\" width=\"100%\"><tr><%for each x in rs.Fieldsresponse.write(\"<th>\" & x.name & \"</th>\")next%></tr><%do until rs.EOF%><tr><%for each x in rs.Fields%><td><%Response.Write(x.value)%></td><%nextrs.MoveNext%></tr><%looprs.closeconn.close%></table></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/ado_add.asp",
    "cours": {
      "titre": "ADOAdd Records",
      "description": "",
      "lien": "https://www.w3schools.com/asp/ado_add.asp",
      "contenus": {
        "paragraphs": [
          "We may use the SQL INSERT INTO command to add a record to a \ntable in a database.",
          "We want to add a new record to the Customers table in the Northwind database. \nWe first create a form that contains the fields we want to collect data from:",
          "When the user presses the submit button the form is sent to a file called \"demo_add.asp\". \nThe \"demo_add.asp\" file contains the code that will add a new record to the \nCustomers table:",
          "If you use the SQL INSERT command be aware of the following:",
          "In a MS Access database, you can enter zero-length strings (\"\") in Text, \nHyperlink, and Memo fields IF you set the AllowZeroLength property to \nYes.",
          "Note:Not all databases support zero-length strings and may cause an \nerror when a record with blank fields is added. It is important to check what \ndata types your database supports."
        ],
        "lists": [
          [
            "If the table contains a primary key, make sure to append a unique, \nnon-Null value to the primary key field (if not, the provider may not append the \n  record, or an error occurs)",
            "If the table contains an AutoNumber field, do not include this field in \n  the SQL INSERT command (the value of this field will be taken care of \n  automatically by the provider)"
          ]
        ],
        "examples": [
          "<html><body><form method=\"post\" action=\"demo_add.asp\"><table><tr><td>CustomerID:</td><td><input name=\"custid\"></td></tr><tr><td>Company Name:</td><td><input name=\"compname\"></td></tr><tr><td>Contact Name:</td><td><input name=\"contname\"></td></tr><tr><td>Address:</td><td><input name=\"address\"></td></tr><tr><td>City:</td><td><input name=\"city\"></td></tr><tr><td>Postal Code:</td><td><input name=\"postcode\"></td></tr><tr><td>Country:</td><td><input name=\"country\"></td></tr></table><br><br><input type=\"submit\" value=\"Add New\"><input type=\"reset\" value=\"Cancel\"></form></body></html>",
          "<html><body><%set conn=Server.CreateObject(\"ADODB.Connection\")conn.Provider=\"Microsoft.Jet.OLEDB.4.0\"conn.Open \"c:/webdata/northwind.mdb\"sql=\"INSERT INTO customers (customerID,companyname,\"sql=sql & \"contactname,address,city,postalcode,country)\"sql=sql & \" VALUES \"sql=sql & \"('\" & Request.Form(\"custid\") & \"',\"sql=sql & \"'\" & Request.Form(\"compname\") & \"',\"sql=sql & \"'\" & Request.Form(\"contname\") & \"',\"sql=sql & \"'\" & Request.Form(\"address\") & \"',\"sql=sql & \"'\" & Request.Form(\"city\") & \"',\"sql=sql & \"'\" & Request.Form(\"postcode\") & \"',\"sql=sql & \"'\" & Request.Form(\"country\") & \"')\"on error resume nextconn.Execute sql,recaffectedif err<>0 thenResponse.Write(\"No update permissions!\")elseResponse.Write(\"<h3>\" & recaffected & \" record added</h3>\")end ifconn.close%></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/ado_update.asp",
    "cours": {
      "titre": "ADOUpdate Records",
      "description": "",
      "lien": "https://www.w3schools.com/asp/ado_update.asp",
      "contenus": {
        "paragraphs": [
          "We may use the SQL UPDATE command to update a record in a \ntable in a database.",
          "We want to update a record in the Customers table in the Northwind database. \nWe first create a table that lists all records in the Customers table:",
          "If the user clicks on the button in the \"customerID\" column he or she will be \ntaken to a new file called \"demo_update.asp\". The \"demo_update.asp\" file \ncontains the source code on how to create input fields based on the fields from \none record in the database table. It also contains a \"Update record\" button \nthat will save your changes:"
        ],
        "lists": [],
        "examples": [
          "<html><body><%set conn=Server.CreateObject(\"ADODB.Connection\")conn.Provider=\"Microsoft.Jet.OLEDB.4.0\"conn.Open \"c:/webdata/northwind.mdb\"set rs=Server.CreateObject(\"ADODB.Recordset\")rs.open \"SELECT * FROM customers\",conn%><h2>List Database</h2><table border=\"1\" width=\"100%\"><tr><%for each x in rs.Fieldsresponse.write(\"<th>\" & ucase(x.name) & \"</th>\")next%></tr><% do until rs.EOF %><tr><form method=\"post\" action=\"demo_update.asp\"><%for each x in rs.Fieldsif lcase(x.name)=\"customerid\" then%><td><input type=\"submit\" name=\"customerID\" value=\"<%=x.value%>\"></td><%else%><td><%Response.Write(x.value)%></td><%end ifnext%></form><%rs.MoveNext%></tr><%loopconn.close%></table></body></html>",
          "<html><body><h2>Update Record</h2><%set conn=Server.CreateObject(\"ADODB.Connection\")conn.Provider=\"Microsoft.Jet.OLEDB.4.0\"conn.Open \"c:/webdata/northwind.mdb\"cid=Request.Form(\"customerID\")if Request.form(\"companyname\")=\"\" thenset rs=Server.CreateObject(\"ADODB.Recordset\")rs.open \"SELECT * FROM customers WHERE customerID='\" & cid & \"'\",conn%><form method=\"post\" action=\"demo_update.asp\"><table><%for each x in rs.Fields%><tr><td><%=x.name%></td><td><input name=\"<%=x.name%>\" value=\"<%=x.value%>\"></td><%next%></tr></table><br><br><input type=\"submit\" value=\"Update record\"></form><%elsesql=\"UPDATE customers SET \"sql=sql & \"companyname='\" & Request.Form(\"companyname\") & \"',\"sql=sql & \"contactname='\" & Request.Form(\"contactname\") & \"',\"sql=sql & \"address='\" & Request.Form(\"address\") & \"',\"sql=sql & \"city='\" & Request.Form(\"city\") & \"',\"sql=sql & \"postalcode='\" & Request.Form(\"postalcode\") & \"',\"sql=sql & \"country='\" & Request.Form(\"country\") & \"'\"sql=sql & \" WHERE customerID='\" & cid & \"'\"on error resume nextconn.Execute sqlif err<>0 thenresponse.write(\"No update permissions!\")elseresponse.write(\"Record \" & cid & \" was updated!\")end ifend ifconn.close%></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/ado_delete.asp",
    "cours": {
      "titre": "ADODelete Records",
      "description": "",
      "lien": "https://www.w3schools.com/asp/ado_delete.asp",
      "contenus": {
        "paragraphs": [
          "We may use the SQL DELETE command to delete a record in a \ntable in a database.",
          "We want to delete a record in the Customers table in the Northwind database. \nWe first create a table that lists all records in the Customers table:",
          "If the user clicks on the button in the \"customerID\" column he or she will be \ntaken to a new file called \"demo_delete.asp\". The \"demo_delete.asp\" file \ncontains the source code on how to create input fields based on the fields from \none record in the database table. It also contains a \"Delete record\" button \nthat will delete the current record:"
        ],
        "lists": [],
        "examples": [
          "<html><body><%set conn=Server.CreateObject(\"ADODB.Connection\")conn.Provider=\"Microsoft.Jet.OLEDB.4.0\"conn.Open \"c:/webdata/northwind.mdb\"set rs=Server.CreateObject(\"ADODB.Recordset\")rs.open \"SELECT * FROM customers\",conn%><h2>List Database</h2><table border=\"1\" width=\"100%\"><tr><%for each x in rs.Fieldsresponse.write(\"<th>\" & ucase(x.name) & \"</th>\")next%></tr><% do until rs.EOF %><tr><form method=\"post\" action=\"demo_delete.asp\"><%for each x in rs.Fieldsif x.name=\"customerID\" then%><td><input type=\"submit\" name=\"customerID\" value=\"<%=x.value%>\"></td><%else%><td><%Response.Write(x.value)%></td><%end ifnext%></form><%rs.MoveNext%></tr><%loopconn.close%></table></body></html>",
          "<html><body><h2>Delete Record</h2><%set conn=Server.CreateObject(\"ADODB.Connection\")conn.Provider=\"Microsoft.Jet.OLEDB.4.0\"conn.Open \"c:/webdata/northwind.mdb\"cid=Request.Form(\"customerID\")if Request.form(\"companyname\")=\"\" thenset rs=Server.CreateObject(\"ADODB.Recordset\")rs.open \"SELECT * FROM customers WHERE customerID='\" & cid & \"'\",conn%><form method=\"post\" action=\"demo_delete.asp\"><table><%for each x in rs.Fields%><tr><td><%=x.name%></td><td><input name=\"<%=x.name%>\" value=\"<%=x.value%>\"></td><%next%></tr></table><br><br><input type=\"submit\" value=\"Delete record\"></form><%elsesql=\"DELETE FROM customers\"sql=sql & \" WHERE customerID='\" & cid & \"'\"on error resume nextconn.Execute sqlif err<>0 thenresponse.write(\"No update permissions!\")elseresponse.write(\"Record \" & cid & \" was deleted!\")end ifend ifconn.close%></body></html>"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/ado_ref_command.asp",
    "cours": {
      "titre": "ADOCommandObject",
      "description": "",
      "lien": "https://www.w3schools.com/asp/ado_ref_command.asp",
      "contenus": {
        "paragraphs": [
          "The ADO Command object is used to execute a single query against a database. The query can\nperform actions like creating, adding, retrieving, deleting or updating\nrecords.",
          "If the query is used to retrieve data, the data will be returned as a RecordSet object. This means that the retrieved data can be manipulated by\nproperties, collections, methods, and events of the Recordset object.",
          "The major feature of the Command object is the ability to use stored queries and procedures\nwith parameters."
        ],
        "lists": [],
        "examples": [
          "set objCommand=Server.CreateObject(\"ADODB.command\")"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/ado_ref_connection.asp",
    "cours": {
      "titre": "ADOConnectionObject",
      "description": "",
      "lien": "https://www.w3schools.com/asp/ado_ref_connection.asp",
      "contenus": {
        "paragraphs": [
          "The ADO Connection Object is used to create an open connection to a data source. Through this\nconnection, you can access and manipulate\na database.",
          "If you want to access a database multiple times, you should establish a connection using the Connection object.\nYou can also make a connection to a database by passing a connection string via a Command or Recordset object. However,\nthis type of connection is only good for one specific, single query.",
          "Note:You cannot handle events using VBScript or JScript (only Visual Basic, Visual C++, and Visual J++ languages can handle\nevents)."
        ],
        "lists": [],
        "examples": [
          "set objConnection=Server.CreateObject(\"ADODB.connection\")"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/ado_ref_error.asp",
    "cours": {
      "titre": "ADOErrorObject",
      "description": "",
      "lien": "https://www.w3schools.com/asp/ado_ref_error.asp",
      "contenus": {
        "paragraphs": [
          "The ADO Error object contains details about data access errors that have been generated during a\nsingle operation.",
          "ADO generates one Error object for each error. Each Error object contains details of the specific\nerror, and are stored in the Errors collection. To access the errors, you must refer to\na specific connection.",
          "To loop through the Errors collection:"
        ],
        "lists": [],
        "examples": [
          "<%for each objErr in objConn.Errorsresponse.write(\"<p>\")response.write(\"Description: \")response.write(objErr.Description & \"<br>\")response.write(\"Help context: \")response.write(objErr.HelpContext & \"<br>\")response.write(\"Help file: \")response.write(objErr.HelpFile & \"<br>\")response.write(\"Native error: \")response.write(objErr.NativeError & \"<br>\")response.write(\"Error number: \")response.write(objErr.Number & \"<br>\")response.write(\"Error source: \")response.write(objErr.Source & \"<br>\")response.write(\"SQL state: \")response.write(objErr.SQLState & \"<br>\")response.write(\"</p>\")next%>",
          "objErr.property"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/ado_ref_field.asp",
    "cours": {
      "titre": "ADOFieldObject",
      "description": "",
      "lien": "https://www.w3schools.com/asp/ado_ref_field.asp",
      "contenus": {
        "paragraphs": [
          "The ADO Field object contains information about a column in a Recordset object. There is one Field object for each\ncolumn in the Recordset."
        ],
        "lists": [],
        "examples": [
          "set objField=Server.CreateObject(\"ADODB.field\")"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/ado_ref_parameter.asp",
    "cours": {
      "titre": "ADOParameterObject",
      "description": "",
      "lien": "https://www.w3schools.com/asp/ado_ref_parameter.asp",
      "contenus": {
        "paragraphs": [
          "The ADO Parameter object provides information about a single parameter used in a stored procedure or\nquery.",
          "A Parameter object is added to the Parameters Collection when it is created.\nThe Parameters Collection is associated with a specific Command object, which uses the\nCollection to pass parameters in and out of stored procedures and queries.",
          "Parameters can be used to create Parameterized Commands. These commands are (after they have been\ndefined and stored) using parameters to alter some details of the command before it is executed.\nFor example, an SQL SELECT statement could use a parameter to define the\ncriteria of a WHERE clause.",
          "There are four types of parameters: input parameters, output parameters, input/output\nparameters and return parameters."
        ],
        "lists": [],
        "examples": [
          "objectname.propertyobjectname.method"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/ado_ref_property.asp",
    "cours": {
      "titre": "ADOPropertyObject",
      "description": "",
      "lien": "https://www.w3schools.com/asp/ado_ref_property.asp",
      "contenus": {
        "paragraphs": [
          "The ADO Property object represents a dynamic characteristic of an ADO object that is defined by the provider.",
          "Each provider that talks with ADO has different ways of interacting with ADO. Therefore, ADO needs\nto store information about the provider in some way. The solution is that the provider gives specific\ninformation (dynamic properties) to ADO. ADO stores each provider property in a Property object\nthat is again stored in the Properties Collection. The Collection is assigned to\neither a Command object, Connection object, Field object, or a Recordset object."
        ],
        "lists": [],
        "examples": [
          "set objProperty=Server.CreateObject(\"ADODB.property\")"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/ado_ref_record.asp",
    "cours": {
      "titre": "ADORecordObject",
      "description": "",
      "lien": "https://www.w3schools.com/asp/ado_ref_record.asp",
      "contenus": {
        "paragraphs": [
          "The ADO Record object is used to hold a row in a Recordset, a directory, or a\nfile from a file system.",
          "Only structured databases could be accessed by ADO in versions prior 2.5. In\na structured database, each table has the exact same number of columns in each row, and each column is composed of the same data type.",
          "The Record object allows access to data-sets where the number of columns and/or the data type can\nbe different from row to row.",
          "Example:",
          "countfields=rec.Fields.Count",
          "Example:",
          "itemfields=rec.Fields.Item(1)oritemfields = rec.Fields.Item(\"Name\")"
        ],
        "lists": [],
        "examples": [
          "objectname.propertyobjectname.method"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/ado_ref_recordset.asp",
    "cours": {
      "titre": "ADORecordsetObject",
      "description": "",
      "lien": "https://www.w3schools.com/asp/ado_ref_recordset.asp",
      "contenus": {
        "paragraphs": [
          "The ADO Recordset object is used to hold a set of records from a database table.\nA Recordset object consist of records and columns (fields).",
          "In ADO, this object is the most important and the one used most often to \nmanipulate data from a database.",
          "Recordset objects can support two types of updating:",
          "In ADO there are 4 different cursor types defined:",
          "The cursor type can be set by the CursorType property or by the CursorType\nparameter in the Open method.",
          "Note:Not all providers support all methods or properties of the Recordset\nobject.",
          "Cancels changes made to a record of a Recordset\n      object",
          "Note:You cannot handle events using VBScript or JScript (only\nVisual Basic, Visual C++, and Visual J++ languages can handle events).",
          "Example:",
          "countfields=rs.Fields.Count",
          "Example:",
          "itemfields=rs.Fields.Item(1)oritemfields=rs.Fields.Item(\"Name\")",
          "Example:",
          "countprop=rs.Properties.Count",
          "Example:",
          "itemprop = rs.Properties.Item(1)oritemprop=rs.Properties.Item(\"Name\")"
        ],
        "lists": [
          [
            "Immediate updating- all changes are written immediately to the\n    database once you call the Update method.",
            "Batch updating- the provider will cache multiple changes and then \n  send them to the database with the UpdateBatch method."
          ],
          [
            "Dynamic cursor- Allows you to see additions, changes, and deletions by other\n    users.",
            "Keyset cursor -Like a dynamic cursor, except that\n    you cannot see additions by other users, and it prevents access to records that other users\n    have deleted. Data changes by other users will still be visible.",
            "Static cursor- Provides a static copy of a recordset for you to use to find data or generate\n    reports. Additions, changes, or deletions by other users will not be visible. This is the only type of cursor allowed when you open a client-side Recordset object.",
            "Forward-only cursor- Allows you to only scroll forward through the Recordset. Additions, changes, or deletions by other users will not be visible."
          ]
        ],
        "examples": [
          "set objRecordset=Server.CreateObject(\"ADODB.recordset\")"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/ado_ref_stream.asp",
    "cours": {
      "titre": "ADOStreamObject",
      "description": "",
      "lien": "https://www.w3schools.com/asp/ado_ref_stream.asp",
      "contenus": {
        "paragraphs": [
          "The ADO Stream Object is used to read, write, and manage a stream of binary data or text.",
          "A Stream object can be obtained in three ways:"
        ],
        "lists": [
          [
            "From a URL pointing to a document, a folder, or a Record object",
            "By instantiating a Stream object to store data for your application",
            "By opening the default Stream object associated with a Record object"
          ]
        ],
        "examples": [
          "objectname.propertyobjectname.method"
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/asp/ado_datatypes.asp",
    "cours": {
      "titre": "ADOData Types",
      "description": "",
      "lien": "https://www.w3schools.com/asp/ado_datatypes.asp",
      "contenus": {
        "paragraphs": [
          "The table below shows the ADO Data Type mapping between Access, SQL Server, and Oracle:",
          "* In Oracle 8.0.x - decimal and int are equal to number and number(10)."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  }
]