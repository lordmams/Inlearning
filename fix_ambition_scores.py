#!/usr/bin/env python3
"""
Script pour corriger le probl√®me d'ambition dans le dataset des √©tudiants.
G√©n√®re des objectifs vari√©s pour cr√©er des scores d'ambition r√©alistes.
"""

import pandas as pd
import numpy as np
import random
from collections import Counter


def generate_varied_goals():
    """G√©n√®re des objectifs vari√©s pour cr√©er des scores d'ambition r√©alistes."""

    # Objectifs court terme vari√©s
    short_term_goals = [
        "Apprendre Python",
        "Ma√Ætriser Docker",
        "Stage en entreprise",
        "Certification AWS",
        "Projet personnel",
        "Formation DevOps",
        "Apprendre React",
        "Certification Azure",
        "Bootcamp intensif",
        "Formation Data Science",
        "Apprendre Kubernetes",
        "Certification GCP",
        "Projet open source",
        "Formation cybers√©curit√©",
        "Apprendre Node.js",
        "Certification Scrum",
        "Formation IA",
        "Apprendre Vue.js",
        "Stage d√©veloppement",
        "Formation cloud",
        "Apprendre Angular",
        "Certification PMP",
        "Projet freelance",
        "Formation blockchain",
        "Apprendre Flutter",
        "Certification ITIL",
        "Formation mobile",
        "Apprendre Rust",
        "Certification CISSP",
        "Formation web3",
    ]

    # Objectifs long terme vari√©s
    long_term_goals = [
        "Architecte Cloud",
        "Cr√©er une startup",
        "Sp√©cialisation Big Data",
        "Freelance",
        "Lead Developer",
        "Data Scientist",
        "Reconvertion en d√©veloppement",
        "CTO",
        "Expert IA",
        "Consultant ind√©pendant",
        "Product Manager",
        "DevOps Engineer",
        "Sp√©cialisation cybers√©curit√©",
        "Cr√©er une entreprise",
        "Tech Lead",
        "Expert Blockchain",
        "Manager technique",
        "Sp√©cialisation mobile",
        "Cr√©er une agence",
        "Expert Cloud",
        "Sp√©cialisation web3",
        "Directeur technique",
        "Expert Data",
        "Sp√©cialisation DevOps",
        "Cr√©er une plateforme",
        "Expert S√©curit√©",
        "Sp√©cialisation IA",
        "Consultant senior",
        "Expert Mobile",
        "Sp√©cialisation Cloud",
    ]

    return short_term_goals, long_term_goals


def create_varied_ambition_scores(df):
    """Cr√©e des scores d'ambition vari√©s bas√©s sur les caract√©ristiques des √©tudiants."""

    short_term_goals, long_term_goals = generate_varied_goals()

    # Facteurs qui influencent l'ambition
    ambition_factors = {
        "age": lambda x: (
            1.2 if x < 25 else 1.0 if x < 35 else 0.8
        ),  # Plus ambitieux quand jeune
        "total_experience_years": lambda x: (
            1.1 if x < 5 else 1.0 if x < 15 else 0.9
        ),  # Moins d'exp = plus ambitieux
        "highest_academic_level": {
            "Baccalaur√©at": 1.3,
            "Bac+2": 1.2,
            "Bac+3": 1.1,
            "Bac+5": 1.0,
            "Bac+8": 0.9,
        },
    }

    new_short_goals = []
    new_long_goals = []

    for idx, row in df.iterrows():
        # Calcul du facteur d'ambition pour cet √©tudiant
        age_factor = ambition_factors["age"](row["age"])
        exp_factor = ambition_factors["total_experience_years"](
            row["total_experience_years"]
        )
        academic_factor = ambition_factors["highest_academic_level"].get(
            row["highest_academic_level"], 1.0
        )

        # Score d'ambition de base (1-5)
        base_ambition = np.random.normal(3, 1)  # Distribution normale autour de 3
        ambition_score = base_ambition * age_factor * exp_factor * academic_factor
        ambition_score = max(1, min(5, ambition_score))  # Limiter entre 1 et 5

        # D√©terminer le nombre d'objectifs
        nb_short = max(1, min(3, int(ambition_score)))
        nb_long = max(1, min(3, int(ambition_score * 0.8)))

        # S√©lectionner des objectifs al√©atoires
        selected_short = random.sample(short_term_goals, nb_short)
        selected_long = random.sample(long_term_goals, nb_long)

        new_short_goals.append(", ".join(selected_short))
        new_long_goals.append(", ".join(selected_long))

    return new_short_goals, new_long_goals


def main():
    """Fonction principale pour corriger le dataset."""

    print("üîß Correction du probl√®me d'ambition dans le dataset...")

    # Charger le dataset
    input_file = "LLM/generated_student_data_100k_final.csv"
    output_file = "LLM/generated_student_data_100k_fixed.csv"

    print(f"üìñ Chargement du fichier: {input_file}")
    df = pd.read_csv(input_file)

    print(f"üìä Dataset charg√©: {len(df):,} √©tudiants")

    # Analyser l'√©tat actuel
    print("\nüîç Analyse de l'√©tat actuel:")

    # Fonction pour parser les listes
    def parse_list_string(text):
        if pd.isna(text):
            return []
        items = [item.strip().strip("\"'") for item in str(text).split(",")]
        return [item for item in items if item]

    # Analyser les objectifs actuels
    df["short_goals_list"] = df["short_term_goals"].apply(parse_list_string)
    df["long_goals_list"] = df["long_term_goals"].apply(parse_list_string)

    current_short_counts = [len(goals) for goals in df["short_goals_list"]]
    current_long_counts = [len(goals) for goals in df["long_goals_list"]]
    current_ambition_scores = [
        s + l for s, l in zip(current_short_counts, current_long_counts)
    ]

    print(
        f"   ‚Ä¢ Score d'ambition actuel: {np.mean(current_ambition_scores):.1f} ¬± {np.std(current_ambition_scores):.1f}"
    )
    print(
        f"   ‚Ä¢ Objectifs court terme: {np.mean(current_short_counts):.1f} ¬± {np.std(current_short_counts):.1f}"
    )
    print(
        f"   ‚Ä¢ Objectifs long terme: {np.mean(current_long_counts):.1f} ¬± {np.std(current_long_counts):.1f}"
    )

    # V√©rifier si tous les scores sont identiques
    if len(set(current_ambition_scores)) == 1:
        print("   ‚ö†Ô∏è  PROBL√àME D√âTECT√â: Tous les scores d'ambition sont identiques!")
    else:
        print("   ‚úÖ Scores d'ambition vari√©s d√©tect√©s")

    # G√©n√©rer de nouveaux objectifs vari√©s
    print("\nüéØ G√©n√©ration de nouveaux objectifs vari√©s...")
    new_short_goals, new_long_goals = create_varied_ambition_scores(df)

    # Mettre √† jour le dataset
    df["short_term_goals"] = new_short_goals
    df["long_term_goals"] = new_long_goals

    # Analyser les nouveaux scores
    df["short_goals_list"] = df["short_term_goals"].apply(parse_list_string)
    df["long_goals_list"] = df["long_term_goals"].apply(parse_list_string)

    new_short_counts = [len(goals) for goals in df["short_goals_list"]]
    new_long_counts = [len(goals) for goals in df["long_goals_list"]]
    new_ambition_scores = [s + l for s, l in zip(new_short_counts, new_long_counts)]

    print("\nüìà Nouveaux scores d'ambition:")
    print(
        f"   ‚Ä¢ Score d'ambition moyen: {np.mean(new_ambition_scores):.1f} ¬± {np.std(new_ambition_scores):.1f}"
    )
    print(
        f"   ‚Ä¢ Objectifs court terme: {np.mean(new_short_counts):.1f} ¬± {np.std(new_short_counts):.1f}"
    )
    print(
        f"   ‚Ä¢ Objectifs long terme: {np.mean(new_long_counts):.1f} ¬± {np.std(new_long_counts):.1f}"
    )
    print(f"   ‚Ä¢ Distribution: {dict(Counter(new_ambition_scores))}")

    # Sauvegarder le dataset corrig√©
    print(f"\nüíæ Sauvegarde du dataset corrig√©: {output_file}")
    df.to_csv(output_file, index=False)

    # Nettoyer les colonnes temporaires
    df = df.drop(["short_goals_list", "long_goals_list"], axis=1)

    print("\n‚úÖ CORRECTION TERMIN√âE!")
    print(f"   ‚Ä¢ Fichier original: {input_file}")
    print(f"   ‚Ä¢ Fichier corrig√©: {output_file}")
    print(f"   ‚Ä¢ {len(df):,} √©tudiants trait√©s")

    # Afficher quelques exemples
    print("\nüìã Exemples d'objectifs g√©n√©r√©s:")
    for i in range(5):
        print(f"   √âtudiant {i+1}:")
        print(f"     Court terme: {df.iloc[i]['short_term_goals']}")
        print(f"     Long terme: {df.iloc[i]['long_term_goals']}")
        print()


if __name__ == "__main__":
    main()
