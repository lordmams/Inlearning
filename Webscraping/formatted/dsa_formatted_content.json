[
  {
    "url": "https://www.w3schools.com/dsa/index.php",
    "cours": {
      "titre": "DSA Tutorial",
      "description": "Learn Data Structures and Algorithms Data Structures and Algorithms (DSA) is a fundamental part of Computer Science that teaches you how to think and solve complex problems systematically. Using the right data structure and algorithm makes your program run faster, especially when working with lots of data. Knowing DSA can help you perform better in job interviews and land great jobs in tech companies. Start learning DSA now »",
      "lien": "https://www.w3schools.com/dsa/index.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Python",
            "C",
            "C++",
            "Java",
            "JavaScript"
          ]
        ],
        "examples": [
          "Example my_array = [7, 12, 9, 4, 11]\nminVal = my_array[0]\n\nfor i in my_array:\n    if i < minVal:\n        minVal = i\n\nprint('Lowest value:',minVal) Run Example »"
        ],
        "course_structure": [
          {
            "title": "Start learning DSA now »",
            "url": "https://www.w3schools.com/dsa/dsa_intro.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_findlowest"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_intro.php",
    "cours": {
      "titre": "Introduction to Data Structures and Algorithms",
      "description": "Data Structures is about how data can be stored in different structures. Algorithms is about how to solve different problems, often by searching through and manipulating data structures. Theory about Data Structures and Algorithms (DSA) helps us to use large amounts of data to solve problems efficiently.",
      "lien": "https://www.w3schools.com/dsa/dsa_intro.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Finding the fastest route in a GPS navigation system",
            "Navigating an airplane or a car (cruise control)",
            "Finding what users search for (search engine)",
            "Sorting, for example sorting movies by rating"
          ],
          [
            "Decide which data structure or algorithm is best for a given situation.",
            "Make programs that run faster or use less memory.",
            "Understand how to approach complex problems and solve them in a systematic way."
          ]
        ],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/index.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/index.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_algo_simple.php",
    "cours": {
      "titre": "A Simple Algorithm",
      "description": "How it works: Start with the two first Fibonacci numbers 0 and 1. Add the two previous numbers together to create a new Fibonacci number. Update the value of the two previous numbers. Do point a and b above 18 times.",
      "lien": "https://www.w3schools.com/dsa/dsa_algo_simple.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "An implementation of the Fibonacci algorithm above using a for loop.",
            "An implementation of the Fibonacci algorithm above using recursion.",
            "Finding the \\(n\\)th Fibonacci number using recursion."
          ],
          [
            "Two variables to hold the previous two Fibonacci numbers",
            "A for loop that runs 18 times",
            "Create new Fibonacci numbers by adding the two previous ones",
            "Print the new Fibonacci number",
            "Update the variables that hold the previous two fibonacci numbers"
          ],
          [
            "An algorithm can be implemented in different ways and in different programming languages.",
            "Recursion and loops are two different programming techniques that can be used to implement algorithms."
          ]
        ],
        "examples": [
          "Example prev2 = 0\nprev1 = 1\n\nprint(prev2)\nprint(prev1)\nfor fibo in range(18):\n    newFibo = prev1 + prev2\n    print(newFibo)\n    prev2 = prev1\n    prev1 = newFibo Run Example »",
          "Example print(0)\nprint(1)\ncount = 2\n\ndef fibonacci(prev1, prev2):\n    global count\n    if count <= 19:\n        newFibo = prev1 + prev2\n        print(newFibo)\n        prev2 = prev1\n        prev1 = newFibo\n        count += 1\n        fibonacci(prev1, prev2)\n    else:\n        return\n\nfibonacci(1,0) Run Example »",
          "Example def F(n):\n    if n <= 1:\n        return n\n    else:\n        return F(n - 1) + F(n - 2)\n\nprint(F(19)) Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_intro.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_findfibo1"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_findfibo2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_findfibo3"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_intro.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_data_arrays.php",
    "cours": {
      "titre": "DSA Arrays",
      "description": "How it works: Go through the values in the array one by one. Check if the current value is the lowest so far, and if it is, store it. After looking at all the values, the stored value will be the lowest of all values in the array.",
      "lien": "https://www.w3schools.com/dsa/dsa_data_arrays.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "my_array = [7, 12, 9, 4, 11]",
          "Example Python: my_array = [7, 12, 9, 4, 11]\nprint( my_array[0] ) Run Example »",
          "Create a variable 'minVal' and set it equal to the first value of the array. Go through every element in the array. If the current element has a lower value than 'minVal', update 'minVal' to this value. After looking at all the elements in the array, the 'minVal' variable now contains the lowest value.",
          "Variable 'minVal' = array[0] For each element in the array If current element < minVal minVal = current element",
          "Example Python: my_array = [7, 12, 9, 4, 11]\nminVal = my_array[0]    # Step 1\n\nfor i in my_array:      # Step 2\n    if i < minVal:      # Step 3\n        minVal = i\n        \nprint('Lowest value: ',minVal) # Step 4 Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_simple.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_array_print"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_findlowest"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_simple.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_algo_bubblesort.php",
    "cours": {
      "titre": "DSA Bubble Sort",
      "description": "How it works: Go through the array, one value at a time. For each value, compare the value with the next value. If the value is higher than the next one, swap the values so that the highest value comes last. Go through the array as many times as there are values in the array.",
      "lien": "https://www.w3schools.com/dsa/dsa_algo_bubblesort.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "An array with values to sort.",
            "An inner loop that goes through the array and swaps values if the first value is higher than the next value. This loop must loop through one less value each time it runs.",
            "An outer loop that controls how many times the inner loop must run. For an array with n values, this outer loop must run n-1 times."
          ]
        ],
        "examples": [
          "[7, 12, 9, 11, 3]",
          "[ 7, 12, 9, 11, 3]",
          "[7, 12, 9, 11, 3]",
          "[7, 9, 12, 11, 3]",
          "[7, 9, 12, 11, 3]",
          "[7, 9, 11, 12, 3]",
          "[7, 9, 11, 12, 3 ]",
          "[7, 9, 11, 3, 12 ]",
          "Example my_array = [64, 34, 25, 12, 22, 11, 90, 5]\n\nn = len(my_array)\nfor i in range(n-1):\n    for j in range(n-i-1):\n        if my_array[j] > my_array[j+1]:\n            my_array[j], my_array[j+1] = my_array[j+1], my_array[j]\n\nprint(\"Sorted array:\", my_array) Run Example »",
          "my_array = [7, 3, 9, 12, 11]",
          "Example my_array = [7, 3, 9, 12, 11]\n\nn = len(my_array)\nfor i in range(n-1):\n    swapped = False\n    for j in range(n-i-1):\n        if my_array[j] > my_array[j+1]:\n            my_array[j], my_array[j+1] = my_array[j+1], my_array[j]\n            swapped = True\n    if not swapped:\n        break\n\nprint(\"Sorted array:\", my_array) Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_data_arrays.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_bubblesort"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_bubblesort2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_data_arrays.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_algo_selectionsort.php",
    "cours": {
      "titre": "DSA Selection Sort",
      "description": "How it works: Go through the array to find the lowest value. Move the lowest value to the front of the unsorted part of the array. Go through the array again as many times as there are values in the array.",
      "lien": "https://www.w3schools.com/dsa/dsa_algo_selectionsort.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "An array with values to sort.",
            "An inner loop that goes through the array, finds the lowest value, and moves it to the front of the array. This loop must loop through one less value each time it runs.",
            "An outer loop that controls how many times the inner loop must run. For an array with \\(n\\) values, this outer loop must run \\(n-1\\) times."
          ]
        ],
        "examples": [
          "[ 7, 12, 9, 11, 3]",
          "[ 7, 12, 9, 11, 3 ]",
          "[ 3 , 7, 12, 9, 11]",
          "[ 3, 7 , 12, 9, 11]",
          "[ 3, 7, 12, 9 , 11]",
          "[ 3, 7, 9 , 12, 11]",
          "[ 3, 7, 9, 12, 11 ]",
          "[ 3, 7, 9, 11 , 12]",
          "Example my_array = [64, 34, 25, 5, 22, 11, 90, 12]\n\nn = len(my_array)\nfor i in range(n-1):\n    min_index = i\n    for j in range(i+1, n):\n        if my_array[j] < my_array[min_index]:\n            min_index = j\n    min_value = my_array.pop(min_index)\n    my_array.insert(i, min_value)\n\nprint(\"Sorted array:\", my_array) Run Example »",
          "Example my_array = [64, 34, 25, 12, 22, 11, 90, 5]\n\nn = len(my_array)\nfor i in range(n):\n    min_index = i\n    for j in range(i+1, n):\n        if my_array[j] < my_array[min_index]:\n            min_index = j   \n    my_array[i], my_array[min_index] = my_array[min_index], my_array[i]\n\nprint(\"Sorted array:\", my_array) Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_bubblesort.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_selectionsort"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_selectionsort2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_bubblesort.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_algo_insertionsort.php",
    "cours": {
      "titre": "DSA Insertion Sort",
      "description": "How it works: Take the first value from the unsorted part of the array. Move the value into the correct place in the sorted part of the array. Go through the unsorted part of the array again as many times as there are values.",
      "lien": "https://www.w3schools.com/dsa/dsa_algo_insertionsort.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "An array with values to sort.",
            "An outer loop that picks a value to be sorted. For an array with \\(n\\) values, this outer loop skips the first value, and must run \\(n-1\\) times.",
            "An inner loop that goes through the sorted part of the array, to find where to insert the value. If the value to be sorted is at index \\(i\\), the sorted part of the array starts at index \\(0\\) and ends at index \\(i-1\\)."
          ]
        ],
        "examples": [
          "[ 7, 12, 9, 11, 3]",
          "[ 7 , 12, 9, 11, 3]",
          "[ 7, 12 , 9, 11, 3]",
          "[ 7, 12, 9 , 11, 3]",
          "[ 7, 9 , 12, 11, 3]",
          "[ 7, 9, 12, 11 , 3]",
          "[ 7, 9, 11 , 12, 3]",
          "[ 7, 9, 11, 12, 3 ]",
          "[ 3 ,7, 9, 11, 12]",
          "Example my_array = [64, 34, 25, 12, 22, 11, 90, 5]\n\nn = len(my_array)\nfor i in range(1,n):\n    insert_index = i\n    current_value = my_array.pop(i)\n    for j in range(i-1, -1, -1):\n        if my_array[j] > current_value:\n            insert_index = j\n    my_array.insert(insert_index, current_value)\n\nprint(\"Sorted array:\", my_array) Run Example »",
          "Example my_array = [64, 34, 25, 12, 22, 11, 90, 5]\n\nn = len(my_array)\nfor i in range(1,n):\n    insert_index = i\n    current_value = my_array[i]\n    for j in range(i-1, -1, -1):\n        if my_array[j] > current_value:\n            my_array[j+1] = my_array[j]\n            insert_index = j\n        else:\n            break\n    my_array[insert_index] = current_value\n\nprint(\"Sorted array:\", my_array) Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_selectionsort.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_insertionsort"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_insertionsort2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_selectionsort.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_algo_quicksort.php",
    "cours": {
      "titre": "DSA Quicksort",
      "description": "How it works: Choose a value in the array to be the pivot element. Order the rest of the array so that lower values than the pivot element are on the left, and higher values are on the right. Swap the pivot element with the first element of the higher values so that the pivot element lands in between the lower and higher values. Do the same operations (recursively) for the sub-arrays on the left and right side of the pivot element.",
      "lien": "https://www.w3schools.com/dsa/dsa_algo_quicksort.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "An array with values to sort.",
            "A quickSort method that calls itself (recursion) if the sub-array has a size larger than 1.",
            "A partition method that receives a sub-array, moves values around, swaps the pivot element into the sub-array and returns the index where the next split in sub-arrays happens."
          ]
        ],
        "examples": [
          "[ 11, 9, 12, 7, 3]",
          "[ 11, 9, 12, 7, 3 ]",
          "[ 3 , 9, 12, 7, 11 ]",
          "[ 3, 9, 12, 7, 11 ]",
          "[ 3, 9, 7, 12 , 11]",
          "[ 3, 9, 7, 11, 12 ]",
          "[ 3, 9, 7 , 11, 12]",
          "[ 3, 7, 9 , 11, 12]",
          "Example def partition(array, low, high):\n    pivot = array[high]\n    i = low - 1\n\n    for j in range(low, high):\n        if array[j] <= pivot:\n            i += 1\n            array[i], array[j] = array[j], array[i]\n\n    array[i+1], array[high] = array[high], array[i+1]\n    return i+1\n\ndef quicksort(array, low=0, high=None):\n    if high is None:\n        high = len(array) - 1\n\n    if low < high:\n        pivot_index = partition(array, low, high)\n        quicksort(array, low, pivot_index-1)\n        quicksort(array, pivot_index+1, high)\n\nmy_array = [64, 34, 25, 12, 22, 11, 90, 5]\nquicksort(my_array)\nprint(\"Sorted array:\", my_array) Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_insertionsort.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_quicksort"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_insertionsort.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_algo_countingsort.php",
    "cours": {
      "titre": "DSA Counting Sort",
      "description": "How it works: Create a new array for counting how many there are of the different values. Go through the array that needs to be sorted. For each value, count it by increasing the counting array at the corresponding index. After counting the values, go through the counting array to create the sorted array. For each count in the counting array, create the correct number of elements, with values that correspond to the counting array index.",
      "lien": "https://www.w3schools.com/dsa/dsa_algo_countingsort.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Integer values: Counting Sort relies on counting occurrences of distinct values, so they must be integers. With integers, each value fits with an index (for non negative values), and there is a limited number of different values, so that the number of possible different values \\(k\\) is not too big compared to the number of values \\(n\\).",
            "Non negative values: Counting Sort is usually implemented by creating an array for counting. When the algorithm goes through the values to be sorted, value x is counted by increasing the counting array value at index x. If we tried sorting negative values, we would get in trouble with sorting value -3, because index -3 would be outside the counting array.",
            "Limited range of values: If the number of possible different values to be sorted \\(k\\) is larger than the number of values to be sorted \\(n\\), the counting array we need for sorting will be larger than the original array we have that needs sorting, and the algorithm becomes ineffective."
          ],
          [
            "Each value gets counted by incrementing at the correct index in the counting array. After a value is counted, it is removed.",
            "The values are recreated in the right order by using the count, and the index of the count, from the counting array."
          ],
          [
            "An array with values to sort.",
            "A 'countingSort' method that receives an array of integers.",
            "An array inside the method to keep count of the values.",
            "A loop inside the method that counts and removes values, by incrementing elements in the counting array.",
            "A loop inside the method that recreates the array by using the counting array, so that the elements appear in the right order."
          ]
        ],
        "examples": [
          "myArray = [ 2, 3, 0, 2, 3, 2]",
          "myArray = [ 2, 3, 0, 2, 3, 2] countArray = [ 0, 0, 0, 0]",
          "myArray = [ 2 , 3, 0, 2, 3, 2] countArray = [ 0, 0, 1 , 0]",
          "myArray = [ 3 , 0, 2, 3, 2] countArray = [ 0, 0, 1, 1 ]",
          "myArray = [ 0 , 2, 3, 2] countArray = [ 1 , 0, 1, 1]",
          "myArray = [ ] countArray = [ 1, 0, 3, 2 ]",
          "myArray = [ 0 ] countArray = [ 0 , 0, 3, 2]",
          "myArray = [ 0] countArray = [ 0, 0 , 3, 2]",
          "myArray = [ 0, 2, 2, 2 ] countArray = [ 0, 0, 0 , 2]",
          "myArray = [0, 2, 2, 2, 3, 3 ] countArray = [ 0, 0, 0, 0 ]",
          "Example def countingSort(arr):\n    max_val = max(arr)\n    count = [0] * (max_val + 1)\n\n    while len(arr) > 0:\n        num = arr.pop(0)\n        count[num] += 1\n\n    for i in range(len(count)):\n        while count[i] > 0:\n            arr.append(i)\n            count[i] -= 1\n\n    return arr\n\nunsortedArr = [4, 2, 2, 6, 3, 3, 1, 6, 5, 2, 3]\nsortedArr = countingSort(unsortedArr)\nprint(\"Sorted array:\", sortedArr) Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_quicksort.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_countingsort"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_quicksort.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_algo_radixsort.php",
    "cours": {
      "titre": "DSA Radix Sort",
      "description": "How it works: Start with the least significant digit (rightmost digit). Sort the values based on the digit in focus by first putting the values in the correct bucket based on the digit in focus, and then put them back into array in the correct order. Move to the next digit, and sort again, like in the step above, until there are no digits left.",
      "lien": "https://www.w3schools.com/dsa/dsa_algo_radixsort.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "An array with non negative integers that needs to be sorted.",
            "A two dimensional array with index 0 to 9 to hold values with the current radix in focus.",
            "A loop that takes values from the unsorted array and places them in the correct position in the two dimensional radix array.",
            "A loop that puts values back into the initial array from the radix array.",
            "An outer loop that runs as many times as there are digits in the highest value."
          ]
        ],
        "examples": [
          "myArray = [ 33, 45, 40, 25, 17, 24] radixArray = [ [], [], [], [], [], [], [], [], [], [] ]",
          "myArray = [ 3 3 , 4 5 , 4 0 , 2 5 , 1 7 , 2 4 ] radixArray = [ [], [], [], [], [], [], [], [], [], [] ]",
          "myArray = [ ] radixArray = [ [4 0 ], [], [], [3 3 ], [2 4 ], [4 5 , 2 5 ], [], [1 7 ], [], [] ]",
          "myArray = [ 4 0 , 3 3 , 2 4 , 4 5 , 2 5 , 1 7 ] radixArray = [ [], [], [], [], [], [], [], [], [], [] ]",
          "myArray = [ 4 0, 3 3, 2 4, 4 5, 2 5, 1 7 ] radixArray = [ [], [], [], [], [], [], [], [], [], [] ]",
          "myArray = [ ] radixArray = [ [], [ 1 7], [ 2 4, 2 5], [ 3 3], [ 4 0, 4 5], [], [], [], [], [] ]",
          "myArray = [ 1 7, 2 4, 2 5, 3 3, 4 0, 4 5 ] radixArray = [ [], [], [], [], [], [], [], [], [], [] ]",
          "Example myArray = [170, 45, 75, 90, 802, 24, 2, 66]\nprint(\"Original array:\", myArray)\nradixArray = [[], [], [], [], [], [], [], [], [], []]\nmaxVal = max(myArray)\nexp = 1\n\nwhile maxVal // exp > 0:\n\n    while len(myArray) > 0:\n        val = myArray.pop()\n        radixIndex = (val // exp) % 10\n        radixArray[radixIndex].append(val)\n\n    for bucket in radixArray:\n        while len(bucket) > 0:\n            val = bucket.pop()\n            myArray.append(val)\n\n    exp *= 10\n\nprint(\"Sorted array:\", myArray) Run Example »",
          "Example def bubbleSort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                \ndef radixSortWithBubbleSort(arr):\n    max_val = max(arr)\n    exp = 1\n    \n    while max_val // exp > 0:\n        radixArray = [[],[],[],[],[],[],[],[],[],[]]\n        \n        for num in arr:\n            radixIndex = (num // exp) % 10\n            radixArray[radixIndex].append(num)\n        \n        for bucket in radixArray:\n            bubbleSort(bucket)\n        \n        i = 0\n        for bucket in radixArray:\n            for num in bucket:\n                arr[i] = num\n                i += 1\n        \n        exp *= 10\n\nmyArray = [170, 45, 75, 90, 802, 24, 2, 66]\nprint(\"Original array:\", myArray)\nradixSortWithBubbleSort(myArray)\nprint(\"Sorted array:\", myArray) Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_countingsort.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_radixsort"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_radixsortbbl"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_countingsort.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_algo_mergesort.php",
    "cours": {
      "titre": "DSA Merge Sort",
      "description": "How it works: Divide the unsorted array into two sub-arrays, half the size of the original. Continue to divide the sub-arrays as long as the current piece of the array has more than one element. Merge two sub-arrays together by always putting the lowest value first. Keep merging until there are no sub-arrays left.",
      "lien": "https://www.w3schools.com/dsa/dsa_algo_mergesort.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "3 is lower than 4",
            "4 is lower than 11",
            "5 is lower than 11",
            "11 is the last remaining value"
          ],
          [
            "An array with values that needs to be sorted.",
            "A function that takes an array, splits it in two, and calls itself with each half of that array so that the arrays are split again and again recursively, until a sub-array only consist of one value.",
            "Another function that merges the sub-arrays back together in a sorted way."
          ]
        ],
        "examples": [
          "[ 12, 8, 9, 3, 11, 5, 4] [ 12, 8, 9] [ 3, 11, 5, 4] [ 12] [ 8, 9] [ 3, 11, 5, 4] [ 12] [ 8] [ 9] [ 3, 11, 5, 4]",
          "[ 12] [ 8 , 9 ] [ 3, 11, 5, 4]",
          "[ 8 , 9 , 12 ] [ 3, 11, 5, 4]",
          "[ 8, 9, 12] [ 3, 11, 5, 4] [ 8, 9, 12] [ 3, 11] [ 5, 4] [ 8, 9, 12] [ 3] [ 11] [ 5, 4]",
          "[ 8, 9, 12] [ 3 , 11 ] [ 5, 4]",
          "[ 8, 9, 12] [ 3, 11] [ 5 ] [ 4 ] [ 8, 9, 12] [ 3, 11] [ 4 , 5 ]",
          "[ 8, 9, 12] [ 3 , 4 , 5 , 11 ]",
          "Before [ 8 , 9, 12] [ 3 , 4, 5, 11] After: [ 3 , 8 , 9, 12] [ 4, 5, 11]",
          "Before [ 3, 8 , 9, 12] [ 4 , 5, 11] After: [ 3, 4 , 8 , 9, 12] [ 5, 11]",
          "Before [ 3, 4, 8 , 9, 12] [ 5 , 11] After: [ 3, 4, 5 , 8 , 9, 12] [ 11]",
          "Before [ 3, 4, 5, 8 , 9 , 12] [ 11 ] After: [ 3, 4, 5, 8 , 9 , 12] [ 11 ]",
          "Before [ 3, 4, 5, 8, 9, 12 ] [ 11 ] After: [ 3, 4, 5, 8, 9, 11 , 12 ]",
          "Example def mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    leftHalf = arr[:mid]\n    rightHalf = arr[mid:]\n\n    sortedLeft = mergeSort(leftHalf)\n    sortedRight = mergeSort(rightHalf)\n\n    return merge(sortedLeft, sortedRight)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n\n    return result\n\nunsortedArr = [3, 7, 6, -10, 15, 23.5, 55, -13]\nsortedArr = mergeSort(unsortedArr)\nprint(\"Sorted array:\", sortedArr) Run Example »",
          "Example def merge(left, right):\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n            \n    result.extend(left[i:])\n    result.extend(right[j:])\n    \n    return result\n\ndef mergeSort(arr):\n    step = 1  # Starting with sub-arrays of length 1\n    length = len(arr)\n    \n    while step < length:\n        for i in range(0, length, 2 * step):\n            left = arr[i:i + step]\n            right = arr[i + step:i + 2 * step]\n            \n            merged = merge(left, right)\n            \n            # Place the merged array back into the original array\n            for j, val in enumerate(merged):\n                arr[i + j] = val\n                \n        step *= 2  # Double the sub-array length for the next iteration\n        \n    return arr\n\nunsortedArr = [3, 7, 6, -10, 15, 23.5, 55, -13]\nsortedArr = mergeSort(unsortedArr)\nprint(\"Sorted array:\", sortedArr) Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_radixsort.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_mergesort"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_mergesort2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_radixsort.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_algo_linearsearch.php",
    "cours": {
      "titre": "DSA Linear Search",
      "description": "How it works: Go through the array value by value from the start. Compare each value to check if it is equal to the value we are looking for. If the value is found, return the index of that value. If the end of the array is reached and the value is not found, return -1 to indicate that the value was not found.",
      "lien": "https://www.w3schools.com/dsa/dsa_algo_linearsearch.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "An array with values to search through.",
            "A target value to search for.",
            "A loop that goes through the array from start to end.",
            "An if-statement that compares the current value with the target value, and returns the current index if the target value is found.",
            "After the loop, return -1, because at this point we know the target value has not been found."
          ]
        ],
        "examples": [
          "[ 12, 8, 9, 11, 5, 11]",
          "[ 12 , 8, 9, 11, 5, 11]",
          "[ 12, 8 , 9, 11, 5, 11]",
          "[ 12, 8, 9 , 11, 5, 11]",
          "[ 12, 8, 9, 11 , 5, 11]",
          "Example def linearSearch(arr, targetVal):\n    for i in range(len(arr)):\n        if arr[i] == targetVal:\n            return i\n    return -1\n\narr = [3, 7, 2, 9, 5]\ntargetVal = 9\n\nresult = linearSearch(arr, targetVal)\n\nif result != -1:\n    print(\"Value\",targetVal,\"found at index\",result)\nelse:\n    print(\"Value\",targetVal,\"not found\") Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_mergesort.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_linearsearch"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_mergesort.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_algo_binarysearch.php",
    "cours": {
      "titre": "DSA Binary Search",
      "description": "How it works: Check the value in the center of the array. If the target value is lower, search the left half of the array. If the target value is higher, search the right half. Continue step 1 and 2 for the new reduced part of the array until the target value is found or until the search area is empty. If the value is found, return the target value index. If the target value is not found, return -1.",
      "lien": "https://www.w3schools.com/dsa/dsa_algo_binarysearch.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "An array with values to search through.",
            "A target value to search for.",
            "A loop that runs as long as left index is less than, or equal to, the right index.",
            "An if-statement that compares the middle value with the target value, and returns the index if the target value is found.",
            "An if-statement that checks if the target value is less than, or larger than, the middle value, and updates the \"left\" or \"right\" variables to narrow down the search area.",
            "After the loop, return -1, because at this point we know the target value has not been found."
          ]
        ],
        "examples": [
          "[ 2, 3, 7, 7, 11, 15, 25]",
          "[ 2, 3, 7, 7 , 11, 15, 25]",
          "[ 2, 3, 7, 7, 11, 15 , 25]",
          "[ 2, 3, 7, 7, 11 , 15, 25]",
          "Example def binarySearch(arr, targetVal):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == targetVal:\n            return mid\n        \n        if arr[mid] < targetVal:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\nmyArray = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\nmyTarget = 15\n\nresult = binarySearch(myArray, myTarget)\n\nif result != -1:\n    print(\"Value\",myTarget,\"found at index\", result)\nelse:\n    print(\"Target not found in array.\") Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_linearsearch.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_binarysearch"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_linearsearch.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_theory_linkedlists.php",
    "cours": {
      "titre": "DSA Linked Lists",
      "description": "A Linked List is, as the word implies, a list where the nodes are linked together. Each node contains data and a pointer. The way they are linked together is that each node points to where in the memory the next node is placed.",
      "lien": "https://www.w3schools.com/dsa/dsa_theory_linkedlists.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_binarysearch.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_binarysearch.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_theory_linkedlists_memory.php",
    "cours": {
      "titre": "DSA Linked Lists in Memory",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_theory_linkedlists_memory.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Code written in C: #include <stdio.h>\n\nint main() {\n\n    int myVal = 13;\n    \n    printf(\"Value of integer 'myVal': %d\\n\", myVal);\n    printf(\"Size of integer 'myVal': %lu bytes\\n\", sizeof(myVal)); // 4 bytes\n    printf(\"Address to 'myVal': %p\\n\", &myVal);\n    printf(\"Size of the address to 'myVal': %lu bytes\\n\", sizeof(&myVal)); // 8 bytes\n\n    return 0;\n} Run Example »",
          "Example A basic linked list in C: #include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct Node {\n    int data;\n    struct Node* next;\n} Node;\n\nNode* createNode(int data) {\n    Node* newNode = (Node*)malloc(sizeof(Node));\n    if (!newNode) {\n        printf(\"Memory allocation failed!\\n\");\n        exit(1);\n    }\n    newNode->data = data;\n    newNode->next = NULL;\n    return newNode;\n}\n\nvoid printList(Node* node) {\n    while (node) {\n        printf(\"%d -> \", node->data);\n        node = node->next;\n    }\n    printf(\"null\\n\");\n}\n\nint main() {\n    Node* node1 = createNode(3);\n    Node* node2 = createNode(5);\n    Node* node3 = createNode(13);\n    Node* node4 = createNode(2);\n\n    node1->next = node2;\n    node2->next = node3;\n    node3->next = node4;\n\n    printList(node1);\n\n    // Free the memory\n    free(node1);\n    free(node2);\n    free(node3);\n    free(node4);\n\n    return 0;\n} Run Example »",
          "Example A basic linked list in Python: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \nnode1 = Node(3)\nnode2 = Node(5)\nnode3 = Node(13)\nnode4 = Node(2)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\n\ncurrentNode = node1\nwhile currentNode:\n    print(currentNode.data, end=\" -> \")\n    currentNode = currentNode.next\nprint(\"null\") Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_theory_linkedlists.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_linkedLists_memoryInfo"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_linkedlists_singlyc"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_linkedlists_singlyjavapython"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_theory_linkedlists.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_data_linkedlists_types.php",
    "cours": {
      "titre": "DSA Linked Lists Types",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_data_linkedlists_types.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Singly linked lists",
            "Doubly linked lists",
            "Circular linked lists"
          ],
          [
            "Singly linked list",
            "Doubly linked list",
            "Circular singly linked list",
            "Circular doubly linked list"
          ]
        ],
        "examples": [
          "Example A basic singly linked list in Python: (This is the same example as on the bottom of the previous page.) class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \nnode1 = Node(3)\nnode2 = Node(5)\nnode3 = Node(13)\nnode4 = Node(2)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\n\ncurrentNode = node1\nwhile currentNode:\n    print(currentNode.data, end=\" -> \")\n    currentNode = currentNode.next\nprint(\"null\") Run Example »",
          "Example A basic doubly linked list in Python: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n    \nnode1 = Node(3)\nnode2 = Node(5)\nnode3 = Node(13)\nnode4 = Node(2)\n\nnode1.next = node2\n\nnode2.prev = node1\nnode2.next = node3\n\nnode3.prev = node2\nnode3.next = node4\n\nnode4.prev = node3\n\nprint(\"\\nTraversing forward:\")\ncurrentNode = node1\nwhile currentNode:\n    print(currentNode.data, end=\" -> \")\n    currentNode = currentNode.next\nprint(\"null\")\n\nprint(\"\\nTraversing backward:\")\ncurrentNode = node4\nwhile currentNode:\n    print(currentNode.data, end=\" -> \")\n    currentNode = currentNode.prev\nprint(\"null\") Run Example »",
          "Example A basic circular singly linked list in Python: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \nnode1 = Node(3)\nnode2 = Node(5)\nnode3 = Node(13)\nnode4 = Node(2)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\nnode4.next = node1\n\ncurrentNode = node1\nstartNode = node1\nprint(currentNode.data, end=\" -> \") \ncurrentNode = currentNode.next \n\nwhile currentNode != startNode:\n    print(currentNode.data, end=\" -> \")\n    currentNode = currentNode.next\n\nprint(\"...\") Run Example »",
          "Example A basic circular doubly linked list in Python: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\nnode1 = Node(3)\nnode2 = Node(5)\nnode3 = Node(13)\nnode4 = Node(2)\n\nnode1.next = node2\nnode1.prev = node4\n\nnode2.prev = node1\nnode2.next = node3\n\nnode3.prev = node2\nnode3.next = node4\n\nnode4.prev = node3\nnode4.next = node1\n\nprint(\"\\nTraversing forward:\")\ncurrentNode = node1\nstartNode = node1\nprint(currentNode.data, end=\" -> \")\ncurrentNode = currentNode.next\n\nwhile currentNode != startNode:\n    print(currentNode.data, end=\" -> \")\n    currentNode = currentNode.next\nprint(\"...\")\n\nprint(\"\\nTraversing backward:\")\ncurrentNode = node4\nstartNode = node4\nprint(currentNode.data, end=\" -> \")\ncurrentNode = currentNode.prev\n\nwhile currentNode != startNode:\n    print(currentNode.data, end=\" -> \")\n    currentNode = currentNode.prev\nprint(\"...\") Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_theory_linkedlists_memory.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_linkedLists_singly"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_linkedLists_doubly"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_linkedlists_circsingly"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_linkedlists_circdoubly"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_theory_linkedlists_memory.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_algo_linkedlists_operations.php",
    "cours": {
      "titre": "DSA Linked Lists Operations",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_algo_linkedlists_operations.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Traversal",
            "Remove a node",
            "Insert a node",
            "Sort"
          ],
          [
            "New node is created",
            "Node 1 is linked to new node",
            "New node is linked to next node"
          ],
          [
            "Linked lists are not allocated to a fixed size in memory like arrays are, so linked lists do not require to move the whole list into a larger memory space when the fixed memory space fills up, like arrays must.",
            "Linked list nodes are not laid out one right after the other in memory (contiguously), so linked list nodes do not have to be shifted up or down in memory when nodes are inserted or deleted.",
            "Linked list nodes require more memory to store one or more links to other nodes. Array elements do not require that much memory, because array elements do not contain links to other elements.",
            "Linked list operations are usually harder to program and require more lines than similar array operations, because programming languages have better built in support for arrays.",
            "We must traverse a linked list to find a node at a specific position, but with arrays we can access an element directly by writing myArray[5] ."
          ]
        ],
        "examples": [
          "Example Traversal of a singly linked list in Python: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\ndef traverseAndPrint(head):\n    currentNode = head\n    while currentNode:\n        print(currentNode.data, end=\" -> \")\n        currentNode = currentNode.next\n    print(\"null\")\n\nnode1 = Node(7)\nnode2 = Node(11)\nnode3 = Node(3)\nnode4 = Node(2)\nnode5 = Node(9)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\nnode4.next = node5\n\ntraverseAndPrint(node1) Run Example »",
          "Example Finding the lowest value in a singly linked list in Python: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\ndef findLowestValue(head):\n    minValue = head.data\n    currentNode = head.next\n    while currentNode:\n        if currentNode.data < minValue:\n            minValue = currentNode.data\n        currentNode = currentNode.next\n    return minValue\n\nnode1 = Node(7)\nnode2 = Node(11)\nnode3 = Node(3)\nnode4 = Node(2)\nnode5 = Node(9)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\nnode4.next = node5\n\nprint(\"The lowest value in the linked list is:\", findLowestValue(node1)) The marked lines above is the core of the algorithm. The initial lowest value is set to be the value of the first node. Then, if a lower value is found, the lowest value variable is udated. Run Example »",
          "Example Deleting a specific node in a singly linked list in Python: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\ndef traverseAndPrint(head):\n    currentNode = head\n    while currentNode:\n        print(currentNode.data, end=\" -> \")\n        currentNode = currentNode.next\n    print(\"null\")\n\ndef deleteSpecificNode(head, nodeToDelete):\n\n    if head == nodeToDelete:\n        return head.next\n\n    currentNode = head\n    while currentNode.next and currentNode.next != nodeToDelete:\n        currentNode = currentNode.next\n\n    if currentNode.next is None:\n        return head\n\n    currentNode.next = currentNode.next.next\n\n    return head\n\nnode1 = Node(7)\nnode2 = Node(11)\nnode3 = Node(3)\nnode4 = Node(2)\nnode5 = Node(9)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\nnode4.next = node5\n\nprint(\"Before deletion:\")\ntraverseAndPrint(node1)\n\n# Delete node4\nnode1 = deleteSpecificNode(node1, node4)\n\nprint(\"\\nAfter deletion:\")\ntraverseAndPrint(node1) Run Example »",
          "Example Inserting a node in a singly linked list in Python: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\ndef traverseAndPrint(head):\n    currentNode = head\n    while currentNode:\n        print(currentNode.data, end=\" -> \")\n        currentNode = currentNode.next\n    print(\"null\")\n\ndef insertNodeAtPosition(head, newNode, position):\n    if position == 1:\n        newNode.next = head\n        return newNode\n    \n    currentNode = head\n    for _ in range(position - 2):\n        if currentNode is None:\n            break\n        currentNode = currentNode.next\n\n    newNode.next = currentNode.next\n    currentNode.next = newNode\n    return head\n\nnode1 = Node(7)\nnode2 = Node(3)\nnode3 = Node(2)\nnode4 = Node(9)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\n\nprint(\"Original list:\")\ntraverseAndPrint(node1)\n\n# Insert a new node with value 97 at position 2\nnewNode = Node(97)\nnode1 = insertNodeAtPosition(node1, newNode, 2)\n\nprint(\"\\nAfter insertion:\")\ntraverseAndPrint(node1) Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_data_linkedlists_types.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_linkedLists_traverse"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_linkedlists_findlowest"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_linkedlists_deletespecific"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_linkedLists_insert"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_data_linkedlists_types.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_data_stacks.php",
    "cours": {
      "titre": "DSA Stacks",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_data_stacks.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Push: Adds a new element on the stack.",
            "Pop: Removes and returns the top element from the stack.",
            "Peek: Returns the top element on the stack.",
            "isEmpty: Checks if the stack is empty.",
            "Size: Finds the number of elements in the stack."
          ],
          [
            "Memory Efficient: Array elements do not hold the next elements address like linked list nodes do.",
            "Easier to implement and understand: Using arrays to implement stacks require less code than using linked lists, and for this reason it is typically easier to understand as well."
          ],
          [
            "Fixed size: An array occupies a fixed part of the memory. This means that it could take up more memory than needed, or if the array fills up, it cannot hold more elements."
          ],
          [
            "Dynamic size: The stack can grow and shrink dynamically, unlike with arrays."
          ],
          [
            "Extra memory: Each stack element must contain the address to the next element (the next linked list node).",
            "Readability: The code might be harder to read and write for some because it is longer and more complex."
          ]
        ],
        "examples": [
          "Example Python: stack = []\n\n# Push\nstack.append('A')\nstack.append('B')\nstack.append('C')\nprint(\"Stack: \", stack)\n\n# Pop\nelement = stack.pop()\nprint(\"Pop: \", element)\n\n# Peek\ntopElement = stack[-1]\nprint(\"Peek: \", topElement)\n\n# isEmpty\nisEmpty = not bool(stack)\nprint(\"isEmpty: \", isEmpty)\n\n# Size\nprint(\"Size: \",len(stack)) Run Example »",
          "Example Python: class Stack:\n    def __init__(self):\n        self.stack = []\n    \n    def push(self, element):\n        self.stack.append(element)\n    \n    def pop(self):\n        if self.isEmpty():\n            return \"Stack is empty\"\n        return self.stack.pop()\n    \n    def peek(self):\n        if self.isEmpty():\n            return \"Stack is empty\"\n        return self.stack[-1]\n    \n    def isEmpty(self):\n        return len(self.stack) == 0\n    \n    def size(self):\n        return len(self.stack)\n\n# Create a stack\nmyStack = Stack()\n\nmyStack.push('A')\nmyStack.push('B')\nmyStack.push('C')\nprint(\"Stack: \", myStack.stack)\n\nprint(\"Pop: \", myStack.pop())\n\nprint(\"Peek: \", myStack.peek())\n\nprint(\"isEmpty: \", myStack.isEmpty())\n\nprint(\"Size: \", myStack.size()) Run Example »",
          "Example Python: class Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\nclass Stack:\n    def __init__(self):\n        self.head = None\n        self.size = 0\n    \n    def push(self, value):\n        new_node = Node(value)\n        if self.head:\n            new_node.next = self.head\n        self.head = new_node\n        self.size += 1\n    \n    def pop(self):\n        if self.isEmpty():\n            return \"Stack is empty\"\n        popped_node = self.head\n        self.head = self.head.next\n        self.size -= 1\n        return popped_node.value\n    \n    def peek(self):\n        if self.isEmpty():\n            return \"Stack is empty\"\n        return self.head.value\n    \n    def isEmpty(self):\n        return self.size == 0\n    \n    def stackSize(self):\n        return self.size\n\nmyStack = Stack()\nmyStack.push('A')\nmyStack.push('B')\nmyStack.push('C')\n\nprint(\"Pop: \", myStack.pop())\nprint(\"Peek: \", myStack.peek())\nprint(\"isEmpty: \", myStack.isEmpty())\nprint(\"Size: \", myStack.stackSize()) Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_linkedlists_operations.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_stacks_array1"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_stacks_array2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_stacks_linkedlist"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_linkedlists_operations.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_data_queues.php",
    "cours": {
      "titre": "DSA Queues",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_data_queues.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Enqueue: Adds a new element to the queue.",
            "Dequeue: Removes and returns the first (front) element from the queue.",
            "Peek: Returns the first element in the queue.",
            "isEmpty: Checks if the queue is empty.",
            "Size: Finds the number of elements in the queue."
          ],
          [
            "Memory Efficient: Array elements do not hold the next elements address like linked list nodes do.",
            "Easier to implement and understand: Using arrays to implement queues require less code than using linked lists, and for this reason it is typically easier to understand as well."
          ],
          [
            "Fixed size: An array occupies a fixed part of the memory. This means that it could take up more memory than needed, or if the array fills up, it cannot hold more elements. And resizing an array can be costly.",
            "Shifting cost: Dequeue causes the first element in a queue to be removed, and the other elements must be shifted to take the removed elements' place. This is inefficient and can cause problems, especially if the queue is long.",
            "Alternatives: Some programming languages have built-in data structures optimized for queue operations that are better than using arrays."
          ],
          [
            "Dynamic size: The queue can grow and shrink dynamically, unlike with arrays.",
            "No shifting: The front element of the queue can be removed (enqueue) without having to shift other elements in the memory."
          ],
          [
            "Extra memory: Each queue element must contain the address to the next element (the next linked list node).",
            "Readability: The code might be harder to read and write for some because it is longer and more complex."
          ]
        ],
        "examples": [
          "Example Python: queue = []\n\n# Enqueue\nqueue.append('A')\nqueue.append('B')\nqueue.append('C')\nprint(\"Queue: \", queue)\n\n# Dequeue\nelement = queue.pop(0)\nprint(\"Dequeue: \", element)\n\n# Peek\nfrontElement = queue[0]\nprint(\"Peek: \", frontElement)\n\n# isEmpty\nisEmpty = not bool(queue)\nprint(\"isEmpty: \", isEmpty)\n\n# Size\nprint(\"Size: \", len(queue)) Run Example »",
          "Example Python: class Queue:\n    def __init__(self):\n        self.queue = []\n    \n    def enqueue(self, element):\n        self.queue.append(element)\n    \n    def dequeue(self):\n        if self.isEmpty():\n            return \"Queue is empty\"\n        return self.queue.pop(0)\n    \n    def peek(self):\n        if self.isEmpty():\n            return \"Queue is empty\"\n        return self.queue[0]\n    \n    def isEmpty(self):\n        return len(self.queue) == 0\n    \n    def size(self):\n        return len(self.queue)\n\n# Create a queue\nmyQueue = Queue()\n\nmyQueue.enqueue('A')\nmyQueue.enqueue('B')\nmyQueue.enqueue('C')\nprint(\"Queue: \", myQueue.queue)\n\nprint(\"Dequeue: \", myQueue.dequeue())\n\nprint(\"Peek: \", myQueue.peek())\n\nprint(\"isEmpty: \", myQueue.isEmpty())\n\nprint(\"Size: \", myQueue.size()) Run Example »",
          "Example Python: class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass Queue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n        self.length = 0\n    \n    def enqueue(self, element):\n        new_node = Node(element)\n        if self.rear is None:\n            self.front = self.rear = new_node\n            self.length += 1\n            return\n        self.rear.next = new_node\n        self.rear = new_node\n        self.length += 1\n    \n    def dequeue(self):\n        if self.isEmpty():\n            return \"Queue is empty\"\n        temp = self.front\n        self.front = temp.next\n        self.length -= 1\n        if self.front is None:\n            self.rear = None\n        return temp.data\n    \n    def peek(self):\n        if self.isEmpty():\n            return \"Queue is empty\"\n        return self.front.data\n    \n    def isEmpty(self):\n        return self.length == 0\n    \n    def size(self):\n        return self.length\n\n    def printQueue(self):\n        temp = self.front\n        while temp:\n            print(temp.data, end=\" \")\n            temp = temp.next\n        print()\n\n# Create a queue\nmyQueue = Queue()\n\nmyQueue.enqueue('A')\nmyQueue.enqueue('B')\nmyQueue.enqueue('C')\nprint(\"Queue: \", end=\"\")\nmyQueue.printQueue()\n\nprint(\"Dequeue: \", myQueue.dequeue())\n\nprint(\"Peek: \", myQueue.peek())\n\nprint(\"isEmpty: \", myQueue.isEmpty())\n\nprint(\"Size: \", myQueue.size()) Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_data_stacks.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_queues_array1"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_queues_array2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_queues_linkedlist"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_data_stacks.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_theory_hashtables.php",
    "cours": {
      "titre": "DSA Hash Tables",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_theory_hashtables.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Starting with an array.",
            "Storing names using a hash function.",
            "Looking up an element using a hash function.",
            "Handling collisions.",
            "The basic Hash Set code example and simulation."
          ],
          [
            "Checking if something is in a collection (like finding a book in a library).",
            "Storing unique items and quickly finding them (like storing phone numbers).",
            "Connecting values to keys (like linking names to phone numbers)."
          ]
        ],
        "examples": [
          "my_array = ['Pete', 'Jones', 'Lisa', 'Bob', 'Siri']",
          "my_hash_set = [None,None,None,None,None,None,None,None,None,None]",
          "Example def hash_function(value):\n    sum_of_chars = 0\n    for char in value:\n        sum_of_chars += ord(char)\n\n    return sum_of_chars % 10\n\nprint(\"'Bob' has hash code:\",hash_function('Bob')) Run Example »",
          "my_hash_set = [None,None,None,None,None,'Bob',None,None,None,None]",
          "my_hash_set = [None,'Jones',None,'Lisa',None,'Bob',None,'Siri','Pete',None]",
          "Example my_hash_set = [None,'Jones',None,'Lisa',None,'Bob',None,'Siri','Pete',None]\n\ndef hash_function(value):\n    sum_of_chars = 0\n    for char in value:\n        sum_of_chars += ord(char)\n\n    return sum_of_chars % 10\n    \ndef contains(name):\n    index = hash_function(name)\n    return my_hash_set[index] == name\n\nprint(\"'Pete' is in the Hash Set:\",contains('Pete')) Run Example »",
          "my_hash_set = [\n    [None],\n    ['Jones'],\n    [None],\n    ['Lisa', 'Stuart'],\n    [None],\n    ['Bob'],\n    [None],\n    ['Siri'],\n    ['Pete'],\n    [None]\n]",
          "Example my_hash_set = [\n    [None],\n    ['Jones'],\n    [None],\n    ['Lisa'],\n    [None],\n    ['Bob'],\n    [None],\n    ['Siri'],\n    ['Pete'],\n    [None]\n]\n\ndef hash_function(value):\n    return sum(ord(char) for char in value) % 10\n    \ndef add(value):\n    index = hash_function(value)\n    bucket = my_hash_set[index]\n    if value not in bucket:\n        bucket.append(value)\n        \ndef contains(value):\n    index = hash_function(value)\n    bucket = my_hash_set[index]\n    return value in bucket\n\nadd('Stuart')\n\nprint(my_hash_set)\nprint('Contains Stuart:',contains('Stuart')) Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_data_queues.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_hashset_0"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_hashset_1"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_hashset_2"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_data_queues.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_data_hashsets.php",
    "cours": {
      "titre": "DSA Hash Sets",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_data_hashsets.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Hash code: A number generated from an element's unique value (key), to determine what bucket that Hash Set element belongs to.",
            "Unique elements: A Hash Set cannot have more than one element with the same value.",
            "Bucket: A Hash Set consists of many such buckets, or containers, to store elements. If two elements have the same hash code, they belong to the same bucket. The buckets are therefore often implemented as arrays or linked lists, because a bucket needs to be able to hold more than one element."
          ]
        ],
        "examples": [
          "Example class SimpleHashSet:\n    def __init__(self, size=100):\n        self.size = size\n        self.buckets = [[] for _ in range(size)]  # A list of buckets, each is a list (to handle collisions)\n\n    def hash_function(self, value):\n        # Simple hash function: sum of character codes modulo the number of buckets\n        return sum(ord(char) for char in value) % self.size\n\n    def add(self, value):\n        # Add a value if it's not already present\n        index = self.hash_function(value)\n        bucket = self.buckets[index]\n        if value not in bucket:\n            bucket.append(value)\n\n    def contains(self, value):\n        # Check if a value exists in the set\n        index = self.hash_function(value)\n        bucket = self.buckets[index]\n        return value in bucket\n\n    def remove(self, value):\n        # Remove a value\n        index = self.hash_function(value)\n        bucket = self.buckets[index]\n        if value in bucket:\n            bucket.remove(value)\n\n    def print_set(self):\n        # Print all elements in the hash set\n        print(\"Hash Set Contents:\")\n        for index, bucket in enumerate(self.buckets):\n            print(f\"Bucket {index}: {bucket}\")",
          "Example class SimpleHashSet:\n    def __init__(self, size=100):\n        self.size = size\n        self.buckets = [[] for _ in range(size)]  # A list of buckets, each is a list (to handle collisions)\n\n    def hash_function(self, value):\n        # Simple hash function: sum of character codes modulo the number of buckets\n        return sum(ord(char) for char in value) % self.size\n\n    def add(self, value):\n        # Add a value if it's not already present\n        index = self.hash_function(value)\n        bucket = self.buckets[index]\n        if value not in bucket:\n            bucket.append(value)\n\n    def contains(self, value):\n        # Check if a value exists in the set\n        index = self.hash_function(value)\n        bucket = self.buckets[index]\n        return value in bucket\n\n    def remove(self, value):\n        # Remove a value\n        index = self.hash_function(value)\n        bucket = self.buckets[index]\n        if value in bucket:\n            bucket.remove(value)\n\n    def print_set(self):\n        # Print all elements in the hash set\n        print(\"Hash Set Contents:\")\n        for index, bucket in enumerate(self.buckets):\n            print(f\"Bucket {index}: {bucket}\")\n\n# Creating the Hash Set from the simulation\nhash_set = SimpleHashSet(size=10)\n\nhash_set.add(\"Charlotte\")\nhash_set.add(\"Thomas\")\nhash_set.add(\"Jens\")\nhash_set.add(\"Peter\")\nhash_set.add(\"Lisa\")\nhash_set.add(\"Adele\")\nhash_set.add(\"Michaela\")\nhash_set.add(\"Bob\")\n\nhash_set.print_set()\n\nprint(\"\\n'Peter' is in the set:\",hash_set.contains('Peter'))\nprint(\"Removing 'Peter'\")\nhash_set.remove('Peter')\nprint(\"'Peter' is in the set:\",hash_set.contains('Peter'))\nprint(\"'Adele' has hash code:\",hash_set.hash_function('Adele')) Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_theory_hashtables.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_hashset"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_theory_hashtables.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_data_hashmaps.php",
    "cours": {
      "titre": "DSA Hash Maps",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_data_hashmaps.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Entry: Consists of a key and a value, forming a key-value pair.",
            "Key: Unique for each entry in the Hash Map. Used to generate a hash code determining the entry's bucket in the Hash Map. This ensures that every entry can be efficiently located.",
            "Hash Code: A number generated from an entry's key, to determine what bucket that Hash Map entry belongs to.",
            "Bucket: A Hash Map consists of many such buckets, or containers, to store entries.",
            "Value: Can be nearly any kind of information, like name, birth date, and address of a person. The value can be many different kinds of information combined."
          ]
        ],
        "examples": [
          "Example class SimpleHashMap:\n    def __init__(self, size=100):\n        self.size = size\n        self.buckets = [[] for _ in range(size)]  # A list of buckets, each is a list (to handle collisions)\n\n    def hash_function(self, key):\n        # Sum only the numerical values of the key, ignoring non-numeric characters\n        numeric_sum = sum(int(char) for char in key if char.isdigit())\n        return numeric_sum % 10  # Perform modulo 10 on the sum\n\n    def put(self, key, value):\n        # Add or update a key-value pair\n        index = self.hash_function(key)\n        bucket = self.buckets[index]\n        for i, (k, v) in enumerate(bucket):\n            if k == key:\n                bucket[i] = (key, value)  # Update existing key\n                return\n        bucket.append((key, value))  # Add new key-value pair if not found\n\n    def get(self, key):\n        # Retrieve a value by key\n        index = self.hash_function(key)\n        bucket = self.buckets[index]\n        for k, v in bucket:\n            if k == key:\n                return v\n        return None  # Key not found\n\n    def remove(self, key):\n        # Remove a key-value pair\n        index = self.hash_function(key)\n        bucket = self.buckets[index]\n        for i, (k, v) in enumerate(bucket):\n            if k == key:\n                del bucket[i]  # Remove the key-value pair\n                return\n\n    def print_map(self):\n        # Print all key-value pairs in the hash map\n        print(\"Hash Map Contents:\")\n        for index, bucket in enumerate(self.buckets):\n            print(f\"Bucket {index}: {bucket}\")",
          "Example class SimpleHashMap:\n    def __init__(self, size=100):\n        self.size = size\n        self.buckets = [[] for _ in range(size)]  # A list of buckets, each is a list (to handle collisions)\n\n    def hash_function(self, key):\n        # Sum only the numerical values of the key, ignoring non-numeric characters\n        numeric_sum = sum(int(char) for char in key if char.isdigit())\n        return numeric_sum % 10  # Perform modulo 10 on the sum\n\n    def put(self, key, value):\n        # Add or update a key-value pair\n        index = self.hash_function(key)\n        bucket = self.buckets[index]\n        for i, (k, v) in enumerate(bucket):\n            if k == key:\n                bucket[i] = (key, value)  # Update existing key\n                return\n        bucket.append((key, value))  # Add new key-value pair if not found\n\n    def get(self, key):\n        # Retrieve a value by key\n        index = self.hash_function(key)\n        bucket = self.buckets[index]\n        for k, v in bucket:\n            if k == key:\n                return v\n        return None  # Key not found\n\n    def remove(self, key):\n        # Remove a key-value pair\n        index = self.hash_function(key)\n        bucket = self.buckets[index]\n        for i, (k, v) in enumerate(bucket):\n            if k == key:\n                del bucket[i]  # Remove the key-value pair\n                return\n\n    def print_map(self):\n        # Print all key-value pairs in the hash map\n        print(\"Hash Map Contents:\")\n        for index, bucket in enumerate(self.buckets):\n            print(f\"Bucket {index}: {bucket}\")\n\n# Creating the Hash Map from the simulation\nhash_map = SimpleHashMap(size=10)\n\n# Adding some entries\nhash_map.put(\"123-4567\", \"Charlotte\")\nhash_map.put(\"123-4568\", \"Thomas\")\nhash_map.put(\"123-4569\", \"Jens\")\nhash_map.put(\"123-4570\", \"Peter\")\nhash_map.put(\"123-4571\", \"Lisa\")\nhash_map.put(\"123-4672\", \"Adele\")\nhash_map.put(\"123-4573\", \"Michaela\")\nhash_map.put(\"123-6574\", \"Bob\")\n\nhash_map.print_map()\n\n# Demonstrating retrieval\nprint(\"\\nName associated with '123-4570':\", hash_map.get(\"123-4570\"))\n\nprint(\"Updating the name for '123-4570' to 'James'\")\nhash_map.put(\"123-4570\",\"James\")\n\n# Checking if Peter is still there\nprint(\"Name associated with '123-4570':\", hash_map.get(\"123-4570\")) Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_data_hashsets.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_hashmap"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_data_hashsets.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_theory_trees.php",
    "cours": {
      "titre": "DSA Trees",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_theory_trees.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Hierarchical Data: File systems, organizational models, etc.",
            "Databases: Used for quick data retrieval.",
            "Routing Tables: Used for routing data in network algorithms.",
            "Sorting/Searching: Used for sorting data and searching for data.",
            "Priority Queues: Priority queue data structures are commonly implemented using trees, such as binary heaps."
          ]
        ],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_data_hashmaps.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_data_hashmaps.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_data_binarytrees.php",
    "cours": {
      "titre": "DSA Binary Trees",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_data_binarytrees.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Algorithms like traversing, searching, insertion and deletion become easier to understand, to implement, and run faster.",
            "Keeping data sorted in a Binary Search Tree (BST) makes searching very efficient.",
            "Balancing trees is easier to do with a limited number of child nodes, using an AVL Binary Tree for example.",
            "Binary Trees can be represented as arrays, making the tree more memory efficient."
          ],
          [
            "Arrays are fast when you want to access an element directly, like element number 700 in an array of 1000 elements for example. But inserting and deleting elements require other elements to shift in memory to make place for the new element, or to take the deleted elements place, and that is time consuming.",
            "Linked Lists are fast when inserting or deleting nodes, no memory shifting needed, but to access an element inside the list, the list must be traversed, and that takes time.",
            "Binary Trees , such as Binary Search Trees and AVL Trees, are great compared to Arrays and Linked Lists because they are BOTH fast at accessing a node, AND fast when it comes to deleting or inserting a node, with no shifts in memory needed."
          ],
          [
            "pre-order",
            "in-order",
            "post-order"
          ]
        ],
        "examples": [
          "Example Python: class TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\nroot = TreeNode('R')\nnodeA = TreeNode('A')\nnodeB = TreeNode('B')\nnodeC = TreeNode('C')\nnodeD = TreeNode('D')\nnodeE = TreeNode('E')\nnodeF = TreeNode('F')\nnodeG = TreeNode('G')\n\nroot.left = nodeA\nroot.right = nodeB\n\nnodeA.left = nodeC\nnodeA.right = nodeD\n\nnodeB.left = nodeE\nnodeB.right = nodeF\n\nnodeF.left = nodeG\n\n# Test\nprint(\"root.right.left.data:\", root.right.left.data) Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_theory_trees.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_binarytree"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_theory_trees.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_algo_binarytrees_preorder.php",
    "cours": {
      "titre": "DSA Pre-order Traversal",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_algo_binarytrees_preorder.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Python: def preOrderTraversal(node):\n    if node is None:\n        return\n    print(node.data, end=\", \")\n    preOrderTraversal(node.left)\n    preOrderTraversal(node.right) Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_data_binarytrees.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_binarytree_preordertraversal"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_data_binarytrees.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_algo_binarytrees_inorder.php",
    "cours": {
      "titre": "DSA In-order Traversal",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_algo_binarytrees_inorder.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Python: def inOrderTraversal(node):\n    if node is None:\n        return\n    inOrderTraversal(node.left)\n    print(node.data, end=\", \")\n    inOrderTraversal(node.right) Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_binarytrees_preorder.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_binarytree_traversal"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_binarytrees_preorder.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_algo_binarytrees_postorder.php",
    "cours": {
      "titre": "DSA Post-order Traversal",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_algo_binarytrees_postorder.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Python: def postOrderTraversal(node):\n    if node is None:\n        return\n    postOrderTraversal(node.left)\n    postOrderTraversal(node.right)\n    print(node.data, end=\", \") Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_binarytrees_inorder.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_binarytree_postordertraversal"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_binarytrees_inorder.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_data_binarytrees_arrayImpl.php",
    "cours": {
      "titre": "DSA Array Implementation",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_data_binarytrees_arrayImpl.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Python: binary_tree_array = ['R', 'A', 'B', 'C', 'D', 'E', 'F', None, None, None, None, None, None, 'G']\n\ndef left_child_index(index):\n    return 2 * index + 1\n\ndef right_child_index(index):\n    return 2 * index + 2\n\ndef get_data(index):\n    if 0 <= index < len(binary_tree_array):\n        return binary_tree_array[index]\n    return None\n\nright_child = right_child_index(0)\nleft_child_of_right_child = left_child_index(right_child)\ndata = get_data(left_child_of_right_child)\n\nprint(\"root.right.left.data:\", data) Run Example »",
          "binary_tree_array = ['R', 'A', 'B', 'C', 'D', 'E', 'F']",
          "Example Python: binary_tree_array = ['R', 'A', 'B', 'C', 'D', 'E', 'F', None, None, None, None, None, None, 'G']\n\ndef left_child_index(index):\n    return 2 * index + 1\n\ndef right_child_index(index):\n    return 2 * index + 2\n\ndef pre_order(index):\n    if index >= len(binary_tree_array) or binary_tree_array[index] is None:\n        return []\n    return [binary_tree_array[index]] + pre_order(left_child_index(index)) + pre_order(right_child_index(index))\n\ndef in_order(index):\n    if index >= len(binary_tree_array) or binary_tree_array[index] is None:\n        return []\n    return in_order(left_child_index(index)) + [binary_tree_array[index]] + in_order(right_child_index(index))\n\ndef post_order(index):\n    if index >= len(binary_tree_array) or binary_tree_array[index] is None:\n        return []\n    return post_order(left_child_index(index)) + post_order(right_child_index(index)) + [binary_tree_array[index]]\n\nprint(\"Pre-order Traversal:\", pre_order(0))\nprint(\"In-order Traversal:\", in_order(0))\nprint(\"Post-order Traversal:\", post_order(0)) Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_binarytrees_postorder.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_binarytree_arrayimpl"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_binarytree_arrayimpl_traversals"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_binarytrees_postorder.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_data_binarysearchtrees.php",
    "cours": {
      "titre": "DSA Binary Search Trees",
      "description": "A Binary Search Tree is a Binary Tree where every node's left child has a lower value, and every node's right child has a higher value. A clear advantage with Binary Search Trees is that operations like search, delete, and insert are fast and done without having to shift values in memory.",
      "lien": "https://www.w3schools.com/dsa/dsa_data_binarysearchtrees.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "The X node's left child and all of its descendants (children, children's children, and so on) have lower values than X's value.",
            "The right child, and all its descendants have higher values than X's value.",
            "Left and right subtrees must also be Binary Search Trees."
          ],
          [
            "Case 1 : Node with no child nodes (leaf node). None is returned, and that becomes the parent node's new left or right value by recursion (line 6 or 8).",
            "Case 2 : Node with either left or right child node. That left or right child node becomes the parent's new left or right child through recursion (line 7 or 9).",
            "Case 3 : Node has both left and right child nodes. The in-order successor is found using the minValueNode() function. We keep the successor's value by setting it as the value of the node we want to delete, and then we can delete the successor node."
          ]
        ],
        "examples": [
          "Example Python: class TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\ndef inOrderTraversal(node):\n    if node is None:\n        return\n    inOrderTraversal(node.left)\n    print(node.data, end=\", \")\n    inOrderTraversal(node.right)\n\nroot = TreeNode(13)\nnode7 = TreeNode(7)\nnode15 = TreeNode(15)\nnode3 = TreeNode(3)\nnode8 = TreeNode(8)\nnode14 = TreeNode(14)\nnode19 = TreeNode(19)\nnode18 = TreeNode(18)\n\nroot.left = node7\nroot.right = node15\n\nnode7.left = node3\nnode7.right = node8\n\nnode15.left = node14\nnode15.right = node19\n\nnode19.left = node18\n\n# Traverse\ninOrderTraversal(root) Run Example »",
          "Example Python: def search(node, target):\n    if node is None:\n        return None \n    elif node.data == target:\n        return node\n    elif target < node.data:\n        return search(node.left, target)\n    else:\n        return search(node.right, target) Run Example »",
          "Example Python: def insert(node, data):\n    if node is None:\n        return TreeNode(data)\n    else:\n        if data < node.data:\n            node.left = insert(node.left, data)\n        elif data > node.data:\n            node.right = insert(node.right, data)\n    return node Run Example »",
          "Example Python: def minValueNode(node):\n    current = node\n    while current.left is not None:\n        current = current.left\n    return current Run Example »",
          "Example Python: def delete(node, data):\n    if not node:\n        return None\n\n    if data < node.data:\n        node.left = delete(node.left, data)\n    elif data > node.data:\n        node.right = delete(node.right, data)\n    else:\n        # Node with only one child or no child\n        if not node.left:\n            temp = node.right\n            node = None\n            return temp\n        elif not node.right:\n            temp = node.left\n            node = None\n            return temp\n\n        # Node with two children, get the in-order successor\n        node.data = minValueNode(node.right).data\n        node.right = delete(node.right, node.data)\n\n    return node Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_data_binarytrees_arrayImpl.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_bst_traversal"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_bst_search"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_bst_insert"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_bst_findlowest"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_bst_delete"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_data_binarytrees_arrayImpl.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_data_avltrees.php",
    "cours": {
      "titre": "DSA AVL Trees",
      "description": "The AVL Tree is a type of Binary Search Tree named after two Soviet inventors Georgy A delson- V elsky and Evgenii L andis who invented the AVL Tree in 1962. AVL trees are self-balancing, which means that the tree height is kept to a minimum so that a very fast runtime is guaranteed for searching, inserting and deleting nodes, with time complexity \\(O( \\log n)\\).",
      "lien": "https://www.w3schools.com/dsa/dsa_data_avltrees.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "When D is added, the balance factor of Q becomes -2, which means the tree is unbalanced. This is an LL case because both the unbalance node Q and its left child node P are left heavy (negative balance factors). A single right rotation at node Q restores the tree balance.",
            "After nodes L, C, and B are added, P's balance factor is -2, which means the tree is out of balance. This is also an LL case because both the unbalanced node P and its left child node D are left heavy. A single right rotation restores the balance."
          ],
          [
            "When node D is inserted, A becomes unbalanced, and bot A and B are right heavy. A left rotation at node A restores the tree balance.",
            "After nodes E, C and F are inserted, node B becomes unbalanced. This is an RR case because both node B and its right child node D are right heavy. A left rotation restores the tree balance."
          ],
          [
            "When K is inserted, node Q gets unbalanced with a balance factor of -2, so it is left heavy, and its left child E is right heavy, so this is a Left-Right case.",
            "After nodes C, F, and G are inserted, node K becomes unbalanced and left heavy, with its left child node E right heavy, so it is a Left-Right case."
          ],
          [
            "The BST is not self-balancing. This means that a BST can be very unbalanced, almost like a long chain, where the height is nearly the same as the number of nodes. This makes operations like searching, deleting and inserting nodes slow, with time complexity \\(O(h) = O(n)\\).",
            "The AVL Tree however is self-balancing. That means that the height of the tree is kept to a minimum so that operations like searching, deleting and inserting nodes are much faster, with time complexity \\(O(h) = O( \\log n)\\)."
          ]
        ],
        "examples": [
          "Example Python: class TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n        self.height = 1\n\ndef getHeight(node):\n    if not node:\n        return 0\n    return node.height\n\ndef getBalance(node):\n    if not node:\n        return 0\n    return getHeight(node.left) - getHeight(node.right)\n\ndef rightRotate(y):\n    print('Rotate right on node',y.data)\n    x = y.left\n    T2 = x.right\n    x.right = y\n    y.left = T2\n    y.height = 1 + max(getHeight(y.left), getHeight(y.right))\n    x.height = 1 + max(getHeight(x.left), getHeight(x.right))\n    return x\n\ndef leftRotate(x):\n    print('Rotate left on node',x.data)\n    y = x.right\n    T2 = y.left\n    y.left = x\n    x.right = T2\n    x.height = 1 + max(getHeight(x.left), getHeight(x.right))\n    y.height = 1 + max(getHeight(y.left), getHeight(y.right))\n    return y\n\ndef insert(node, data):\n    if not node:\n        return TreeNode(data)\n\n    if data < node.data:\n        node.left = insert(node.left, data)\n    elif data > node.data:\n        node.right = insert(node.right, data)\n\n    # Update the balance factor and balance the tree\n    node.height = 1 + max(getHeight(node.left), getHeight(node.right))\n    balance = getBalance(node)\n\n    # Balancing the tree\n    # Left Left\n    if balance > 1 and getBalance(node.left) >= 0:\n        return rightRotate(node)\n\n    # Left Right\n    if balance > 1 and getBalance(node.left) < 0:\n        node.left = leftRotate(node.left)\n        return rightRotate(node)\n\n    # Right Right\n    if balance < -1 and getBalance(node.right) <= 0:\n        return leftRotate(node)\n\n    # Right Left\n    if balance < -1 and getBalance(node.right) > 0:\n        node.right = rightRotate(node.right)\n        return leftRotate(node)\n\n    return node\n\ndef inOrderTraversal(node):\n    if node is None:\n        return\n    inOrderTraversal(node.left)\n    print(node.data, end=\", \")\n    inOrderTraversal(node.right)\n\n# Inserting nodes\nroot = None\nletters = ['C', 'B', 'E', 'A', 'D', 'H', 'G', 'F']\nfor letter in letters:\n    root = insert(root, letter)\n\ninOrderTraversal(root) Run Example »",
          "Example Python: def minValueNode(node):\n    current = node\n    while current.left is not None:\n        current = current.left\n    return current\n\ndef delete(node, data):\n    if not node:\n        return node\n\n    if data < node.data:\n        node.left = delete(node.left, data)\n    elif data > node.data:\n        node.right = delete(node.right, data)\n    else:\n        if node.left is None:\n            temp = node.right\n            node = None\n            return temp\n        elif node.right is None:\n            temp = node.left\n            node = None\n            return temp\n\n        temp = minValueNode(node.right)\n        node.data = temp.data\n        node.right = delete(node.right, temp.data)\n\n    if node is None:\n        return node\n\n    # Update the balance factor and balance the tree\n    node.height = 1 + max(getHeight(node.left), getHeight(node.right))\n    balance = getBalance(node)\n\n    # Balancing the tree\n    # Left Left\n    if balance > 1 and getBalance(node.left) >= 0:\n        return rightRotate(node)\n\n    # Left Right\n    if balance > 1 and getBalance(node.left) < 0:\n        node.left = leftRotate(node.left)\n        return rightRotate(node)\n\n    # Right Right\n    if balance < -1 and getBalance(node.right) <= 0:\n        return leftRotate(node)\n\n    # Right Left\n    if balance < -1 and getBalance(node.right) > 0:\n        node.right = rightRotate(node.right)\n        return leftRotate(node)\n\n    return node Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_data_binarysearchtrees.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_avl_insert"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_avl_delete"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_data_binarysearchtrees.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_theory_graphs.php",
    "cours": {
      "titre": "DSA Graphs",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_theory_graphs.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Social Networks:  Each person is a vertex, and relationships (like friendships) are the edges. Algorithms can suggest potential friends.",
            "Maps and Navigation:  Locations, like a town or bus stops, are stored as vertices, and roads are stored as edges. Algorithms can find the shortest route between two locations when stored as a Graph.",
            "Internet: Can be represented as a Graph, with web pages as vertices and hyperlinks as edges.",
            "Biology: Graphs can model systems like neural networks or the spread of diseases."
          ],
          [
            "A directed cyclic Graph is when you can follow a path along the directed edges that goes in circles. Removing the directed edge from F to G in the animation above makes the directed Graph not cyclic anymore.",
            "An undirected cyclic Graph is when you can come back to the same vertex you started at without using the same edge more than once. The undirected Graph above is cyclic because we can start and end up in vertes C without using the same edge twice."
          ],
          [
            "take up more or less space.",
            "be faster or slower to search or manipulate.",
            "be better suited depending on what type of Graph we have (weighted, directed, etc.), and what we want to do with the Graph.",
            "be easier to understand and implement than others."
          ]
        ],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_data_avltrees.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_data_avltrees.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_data_graphs_implementation.php",
    "cours": {
      "titre": "DSA Graphs Implementation",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_data_graphs_implementation.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "vertexData = [ 'A', 'B', 'C', 'D']",
          "Example Python: vertexData = ['A', 'B', 'C', 'D']\n\nadjacency_matrix = [\n    [0, 1, 1, 1],  # Edges for A\n    [1, 0, 1, 0],  # Edges for B\n    [1, 1, 0, 0],  # Edges for C\n    [1, 0, 0, 0]   # Edges for D\n]\n\ndef print_adjacency_matrix(matrix):\n    print(\"\\nAdjacency Matrix:\")\n    for row in matrix:\n        print(row)\n\nprint('vertexData:',vertexData)\nprint_adjacency_matrix(adjacency_matrix) Run Example »",
          "Example Python: def print_connections(matrix, vertices):\n    print(\"\\nConnections for each vertex:\")\n    for i in range(len(vertices)):\n        print(f\"{vertices[i]}: \", end=\"\")\n        for j in range(len(vertices)):\n            if matrix[i][j]:  # if there is a connection\n                print(vertices[j], end=\" \")\n        print()  # new line Run Example »",
          "Example Python: class Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size  \n\n    def add_edge(self, u, v):\n        if 0 <= u < self.size and 0 <= v < self.size:\n            self.adj_matrix[u][v] = 1\n            self.adj_matrix[v][u] = 1\n\n    def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data\n\n    def print_graph(self):\n        print(\"Adjacency Matrix:\")\n        for row in self.adj_matrix:\n            print(' '.join(map(str, row)))\n        print(\"\\nVertex Data:\")\n        for vertex, data in enumerate(self.vertex_data):\n            print(f\"Vertex {vertex}: {data}\")\n\ng = Graph(4)\ng.add_vertex_data(0, 'A')\ng.add_vertex_data(1, 'B')\ng.add_vertex_data(2, 'C')\ng.add_vertex_data(3, 'D')\ng.add_edge(0, 1)  # A - B\ng.add_edge(0, 2)  # A - C\ng.add_edge(0, 3)  # A - D\ng.add_edge(1, 2)  # B - C\n\ng.print_graph() Run Example »",
          "Example Python: class Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[None] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size  \n\n    def add_edge(self, u, v, weight):\n        if 0 <= u < self.size and 0 <= v < self.size:\n            self.adj_matrix[u][v] = weight self.adj_matrix[v][u] = weight def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data\n\n    def print_graph(self):\n        print(\"Adjacency Matrix:\")\n        for row in self.adj_matrix:\n            print(' '.join(map(lambda x: str(x) if x is not None else '0', row)))\n        print(\"\\nVertex Data:\")\n        for vertex, data in enumerate(self.vertex_data):\n            print(f\"Vertex {vertex}: {data}\")\n\ng = Graph(4)\ng.add_vertex_data(0, 'A')\ng.add_vertex_data(1, 'B')\ng.add_vertex_data(2, 'C')\ng.add_vertex_data(3, 'D')\ng.add_edge(0, 1, 3)  # A -> B with weight 3\ng.add_edge(0, 2, 2)  # A -> C with weight 2\ng.add_edge(3, 0, 4)  # D -> A with weight 4\ng.add_edge(2, 1, 1)  # C -> B with weight 1\n\ng.print_graph() Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_theory_graphs.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_graphs_undirected_adjmatrix"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_graphs_undirected_connections"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_graphs_undirected_class"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_graphs_directed_class"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_theory_graphs.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_traversal.php",
    "cours": {
      "titre": "DSA Graphs Traversal",
      "description": "How it works: Start DFS traversal on a vertex. Do a recursive DFS traversal on each of the adjacent vertices as long as they are not already visited.",
      "lien": "https://www.w3schools.com/dsa/dsa_algo_graphs_traversal.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Depth First Search (DFS)",
            "Breadth First Search (BFS)"
          ]
        ],
        "examples": [
          "Example Python: class Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size  \n\n    def add_edge(self, u, v):\n        if 0 <= u < self.size and 0 <= v < self.size:\n            self.adj_matrix[u][v] = 1\n            self.adj_matrix[v][u] = 1\n\n    def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data\n\n    def print_graph(self):\n        print(\"Adjacency Matrix:\")\n        for row in self.adj_matrix:\n            print(' '.join(map(str, row)))\n        print(\"\\nVertex Data:\")\n        for vertex, data in enumerate(self.vertex_data):\n            print(f\"Vertex {vertex}: {data}\")\n            \n    def dfs_util(self, v, visited):\n        visited[v] = True\n        print(self.vertex_data[v], end=' ')\n\n        for i in range(self.size):\n            if self.adj_matrix[v][i] == 1 and not visited[i]:\n                self.dfs_util(i, visited)\n\n    def dfs(self, start_vertex_data):\n        visited = [False] * self.size\n        start_vertex = self.vertex_data.index(start_vertex_data)\n        self.dfs_util(start_vertex, visited)\n\ng = Graph(7)\n\ng.add_vertex_data(0, 'A')\ng.add_vertex_data(1, 'B')\ng.add_vertex_data(2, 'C')\ng.add_vertex_data(3, 'D')\ng.add_vertex_data(4, 'E')\ng.add_vertex_data(5, 'F')\ng.add_vertex_data(6, 'G')\n\ng.add_edge(3, 0)  # D - A\ng.add_edge(0, 2)  # A - C\ng.add_edge(0, 3)  # A - D\ng.add_edge(0, 4)  # A - E\ng.add_edge(4, 2)  # E - C\ng.add_edge(2, 5)  # C - F\ng.add_edge(2, 1)  # C - B\ng.add_edge(2, 6)  # C - G\ng.add_edge(1, 5)  # B - F\n\ng.print_graph()\n\nprint(\"\\nDepth First Search starting from vertex D:\")\ng.dfs('D') Run Example »",
          "Example Python: def bfs(self, start_vertex_data):\n    queue = [self.vertex_data.index(start_vertex_data)]\n    visited = [False] * self.size\n    visited[queue[0]] = True\n          \n    while queue:\n        current_vertex = queue.pop(0)\n        print(self.vertex_data[current_vertex], end=' ')\n      \n        for i in range(self.size):\n            if self.adj_matrix[current_vertex][i] == 1 and not visited[i]:\n                queue.append(i)\n                visited[i] = True Run Example »",
          "def add_edge(self, u, v):\n    if 0 <= u < self.size and 0 <= v < self.size:\n        self.adj_matrix[u][v] = 1 self.adj_matrix[v][u] = 1",
          "Example Python: class Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size  \n\n    def add_edge(self, u, v):\n        if 0 <= u < self.size and 0 <= v < self.size:\n            self.adj_matrix[u][v] = 1\n            #self.adj_matrix[v][u] = 1\n\n    def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data\n\n    def print_graph(self):\n        print(\"Adjacency Matrix:\")\n        for row in self.adj_matrix:\n            print(' '.join(map(str, row)))\n        print(\"\\nVertex Data:\")\n        for vertex, data in enumerate(self.vertex_data):\n            print(f\"Vertex {vertex}: {data}\")\n            \n    def dfs_util(self, v, visited):\n        visited[v] = True\n        print(self.vertex_data[v], end=' ')\n\n        for i in range(self.size):\n            if self.adj_matrix[v][i] == 1 and not visited[i]:\n                self.dfs_util(i, visited)\n\n    def dfs(self, start_vertex_data):\n        visited = [False] * self.size\n\n        start_vertex = self.vertex_data.index(start_vertex_data)\n        self.dfs_util(start_vertex, visited)\n        \n    def bfs(self, start_vertex_data):\n        queue = [self.vertex_data.index(start_vertex_data)]\n        visited = [False] * self.size\n        visited[queue[0]] = True\n        \n        while queue:\n            current_vertex = queue.pop(0)\n            print(self.vertex_data[current_vertex], end=' ')\n            \n            for i in range(self.size):\n                if self.adj_matrix[current_vertex][i] == 1 and not visited[i]:\n                    queue.append(i)\n                    visited[i] = True\n\ng = Graph(7)\n\ng.add_vertex_data(0, 'A')\ng.add_vertex_data(1, 'B')\ng.add_vertex_data(2, 'C')\ng.add_vertex_data(3, 'D')\ng.add_vertex_data(4, 'E')\ng.add_vertex_data(5, 'F')\ng.add_vertex_data(6, 'G')\n\ng.add_edge(3, 0)  # D -> A\ng.add_edge(3, 4)  # D -> E\ng.add_edge(4, 0)  # E -> A\ng.add_edge(0, 2)  # A -> C\ng.add_edge(2, 5)  # C -> F\ng.add_edge(2, 6)  # C -> G\ng.add_edge(5, 1)  # F -> B\ng.add_edge(1, 2)  # B -> C\n\ng.print_graph()\n\nprint(\"\\nDepth First Search starting from vertex D:\")\ng.dfs('D')\n\nprint(\"\\n\\nBreadth First Search starting from vertex D:\")\ng.bfs('D') Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_data_graphs_implementation.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_graphs_undirected_traversal_dfs"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_graphs_undirected_traversal_bfs"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_graphs_directed_traversal"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_data_graphs_implementation.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_cycledetection.php",
    "cours": {
      "titre": "DSA Graphs Cycle Detection",
      "description": "How it works: Start DFS traversal on each unvisited vertex (in case the Graph is not connected). During DFS, mark vertices as visited, and run DFS on the adjacent vertices (recursively). If an adjacent vertex is already visited and is not the parent of the current vertex, a cycle is detected, and True is returned. If DFS traversal is done on all vertices and no cycles are detected, False is returned.",
      "lien": "https://www.w3schools.com/dsa/dsa_algo_graphs_cycledetection.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Depth First Search (DFS): DFS traversal explores the Graph and marks vertices as visited. A cycle is detected when the current vertex has an adjacent vertex that has already been visited.",
            "Union-Find: This works by initially defining each vertex as a group, or a subset. Then these groups are joined for every edge. Whenever a new edge is explored, a cycle is detected if two vertices already belong to the same group."
          ]
        ],
        "examples": [
          "Example Python: class Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size  \n\n    def add_edge(self, u, v):\n        if 0 <= u < self.size and 0 <= v < self.size:\n            self.adj_matrix[u][v] = 1\n            self.adj_matrix[v][u] = 1\n\n    def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data\n\n    def print_graph(self):\n        print(\"Adjacency Matrix:\")\n        for row in self.adj_matrix:\n            print(' '.join(map(str, row)))\n        print(\"\\nVertex Data:\")\n        for vertex, data in enumerate(self.vertex_data):\n            print(f\"Vertex {vertex}: {data}\")\n            \n    def dfs_util(self, v, visited, parent):\n        visited[v] = True\n\n        for i in range(self.size):\n            if self.adj_matrix[v][i] == 1:\n                if not visited[i]:\n                    if self.dfs_util(i, visited, v):\n                        return True\n                elif parent != i:\n                    return True\n        return False\n\n    def is_cyclic(self):\n        visited = [False] * self.size\n        for i in range(self.size):\n            if not visited[i]:\n                if self.dfs_util(i, visited, -1):\n                    return True\n        return False\n\ng = Graph(7)\n\ng.add_vertex_data(0, 'A')\ng.add_vertex_data(1, 'B')\ng.add_vertex_data(2, 'C')\ng.add_vertex_data(3, 'D')\ng.add_vertex_data(4, 'E')\ng.add_vertex_data(5, 'F')\ng.add_vertex_data(6, 'G')\n\ng.add_edge(3, 0)  # D - A\ng.add_edge(0, 2)  # A - C\ng.add_edge(0, 3)  # A - D\ng.add_edge(0, 4)  # A - E\ng.add_edge(4, 2)  # E - C\ng.add_edge(2, 5)  # C - F\ng.add_edge(2, 1)  # C - B\ng.add_edge(2, 6)  # C - G\ng.add_edge(1, 5)  # B - F\n\ng.print_graph()\n\nprint(\"\\nGraph has cycle:\", g.is_cyclic()) Run Example »",
          "Example Python: class Graph:\n    # ......\n    def add_edge(self, u, v):\n        if 0 <= u < self.size and 0 <= v < self.size:\n            self.adj_matrix[u][v] = 1 self.adj_matrix[v][u] = 1 # ......\n    def dfs_util(self, v, visited, recStack):\n        visited[v] = True\n        recStack[v] = True\n        print(\"Current vertex:\",self.vertex_data[v])\n\n        for i in range(self.size):\n            if self.adj_matrix[v][i] == 1:\n                if not visited[i]:\n                    if self.dfs_util(i, visited, recStack):\n                        return True\n                elif recStack[i]:\n                    return True\n        \n        recStack[v] = False\n        return False\n\n    def is_cyclic(self):\n        visited = [False] * self.size\n        recStack = [False] * self.size\n        for i in range(self.size):\n            if not visited[i]:\n                print() #new line\n                if self.dfs_util(i, visited, recStack):\n                    return True\n        return False\n\ng = Graph(7)\n\n# ......\n\ng.add_edge(3, 0)  # D -> A\ng.add_edge(0, 2)  # A -> C\ng.add_edge(2, 1)  # C -> B\ng.add_edge(2, 4)  # C -> E\ng.add_edge(1, 5)  # B -> F\ng.add_edge(4, 0)  # E -> A\ng.add_edge(2, 6)  # C -> G\n\ng.print_graph()\n\nprint(\"Graph has cycle:\", g.is_cyclic()) Run Example »",
          "Example Python: class Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size\n        self.parent = [i for i in range(size)]  # Union-Find array\n\n    def add_edge(self, u, v):\n        if 0 <= u < self.size and 0 <= v < self.size:\n            self.adj_matrix[u][v] = 1\n            self.adj_matrix[v][u] = 1\n\n    def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data\n\n    def find(self, i):\n        if self.parent[i] == i:\n            return i\n        return self.find(self.parent[i])\n\n    def union(self, x, y):\n        x_root = self.find(x)\n        y_root = self.find(y)\n        print('Union:',self.vertex_data[x],'+',self.vertex_data[y])\n        self.parent[x_root] = y_root\n        print(self.parent,'\\n')\n\n    def is_cyclic(self):\n        for i in range(self.size):\n            for j in range(i + 1, self.size):\n                if self.adj_matrix[i][j]:\n                    x = self.find(i)\n                    y = self.find(j)\n                    if x == y:\n                        return True\n                    self.union(x, y)\n        return False\n\ng = Graph(7)\n\ng.add_vertex_data(0, 'A')\ng.add_vertex_data(1, 'B')\ng.add_vertex_data(2, 'C')\ng.add_vertex_data(3, 'D')\ng.add_vertex_data(4, 'E')\ng.add_vertex_data(5, 'F')\ng.add_vertex_data(6, 'G')\n\ng.add_edge(1, 0)  # B - A\ng.add_edge(0, 3)  # A - D\ng.add_edge(0, 2)  # A - C\ng.add_edge(2, 3)  # C - D\ng.add_edge(3, 4)  # D - E\ng.add_edge(3, 5)  # D - F\ng.add_edge(3, 6)  # D - G\ng.add_edge(4, 5)  # E - F\n\nprint(\"Graph has cycle:\", g.is_cyclic()) Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_traversal.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_graphs_undirected_cycledetect_dfs"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_graphs_directed_cycledetect_DFS"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_graphs_undirected_cycledetect_unionfind"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_traversal.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_theory_graphs_shortestpath.php",
    "cours": {
      "titre": "DSA Shortest Path",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_theory_graphs_shortestpath.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_cycledetection.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_cycledetection.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_dijkstra.php",
    "cours": {
      "titre": "DSA Dijkstra's Algorithm",
      "description": "Dijkstra's shortest path algorithm was invented in 1956 by the Dutch computer scientist Edsger W. Dijkstra during a twenty minutes coffee break, while out shopping with his fiancée in Amsterdam. The reason for inventing the algorithm was to test a new computer called ARMAC.",
      "lien": "https://www.w3schools.com/dsa/dsa_algo_graphs_dijkstra.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "distances = [inf, inf, inf, 0, inf, inf, inf]\n#vertices   [ A ,  B ,  C , D,  E ,  F ,  G ]",
          "class Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size\n\n    def add_edge(self, u, v, weight):\n        if 0 <= u < self.size and 0 <= v < self.size:\n            self.adj_matrix[u][v] = weight\n            self.adj_matrix[v][u] = weight  # For undirected graph\n\n    def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data",
          "def dijkstra(self, start_vertex_data):\n        start_vertex = self.vertex_data.index(start_vertex_data)\n        distances = [float('inf')] * self.size\n        distances[start_vertex] = 0\n        visited = [False] * self.size\n\n        for _ in range(self.size):\n            min_distance = float('inf')\n            u = None\n            for i in range(self.size):\n                if not visited[i] and distances[i] < min_distance:\n                    min_distance = distances[i]\n                    u = i\n\n            if u is None:\n                break\n\n            visited[u] = True\n\n            for v in range(self.size):\n                if self.adj_matrix[u][v] != 0 and not visited[v]:\n                    alt = distances[u] + self.adj_matrix[u][v]\n                    if alt < distances[v]:\n                        distances[v] = alt\n\n        return distances",
          "Example Python: class Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size\n\n    def add_edge(self, u, v, weight):\n        if 0 <= u < self.size and 0 <= v < self.size:\n            self.adj_matrix[u][v] = weight\n            self.adj_matrix[v][u] = weight  # For undirected graph\n\n    def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data\n\n    def dijkstra(self, start_vertex_data):\n        start_vertex = self.vertex_data.index(start_vertex_data)\n        distances = [float('inf')] * self.size\n        distances[start_vertex] = 0\n        visited = [False] * self.size\n\n        for _ in range(self.size):\n            min_distance = float('inf')\n            u = None\n            for i in range(self.size):\n                if not visited[i] and distances[i] < min_distance:\n                    min_distance = distances[i]\n                    u = i\n\n            if u is None:\n                break\n\n            visited[u] = True\n\n            for v in range(self.size):\n                if self.adj_matrix[u][v] != 0 and not visited[v]:\n                    alt = distances[u] + self.adj_matrix[u][v]\n                    if alt < distances[v]:\n                        distances[v] = alt\n\n        return distances\n\ng = Graph(7)\n\ng.add_vertex_data(0, 'A')\ng.add_vertex_data(1, 'B')\ng.add_vertex_data(2, 'C')\ng.add_vertex_data(3, 'D')\ng.add_vertex_data(4, 'E')\ng.add_vertex_data(5, 'F')\ng.add_vertex_data(6, 'G')\n\ng.add_edge(3, 0, 4)  # D - A, weight 5\ng.add_edge(3, 4, 2)  # D - E, weight 2\ng.add_edge(0, 2, 3)  # A - C, weight 3\ng.add_edge(0, 4, 4)  # A - E, weight 4\ng.add_edge(4, 2, 4)  # E - C, weight 4\ng.add_edge(4, 6, 5)  # E - G, weight 5\ng.add_edge(2, 5, 5)  # C - F, weight 5\ng.add_edge(2, 1, 2)  # C - B, weight 2\ng.add_edge(1, 5, 2)  # B - F, weight 2\ng.add_edge(6, 5, 5)  # G - F, weight 5\n\n# Dijkstra's algorithm from D to all vertices\nprint(\"\\nDijkstra's Algorithm starting from vertex D:\")\ndistances = g.dijkstra('D')\nfor i, d in enumerate(distances):\n    print(f\"Distance from D to {g.vertex_data[i]}: {d}\") Run Example »",
          "Example Python: class Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size\n\n    def add_edge(self, u, v, weight):\n        if 0 <= u < self.size and 0 <= v < self.size:\n            self.adj_matrix[u][v] = weight\n            #self.adj_matrix[v][u] = weight   For undirected graph\n\n    def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data\n\n    def dijkstra(self, start_vertex_data):\n        start_vertex = self.vertex_data.index(start_vertex_data)\n        distances = [float('inf')] * self.size\n        distances[start_vertex] = 0\n        visited = [False] * self.size\n\n        for _ in range(self.size):\n            min_distance = float('inf')\n            u = None\n            for i in range(self.size):\n                if not visited[i] and distances[i] < min_distance:\n                    min_distance = distances[i]\n                    u = i\n\n            if u is None:\n                break\n\n            visited[u] = True\n\n            for v in range(self.size):\n                if self.adj_matrix[u][v] != 0 and not visited[v]:\n                    alt = distances[u] + self.adj_matrix[u][v]\n                    if alt < distances[v]:\n                        distances[v] = alt\n\n        return distances\n\ng = Graph(7)\n\ng.add_vertex_data(0, 'A')\ng.add_vertex_data(1, 'B')\ng.add_vertex_data(2, 'C')\ng.add_vertex_data(3, 'D')\ng.add_vertex_data(4, 'E')\ng.add_vertex_data(5, 'F')\ng.add_vertex_data(6, 'G')\n\ng.add_edge(3, 0, 4)  # D -> A, weight 5\ng.add_edge(3, 4, 2)  # D -> E, weight 2\ng.add_edge(0, 2, 3)  # A -> C, weight 3\ng.add_edge(0, 4, 4)  # A -> E, weight 4\ng.add_edge(4, 2, 4)  # E -> C, weight 4\ng.add_edge(4, 6, 5)  # E -> G, weight 5\ng.add_edge(2, 5, 5)  # C -> F, weight 5\ng.add_edge(1, 2, 2)  # B -> C, weight 2\ng.add_edge(1, 5, 2)  # B -> F, weight 2\ng.add_edge(6, 5, 5)  # G -> F, weight 5\n\n# Dijkstra's algorithm from D to all vertices\nprint(\"Dijkstra's Algorithm starting from vertex D:\\n\")\ndistances = g.dijkstra('D')\nfor i, d in enumerate(distances):\n    print(f\"Shortest distance from D to {g.vertex_data[i]}: {d}\") Run Example »",
          "Example Python: class Graph:\n    # ... (rest of the Graph class)\n\n    def dijkstra(self, start_vertex_data):\n        start_vertex = self.vertex_data.index(start_vertex_data)\n        distances = [float('inf')] * self.size\n        predecessors = [None] * self.size\n        distances[start_vertex] = 0\n        visited = [False] * self.size\n\n        for _ in range(self.size):\n            min_distance = float('inf')\n            u = None\n            for i in range(self.size):\n                if not visited[i] and distances[i] < min_distance:\n                    min_distance = distances[i]\n                    u = i\n\n            if u is None:\n                break\n\n            visited[u] = True\n\n            for v in range(self.size):\n                if self.adj_matrix[u][v] != 0 and not visited[v]:\n                    alt = distances[u] + self.adj_matrix[u][v]\n                    if alt < distances[v]:\n                        distances[v] = alt\n                        predecessors[v] = u\n\n        return distances, predecessors\n\n    def get_path(self, predecessors, start_vertex, end_vertex):\n        path = []\n        current = self.vertex_data.index(end_vertex)\n        while current is not None:\n            path.insert(0, self.vertex_data[current])\n            current = predecessors[current]\n            if current == self.vertex_data.index(start_vertex):\n                path.insert(0, start_vertex)\n                break\n        return '->'.join(path)  # Join the vertices with '->'\n\ng = Graph(7)\n\n# ... (rest of the graph setup)\n\n# Dijkstra's algorithm from D to all vertices\nprint(\"Dijkstra's Algorithm starting from vertex D:\\n\")\ndistances, predecessors = g.dijkstra('D')\nfor i, d in enumerate(distances):\n    path = g.get_path(predecessors, 'D', g.vertex_data[i])\n    print(f\"{path}, Distance: {d}\") Run Example »",
          "Example Python: class Graph:\n    # ... (existing methods)\n\n    def dijkstra(self, start_vertex_data, end_vertex_data):\n        start_vertex = self.vertex_data.index(start_vertex_data)\n        end_vertex = self.vertex_data.index(end_vertex_data)\n        distances = [float('inf')] * self.size\n        predecessors = [None] * self.size\n        distances[start_vertex] = 0\n        visited = [False] * self.size\n\n        for _ in range(self.size):\n            min_distance = float('inf')\n            u = None\n            for i in range(self.size):\n                if not visited[i] and distances[i] < min_distance:\n                    min_distance = distances[i]\n                    u = i\n\n            if u is None or u == end_vertex:\n                print(f\"Breaking out of loop. Current vertex: {self.vertex_data[u]}\")\n                print(f\"Distances: {distances}\")\n                break\n\n            visited[u] = True\n            print(f\"Visited vertex: {self.vertex_data[u]}\")\n\n            for v in range(self.size):\n                if self.adj_matrix[u][v] != 0 and not visited[v]:\n                    alt = distances[u] + self.adj_matrix[u][v]\n                    if alt < distances[v]:\n                        distances[v] = alt\n                        predecessors[v] = u\n\n        return distances[end_vertex], self.get_path(predecessors, start_vertex_data, end_vertex_data)\n\n# Example usage\ng = Graph(7)\n# ... (rest of the graph setup)\ndistance, path = g.dijkstra('D', 'F')\nprint(f\"Path: {path}, Distance: {distance}\") Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_theory_graphs_shortestpath.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_graphs_dijkstra"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_graphs_dijkstra_directed"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_graphs_dijkstra_path"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_graphs_dijkstra_singledestination"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_cycledetection.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_bellmanford.php",
    "cours": {
      "titre": "DSA Bellman-Ford Algorithm",
      "description": "How it works: Set initial distance to zero for the source vertex, and set initial distances to infinity for all other vertices. For each edge, check if a shorter distance can be calculated, and update the distance if the calculated distance is shorter. Check all edges (step 2) \\(V-1\\) times. This is as many times as there are vertices (\\(V\\)), minus one. Optional: Check for negative cycles. This will be explained in better detail later.",
      "lien": "https://www.w3schools.com/dsa/dsa_algo_graphs_bellmanford.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "class Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size\n\n    def add_edge(self, u, v, weight):\n        if 0 <= u < self.size and 0 <= v < self.size:\n            self.adj_matrix[u][v] = weight\n            #self.adj_matrix[v][u] = weight  # For undirected graph\n\n    def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data",
          "def bellman_ford(self, start_vertex_data):\n        start_vertex = self.vertex_data.index(start_vertex_data)\n        distances = [float('inf')] * self.size\n        distances[start_vertex] = 0\n\n        for i in range(self.size - 1):\n            for u in range(self.size):\n                for v in range(self.size):\n                    if self.adj_matrix[u][v] != 0:\n                        if distances[u] + self.adj_matrix[u][v] < distances[v]:\n                            distances[v] = distances[u] + self.adj_matrix[u][v]\n                            print(f\"Relaxing edge {self.vertex_data[u]}-{self.vertex_data[v]}, Updated distance to {self.vertex_data[v]}: {distances[v]}\")\n\n        return distances",
          "Example Python: class Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size\n\n    def add_edge(self, u, v, weight):\n        if 0 <= u < self.size and 0 <= v < self.size:\n            self.adj_matrix[u][v] = weight\n            #self.adj_matrix[v][u] = weight  # For undirected graph\n\n    def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data\n\n    def bellman_ford(self, start_vertex_data):\n        start_vertex = self.vertex_data.index(start_vertex_data)\n        distances = [float('inf')] * self.size\n        distances[start_vertex] = 0\n\n        for i in range(self.size - 1):\n            for u in range(self.size):\n                for v in range(self.size):\n                    if self.adj_matrix[u][v] != 0:\n                        if distances[u] + self.adj_matrix[u][v] < distances[v]:\n                            distances[v] = distances[u] + self.adj_matrix[u][v]\n                            print(f\"Relaxing edge {self.vertex_data[u]}-{self.vertex_data[v]}, Updated distance to {self.vertex_data[v]}: {distances[v]}\")\n\n        return distances\n\ng = Graph(5)\n\ng.add_vertex_data(0, 'A')\ng.add_vertex_data(1, 'B')\ng.add_vertex_data(2, 'C')\ng.add_vertex_data(3, 'D')\ng.add_vertex_data(4, 'E')\n\ng.add_edge(3, 0, 4)  # D -> A, weight 4\ng.add_edge(3, 2, 7)  # D -> C, weight 7\ng.add_edge(3, 4, 3)  # D -> E, weight 3\ng.add_edge(0, 2, 4)  # A -> C, weight 4\ng.add_edge(2, 0, -3) # C -> A, weight -3\ng.add_edge(0, 4, 5)  # A -> E, weight 5\ng.add_edge(4, 2, 3)  # E -> C, weight 3\ng.add_edge(1, 2, -4) # B -> C, weight -4\ng.add_edge(4, 1, 2)  # E -> B, weight 2\n\n# Running the Bellman-Ford algorithm from D to all vertices\nprint(\"\\nThe Bellman-Ford Algorithm starting from vertex D:\")\ndistances = g.bellman_ford('D')\nfor i, d in enumerate(distances):\n    print(f\"Distance from D to {g.vertex_data[i]}: {d}\") Run Example »",
          "Example Python: def bellman_ford(self, start_vertex_data):\n        start_vertex = self.vertex_data.index(start_vertex_data)\n        distances = [float('inf')] * self.size\n        distances[start_vertex] = 0\n\n        for i in range(self.size - 1):\n            for u in range(self.size):\n                for v in range(self.size):\n                    if self.adj_matrix[u][v] != 0:\n                        if distances[u] + self.adj_matrix[u][v] < distances[v]:\n                            distances[v] = distances[u] + self.adj_matrix[u][v]\n                            print(f\"Relaxing edge {self.vertex_data[u]}->{self.vertex_data[v]}, Updated distance to {self.vertex_data[v]}: {distances[v]}\")\n\n        # Negative cycle detection\n        for u in range(self.size):\n            for v in range(self.size):\n                if self.adj_matrix[u][v] != 0:\n                    if distances[u] + self.adj_matrix[u][v] < distances[v]:\n                        return (True, None)  # Indicate a negative cycle was found\n\n        return (False, distances)  # Indicate no negative cycle and return distances Run Example »",
          "Example Python: class Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size\n\n    def add_edge(self, u, v, weight):\n        if 0 <= u < self.size and 0 <= v < self.size:\n            self.adj_matrix[u][v] = weight\n            #self.adj_matrix[v][u] = weight  # For undirected graph\n\n    def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data\n\n    def bellman_ford(self, start_vertex_data):\n        start_vertex = self.vertex_data.index(start_vertex_data)\n        distances = [float('inf')] * self.size\n        predecessors = [None] * self.size\n        distances[start_vertex] = 0\n\n        for i in range(self.size - 1):\n            for u in range(self.size):\n                for v in range(self.size):\n                    if self.adj_matrix[u][v] != 0:\n                        if distances[u] + self.adj_matrix[u][v] < distances[v]:\n                            distances[v] = distances[u] + self.adj_matrix[u][v]\n                            predecessors[v] = u\n                            print(f\"Relaxing edge {self.vertex_data[u]}->{self.vertex_data[v]}, Updated distance to {self.vertex_data[v]}: {distances[v]}\")\n\n        # Negative cycle detection\n        for u in range(self.size):\n            for v in range(self.size):\n                if self.adj_matrix[u][v] != 0:\n                    if distances[u] + self.adj_matrix[u][v] < distances[v]:\n                        return (True, None, None)  # Indicate a negative cycle was found\n\n        return (False, distances, predecessors)  # Indicate no negative cycle and return distances\n    \n    def get_path(self, predecessors, start_vertex, end_vertex):\n        path = []\n        current = self.vertex_data.index(end_vertex)\n        while current is not None:\n            path.insert(0, self.vertex_data[current])\n            current = predecessors[current]\n            if current == self.vertex_data.index(start_vertex):\n                path.insert(0, start_vertex)\n                break\n        return '->'.join(path)\n\ng = Graph(5)\n\ng.add_vertex_data(0, 'A')\ng.add_vertex_data(1, 'B')\ng.add_vertex_data(2, 'C')\ng.add_vertex_data(3, 'D')\ng.add_vertex_data(4, 'E')\n\ng.add_edge(3, 0, 4)  # D -> A, weight 4\ng.add_edge(3, 2, 7)  # D -> C, weight 7\ng.add_edge(3, 4, 3)  # D -> E, weight 3\ng.add_edge(0, 2, 4)  # A -> C, weight 4\ng.add_edge(2, 0, -3) # C -> A, weight -3\ng.add_edge(0, 4, 5)  # A -> E, weight 5\ng.add_edge(4, 2, 3)  # E -> C, weight 3\ng.add_edge(1, 2, -4) # B -> C, weight -4\ng.add_edge(4, 1, 2)  # E -> B, weight 2\n\n# Running the Bellman-Ford algorithm from D to all vertices\nprint(\"\\nThe Bellman-Ford Algorithm starting from vertex D:\")\nnegative_cycle, distances, predecessors = g.bellman_ford('D')\nif not negative_cycle:\n    for i, d in enumerate(distances):\n        if d != float('inf'):\n            path = g.get_path(predecessors, 'D', g.vertex_data[i])\n            print(f\"{path}, Distance: {d}\")\n        else:\n            print(f\"No path from D to {g.vertex_data[i]}, Distance: Infinity\")\nelse:\n    print(\"Negative weight cycle detected. Cannot compute shortest paths.\") Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_dijkstra.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_graphs_bellmanford"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_graphs_bellmanford_cycledetection"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_graphs_bellmanford_paths"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_dijkstra.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_theory_mst_minspantree.php",
    "cours": {
      "titre": "DSA Minimum Spanning Tree",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_theory_mst_minspantree.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_bellmanford.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_bellmanford.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_algo_mst_prim.php",
    "cours": {
      "titre": "DSA Prim's Algorithm",
      "description": "Prim's algorithm was invented in 1930 by the Czech mathematician Vojtěch Jarník. The algorithm was then rediscovered by Robert C. Prim in 1957, and also rediscovered by Edsger W. Dijkstra in 1959. Therefore, the algorithm is also sometimes called \"Jarník's algorithm\", or the \"Prim-Jarník algorithm\".",
      "lien": "https://www.w3schools.com/dsa/dsa_algo_mst_prim.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "parents = [-1,  0, -1,  0,  3,  3, -1, -1]\n#vertices [ A,  B,  C,  D,  E,  F,  G,  H]",
          "in_mst = [ true, false, false,  true, false, false, false, false]\n#vertices [    A,     B,     C,     D,     E,     F,     G,     H]",
          "class Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size\n\n    def add_edge(self, u, v, weight):\n        if 0 <= u < self.size and 0 <= v < self.size:\n            self.adj_matrix[u][v] = weight\n            self.adj_matrix[v][u] = weight  # For undirected graph\n\n    def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data",
          "def prims_algorithm(self):\n        in_mst = [False] * self.size\n        key_values = [float('inf')] * self.size\n        parents = [-1] * self.size\n\n        key_values[0] = 0  # Starting vertex\n\n        print(\"Edge \\tWeight\")\n        for _ in range(self.size):\n            u = min((v for v in range(self.size) if not in_mst[v]), key=lambda v: key_values[v])\n\n            in_mst[u] = True\n\n            if parents[u] != -1:  # Skip printing for the first vertex since it has no parent\n                print(f\"{self.vertex_data[parents[u]]}-{self.vertex_data[u]} \\t{self.adj_matrix[u][parents[u]]}\")\n\n            for v in range(self.size):\n                if 0 < self.adj_matrix[u][v] < key_values[v] and not in_mst[v]:\n                    key_values[v] = self.adj_matrix[u][v]\n                    parents[v] = u",
          "Example Python: class Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size\n\n    def add_edge(self, u, v, weight):\n        if 0 <= u < self.size and 0 <= v < self.size:\n            self.adj_matrix[u][v] = weight\n            self.adj_matrix[v][u] = weight  # For undirected graph\n\n    def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data\n\n    def prims_algorithm(self):\n        in_mst = [False] * self.size\n        key_values = [float('inf')] * self.size\n        parents = [-1] * self.size\n\n        key_values[0] = 0  # Starting vertex\n\n        print(\"Edge \\tWeight\")\n        for _ in range(self.size):\n            u = min((v for v in range(self.size) if not in_mst[v]), key=lambda v: key_values[v])\n\n            in_mst[u] = True\n\n            if parents[u] != -1:  # Skip printing for the first vertex since it has no parent\n                print(f\"{self.vertex_data[parents[u]]}-{self.vertex_data[u]} \\t{self.adj_matrix[u][parents[u]]}\")\n\n            for v in range(self.size):\n                if 0 < self.adj_matrix[u][v] < key_values[v] and not in_mst[v]:\n                    key_values[v] = self.adj_matrix[u][v]\n                    parents[v] = u\n\ng = Graph(8)\n\ng.add_vertex_data(0, 'A')\ng.add_vertex_data(1, 'B')\ng.add_vertex_data(2, 'C')\ng.add_vertex_data(3, 'D')\ng.add_vertex_data(4, 'E')\ng.add_vertex_data(5, 'F')\ng.add_vertex_data(6, 'G')\ng.add_vertex_data(7, 'H')\n\ng.add_edge(0, 1, 4)  # A - B\ng.add_edge(0, 3, 3)  # A - D\ng.add_edge(1, 2, 3)  # B - C\ng.add_edge(1, 3, 5)  # B - D\ng.add_edge(1, 4, 6)  # B - E\ng.add_edge(2, 4, 4)  # C - E\ng.add_edge(2, 7, 2)  # C - H\ng.add_edge(3, 4, 7)  # D - E\ng.add_edge(3, 5, 4)  # D - F\ng.add_edge(4, 5, 5)  # E - F\ng.add_edge(4, 6, 3)  # E - G\ng.add_edge(5, 6, 7)  # F - G\ng.add_edge(6, 7, 5)  # G - H\n\nprint(\"Prim's Algorithm MST:\")\ng.prims_algorithm() Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_theory_mst_minspantree.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_mst_prim"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_theory_mst_minspantree.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_algo_mst_kruskal.php",
    "cours": {
      "titre": "DSA Kruskal's Algorithm",
      "description": "How it works: Sort the edges in the graph from the lowest to the highest edge weight. For each edge, starting with the one with the lowest edge weight: Will this edge create a cycle in the current MST? If no: Add the edge as an MST edge.",
      "lien": "https://www.w3schools.com/dsa/dsa_algo_mst_kruskal.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "C-E, weight 2",
            "D-E, weight 3",
            "A-B, weight 4"
          ],
          [
            "E-G, weight 6",
            "C-G, weight 7 (not added)",
            "D-F, weight 7",
            "B-C, weight 8"
          ],
          [
            "A-C, weight 9 (not added)",
            "A-G, weight 10 (not added)",
            "F-G, weight 11 (not added)"
          ]
        ],
        "examples": [
          "class Graph:\n    def __init__(self, size):\n        self.size = size\n        self.edges = []  # For storing edges as (weight, u, v)\n        self.vertex_data = [''] * size  # Store vertex names\n\n    def add_edge(self, u, v, weight):\n        if 0 <= u < self.size and 0 <= v < self.size:\n            self.edges.append((weight, u, v))  # Add edge with weight\n            \n    def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data",
          "def find(self, parent, i):\n        if parent[i] == i:\n            return i\n        return self.find(parent, parent[i])\n\n    def union(self, parent, rank, x, y):\n        xroot = self.find(parent, x)\n        yroot = self.find(parent, y)\n        if rank[xroot] < rank[yroot]:\n            parent[xroot] = yroot\n        elif rank[xroot] > rank[yroot]:\n            parent[yroot] = xroot\n        else:\n            parent[yroot] = xroot\n            rank[xroot] += 1",
          "def kruskals_algorithm(self):\n        result = []  # MST\n        i = 0 # edge counter\n\n        self.edges = sorted(self.edges, key=lambda item: item[2])\n\n        parent, rank = [], []\n\n        for node in range(self.size):\n            parent.append(node)\n            rank.append(0)\n\n        while i < len(self.edges):\n            u, v, weight = self.edges[i]\n            i += 1\n\n            x = self.find(parent, u)\n            y = self.find(parent, v)\n            if x != y:\n                result.append((u, v, weight))\n                self.union(parent, rank, x, y)\n\n        print(\"Edge \\tWeight\")\n        for u, v, weight in result:\n            print(f\"{self.vertex_data[u]}-{self.vertex_data[v]} \\t{weight}\")",
          "Example Python: class Graph:\n    def __init__(self, size):\n        self.size = size\n        self.edges = []  # For storing edges as (weight, u, v)\n        self.vertex_data = [''] * size  # Store vertex names\n\n    def add_edge(self, u, v, weight):\n        if 0 <= u < self.size and 0 <= v < self.size:\n            self.edges.append((u, v, weight))  # Add edge with weight\n            \n    def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data\n\n    def find(self, parent, i):\n        if parent[i] == i:\n            return i\n        return self.find(parent, parent[i])\n\n    def union(self, parent, rank, x, y):\n        xroot = self.find(parent, x)\n        yroot = self.find(parent, y)\n        if rank[xroot] < rank[yroot]:\n            parent[xroot] = yroot\n        elif rank[xroot] > rank[yroot]:\n            parent[yroot] = xroot\n        else:\n            parent[yroot] = xroot\n            rank[xroot] += 1\n\n    def kruskals_algorithm(self):\n        result = []  # MST\n        i = 0  # edge counter\n\n        self.edges = sorted(self.edges, key=lambda item: item[2])\n\n        parent, rank = [], []\n\n        for node in range(self.size):\n            parent.append(node)\n            rank.append(0)\n\n        while i < len(self.edges):\n            u, v, weight = self.edges[i]\n            i += 1\n            \n            x = self.find(parent, u)\n            y = self.find(parent, v)\n            if x != y:\n                result.append((u, v, weight))\n                self.union(parent, rank, x, y)\n\n        print(\"Edge \\tWeight\")\n        for u, v, weight in result:\n            print(f\"{self.vertex_data[u]}-{self.vertex_data[v]} \\t{weight}\")\n\ng = Graph(7)\ng.add_vertex_data(0, 'A')\ng.add_vertex_data(1, 'B')\ng.add_vertex_data(2, 'C')\ng.add_vertex_data(3, 'D')\ng.add_vertex_data(4, 'E')\ng.add_vertex_data(5, 'F')\ng.add_vertex_data(6, 'G')\n\ng.add_edge(0, 1, 4)  #A-B,  4\ng.add_edge(0, 6, 10) #A-G, 10\ng.add_edge(0, 2, 9)  #A-C,  9\ng.add_edge(1, 2, 8)  #B-C,  8\ng.add_edge(2, 3, 5)  #C-D,  5\ng.add_edge(2, 4, 2)  #C-E,  2\ng.add_edge(2, 6, 7)  #C-G,  7\ng.add_edge(3, 4, 3)  #D-E,  3\ng.add_edge(3, 5, 7)  #D-F,  7\ng.add_edge(4, 6, 6)  #E-G,  6\ng.add_edge(5, 6, 11) #F-G, 11\n\nprint(\"Kruskal's Algorithm MST:\")\ng.kruskals_algorithm() Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_mst_prim.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_mst_kruskal"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_mst_prim.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_theory_graphs_maxflow.php",
    "cours": {
      "titre": "DSA Maximum Flow",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_theory_graphs_maxflow.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "For planning roads in a city to avoid future traffic jams.",
            "To assess the effect of removing a water pipe, or electrical wire, or network cable.",
            "To find out where in the flow network expanding the capacity will lead to the highest maximum flow, with the purpose of increasing for example traffic, data traffic, or water flow."
          ],
          [
            "Better traffic flow can be achieved because city planners now know where to create extra lanes, where to re-route traffic, or where to optimize traffic signals.",
            "In manufacturing, a higher production output can be reached by targeting improvements where the bottleneck is, by upgrading equipment or reallocating resources for example.",
            "In logistics, knowing where the bottleneck is, the supply chain can be optimized by changing routes, or increase capacity at critical points, ensuring that goods are moved more effectively from warehouses to consumers."
          ]
        ],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_mst_kruskal.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_mst_kruskal.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_fordfulkerson.php",
    "cours": {
      "titre": "DSA Ford-Fulkerson Algorithm",
      "description": "The Ford-Fulkerson algorithm solves the maximum flow problem. Finding the maximum flow can be helpful in many areas: for optimizing network traffic, for manufacturing, for supply chain and logistics, or for airline scheduling.",
      "lien": "https://www.w3schools.com/dsa/dsa_algo_graphs_fordfulkerson.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Find a new augmented path",
            "Find how much the flow in that path can be increased",
            "Increase the flow along the edges in that path accordingly"
          ]
        ],
        "examples": [
          "class Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size\n\n    def add_edge(self, u, v, c):\n        self.adj_matrix[u][v] = c\n\n    def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data",
          "def dfs(self, s, t, visited=None, path=None):\n        if visited is None:\n            visited = [False] * self.size\n        if path is None:\n            path = []\n\n        visited[s] = True\n        path.append(s)\n\n        if s == t:\n            return path\n\n        for ind, val in enumerate(self.adj_matrix[s]):\n            if not visited[ind] and val > 0:\n                result_path = self.dfs(ind, t, visited, path.copy())\n                if result_path:\n                    return result_path\n\n        return None",
          "def fordFulkerson(self, source, sink):\n        max_flow = 0\n\n        path = self.dfs(source, sink)\n        while path:\n            path_flow = float(\"Inf\")\n            for i in range(len(path) - 1):\n                u, v = path[i], path[i + 1]\n                path_flow = min(path_flow, self.adj_matrix[u][v])\n\n            for i in range(len(path) - 1):\n                u, v = path[i], path[i + 1]\n                self.adj_matrix[u][v] -= path_flow\n                self.adj_matrix[v][u] += path_flow\n\n            max_flow += path_flow\n\n            path_names = [self.vertex_data[node] for node in path]\n            print(\"Path:\", \" -> \".join(path_names), \", Flow:\", path_flow)\n\n            path = self.dfs(source, sink)\n\n        return max_flow",
          "Example Python: class Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size\n\n    def add_edge(self, u, v, c):\n        self.adj_matrix[u][v] = c\n\n    def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data\n\n    def dfs(self, s, t, visited=None, path=None):\n        if visited is None:\n            visited = [False] * self.size\n        if path is None:\n            path = []\n\n        visited[s] = True\n        path.append(s)\n\n        if s == t:\n            return path\n\n        for ind, val in enumerate(self.adj_matrix[s]):\n            if not visited[ind] and val > 0:\n                result_path = self.dfs(ind, t, visited, path.copy())\n                if result_path:\n                    return result_path\n\n        return None\n\n    def fordFulkerson(self, source, sink):\n        max_flow = 0\n\n        path = self.dfs(source, sink)\n        while path:\n            path_flow = float(\"Inf\")\n            for i in range(len(path) - 1):\n                u, v = path[i], path[i + 1]\n                path_flow = min(path_flow, self.adj_matrix[u][v])\n\n            for i in range(len(path) - 1):\n                u, v = path[i], path[i + 1]\n                self.adj_matrix[u][v] -= path_flow\n                self.adj_matrix[v][u] += path_flow\n\n            max_flow += path_flow\n\n            path_names = [self.vertex_data[node] for node in path]\n            print(\"Path:\", \" -> \".join(path_names), \", Flow:\", path_flow)\n\n            path = self.dfs(source, sink)\n\n        return max_flow\n\ng = Graph(6)\nvertex_names = ['s', 'v1', 'v2', 'v3', 'v4', 't']\nfor i, name in enumerate(vertex_names):\n    g.add_vertex_data(i, name)\n\ng.add_edge(0, 1, 3)  # s  -> v1, cap: 3\ng.add_edge(0, 2, 7)  # s  -> v2, cap: 7\ng.add_edge(1, 3, 3)  # v1 -> v3, cap: 3\ng.add_edge(1, 4, 4)  # v1 -> v4, cap: 4\ng.add_edge(2, 1, 5)  # v2 -> v1, cap: 5\ng.add_edge(2, 4, 3)  # v2 -> v4, cap: 3\ng.add_edge(3, 4, 3)  # v3 -> v4, cap: 3\ng.add_edge(3, 5, 2)  # v3 -> t,  cap: 2\ng.add_edge(4, 5, 6)  # v4 -> t,  cap: 6\n\nsource = 0; sink = 5\n\nprint(\"The maximum possible flow is %d \" % g.fordFulkerson(source, sink)) Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_theory_graphs_maxflow.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_graphs_fordfulkerson"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_maxflow.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_edmondskarp.php",
    "cours": {
      "titre": "DSA Edmonds-Karp Algorithm",
      "description": "The Edmonds-Karp algorithm solves the maximum flow problem. Finding the maximum flow can be helpful in many areas: for optimizing network traffic, for manufacturing, for supply chain and logistics, or for airline scheduling.",
      "lien": "https://www.w3schools.com/dsa/dsa_algo_graphs_edmondskarp.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "class Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size\n\n    def add_edge(self, u, v, c):\n        self.adj_matrix[u][v] = c\n\n    def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data",
          "def bfs(self, s, t, parent):\n        visited = [False] * self.size\n        queue = []  # Using list as a queue\n        queue.append(s)\n        visited[s] = True\n\n        while queue:\n            u = queue.pop(0)  # Pop from the start of the list\n\n            for ind, val in enumerate(self.adj_matrix[u]):\n                if not visited[ind] and val > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n        return visited[t]",
          "def edmonds_karp(self, source, sink):\n        parent = [-1] * self.size\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float(\"Inf\")\n            s = sink\n            while(s != source):\n                path_flow = min(path_flow, self.adj_matrix[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n            while(v != source):\n                u = parent[v]\n                self.adj_matrix[u][v] -= path_flow\n                self.adj_matrix[v][u] += path_flow\n                v = parent[v]\n\n            path = []\n            v = sink\n            while(v != source):\n                path.append(v)\n                v = parent[v]\n            path.append(source)\n            path.reverse()\n            path_names = [self.vertex_data[node] for node in path]\n            print(\"Path:\", \" -> \".join(path_names), \", Flow:\", path_flow)\n\n        return max_flow",
          "Example Python: class Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size\n\n    def add_edge(self, u, v, c):\n        self.adj_matrix[u][v] = c\n\n    def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.size\n        queue = []  # Using list as a queue\n        queue.append(s)\n        visited[s] = True\n\n        while queue:\n            u = queue.pop(0)  # Pop from the start of the list\n\n            for ind, val in enumerate(self.adj_matrix[u]):\n                if not visited[ind] and val > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n        return visited[t]\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.size\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float(\"Inf\")\n            s = sink\n            while(s != source):\n                path_flow = min(path_flow, self.adj_matrix[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n            while(v != source):\n                u = parent[v]\n                self.adj_matrix[u][v] -= path_flow\n                self.adj_matrix[v][u] += path_flow\n                v = parent[v]\n\n            path = []\n            v = sink\n            while(v != source):\n                path.append(v)\n                v = parent[v]\n            path.append(source)\n            path.reverse()\n            path_names = [self.vertex_data[node] for node in path]\n            print(\"Path:\", \" -> \".join(path_names), \", Flow:\", path_flow)\n\n        return max_flow\n\n# Example usage:\ng = Graph(6)\nvertex_names = ['s', 'v1', 'v2', 'v3', 'v4', 't']\nfor i, name in enumerate(vertex_names):\n    g.add_vertex_data(i, name)\n\ng.add_edge(0, 1, 3)  # s  -> v1, cap: 3\ng.add_edge(0, 2, 7)  # s  -> v2, cap: 7\ng.add_edge(1, 3, 3)  # v1 -> v3, cap: 3\ng.add_edge(1, 4, 4)  # v1 -> v4, cap: 4\ng.add_edge(2, 1, 5)  # v2 -> v1, cap: 5\ng.add_edge(2, 4, 3)  # v2 -> v4, cap: 3\ng.add_edge(3, 4, 3)  # v3 -> v4, cap: 3\ng.add_edge(3, 5, 2)  # v3 -> t,  cap: 2\ng.add_edge(4, 5, 6)  # v4 -> t,  cap: 6\n\nsource = 0; sink = 5\nprint(\"The maximum possible flow is %d \" % g.edmonds_karp(source, sink)) Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_fordfulkerson.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_graphs_edmondskarp"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_fordfulkerson.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_theory.php",
    "cours": {
      "titre": "DSA Time Complexity",
      "description": "Definition Let \\(f(n)\\) and \\(g(n)\\) be two functions. We say that \\(f(n)\\) is \\(O(g(n))\\) if and only if there are positive constants \\(C\\) and \\(n_0\\) such that \\[ C \\cdot g(n) > f(n) \\] for all \\(n>n_0\\).",
      "lien": "https://www.w3schools.com/dsa/dsa_timecomplexity_theory.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "the programming language used to implement the algorithm",
            "how the programmer writes the program for the algorithm",
            "the compiler or interpreter used so that the implemented algorithm can run",
            "the hardware on the computer the algorithm is running on",
            "the operating system and other tasks going on on the computer",
            "the amount of data the algorithm is working on"
          ]
        ],
        "examples": [
          "8, 16, 19, 15, 2, 17, 4, 11, 6, 1, 7, 13, 5, 3, 9, 12, 14, 20, 18, 10",
          "1, 2, 3, 4, 5, 20 , 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_edmondskarp.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_edmondskarp.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_bblsort.php",
    "cours": {
      "titre": "DSA Bubble Sort Time Complexity",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_timecomplexity_bblsort.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_theory.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_theory.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_selsort.php",
    "cours": {
      "titre": "DSA Selection Sort Time Complexity",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_timecomplexity_selsort.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_bblsort.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_bblsort.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_insertionsort.php",
    "cours": {
      "titre": "DSA Insertion Sort Time Complexity",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_timecomplexity_insertionsort.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "The 1st value is already in the correct position.",
            "The 2nd value must be compared and moved past the 1st value.",
            "The 3rd value must be compared and moved past two values.",
            "The 3rd value must be compared and moved past three values.",
            "And so on.."
          ]
        ],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_selsort.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_selsort.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_quicksort.php",
    "cours": {
      "titre": "DSA Time Complexity for Specific Algorithms",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_timecomplexity_quicksort.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_insertionsort.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_insertionsort.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_countsort.php",
    "cours": {
      "titre": "DSA Counting Sort Time Complexity",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_timecomplexity_countsort.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Finding the maximum value: Every value must be evaluated once to find out if it is the maximum value, so \\(n\\) operations are needed.",
            "Initializing the counting array: With \\(k\\) as the maximum value in the array, we need \\(k+1\\) elements in the counting array to include 0. Every element in the counting array must be initialized, so \\(k+1\\) operations are needed.",
            "Every value we want to sort is counted once, then removed, so 2 operations per count, \\(2 \\cdot n\\) operations in total.",
            "Building the sorted array: Create \\(n\\) elements in the sorted array: \\(n\\) operations."
          ]
        ],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_quicksort.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_quicksort.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_radixsort.php",
    "cours": {
      "titre": "DSA Radix Sort Time Complexity",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_timecomplexity_radixsort.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_countsort.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_countsort.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_mergesort.php",
    "cours": {
      "titre": "DSA Merge Sort Time Complexity",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_timecomplexity_mergesort.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Comparing 1 and 2, result: [1]",
            "Comparing 4 and 2, result: [1,2]",
            "Comparing 4 and 3, result: [1,2,3]",
            "Comparing 4 and 7, result: [1,2,3,4]",
            "Comparing 6 and 7, result: [1,2,3,4,6]",
            "Comparing 9 and 7, result: [1,2,3,4,6,7]",
            "Comparing 9 and 8, result: [1,2,3,4,6,7,8]"
          ]
        ],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_radixsort.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_radixsort.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_linearsearch.php",
    "cours": {
      "titre": "DSA Linear Search Time Complexity",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_timecomplexity_linearsearch.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_mergesort.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_mergesort.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_binarysearch.php",
    "cours": {
      "titre": "DSA Selection Sort Time Complexity",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_timecomplexity_binarysearch.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_linearsearch.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_linearsearch.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_ref_euclidean_algorithm.php",
    "cours": {
      "titre": "The Euclidean Algorithm",
      "description": "Named after the ancient Greek mathematician Euclid, the Euclidean algorithm is the oldest known non-trivial algorithm, described in Euclid's famous book \"Elements\" from 300 BCE.",
      "lien": "https://www.w3schools.com/dsa/dsa_ref_euclidean_algorithm.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Use subtraction to find the greatest common divisor of \\(120\\) and \\(25\\).",
            "Use division with remainder to find the greatest common divisor of \\(120\\) and \\(25\\).",
            "Compare the subtraction and division methods."
          ]
        ],
        "examples": [
          "Example Finding the greatest common divisor of 120 and 25 using the Euclidean algorithm: def gcd_division(a, b):\n    while b != 0:\n        remainder = a % b\n        print(f\"{a} = {a//b} * {b} + {remainder}\")\n        a = b\n        b = remainder\n    return a\n\na = 120\nb = 25\nprint(\"The Euclidean algorithm using division:\\n\")\nprint(f\"The GCD of {a} and {b} is: {gcd_division(a, b)}\") Run Example »",
          "Example Finding the greatest common divisor of 120 and 25 using the Euclidean algorithm with subtraction: def gcd_subtraction(a, b):\n    while a != b:\n        if a > b:\n            print(f\"{a} - {b} = {a-b}\")\n            a = a - b\n        else:\n            print(f\"{b} - {a} = {b-a}\")\n            b = b - a\n    return a\n\na = 120\nb = 25\nprint(\"The Euclidean algorithm using subtraction:\\n\")\nprint(f\"The GCD of {a} and {b} is: {gcd_subtraction(a, b)}\") Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_binarysearch.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_gcd_division"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_gcd_subtraction"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_binarysearch.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_ref_huffman_coding.php",
    "cours": {
      "titre": "Huffman Coding",
      "description": "How it works: Count how often each piece of data occurs. Build a binary tree , starting with the nodes with the lowest count. The new parent node has the combined count of its child nodes. The edge from a parent gets '0' for the left child, and '1' for the edge to the right child. In the finished binary tree, follow the edges from the root node, adding '0' or '1' for each branch, to find the new Huffman code for each piece of data. Create the Huffman code by converting the data, piece-by-piece, into a binary code using the binary tree.",
      "lien": "https://www.w3schools.com/dsa/dsa_ref_huffman_coding.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Huffman Coding. class Node:\n    def __init__(self, char=None, freq=0):\n        self.char = char\n        self.freq = freq\n        self.left = None\n        self.right = None\n\nnodes = []\n\ndef calculate_frequencies(word):\n    frequencies = {}\n    for char in word:\n        if char not in frequencies:\n            freq = word.count(char)\n            frequencies[char] = freq\n            nodes.append(Node(char, freq))\n\ndef build_huffman_tree():\n    while len(nodes) > 1:\n        nodes.sort(key=lambda x: x.freq)\n        left = nodes.pop(0)\n        right = nodes.pop(0)\n        \n        merged = Node(freq=left.freq + right.freq)\n        merged.left = left\n        merged.right = right\n        \n        nodes.append(merged)\n\n    return nodes[0]\n\ndef generate_huffman_codes(node, current_code, codes):\n    if node is None:\n        return\n\n    if node.char is not None:\n        codes[node.char] = current_code\n\n    generate_huffman_codes(node.left, current_code + '0', codes)\n    generate_huffman_codes(node.right, current_code + '1', codes)\n\ndef huffman_encoding(word):\n    global nodes\n    nodes = []\n    calculate_frequencies(word)\n    root = build_huffman_tree()\n    codes = {}\n    generate_huffman_codes(root, '', codes)\n    return codes\n\nword = \"lossless\"\ncodes = huffman_encoding(word)\nencoded_word = ''.join(codes[char] for char in word)\n\nprint(\"Word:\", word)\nprint(\"Huffman code:\", encoded_word)\nprint(\"Conversion table:\", codes) Run Example »",
          "Example Huffman Decoding. class Node:\n    def __init__(self, char=None, freq=0):\n        self.char = char\n        self.freq = freq\n        self.left = None\n        self.right = None\n\nnodes = []\n\ndef calculate_frequencies(word):\n    frequencies = {}\n    for char in word:\n        if char not in frequencies:\n            freq = word.count(char)\n            frequencies[char] = freq\n            nodes.append(Node(char, freq))\n\ndef build_huffman_tree():\n    while len(nodes) > 1:\n        nodes.sort(key=lambda x: x.freq)\n        left = nodes.pop(0)\n        right = nodes.pop(0)\n        \n        merged = Node(freq=left.freq + right.freq)\n        merged.left = left\n        merged.right = right\n        \n        nodes.append(merged)\n\n    return nodes[0]\n\ndef generate_huffman_codes(node, current_code, codes):\n    if node is None:\n        return\n\n    if node.char is not None:\n        codes[node.char] = current_code\n\n    generate_huffman_codes(node.left, current_code + '0', codes)\n    generate_huffman_codes(node.right, current_code + '1', codes)\n\ndef huffman_encoding(word):\n    global nodes\n    nodes = []\n    calculate_frequencies(word)\n    root = build_huffman_tree()\n    codes = {}\n    generate_huffman_codes(root, '', codes)\n    return codes\n\ndef huffman_decoding(encoded_word, codes):\n    current_code = ''\n    decoded_chars = []\n\n    # Invert the codes dictionary to get the reverse mapping\n    code_to_char = {v: k for k, v in codes.items()}\n\n    for bit in encoded_word:\n        current_code += bit\n        if current_code in code_to_char:\n            decoded_chars.append(code_to_char[current_code])\n            current_code = ''\n\n    return ''.join(decoded_chars)\n\nword = \"lossless\"\ncodes = huffman_encoding(word)\nencoded_word = ''.join(codes[char] for char in word)\ndecoded_word = huffman_decoding(encoded_word, codes)\n\nprint(\"Initial word:\", word)\nprint(\"Huffman code:\", encoded_word)\nprint(\"Conversion table:\", codes)\nprint(\"Decoded word:\", decoded_word) Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_ref_euclidean_algorithm.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_huffman"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_huffman_decoding"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_ref_euclidean_algorithm.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_ref_traveling_salesman.php",
    "cours": {
      "titre": "DSA The Traveling Salesman Problem",
      "description": "The Traveling Salesman Problem Rules : Visit every city only once, then return back to the city you started in. Goal : Find the shortest possible route.",
      "lien": "https://www.w3schools.com/dsa/dsa_ref_traveling_salesman.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "2-opt Heuristic: An algorithm that improves the solution step-by-step, in each step removing two edges and reconnecting the two paths in a different way to reduce the total path length.",
            "Genetic Algorithm: This is a type of algorithm inspired by the process of natural selection and use techniques such as selection, mutation, and crossover to evolve solutions to problems, including the TSP.",
            "Simulated Annealing: This method is inspired by the process of annealing in metallurgy. It involves heating and then slowly cooling a material to decrease defects. In the context of TSP, it's used to find a near-optimal solution by exploring the solution space in a way that allows for occasional moves to worse solutions, which helps to avoid getting stuck in local minima.",
            "Ant Colony Optimization: This algorithm is inspired by the behavior of ants in finding paths from the colony to food sources. It's a more complex probabilistic technique for solving computational problems which can be mapped to finding good paths through graphs."
          ],
          [
            "Obstacles: When moving from one place to another, we normally try to avoid obstacles like trees, rivers, houses for example. This means it is longer and takes more time to go from A to B, and the edge weight value needs to be increased to factor that in, because it is not a straight line anymore.",
            "Transportation Networks: We usually follow a road or use public transport systems when traveling, and that also affects how hard it is to go (or send a package) from one place to another.",
            "Traffic Conditions: Travel congestion also affects the travel time, so that should also be reflected in the edge weight value.",
            "Legal and Political Boundaries: Crossing border for example, might make one route harder to choose than another, which means the shortest straight line route might be slower, or more costly.",
            "Economic Factors: Using fuel, using the time of employees, maintaining vehicles, all these things cost money and should also be factored into the edge weights."
          ]
        ],
        "examples": [
          "Example Finding the optimal solution to the Traveling Salesman Problem by checking all possible routes (brute force): from itertools import permutations\n\ndef calculate_distance(route, distances):\n    total_distance = 0\n    for i in range(len(route) - 1):\n        total_distance += distances[route[i]][route[i + 1]]\n    total_distance += distances[route[-1]][route[0]]\n    return total_distance\n\ndef brute_force_tsp(distances):\n    n = len(distances)\n    cities = list(range(1, n))\n    shortest_route = None\n    min_distance = float('inf')\n    \n    for perm in permutations(cities):\n        current_route = [0] + list(perm)\n        current_distance = calculate_distance(current_route, distances)\n        \n        if current_distance < min_distance:\n            min_distance = current_distance\n            shortest_route = current_route\n    \n    shortest_route.append(0)\n    return shortest_route, min_distance\n\ndistances = [\n    [0, 2, 2, 5, 9, 3],\n    [2, 0, 4, 6, 7, 8],\n    [2, 4, 0, 8, 6, 3],\n    [5, 6, 8, 0, 4, 9],\n    [9, 7, 6, 4, 0, 10],\n    [3, 8, 3, 9, 10, 0]\n]\n\nroute, total_distance = brute_force_tsp(distances)\nprint(\"Route:\", route)\nprint(\"Total distance:\", total_distance) Run Example »",
          "Example Finding a near-optimal solution to the Traveling Salesman Problem using the nearest-neighbor algorithm (greedy): def nearest_neighbor_tsp(distances):\n    n = len(distances)\n    visited = [False] * n\n    route = [0]\n    visited[0] = True\n    total_distance = 0\n\n    for _ in range(1, n):\n        last = route[-1]\n        nearest = None\n        min_dist = float('inf')\n        for i in range(n):\n            if not visited[i] and distances[last][i] < min_dist:\n                min_dist = distances[last][i]\n                nearest = i\n        route.append(nearest)\n        visited[nearest] = True\n        total_distance += min_dist\n\n    total_distance += distances[route[-1]][0]\n    route.append(0)\n    return route, total_distance\n\ndistances = [\n    [0, 2, 2, 5, 9, 3],\n    [2, 0, 4, 6, 7, 8],\n    [2, 4, 0, 8, 6, 3],\n    [5, 6, 8, 0, 4, 9],\n    [9, 7, 6, 4, 0, 10],\n    [3, 8, 3, 9, 10, 0]\n]\n\nroute, total_distance = nearest_neighbor_tsp(distances)\nprint(\"Route:\", route)\nprint(\"Total distance:\", total_distance) Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_ref_huffman_coding.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_tsp_brute_force"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_tsp_nearest_neighbor"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_ref_huffman_coding.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_ref_knapsack.php",
    "cours": {
      "titre": "DSA The 0/1 Knapsack Problem",
      "description": "The 0/1 Knapsack Problem Rules : Every item has a weight and value. Your knapsack has a weight limit. Choose which items you want to bring with you in the knapsack. You can either take an item or not, you cannot take half of an item for example. Goal : Maximize the total value of the items in the knapsack.",
      "lien": "https://www.w3schools.com/dsa/dsa_ref_knapsack.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Calculate the value of every possible combination of items in the knapsack.",
            "Discard the combinations that are heavier than the knapsack weight limit.",
            "Choose the combination of items with the highest total value."
          ],
          [
            "The bottom right value is 1200, and the cell above is 900. The values are different, which means the crown is included.",
            "The next cell we go to is on the row above, and we move left as many times as the crown is heavy, so 3 places left to the cell with value 700.",
            "The cell we are in now has value 700, and the cell above has value 500. The values are different, which means the item on the current row is included: the cup.",
            "The cup weighs 5 kg, so the next cell we go to is on the row above, and 5 places to the left, to the cell with value 300, on the row were the globe is considered.",
            "The cell above has the same value 300, which means the globe is not included, and the next cell we go to is the cell right above with value 300 where the microscope is considered.",
            "Since the cell above is different than the current cell with value 300, it means the microscope is included.",
            "The next cell we go to is on the line above, and two places to the left because the microscope is 2 kg.",
            "We arrive at the upper leftmost cell. Since the value is 0, it means we are finished."
          ]
        ],
        "examples": [
          "Example Solving the 0/1 Knapsack Problem using recursion and brute force: def knapsack_brute_force(capacity, n):\n    print(f\"knapsack_brute_force({capacity},{n})\")\n    if n == 0 or capacity == 0:\n        return 0\n\n    elif weights[n-1] > capacity:\n        return knapsack_brute_force(capacity, n-1)\n\n    else:\n        include_item = values[n-1] + knapsack_brute_force(capacity-weights[n-1], n-1)\n        exclude_item = knapsack_brute_force(capacity, n-1)\n        return max(include_item, exclude_item)\n\nvalues = [300, 200, 400, 500]\nweights = [2, 1, 5, 3]\ncapacity = 10\nn = len(values)\n\nprint(\"\\nMaximum value in Knapsack =\", knapsack_brute_force(capacity, n)) Run Example »",
          "Example Improved solution to the 0/1 Knapsack Problem using memoization: def knapsack_memoization(capacity, n):\n    print(f\"knapsack_memoization({n}, {capacity})\")\n    if memo[n][capacity] is not None:\n        print(f\"Using memo for ({n}, {capacity})\")\n        return memo[n][capacity]\n    \n    if n == 0 or capacity == 0:\n        result = 0\n    elif weights[n-1] > capacity:\n        result = knapsack_memoization(capacity, n-1)\n    else:\n        include_item = values[n-1] + knapsack_memoization(capacity-weights[n-1], n-1)\n        exclude_item = knapsack_memoization(capacity, n-1)\n        result = max(include_item, exclude_item)\n\n    memo[n][capacity] = result\n    return result\n\nvalues = [300, 200, 400, 500]\nweights = [2, 1, 5, 3]\ncapacity = 10\nn = len(values)\n\nmemo = [[None]*(capacity + 1) for _ in range(n + 1)]\n\nprint(\"\\nMaximum value in Knapsack =\", knapsack_memoization(capacity, n)) Run Example »",
          "Example Improved solution to the 0/1 Knapsack Problem using tabulation: def knapsack_tabulation():\n    n = len(values)\n    tab = [[0]*(capacity + 1) for y in range(n + 1)]\n\n    for i in range(1, n+1):\n        for w in range(1, capacity+1):\n            if weights[i-1] <= w:\n                include_item = values[i-1] + tab[i-1][w-weights[i-1]]\n                exclude_item = tab[i-1][w]\n                tab[i][w] = max(include_item, exclude_item)\n            else:\n                tab[i][w] = tab[i-1][w]\n    \n    for row in tab:\n    \t  print(row)\n    return tab[n][capacity]\n\nvalues = [300, 200, 400, 500]\nweights = [2, 1, 5, 3]\ncapacity = 10\nprint(\"\\nMaximum value in Knapsack =\", knapsack_tabulation()) Run Example »",
          "Example Extended solution to the 0/1 Knapsack Problem to find the included items: def knapsack_tabulation():\n    n = len(values)\n    tab = [[0] * (capacity + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for w in range(1, capacity + 1):\n            if weights[i-1] <= w:\n                include_item = values[i-1] + tab[i-1][w - weights[i-1]]\n                exclude_item = tab[i-1][w]\n                tab[i][w] = max(include_item, exclude_item)\n            else:\n                tab[i][w] = tab[i-1][w]\n\n    for row in tab:\n        print(row)\n\n    items_included = []\n    w = capacity\n    for i in range(n, 0, -1):\n        if tab[i][w] != tab[i-1][w]:\n            items_included.append(i-1)\n            w -= weights[i-1]\n\n    print(\"\\nItems included:\", items_included)\n\n    return tab[n][capacity]\n\nvalues = [300, 200, 400, 500]\nweights = [2, 1, 5, 3]\ncapacity = 10\nprint(\"\\nMaximum value in Knapsack =\", knapsack_tabulation()) Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_ref_traveling_salesman.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_knapsack_bruteforce"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_knapsack_memoization"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_knapsack_tabulation"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_knapsack_tabulation_items"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_ref_traveling_salesman.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_ref_memoization.php",
    "cours": {
      "titre": "Memoization",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_ref_memoization.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [
          "Example Find the 6th Fibonacci number with recursion: def F(n):\n    print('Computing F('+str(n)+')')\n    if n <= 1:\n        return n\n    else:\n        return F(n - 1) + F(n - 2)\n\nprint('F(6) = ',F(6)) Run Example »",
          "Example Find the 6th Fibonacci number with recursion, but using memoization to avoid unnecessary recursive calls: def F(n):\n    if memo[n] != None: # Already computed\n        return memo[n]\n    else: # Computation needed\n        print('Computing F('+str(n)+')')\n        if n <= 1:\n            memo[n] = n\n        else:\n            memo[n] = F(n - 1) + F(n - 2)\n        return memo[n] \n\nmemo = [None]*7\nprint('F(6) = ',F(6))\nprint('memo = ',memo) Run Example »",
          "Example See the difference in calculations for finding the 30th Fibonacci number, with and without memoization: computation_count = 0\ndef F(n):\n    global computation_count\n    computation_count += 1\n    if n <= 1:\n        return n\n    else:\n        return F(n - 1) + F(n - 2)\n        \ncomputation_count_mem = 0\ndef F_mem(n):\n    if memo[n] != None: # Already computed\n        return memo[n]\n    else: # Computation needed\n        global computation_count_mem\n        computation_count_mem += 1\n        if n <= 1:\n            memo[n] = n\n        else:\n            memo[n] = F_mem(n - 1) + F_mem(n - 2)\n        return memo[n] \n\nprint('F(30) = ',F(30))\nprint(f'Number of computations: {computation_count}')\nprint('\\nUsing memoization:')\nmemo = [None]*31\nprint('F(30) = ',F_mem(30))\nprint(f'Number of computations with memoiztion: {computation_count_mem}') Run Example »",
          "Example class TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n        self.height = 1 Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_ref_knapsack.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_findfibo_memo"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_findfibo_memo2"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_findfibo_memo3"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_avl_insert"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_ref_knapsack.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_ref_tabulation.php",
    "cours": {
      "titre": "Tabulation",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_ref_tabulation.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "The 0/1 Knapsack Problem is about having a set of items we can pack in a knapsack (a simple backpack), each item with a different value. To solve the problem we need to find the items that will maximize the total value of items we pack, but we cannot bring all the items we want because the knapsack has a weight limit.",
            "The Shortest Path Problem can be solved using the Bellman-Ford algorithm , which also uses tabulation to find the shortest paths in a graph. More specifically, the tabulation approach of the Bellman-Ford algorithm is in how the values in the \"distances\" array gets updated.",
            "The Traveling Salesman Problem can be solved precisely using the Held-Karp algorithm, which also uses tabulation. This algorithm is not described in this tutorial as it is although better than brute force \\(O(n!)\\), still not very effective \\(O(2^n n^2)\\), and quite advanced."
          ],
          [
            "The problem must be built up by smaller, overlapping subproblems . For example, the solution to Fibonacci number \\(F(3)\\) overlaps with the solutions to Fibonacci numbers \\(F(2)\\) and \\(F(1)\\), because we get \\(F(3)\\) by combining \\(F(2)\\) and \\(F(1)\\).",
            "The problem must also have an optimal substructure , meaning that the solution to the problem can be constructed from the solutions to its subproblems. When finding the \\(n\\)th Fibonacci number, \\(F(n)\\) can be found by adding \\(F(n-1)\\) and \\(F(n-2)\\). So knowing the two previous numbers is not enough to find \\(F(n)\\), we must also know the structure so that we know how to put them together."
          ]
        ],
        "examples": [
          "Example Finding the 10th Fibonacci number using tabulation: def fibonacci_tabulation(n):\n    if n == 0: return 0\n    elif n == 1: return 1\n\n    F = [0] * (n + 1)\n    F[0] = 0 \n    F[1] = 1\n\n    for i in range(2, n + 1):\n        F[i] = F[i - 1] + F[i - 2]\n    \n    print(F)\n    return F[n]\n  \nn = 10\nresult = fibonacci_tabulation(n)\nprint(f\"\\nThe {n}th Fibonacci number is {result}\") Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_ref_memoization.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_findfibo_tab"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_ref_memoization.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_ref_dynamic_programming.php",
    "cours": {
      "titre": "Dynamic Programming",
      "description": "To design an algorithm for a problem using Dynamic Programming, the problem we want to solve must have these two properties: Overlapping Subproblems: Means that the problem can be broken down into smaller subproblems, where the solutions to the subproblems are overlapping. Having subproblems that are overlapping means that the solution to one subproblem is part of the solution to another subproblem. Optimal Substructure: Means that the complete solution to a problem can be constructed from the solutions of its smaller subproblems. So not only must the problem have overlapping subproblems, the substructure must also be optimal so that there is a way to piece the solutions to the subproblems together to form the complete solution.",
      "lien": "https://www.w3schools.com/dsa/dsa_ref_dynamic_programming.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Check if the the problem has \"overlapping subproblems\" and an \"optimal substructure\".",
            "Solve the most basic subproblems.",
            "Find a way to put the subproblem solutions together to form solutions to new subproblems.",
            "Write the algorithm (the step-by-step procedure).",
            "Implement the algorithm (test if it works)."
          ]
        ],
        "examples": [
          "Example Finding the 6th Fibonacci number with our new algorithm: def nth_fibo(n):\n    if n==0: return 0\n    if n==1: return 1\n\n    F = [None] * (n + 1)\n    F[0] = 0\n    F[1] = 1\n\n    for i in range(2, n + 1):\n        F[i] = F[i - 1] + F[i - 2]\n\n    return F[n]\n\nn = 6\nresult = nth_fibo(n)\nprint(f\"The {n}th Fibonacci number is {result}\") Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_ref_tabulation.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_findfibo_dp"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_ref_tabulation.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_ref_greedy.php",
    "cours": {
      "titre": "DSA Greedy Algorithms",
      "description": "Two properties must be true for a problem for a greedy algorithm to work: Greedy Choice Property: Means that the problem is so that the solution (the global optimum) can be reached by making greedy choices in each step (locally optimal choices). Optimal Substructure: Means that the optimal solution to a problem, is a collection of optimal solutions to sub-problems. So solving smaller parts of the problem locally (by making greedy choices) contributes to the overall solution.",
      "lien": "https://www.w3schools.com/dsa/dsa_ref_greedy.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Merge Sort : Splits the array in halves over and over again, and then merges the array parts together again in a way that results in a sorted array. These operations are not a series of locally optimal choices like greedy algorithms are.",
            "Quick Sort : The choice of pivot element, the arranging of elements around the pivot element, and the recursive calls to do the same with the left and right side of the pivot element — those actions do not rely on making greedy choices.",
            "BFS and DFS Traversal: These algorithms traverse a graph without making a choice locally in each step on how to continue with the traversal, and so they are not greedy algorithms.",
            "Finding the nth Fibonacci number using memoization : This algorithm belongs to a way of solving problems called Dynamic Programming , which solves overlapping sub-problems, and then pieces them back together. Memoization is used in each step to optimize the overall algorithm, which means that at each step, this algorithm does not only consider what is the locally optimal solution, but it also takes into account that a result computed in this step, might be used in later steps."
          ]
        ],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_ref_dynamic_programming.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_ref_dynamic_programming.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_examples.php",
    "cours": {
      "titre": "DSA Examples",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_examples.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_ref_greedy.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_ref_greedy.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_exercises.php",
    "cours": {
      "titre": "DSA Exercises",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_exercises.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_examples.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_examples.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_quiz.php",
    "cours": {
      "titre": "DSA Quiz",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_quiz.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_exercises.php"
          },
          {
            "title": "Start the DSA Quiz ❯",
            "url": "https://www.w3schools.com/quiztest/quiztest.php?qtest=DSA"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_exercises.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_syllabus.php",
    "cours": {
      "titre": "DSA Syllabus",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_syllabus.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Understand basic data structures like arrays, linked lists, trees, and graphs.",
            "Learn how to sort and search data efficiently.",
            "Analyze the performance of algorithms using time complexity.",
            "Improve program efficiency by selecting appropriate data structures.",
            "Solve real-world problems with effective algorithms."
          ],
          [
            "Software Development: DSA is essential for efficient programming.",
            "Problem Solving: DSA provides tools for solving complex problems.",
            "System Design: DSA helps in designing scalable systems.",
            "Competitive Programming: DSA is crucial for coding competitions.",
            "Technical Interviews: DSA is a key topic in job interviews.",
            "Performance Optimization: DSA enables writing efficient code.",
            "Data Science: DSA helps in handling large datasets efficiently."
          ],
          [
            "Lessons",
            "Exercises",
            "Quizzes"
          ],
          [
            "Learning paths",
            "Sandbox and lab environments",
            "Achievements",
            "And much more!"
          ],
          [
            "Collaboration",
            "File navigator",
            "Terminal & log",
            "Package manager",
            "Database",
            "Environment manager",
            "Analytics"
          ],
          [
            "Non-adaptive",
            "Adaptive"
          ]
        ],
        "examples": [
          "Example my_array = [7, 12, 9, 4, 11]\nminVal = my_array[0]\n\nfor i in my_array:\n    if i < minVal:\n        minVal = i\n\nprint('Lowest value:',minVal) Run Example »"
        ],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_quiz.php"
          },
          {
            "title": "Run Example »",
            "url": "https://www.w3schools.com/dsa/trydsa.php?filename=demo_findlowest"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_quiz.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_study_plan.php",
    "cours": {
      "titre": "DSA Study Plan",
      "description": "",
      "lien": "https://www.w3schools.com/dsa/dsa_study_plan.php",
      "contenus": {
        "paragraphs": [],
        "lists": [
          [
            "Essentials ($1.99 / month per student)",
            "Full Access ($5.99 / month per student)",
            "Calculate your price and order here ."
          ],
          [
            "Managing your classroom",
            "Tracking of student progress and reports",
            "Labs, assignments, and code challenges (prebuilt challenges or create your own ones)",
            "Auto-grading",
            "Teaching materials",
            "Certification exams"
          ],
          [
            "W3Schools DSA Tutorial",
            "DSA Exercises",
            "DSA Quiz",
            "DSA Challenges (Coding challenges)",
            "DSA Certification Exam (End of Pathway Exam)"
          ],
          [
            "Learning Paths You can add ready-made learning paths. The learning paths are by default ordered by our recommended order. You can change the order. You can add custom activities with text, links, or multi-media files. Drag and drop or click to make changes to the path.",
            "You can add ready-made learning paths.",
            "The learning paths are by default ordered by our recommended order.",
            "You can change the order.",
            "You can add custom activities with text, links, or multi-media files.",
            "Drag and drop or click to make changes to the path.",
            "Interactive Content Tutorials Try-its (test code snippets) Exercises Quiz Challenges Labs",
            "Tutorials",
            "Try-its (test code snippets)",
            "Exercises",
            "Quiz",
            "Challenges",
            "Labs",
            "Timeline and Pace You can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans). You can decide the learning pace for your class. Different study plans can be assigned to different students in the same class. The flexibility can help to make sure that everyone is challenged.",
            "You can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).",
            "You can decide the learning pace for your class.",
            "Different study plans can be assigned to different students in the same class.",
            "The flexibility can help to make sure that everyone is challenged.",
            "Track Student Progress There are tools to track student progress. The analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more. The challenges can be auto-graded or manually graded. The results are available to you as a teacher.",
            "There are tools to track student progress.",
            "The analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.",
            "The challenges can be auto-graded or manually graded. The results are available to you as a teacher.",
            "End of Pathway Exam The DSA study plan aligns with the DSA Certification Exam. The exam can be taken at the end of the study plan, at your selected date. The exam summarizes the DSA Tutorial. You get reports of the students' results.",
            "The DSA study plan aligns with the DSA Certification Exam.",
            "The exam can be taken at the end of the study plan, at your selected date.",
            "The exam summarizes the DSA Tutorial.",
            "You get reports of the students' results.",
            "Accessibility Study plans and learning materials are accessible on desktops, tablets, and smartphones. This ensures students can learn anytime, anywhere.",
            "Study plans and learning materials are accessible on desktops, tablets, and smartphones.",
            "This ensures students can learn anytime, anywhere."
          ],
          [
            "Week 1: Introduction, Arrays, Linked Lists",
            "Week 2: Stacks & Queues, Hash Tables, Trees",
            "Week 3: Graphs, Shortest Path",
            "Week 4: Minimum Spanning Tree, Maximum Flow, Time Complexity, DSA Certification Exam"
          ]
        ],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_syllabus.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_syllabus.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/dsa/dsa_exam.php",
    "cours": {
      "titre": "W3Schools DSA Certificate",
      "description": "How Does It Work? Study for free at W3Schools.com Study at your own speed Test your skills with W3Schools online quizzes Apply for your certificate by paying an exam fee Take your exam online, at any time, and from any location",
      "lien": "https://www.w3schools.com/dsa/dsa_exam.php",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": [],
        "course_structure": [
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_study_plan.php"
          },
          {
            "title": "❮ Previous",
            "url": "https://www.w3schools.com/dsa/dsa_study_plan.php"
          },
          {
            "title": "Log in",
            "url": "https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com"
          }
        ]
      },
      "categories": "",
      "niveau": "",
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://campus.w3schools.com/products/dsa-certification-exam",
    "cours": {
      "id": "",
      "contenus": {
        "texte": "",
        "lienVideo": ""
      },
      "categories": [],
      "niveau": "Débutant",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  }
]