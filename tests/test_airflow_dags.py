#!/usr/bin/env python3
"""
Script de test et validation des DAGs Airflow
Teste la syntaxe, les d√©pendances et la structure des DAGs
"""

import importlib.util
import logging
import os
import sys
from datetime import datetime, timedelta

# Configuration du logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def test_dag_import(dag_path):
    """
    Teste l'import d'un DAG
    """
    try:
        spec = importlib.util.spec_from_file_location("dag_module", dag_path)
        dag_module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(dag_module)

        # V√©rifier qu'il y a bien un objet DAG
        dag_objects = [
            getattr(dag_module, attr)
            for attr in dir(dag_module)
            if attr == "dag"
            or (
                hasattr(getattr(dag_module, attr), "dag_id")
                if hasattr(dag_module, attr)
                else False
            )
        ]

        if dag_objects:
            logger.info(f"‚úÖ DAG import√© avec succ√®s: {dag_path}")
            return (
                dag_objects[0] if hasattr(dag_objects[0], "dag_id") else dag_objects[0]
            )
        else:
            logger.error(f"‚ùå Aucun objet DAG trouv√© dans: {dag_path}")
            return None

    except Exception as e:
        logger.error(f"‚ùå Erreur d'import du DAG {dag_path}: {str(e)}")
        return None


def validate_dag_structure(dag):
    """
    Valide la structure d'un DAG
    """
    issues = []

    # V√©rifications de base
    if not dag.dag_id:
        issues.append("‚ùå dag_id manquant")

    if not dag.description:
        issues.append("‚ö†Ô∏è Description manquante")

    if not dag.schedule_interval:
        issues.append("‚ö†Ô∏è schedule_interval non d√©fini")

    if not dag.default_args:
        issues.append("‚ö†Ô∏è default_args manquants")

    # V√©rifier les t√¢ches
    if not dag.task_dict:
        issues.append("‚ùå Aucune t√¢che d√©finie")
    else:
        logger.info(f"üìã T√¢ches trouv√©es: {list(dag.task_dict.keys())}")

        # V√©rifier les d√©pendances
        for task_id, task in dag.task_dict.items():
            if not task.upstream_task_ids and not task.downstream_task_ids:
                issues.append(f"‚ö†Ô∏è T√¢che isol√©e: {task_id}")

    # V√©rifier la configuration de retry
    if dag.default_args and "retries" not in dag.default_args:
        issues.append("‚ö†Ô∏è Nombre de retries non d√©fini")

    return issues


def test_dag_scheduling(dag):
    """
    Teste la logique de scheduling d'un DAG
    """
    try:
        # Test avec une date de d√©marrage
        start_date = datetime(2025, 1, 1)

        if dag.schedule_interval:
            # Calculer la prochaine ex√©cution
            # Note: Ceci est simplifi√©, Airflow utilise croniter pour les expressions cron
            logger.info(f"üìÖ Schedule: {dag.schedule_interval}")
            logger.info(f"üìÖ Start date: {dag.start_date}")

        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur de scheduling: {str(e)}")
        return False


def generate_dag_graph(dag):
    """
    G√©n√®re une repr√©sentation textuelle du graphe des t√¢ches
    """
    logger.info(f"\nüîó Graphe du DAG: {dag.dag_id}")
    logger.info("=" * 50)

    # Trouve les t√¢ches sans pr√©d√©cesseurs (points d'entr√©e)
    root_tasks = [task for task in dag.task_dict.values() if not task.upstream_task_ids]

    def print_task_tree(task, indent=0):
        prefix = "  " * indent + "‚îî‚îÄ " if indent > 0 else ""
        logger.info(f"{prefix}{task.task_id}")

        for downstream_task_id in task.downstream_task_ids:
            downstream_task = dag.task_dict[downstream_task_id]
            print_task_tree(downstream_task, indent + 1)

    for root_task in root_tasks:
        print_task_tree(root_task)

    logger.info("=" * 50)


def test_dag_tasks_configuration(dag):
    """
    Teste la configuration des t√¢ches
    """
    issues = []

    for task_id, task in dag.task_dict.items():
        # V√©rifier la documentation
        if not task.doc_md and not task.doc:
            issues.append(f"‚ö†Ô∏è Documentation manquante pour la t√¢che: {task_id}")

        # V√©rifier les d√©pendances Python pour PythonOperator
        if hasattr(task, "python_callable"):
            try:
                # V√©rifier que la fonction est callable
                if not callable(task.python_callable):
                    issues.append(f"‚ùå python_callable non valide pour: {task_id}")
            except:
                issues.append(
                    f"‚ùå Erreur lors de la validation de python_callable pour: {task_id}"
                )

    return issues


def main():
    """
    Fonction principale de test
    """
    logger.info("üöÄ D√©but des tests des DAGs Airflow")
    logger.info("=" * 60)

    # Chemin vers les DAGs
    dags_path = "orchestration/airflow/dags"

    if not os.path.exists(dags_path):
        logger.error(f"‚ùå R√©pertoire des DAGs non trouv√©: {dags_path}")
        sys.exit(1)

    # Liste des fichiers DAG
    dag_files = [
        f for f in os.listdir(dags_path) if f.endswith(".py") and not f.startswith("__")
    ]

    if not dag_files:
        logger.error(f"‚ùå Aucun fichier DAG trouv√© dans: {dags_path}")
        sys.exit(1)

    logger.info(f"üìÅ DAGs trouv√©s: {dag_files}")

    total_issues = 0
    successful_dags = 0

    for dag_file in dag_files:
        dag_path = os.path.join(dags_path, dag_file)
        logger.info(f"\nüîç Test du DAG: {dag_file}")
        logger.info("-" * 40)

        # Test d'import
        dag = test_dag_import(dag_path)
        if not dag:
            total_issues += 1
            continue

        # Validation de la structure
        structure_issues = validate_dag_structure(dag)
        if structure_issues:
            logger.warning("‚ö†Ô∏è Probl√®mes de structure d√©tect√©s:")
            for issue in structure_issues:
                logger.warning(f"  {issue}")
            total_issues += len(structure_issues)

        # Test du scheduling
        if not test_dag_scheduling(dag):
            total_issues += 1

        # G√©n√©ration du graphe
        generate_dag_graph(dag)

        # Test de la configuration des t√¢ches
        task_issues = test_dag_tasks_configuration(dag)
        if task_issues:
            logger.warning("‚ö†Ô∏è Probl√®mes de configuration des t√¢ches:")
            for issue in task_issues:
                logger.warning(f"  {issue}")
            total_issues += len(task_issues)

        if not structure_issues and not task_issues:
            logger.info("‚úÖ DAG valid√© avec succ√®s!")
            successful_dags += 1

        logger.info("-" * 40)

    # R√©sum√© final
    logger.info(f"\nüìä R√âSUM√â DES TESTS")
    logger.info("=" * 60)
    logger.info(f"DAGs test√©s: {len(dag_files)}")
    logger.info(f"DAGs valides: {successful_dags}")
    logger.info(f"Total des probl√®mes: {total_issues}")

    if total_issues == 0:
        logger.info("üéâ Tous les DAGs sont valides!")
        return 0
    else:
        logger.warning(f"‚ö†Ô∏è {total_issues} probl√®me(s) d√©tect√©(s)")
        return 1


if __name__ == "__main__":
    sys.exit(main())
