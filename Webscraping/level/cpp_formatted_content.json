[
  {
    "url": "https://www.w3schools.com/cpp/default.asp",
    "cours": {
      "titre": "C++Tutorial",
      "description": "Learn C++C++ is a popular programming language.C++ is used to create computer programs, and is one of the most used language in game development.C++ was developed as an extension ofC, and both languages have almost the same syntax.Start learning C++ now »",
      "lien": "https://www.w3schools.com/cpp/default.asp",
      "contenus": {
        "paragraphs": [
          "C++ is a popular programming language.",
          "C++ is used to create computer programs, and is one of the most used language in game development.",
          "C++ was developed as an extension ofC, and both languages have almost the same syntax.",
          "Our \"Try it Yourself\" editor makes it easy to learn C++. You can edit C++ code and view the result in your browser.",
          "Click on the \"Run example\" button to see how it works.",
          "We recommend reading this tutorial, in the sequence listed in the left menu.",
          "C++ is an object oriented language and some concepts may be new. Take breaks when needed, and go\nover the examples as many times as needed.",
          "Many chapters in this tutorial end with an exercise where you can check your level of knowledge.",
          "See all C++ Exercises",
          "Learn by examples! This tutorial supplements all explanations with clarifying examples.",
          "See All C++ Examples",
          "Learn by taking a quiz! The quiz will give you a signal of how much you know, or do not know, about C++.",
          "Start C++ Quiz",
          "Track your progress with the free \"My Learning\" program here at W3Schools.",
          "Log in to your account, and start earning points!",
          "This is an optional feature. You can study at W3Schools without using My Learning.",
          "You will also find references for different libraries, keywords and functions:",
          "C++ Keywords",
          "C++ <iostream> objects",
          "C++ <fstream> classes",
          "C++ <cmath> functions",
          "C++ <string> functions",
          "C++ <cstring> functions",
          "C++ <ctime> functions",
          "C++ <vector> functions",
          "C++ <algorithm> functions",
          "Get certified by completingthecourse"
        ],
        "lists": [],
        "examples": [
          "#include <iostream>using namespace std;int main() {cout << \"Hello World!\";return 0;}"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_intro.asp",
    "cours": {
      "titre": "C++Introduction",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_intro.asp",
      "contenus": {
        "paragraphs": [
          "C++ is a cross-platform language that can be used to create high-performance applications.",
          "C++ was developed by Bjarne Stroustrup, as an extension to theC language.",
          "C++ gives programmers a high level of control over system resources and memory.",
          "The language was updated 5 major times in 2011, 2014, 2017, 2020, and 2023 to C++11, C++14, C++17, C++20, and C++23.",
          "C++ is one of the world's most popular programming languages.",
          "C++ can be found in today's operating systems, Graphical User Interfaces, and embedded systems.",
          "C++ is an object-oriented programming language which gives a clear structure to programs and allows code to be reused, lowering development costs.",
          "C++ is portable and can be used to develop applications that can be adapted to multiple platforms.",
          "C++ is fun and easy to learn!",
          "As C++ is close toC,C#andJava, it makes it easy for programmers to switch to C++ or vice versa.",
          "C++ was developed as an extension ofC, and both languages have almost the same syntax.",
          "The main difference between C and C++ is that C++ supports classes and objects, while C does not.",
          "This tutorial will teach you the basics of C++.",
          "When you are finished with this tutorial, you will be able to write C++ programs and create real-life examples.",
          "It is not necessary to have any prior programming experience."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_getstarted.asp",
    "cours": {
      "titre": "C++Getting Started",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_getstarted.asp",
      "contenus": {
        "paragraphs": [
          "To start using C++, you need two things:",
          "There are many text editors and compilers to choose from. In this tutorial, we \nwill use an IDE (see below).",
          "An IDE (Integrated Development Environment) is used to edit AND compile the code.",
          "Popular IDE's include Code::Blocks, Eclipse, and Visual Studio.  These are all \nfree, and they can be used to both edit and debug C++ code.",
          "Note:Web-based IDE's can work as well, but functionality is limited.",
          "We will useCode::Blocksin our tutorial, which we believe is a good place to start.",
          "You can find the latest version of Codeblocks athttp://www.codeblocks.org/. \nDownload themingw-setup.exefile, which will install the text editor with \na compiler.",
          "Let's create our first C++ file.",
          "Open Codeblocks and go toFile > New > Empty File.",
          "Write the following C++ code and save the file asmyfirstprogram.cpp(File > Save File as):",
          "Don't worry if you don't understand the code above - we will discuss it in detail in later chapters. For now, focus on how to run the code.",
          "In Codeblocks, it should look like this:",
          "Then, go toBuild > Build and Runto run (execute) the program. The result will look something to this:",
          "Congratulations! You have now written and executed your first C++ program.",
          "When learning C++ at W3Schools.com, you can use our \"Try it Yourself\" tool, which shows both the code and the result. This will make it easier for \nyou to understand every part as we move forward:",
          "Code:",
          "Result:"
        ],
        "lists": [
          [
            "A text editor, like Notepad, to write C++ code",
            "A compiler, like GCC, to translate the C++ code into a language that \nthe computer will understand"
          ]
        ],
        "examples": [
          "#include <iostream>using namespace std;int main() {cout << \"Hello World!\";return 0;}",
          "#include <iostream>using namespace std;int main() {cout << \"Hello World!\";return 0;}"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_syntax.asp",
    "cours": {
      "titre": "C++Syntax",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_syntax.asp",
      "contenus": {
        "paragraphs": [
          "Let's break up the following code to understand it better:",
          "Line 1:#include <iostream>is aheader file librarythat lets us work with input and output objects, such ascout(used in line 5). Header files add functionality to C++ programs.",
          "Line 2:using namespace stdmeans that we can use names for objects and variables from the \nstandard library.",
          "Don't worry if you don't understand how#include <iostream>andusing namespace stdworks. Just think of it as something that (almost) always appears in your program.",
          "Line 3:A blank line. C++ ignores white space. But we use it \nto make the code more readable.",
          "Line 4:Another thing that always appear in a C++ program isint main(). This is called afunction. Any code inside its curly brackets{}will be executed.",
          "Line 5:cout(pronounced \"see-out\") is anobjectused together with theinsertion operator(<<) \nto output/print text. In our example, it will output \"Hello World!\".",
          "Note:C++ is case-sensitive: \"cout\" and \"Cout\" has different meaning.",
          "Note:Every C++ statement ends with a semicolon;.",
          "Note:The body ofint main()could also been written as:int main () { cout << \"Hello World! \";  return 0; \n}",
          "Remember:The compiler ignores white spaces. However, multiple lines makes the code more readable.",
          "Line 6:return 0;ends the main function.",
          "Line 7:Do not forget to add the closing curly bracket}to actually end the \nmain function.",
          "You might see some C++ programs that runs without the standard namespace library. Theusing namespace stdline can be omitted and replaced with thestdkeyword, \nfollowed by the::operator \nfor some objects:",
          "It is up to you if you want to include the standard namespace library or not."
        ],
        "lists": [],
        "examples": [
          "#include <iostream>using namespace std;int main() {cout << \"Hello World!\";return 0;}",
          "#include <iostream>int main() {std::cout << \"Hello World!\";return 0;}"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_statements.asp",
    "cours": {
      "titre": "C++Statements",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_statements.asp",
      "contenus": {
        "paragraphs": [
          "Acomputer programis a list of \"instructions\" to be \"executed\" by a computer.",
          "In a programming language, these programming instructions are calledstatements.",
          "The following statement \"instructs\" the compiler to print the text \"Hello World\" \nto the screen:",
          "It is important that you end the statement with a semicolon;",
          "If you forget the semicolon (;), an error will occur \nand the program will not run:",
          "Try it Yourself »",
          "Most C++ programs contain many statements.",
          "The statements are executed, one by one, in the same order as they are \nwritten:",
          "From the example above, we have three statements:",
          "The first statement is executed first (print \"Hello World!\" to the screen).Then the second statement is executed (print \"Have a good day!\" to the screen).And at last, the third statement is executed (end the C++ program successfully).",
          "You will learn more about statements while reading this tutorial. For now, just remember to always end them with a semicolon to avoid any errors.",
          "Coming up:The next chapter will teach you how to control \n  the output and how to insert new lines to make it more readable."
        ],
        "lists": [
          [
            "cout << \"Hello World!\";",
            "cout << \"Have a good day!\";",
            "return 0;"
          ]
        ],
        "examples": [
          "cout << \"Hello World!\";",
          "cout << \"Hello World!\"",
          "cout << \"Hello World!\";cout << \"Have \n  a good day!\";return 0;"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_output.asp",
    "cours": {
      "titre": "C++Output (Print Text)",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_output.asp",
      "contenus": {
        "paragraphs": [
          "Thecoutobject, together with the<<operator, is used to output values and print text.",
          "Just remember to surround the text with double quotes (\"\"):",
          "You can add as manycoutobjects as you want. However, note that it does not insert a new line at the end of the output:",
          "Tip:You will learn how to add new lines in theC++ New Lines chapter."
        ],
        "lists": [],
        "examples": [
          "#include <iostream>using namespace std;int main() {cout<< \"Hello World!\";return 0;}",
          "#include <iostream>using namespace std;int main() {cout<< \"Hello World!\";cout<< \"I am learning C++\";return 0;}"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_output_numbers.asp",
    "cours": {
      "titre": "C++Output Numbers",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_output_numbers.asp",
      "contenus": {
        "paragraphs": [
          "You can also usecout()to \nprint numbers.",
          "However, unlike text, we don't put numbers inside double \nquotes:",
          "You can also perform mathematical calculations:"
        ],
        "lists": [],
        "examples": [
          "#include <iostream>using namespace std;int main() {cout << 3;return 0;}",
          "cout << 3 + 3;",
          "cout << 2 * 5;"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_new_lines.asp",
    "cours": {
      "titre": "C++New Lines",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_new_lines.asp",
      "contenus": {
        "paragraphs": [
          "To insert a new line in your output, you can use the\\ncharacter:",
          "You can also use another<<operator and place the\\ncharacter after the text, like this:",
          "Tip:Two\\ncharacters after each other will create a blank line:",
          "Another way to insert a new line, is with theendlmanipulator:",
          "Both\\nandendlare used to break lines. \nHowever,\\nis most used.",
          "The newline character (\\n) is called anescape sequence, and \nit forces the cursor to change its position to the beginning of the next line on the screen. This results in a new line.",
          "Examples of other valid escape sequences are:"
        ],
        "lists": [],
        "examples": [
          "#include <iostream>using namespace std;int main() {cout << \"Hello World!\\n\";cout << \"I am learning C++\";return 0;}",
          "#include <iostream>using namespace std;int main() {cout << \"Hello World!\"<< \"\\n\";cout << \"I am learning C++\";return 0;}",
          "#include <iostream>using namespace std;int main() {cout << \"Hello World!\" << \"\\n\\n\";cout << \"I am learning C++\";return 0;}",
          "#include <iostream>using namespace std;int main() {cout << \"Hello World!\" <<endl;cout << \"I am learning C++\";return 0;}"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_comments.asp",
    "cours": {
      "titre": "C++Comments",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_comments.asp",
      "contenus": {
        "paragraphs": [
          "Comments can be used to explain C++ code, and to make it more readable. It can also be used to \nprevent execution when testing alternative code. Comments can be singled-lined or multi-lined.",
          "Single-line comments start with two forward slashes (//).",
          "Any text between//and the end of the line \nis ignored by the compiler (will not be executed).",
          "This example uses a single-line comment before a line of code:",
          "This example uses a single-line comment at the end of a line of code:",
          "Multi-line comments start with/*and ends with*/.",
          "Any text between/*and*/will be ignored by \nthe compiler:",
          "It is up to you which you want to use. Normally, we use//for short comments, and/* */for longer."
        ],
        "lists": [],
        "examples": [
          "// This is a commentcout << \"Hello World!\";",
          "cout << \"Hello World!\"; // This is a comment",
          "/* The code below will print the words Hello World!to the screen, and it is \n  amazing */cout << \"Hello World!\";"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_variables.asp",
    "cours": {
      "titre": "C++Variables",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_variables.asp",
      "contenus": {
        "paragraphs": [
          "Variables are containers for storing data values.",
          "In C++, there are differenttypesof variables (defined with different keywords), for example:",
          "To create a variable, specify the type and assign it a value:",
          "Wheretypeis one of C++ types (such asint), andvariableNameis the name of the variable (such asxormyName). Theequal signis used to assign values to the variable.",
          "To create a variable that should store a number, look at the following example:",
          "Create a variable calledmyNumof typeintand assign it the value15:",
          "You can also declare a variable without assigning the value, and assign the value later:",
          "Note that if you assign a new value to an existing variable, it will overwrite the previous value:",
          "A demonstration of other data types:",
          "You will learn more about the individual types in theData Typeschapter.",
          "Thecoutobject is used together with the<<operator to display variables.",
          "To combine both text and a variable, separate them with the<<operator:",
          "To add a variable to another variable, you can use the+operator:"
        ],
        "lists": [
          [
            "int- stores integers (whole numbers), without decimals, such as 123 or -123",
            "double- stores floating point numbers, with decimals, such as 19.99 or -19.99",
            "char- stores single characters, such as 'a' or 'B'. \n Char values are surrounded by single quotes",
            "string- stores text, such as \"Hello World\". \n String values are surrounded by double quotes",
            "bool- stores values with two states: \n true or false"
          ]
        ],
        "examples": [
          "typevariableName=value;",
          "int myNum = 15;cout << myNum;",
          "int myNum;myNum = 15;cout << myNum;",
          "int myNum = 15;  // myNum is 15myNum = 10;  // Now myNum is 10cout << myNum;  // Outputs 10",
          "int myNum = 5;               \n  // Integer (whole number without decimals)double myFloatNum = 5.99;    \n  // Floating point number (with decimals)char myLetter = 'D';         \n  // Characterstring myText = \"Hello\";     \n  // String (text)bool \n  myBoolean = true;       // Boolean (true or \n  false)",
          "int myAge = 35;cout << \"I am \" << myAge << \" years old.\";",
          "int x = 5;int y = 6;int sum = x + y;cout << sum;"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_variables_multiple.asp",
    "cours": {
      "titre": "C++Declare Multiple Variables",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_variables_multiple.asp",
      "contenus": {
        "paragraphs": [
          "To declare more than one variable of thesame type, \nuse a comma-separated list:",
          "You can also assign thesame valueto multiple variables in one line:"
        ],
        "lists": [],
        "examples": [
          "int x = 5, y = 6, z = 50;cout << \n  x + y + z;",
          "int x, y, z;x = y = z = 50;cout << x + y + z;"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_variables_identifiers.asp",
    "cours": {
      "titre": "C++Identifiers",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_variables_identifiers.asp",
      "contenus": {
        "paragraphs": [
          "All C++variablesmust beidentifiedwithunique names.",
          "These unique names are calledidentifiers.",
          "Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).",
          "Note:It is recommended to use descriptive names in order to \ncreate understandable and maintainable code:",
          "The general rules for naming variables are:"
        ],
        "lists": [
          [
            "Names can contain letters, digits and underscores",
            "Names must begin with a letter or an underscore (_)",
            "Names are case-sensitive (myVarandmyvarare different variables)",
            "Names cannot contain whitespaces or special characters like !, #, %, etc.",
            "Reserved words (like C++ keywords, such asint) cannot be used as names"
          ]
        ],
        "examples": [
          "// Goodint minutesPerHour = 60;// OK, but not so easy to \n  understand whatmactually isint  \n  m = 60;"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_variables_constants.asp",
    "cours": {
      "titre": "C++Constants",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_variables_constants.asp",
      "contenus": {
        "paragraphs": [
          "When you do not want others (or yourself) to change existing variable values, use theconstkeyword (this will declare the \nvariable as \"constant\", which meansunchangeable and read-only):",
          "You should always declare the variable as constant when you have values that are unlikely to change:",
          "When you declare a constant variable, it must be assigned with a value:",
          "Like this:",
          "This however,will not work:"
        ],
        "lists": [],
        "examples": [
          "constint myNum = 15;  // myNum will always be 15myNum = 10;  // error: \n  assignment of read-only variable 'myNum'",
          "constint minutesPerHour = 60;constfloat PI = 3.14;",
          "const int minutesPerHour = 60;",
          "const int minutesPerHour;minutesPerHour = 60; // error"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_variables_reallife.asp",
    "cours": {
      "titre": "C++Variables Examples",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_variables_reallife.asp",
      "contenus": {
        "paragraphs": [
          "Let's get a bit more practical!",
          "Often in our examples, we simplify variable names to match their data type (myInt \nor myNum forinttypes, myChar forchartypes, \nand so on). This is done to avoid confusion.",
          "However, for a practical example of using variables, we have created a program that stores different data about a college student:",
          "In this real-life example, we create a program to calculate the area of a \nrectangle (by multiplying the length and width):"
        ],
        "lists": [],
        "examples": [
          "// Student dataint studentID = 15;int studentAge = 23;float \n  studentFee = 75.25;char studentGrade = 'B';// Print variablescout << \"Student ID: \" << studentID << \"\\n\";cout << \"Student \n  Age: \" << studentAge << \"\\n\";cout << \"Student Fee: \" << studentFee << \n  \"\\n\";cout << \"Student Grade: \" << studentGrade << \"\\n\";",
          "// Create integer variablesint length = 4;int width = 6;int \n  area;// Calculate the area of a rectanglearea = length * width;// Print the variablescout << \"Length is: \" << length << \"\\n\";cout << \"Width is: \" << width << \"\\n\";cout << \"Area of the \n  rectangle is: \" << area << \"\\n\";"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_user_input.asp",
    "cours": {
      "titre": "C++User Input",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_user_input.asp",
      "contenus": {
        "paragraphs": [
          "You have already learned thatcoutis used to output (print) values. Now we will usecinto get user input.",
          "cinis a predefined variable that reads data from the keyboard with the extraction operator (>>).",
          "In the following example, the user can input a number, which is stored in the \nvariablex. Then we print the value ofx:",
          "coutis pronounced \"see-out\". Used foroutput, and uses the insertion operator (<<)",
          "cinis pronounced \"see-in\". Used forinput, and uses the extraction operator (>>)",
          "In this example, the user must input two numbers. Then we print the \nsum by calculating (adding) the two numbers:",
          "There you go! You just built a basic calculator!",
          "Tip:Bothcinandcoutbelongs to the<iostream>library, \nwhich is short forstandardinput /outputstreams. For a complete reference of <iostream> objects along with detailed information, go to ourC++ iostream Reference."
        ],
        "lists": [],
        "examples": [
          "int x;cout << \"Type a number: \"; // Type a number and \n  press entercin >> x; // Get user \n  input from the keyboardcout << \"Your number is: \" << x; \n  // Display the input value",
          "int x, y;int sum;cout << \"Type a number: \";cin >> x;cout << \"Type another number: \";cin >> \n  y;sum = x + y;cout << \"Sum is: \" << sum;"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_data_types.asp",
    "cours": {
      "titre": "C++Data Types",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_data_types.asp",
      "contenus": {
        "paragraphs": [
          "As explained in theVariableschapter, a variable in C++ must be a specified data type:",
          "The data type specifies the size and type of information the variable will store:",
          "You will learn more about the individual data types in the next chapters."
        ],
        "lists": [],
        "examples": [
          "int myNum = 5;               \n  // Integer (whole number)float myFloatNum = 5.99;     \n  // Floating point numberdouble myDoubleNum = 9.98;   // Floating point numberchar myLetter = 'D';         \n  // Characterbool \n  myBoolean = true;       // Booleanstring myText = \"Hello\";     \n  // String"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_data_types_numeric.asp",
    "cours": {
      "titre": "C++Numeric Data Types",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_data_types_numeric.asp",
      "contenus": {
        "paragraphs": [
          "Useintwhen you need to store a whole number without decimals, like 35 or 1000, andfloatordoublewhen you need a \nfloating point number (with decimals), like 9.99 or 3.14515.",
          "floatvs.double",
          "Theprecisionof a floating point value indicates how many digits the value can have \nafter the decimal point.\nThe precision offloatis only six or seven \ndecimal digits, whiledoublevariables have a precision \nof about 15 digits. Therefore it is safer to usedoublefor most calculations.",
          "A floating point number can also be a scientific number with an \"e\" to indicate the power of 10:"
        ],
        "lists": [],
        "examples": [
          "int myNum = 1000;cout << myNum;",
          "float myNum = 5.75;cout << myNum;",
          "double myNum = 19.99;cout << myNum;",
          "float f1 = 35e3;double d1 = 12E4;cout << f1;cout << d1;"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_data_types_bool.asp",
    "cours": {
      "titre": "C++Boolean Data Types",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_data_types_bool.asp",
      "contenus": {
        "paragraphs": [
          "A boolean data type is declared with theboolkeyword and can only take the valuestrueorfalse.",
          "When the value is returned,true=1andfalse=0.",
          "Boolean values are mostly used for conditional testing, which you will learn more about in a later chapter."
        ],
        "lists": [],
        "examples": [
          "bool isCodingFun = true;bool isFishTasty = false;cout << isCodingFun;  \n  // Outputs 1 (true)cout << isFishTasty;  // Outputs 0 (false)"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_data_types_char.asp",
    "cours": {
      "titre": "C++Character Data Types",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_data_types_char.asp",
      "contenus": {
        "paragraphs": [
          "Thechardata type is used to store asinglecharacter. The character must be \nsurrounded by single quotes, like 'A' or 'c':",
          "Alternatively, if you are familiar with ASCII, you can use ASCII values to display certain characters:",
          "Tip:A list of all ASCII values can be found in ourASCII Table Reference."
        ],
        "lists": [],
        "examples": [
          "char myGrade = 'B';cout << myGrade;",
          "char a = 65, b = 66, c = 67;cout << a;cout << b;cout << c;"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_data_types_string.asp",
    "cours": {
      "titre": "C++String Data Types",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_data_types_string.asp",
      "contenus": {
        "paragraphs": [
          "Thestringtype is used to store a sequence of characters (text). \nThis is not a built-in type, but it behaves like one in its most basic usage. String values must be surrounded by double quotes:",
          "To use strings, you must include an additional header file in the source \ncode, the<string>library:",
          "You will learn much more about strings in ourC++ Strings Chapter."
        ],
        "lists": [],
        "examples": [
          "string greeting = \"Hello\";cout << greeting;",
          "// Include the string library#include <string>// Create a string variablestring greeting = \"Hello\";// Output string valuecout << greeting;"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_data_types_reallife.asp",
    "cours": {
      "titre": "C++Data Types Examples",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_data_types_reallife.asp",
      "contenus": {
        "paragraphs": [
          "Here's a real-life example of using different data types, to calculate and output the total cost of a number of items:"
        ],
        "lists": [],
        "examples": [
          "// Create variables of different data typesint items = 50;double \n  cost_per_item = 9.99;double total_cost = items * cost_per_item;char \n  currency = '$';// Print variablescout << \"Number of items: \" << \n  items << \"\\n\";cout << \"Cost per item: \" << cost_per_item << \"\" << \n  currency << \"\\n\";cout << \"Total cost = \" << total_cost << \"\" << currency \n  << \"\\n\";"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_operators.asp",
    "cours": {
      "titre": "C++Operators",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_operators.asp",
      "contenus": {
        "paragraphs": [
          "Operators are used to perform operations on variables and values.",
          "In the example below, we use the+operatorto add together two values:",
          "Although the+operator is often used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and another variable:",
          "C++ divides the operators into the following groups:",
          "Arithmetic operators are used to perform common mathematical operations."
        ],
        "lists": [
          [
            "Arithmetic operators",
            "Assignment operators",
            "Comparison operators",
            "Logical operators",
            "Bitwise operators"
          ]
        ],
        "examples": [
          "int x = 100 + 50;",
          "int sum1 = 100 + 50;        \n  // 150 (100 + 50)int sum2 = sum1 + 250;      // 400 (150 + 250)int sum3 = sum2 + sum2;     // 800 (400 + 400)"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_operators_assignment.asp",
    "cours": {
      "titre": "C++Assignment Operators",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_operators_assignment.asp",
      "contenus": {
        "paragraphs": [
          "Assignment operators are used to assign values to variables.",
          "In the example below, we use theassignmentoperator (=) \nto assign the value10to a variable calledx:",
          "Theaddition assignmentoperator (+=) adds a value to a variable:",
          "A list of all assignment operators:"
        ],
        "lists": [],
        "examples": [
          "int x = 10;",
          "int x = 10;x += 5;"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_operators_comparison.asp",
    "cours": {
      "titre": "C++Comparison Operators",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_operators_comparison.asp",
      "contenus": {
        "paragraphs": [
          "Comparison operators are used to compare two values (or variables). This is important in programming, because it helps us to find answers and make decisions.",
          "The return value of a comparison is either1or0, which meanstrue(1) orfalse(0). These values are known asBoolean values, and you will learn more about them in theBooleansandIf..Elsechapter.",
          "In the following example, we use thegreater thanoperator (>) to find out if 5 is greater than 3:",
          "A list of all comparison operators:",
          "You will learn much more about comparison operators and how to use them in a later chapter."
        ],
        "lists": [],
        "examples": [
          "int x = 5;int y = 3;cout << (x > y); // returns 1 (true) because 5 is greater than 3"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_operators_logical.asp",
    "cours": {
      "titre": "C++Logical Operators",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_operators_logical.asp",
      "contenus": {
        "paragraphs": [
          "As withcomparison operators, you can also test fortrue(1) orfalse(0) values withlogical operators.",
          "Logical operators are used to determine the logic between variables or \nvalues:",
          "You will learn much more abouttrueandfalsevalues in a later chapter."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_strings.asp",
    "cours": {
      "titre": "C++Strings",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_strings.asp",
      "contenus": {
        "paragraphs": [
          "Strings are used for storing text/characters.",
          "For example, \"Hello World\" is a string.",
          "Astringvariable contains a collection of characters surrounded by double quotes:",
          "Create a variable of typestringand assign it a value:",
          "To use strings, you must include an additional header file in the source \ncode, the<string>library:"
        ],
        "lists": [],
        "examples": [
          "string greeting = \"Hello\";",
          "// Include the string library#include <string>// Create a string variablestring greeting = \"Hello\";"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_strings_concat.asp",
    "cours": {
      "titre": "C++String Concatenation",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_strings_concat.asp",
      "contenus": {
        "paragraphs": [
          "The+operator can be used between strings to add them together to make a new \nstring. This is calledconcatenation:",
          "In the example above, we added a space after firstName to create a space \nbetween John and Doe on output. However, you could also add a space with quotes (\" \"or' '):",
          "A string in C++ is actually an object, which contain functions that can perform certain operations on strings. For example, you can also concatenate strings with theappend()function:",
          "Tip:A list of other useful string functions, can be found in ourString Functions Reference."
        ],
        "lists": [],
        "examples": [
          "string firstName = \"John \";string lastName = \"Doe\";string fullName = \n  firstName + lastName;cout << fullName;",
          "string firstName = \"John\";string lastName = \"Doe\";string fullName = \n  firstName + \" \" + lastName;cout << fullName;",
          "string firstName = \"John \";string lastName = \"Doe\";string fullName = \n  firstName.append(lastName);cout << fullName;"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_strings_numbers.asp",
    "cours": {
      "titre": "C++Numbers and Strings",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_strings_numbers.asp",
      "contenus": {
        "paragraphs": [
          "WARNING!",
          "C++ uses the+operator for bothadditionandconcatenation.",
          "Numbers are added. Strings are concatenated.",
          "If you add two numbers, the result will be a number:",
          "If you add two strings, the result will be a string concatenation:",
          "If you try to add a number to a string, an error occurs:"
        ],
        "lists": [],
        "examples": [
          "int x = 10;int y = 20;int z = x + y;      // z will be 30 (an integer)",
          "string x = \"10\";string y = \"20\";string z = x + y;   // z will be 1020 (a string)",
          "string x = \"10\";int y = 20;string z = x + y;"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_strings_length.asp",
    "cours": {
      "titre": "C++String Length",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_strings_length.asp",
      "contenus": {
        "paragraphs": [
          "To get the length of a string, use thelength()function:",
          "Tip:You might see some C++ programs that use thesize()function to get the length of a string. This is \njust an alias oflength(). It is completely up to you if you want to uselength()orsize():"
        ],
        "lists": [],
        "examples": [
          "string txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";cout << \"The length of the txt \n  string is: \" << txt.length();",
          "string txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";cout << \"The length of the txt \n  string is: \" << txt.size();"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_strings_access.asp",
    "cours": {
      "titre": "C++Access Strings",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_strings_access.asp",
      "contenus": {
        "paragraphs": [
          "You can access the characters in a string by referring to its index number \ninside square brackets[].",
          "This example prints thefirst characterinmyString:",
          "Note:String indexes start with 0: [0] is the first character. [1] is the second \ncharacter, etc.",
          "This example prints thesecond characterinmyString:",
          "To print the last character of a string, you can use the following code:",
          "To change the value of a specific character in a string, refer to the index \nnumber, and use single quotes:",
          "The<string>library also has anat()function that can be used \nto access characters in a string:",
          "Tip:A list of other useful string functions, can be found in ourString Functions Reference."
        ],
        "lists": [],
        "examples": [
          "string \n  myString = \"Hello\";cout << myString[0];// Outputs H",
          "string \n  myString = \"Hello\";cout << myString[1];// Outputs e",
          "string \n  myString = \"Hello\";cout << myString[myString.length() - 1];// Outputs o",
          "string \n  myString = \"Hello\";myString[0] = 'J';cout << myString;// \n  Outputs Jello instead of Hello",
          "string myString = \"Hello\";cout << myString; // Outputs Hellocout << myString.at(0);  // First charactercout << myString.at(1);  // \n  Second charactercout << myString.at(myString.length() - 1);  // Last \n  charactermyString.at(0) = 'J';cout << myString;  // Outputs Jello"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_strings_esc.asp",
    "cours": {
      "titre": "C++Special Characters",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_strings_esc.asp",
      "contenus": {
        "paragraphs": [
          "Because strings must be written within quotes, C++ will misunderstand this string, \nand generate an error:",
          "The solution to avoid this problem, is to use thebackslash escape character.",
          "The backslash (\\) escape character turns special characters into string characters:",
          "The sequence\\\"inserts a double quote in a string:Examplestring txt = \"We are the so-called \\\"Vikings\\\" from the north.\";Try it Yourself »The sequence\\'inserts a single quote in a string:Examplestring txt = \"It\\'s alright.\";Try it Yourself »The sequence\\\\inserts a single backslash in a string:Examplestring txt = \"The character \\\\ is called backslash.\";Try it Yourself »Other popular escape characters in C++ are:Escape CharacterResultTry it\\nNew LineTry it »\\tTabTry it »❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "Examplestring txt = \"We are the so-called \\\"Vikings\\\" from the north.\";Try it Yourself »The sequence\\'inserts a single quote in a string:Examplestring txt = \"It\\'s alright.\";Try it Yourself »The sequence\\\\inserts a single backslash in a string:Examplestring txt = \"The character \\\\ is called backslash.\";Try it Yourself »Other popular escape characters in C++ are:Escape CharacterResultTry it\\nNew LineTry it »\\tTabTry it »❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "The sequence\\'inserts a single quote in a string:Examplestring txt = \"It\\'s alright.\";Try it Yourself »The sequence\\\\inserts a single backslash in a string:Examplestring txt = \"The character \\\\ is called backslash.\";Try it Yourself »Other popular escape characters in C++ are:Escape CharacterResultTry it\\nNew LineTry it »\\tTabTry it »❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "Examplestring txt = \"It\\'s alright.\";Try it Yourself »The sequence\\\\inserts a single backslash in a string:Examplestring txt = \"The character \\\\ is called backslash.\";Try it Yourself »Other popular escape characters in C++ are:Escape CharacterResultTry it\\nNew LineTry it »\\tTabTry it »❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "The sequence\\\\inserts a single backslash in a string:Examplestring txt = \"The character \\\\ is called backslash.\";Try it Yourself »Other popular escape characters in C++ are:Escape CharacterResultTry it\\nNew LineTry it »\\tTabTry it »❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "Examplestring txt = \"The character \\\\ is called backslash.\";Try it Yourself »Other popular escape characters in C++ are:Escape CharacterResultTry it\\nNew LineTry it »\\tTabTry it »❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "Other popular escape characters in C++ are:"
        ],
        "lists": [],
        "examples": [
          "string txt = \"We are the so-called \"Vikings\" from the north.\";",
          "string txt = \"We are the so-called \\\"Vikings\\\" from the north.\";",
          "string txt = \"It\\'s alright.\";",
          "string txt = \"The character \\\\ is called backslash.\";"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_strings_input.asp",
    "cours": {
      "titre": "C++User Input Strings",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_strings_input.asp",
      "contenus": {
        "paragraphs": [
          "It is possible to use the extraction operator>>oncinto \nstore a string entered by a user:",
          "However,cinconsiders a space (whitespace, tabs, etc) as a terminating \ncharacter, which means that it can only store a single word (even if you type \nmany words):",
          "From the example above, you would expect the program to print \"John Doe\", but it only prints \"John\".That's why, when working with strings, we often use thegetline()function to read a line of text. It takescinas the first parameter, and the string \nvariable as second:"
        ],
        "lists": [],
        "examples": [
          "string firstName;cout << \"Type your first name: \";cin >> \n  firstName; \n  // get user input from the keyboardcout << \"Your name is: \" << \n  firstName;// Type your first name: John// Your name is: John",
          "string fullName;cout << \"Type your full name: \";cin >> \n  fullName;cout << \"Your name is: \" << \n  fullName;// Type your full name: John Doe// Your name is: John",
          "string fullName;cout << \"Type your full name: \";getline (cin, fullName);cout << \"Your name is: \" << \n  fullName;// Type your full name: John Doe// Your name is: John Doe"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_strings_namespace.asp",
    "cours": {
      "titre": "C++String Namespace",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_strings_namespace.asp",
      "contenus": {
        "paragraphs": [
          "You might see some C++ programs that run without the standard namespace library. Theusing namespace stdline can be omitted and replaced with thestdkeyword, \nfollowed by the::operator \nforstring(andcout) objects:",
          "It is up to you if you want to include the standard namespace library or not.",
          "In our tutorial, we will continue to include the library."
        ],
        "lists": [],
        "examples": [
          "#include <iostream>#include <string>// using namespace \n  std; - Remove this lineint main() {std::string greeting = \"Hello\";std::cout \n  << greeting;return 0;}"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_strings_cstyle.asp",
    "cours": {
      "titre": "C++C-Style Strings",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_strings_cstyle.asp",
      "contenus": {
        "paragraphs": [
          "C-style strings are created with thechartype instead ofstring.",
          "The name comes from theC language, which, unlike many other programming languages, does not have astringtype \nfor easily creating string variables. Instead, you must use thechartype and create anarrayof characters to make a \"string\" in C.",
          "As C++ was developed as an extension of C, it continued to support this way of creating strings in C++:",
          "Note:It is more convenient to work with the standardstringtype, rather than C-style strings. However, one reason some users continue to \nuse C-style strings is that \nthey have access to functions from the C standard library.",
          "A list of all C-style string functions, can be found in ourCString Functions Reference."
        ],
        "lists": [],
        "examples": [
          "string greeting1 = \"Hello\";  // Regular Stringchar greeting2[] = \n  \"Hello\";  // C-Style String (an array of characters)"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_math.asp",
    "cours": {
      "titre": "C++Math",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_math.asp",
      "contenus": {
        "paragraphs": [
          "C++ has many functions that allows you to perform mathematical tasks on numbers.",
          "Themax(x,y)function can be used to find the highest value ofxandy:",
          "And themin(x,y)function can be used to find the lowest value ofxandy:",
          "Other functions, such assqrt(square root),round(rounds a number) andlog(natural logarithm), can be found in the<cmath>header \nfile:",
          "For a complete reference of Math functions, go to ourC++ Math Reference."
        ],
        "lists": [],
        "examples": [
          "cout << max(5, 10);",
          "cout << min(5, 10);",
          "// Include the cmath library#include <cmath>cout << \n  sqrt(64);cout << round(2.6);cout << log(2);"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_booleans.asp",
    "cours": {
      "titre": "C++Booleans",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_booleans.asp",
      "contenus": {
        "paragraphs": [
          "Very often, in programming, you will need a data type that can only have one of two values, like:",
          "For this, C++ has abooldata type, which can take the valuestrue(1) orfalse(0).",
          "A boolean variable is declared with theboolkeyword and can take the valuestrueorfalse:",
          "From the example above, you can read that atruevalue returns1, andfalsereturns0.",
          "However, it is more common to return a boolean value bycomparingvalues and variables (see next page)."
        ],
        "lists": [
          [
            "YES / NO",
            "ON / OFF",
            "TRUE / FALSE"
          ]
        ],
        "examples": [
          "bool isCodingFun = true;bool isFishTasty = false;cout << isCodingFun;  \n  // Outputs 1 (true)cout << isFishTasty;  // Outputs 0 (false)"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_booleans_expressions.asp",
    "cours": {
      "titre": "C++Boolean Expressions",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_booleans_expressions.asp",
      "contenus": {
        "paragraphs": [
          "ABoolean expressionreturns a boolean value, which is either1(true) or0(false).",
          "This is useful for building logic and finding answers.",
          "You can use acomparison operator, such as thegreater than(>) operator, \nto find out if an expression (or variable) is true or false:",
          "Or even easier:",
          "In the examples below, we use theequal to(==) operator to evaluate an expression:"
        ],
        "lists": [],
        "examples": [
          "int x = 10;int y = 9;cout << (x > y); // returns 1 (true), because 10 is higher than 9",
          "cout << (10 > 9); // returns 1 (true), because 10 is higher than 9",
          "int x = 10;cout << (x == 10);  // returns 1 (true), because the value \n  of x is equal to 10",
          "cout << (10 == 15);  // returns \n  0 (false), because 10 is not equal to 15"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_booleans_reallife.asp",
    "cours": {
      "titre": "C++Boolean Examples",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_booleans_reallife.asp",
      "contenus": {
        "paragraphs": [
          "Let's think of a \"real life example\" where we need to find out if a person is old enough to vote.",
          "In the example below, we use the>=comparison operator to find out if the age (25) isgreater than OR equal tothe voting age limit, which is set to18:",
          "Cool, right? An even better approach (since we are on a roll now), would be to wrap the code above in anif...elsestatement, so we can perform \ndifferent actions depending on the result:",
          "Output \"Old enough to vote!\" ifmyAgeisgreater than or equal to18. Otherwise output \"Not old enough to vote.\":",
          "Booleans are the basis for all C++ comparisons and conditions.",
          "You will learn more aboutconditions (if...else)in the next chapter."
        ],
        "lists": [],
        "examples": [
          "int myAge = 25;int votingAge = 18;cout << (myAge >= votingAge); \n  // returns 1 (true), meaning 25 year olds are allowed to vote!",
          "int myAge = 25;int votingAge = 18;if (myAge >= votingAge) {cout << \"Old enough to vote!\";} else {cout << \"Not old enough to vote.\";}// Outputs: Old enough to vote!"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_conditions.asp",
    "cours": {
      "titre": "C++If ... Else",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_conditions.asp",
      "contenus": {
        "paragraphs": [
          "You already know that C++ supports the usual logical conditions from mathematics:",
          "You can use these conditions to perform different actions for different decisions.",
          "C++ has the following conditional statements:",
          "Use theifstatement to specify a block of \nC++ code to be executed if a condition istrue.",
          "Note thatifis in lowercase letters. Uppercase letters (If or IF) will generate an error.",
          "In the example below, we test two values to find out if 20 is greater than \n18. If the condition istrue, print some text:",
          "We can also test variables:",
          "In the example above we use two variables,xandy, \nto test whether x is greater than y \n(using the>operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that \"x is greater than y\"."
        ],
        "lists": [
          [
            "Less than:a < b",
            "Less than or equal to:a <= b",
            "Greater than:a > b",
            "Greater than or equal to:a >= b",
            "Equal toa == b",
            "Not Equal to:a != b"
          ],
          [
            "Useifto specify a block of code to be executed, if a specified condition is true",
            "Useelseto specify a block of code to be executed, if the same condition is false",
            "Useelse ifto specify a new condition to test, if the first condition is false",
            "Useswitchto specify many alternative blocks of code to be executed"
          ]
        ],
        "examples": [
          "if (condition) {// block of code to be executed if the \n  condition is true}",
          "if (20 > 18) {cout << \"20 is greater than 18\";}",
          "int x = 20;int y = 18;if (x > y) {cout << \"x is greater than \n  y\";}"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_conditions_else.asp",
    "cours": {
      "titre": "C++Else",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_conditions_else.asp",
      "contenus": {
        "paragraphs": [
          "Use theelsestatement to specify a block of code to be executed if the condition isfalse.",
          "In the example above, time (20) is greater than 18, so the condition isfalse. \nBecause of this, we move on to theelsecondition and print to the screen \"Good \nevening\". If the time was less than 18, the program would print \"Good day\"."
        ],
        "lists": [],
        "examples": [
          "if (condition) {// block of code to be executed if the \n  condition is true} else {// block of code to be executed \n  if the condition is false}",
          "int time = 20;if (time < 18) {cout << \"Good \n  day.\";} else {cout << \"Good \n  evening.\";}// Outputs \"Good evening.\""
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_conditions_elseif.asp",
    "cours": {
      "titre": "C++Else If",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_conditions_elseif.asp",
      "contenus": {
        "paragraphs": [
          "Use theelse ifstatement to specify a new condition if the first condition isfalse.",
          "In the example above, time (22) is greater than 10, so thefirst conditionisfalse. The next condition, in theelse ifstatement, is alsofalse, so we move on to theelsecondition sincecondition1andcondition2is bothfalse- and print to the screen \"Good \nevening\".",
          "However, if the time was 14, our program would print \"Good day.\""
        ],
        "lists": [],
        "examples": [
          "if (condition1) {// block of code to be executed if \n  condition1 is true} else if (condition2) {// block of \n  code to be executed if the condition1 is false and condition2 is true} else {// block of code to be executed if the condition1 is false \n  and condition2 is false}",
          "int time = 22;if (time < 10) {cout << \"Good \n  morning.\";} else if (time < 20) {cout << \"Good \n  day.\";} else {cout << \"Good evening.\";}// Outputs \"Good evening.\""
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_conditions_shorthand.asp",
    "cours": {
      "titre": "C++Short Hand If Else",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_conditions_shorthand.asp",
      "contenus": {
        "paragraphs": [
          "There is also a short-hand if else, which is known as theternary operatorbecause it consists of three operands.",
          "It can be used to replace multiple lines \nof code with a single line, and is often used to replace simple if else \nstatements:",
          "Instead of writing:",
          "You can simply write:"
        ],
        "lists": [],
        "examples": [
          "variable= (condition) ?expressionTrue:expressionFalse;",
          "int time = 20;if (time < 18) {cout << \"Good \n  day.\";} else {cout << \"Good \n  evening.\";}",
          "int time = 20;string result = (time < 18) ? \"Good day.\" : \"Good evening.\";cout << result;"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_conditions_reallife.asp",
    "cours": {
      "titre": "C++If ... Else Examples",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_conditions_reallife.asp",
      "contenus": {
        "paragraphs": [
          "This example shows how you can useif..elseto \"open a door\" if the user enters the correct code:",
          "This example shows how you can useif..elseto find out if a number is positive or negative:",
          "Find out if a person is old enough to vote:",
          "Find out if a number is even or odd:"
        ],
        "lists": [],
        "examples": [
          "int doorCode = 1337;if (doorCode == 1337) {cout << \"Correct \n  code.\\nThe door is now open.\\n\";} else {cout << \"Wrong \n  code.\\nThe door remains closed.\\n\";}",
          "int myNum = 10; // Is this a positive or negative number?if (myNum > \n  0) {cout << \"The value is a positive number.\\n\";} else if \n  (myNum < 0) {cout << \"The value is a negative number.\\n\";} else \n  {cout << \"The value is 0.\\n\";}",
          "int myNum = 10; // Is this a positive or negative number?if (myNum > \n  0) {cout << \"The value is a positive number.\\n\";} else if \n  (myNum < 0) {cout << \"The value is a negative number.\\n\";} else \n  {cout << \"The value is 0.\\n\";}",
          "int myNum = 5;if (myNum % 2 == 0) {cout << myNum << \" is \n  even.\\n\";} else {cout << myNum << \" is odd.\\n\";}"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_switch.asp",
    "cours": {
      "titre": "C++Switch",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_switch.asp",
      "contenus": {
        "paragraphs": [
          "Use theswitchstatement to select one of many code blocks to be executed.",
          "This is how it works:",
          "The example below uses the weekday number to calculate the weekday name:",
          "When C++ reaches abreakkeyword, it breaks out of the switch block.",
          "This will stop the execution of more code and case testing inside \nthe block.",
          "When a match is found, and the job is done, it's time for a break. There is no need for more testing.",
          "A break can save a lot of execution time because it \"ignores\" the execution \nof all the rest of the code in the switch block.",
          "Thedefaultkeyword specifies some code to run if there is no \ncase match:"
        ],
        "lists": [
          [
            "Theswitchexpression is evaluated once",
            "The value of the expression is compared with the values of eachcase",
            "If there is a match, the associated block of code is executed",
            "Thebreakanddefaultkeywords are optional, and will be described later in this chapter"
          ]
        ],
        "examples": [
          "switch(expression) {case x:// code \n  blockbreak;case y:// code blockbreak;default:// code block}",
          "int day = 4;switch (day) {case 1:cout << \"Monday\";break;case 2:cout << \"Tuesday\";break;case 3:cout << \"Wednesday\";break;case \n  4:cout << \"Thursday\";break;case 5:cout << \"Friday\";break;case 6:cout << \"Saturday\";break;case 7:cout << \"Sunday\";break;}// Outputs \"Thursday\" (day 4)",
          "int day = 4;switch (day) {case 6:cout << \"Today \n  is Saturday\";break;case 7:cout << \"Today \n  is Sunday\";break;default:cout << \"Looking \n  forward to the Weekend\";}// Outputs \"Looking forward to the Weekend\""
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_while_loop.asp",
    "cours": {
      "titre": "C++While Loop",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_while_loop.asp",
      "contenus": {
        "paragraphs": [
          "Loops can execute a block of code as long as a specified condition is reached.",
          "Loops are handy because they save time, reduce errors, and they make code more readable.",
          "Thewhileloop loops through a block of code as long as a specified condition istrue:",
          "In the example below, the code in the loop will run, over and over again, as long as \na variable (i) is less than 5:",
          "Note:Do not forget to increase the variable used in the condition, otherwise \nthe loop will never end!"
        ],
        "lists": [],
        "examples": [
          "while (condition) {// code block to be executed}",
          "int i = 0;while (i < 5) {cout << i << \"\\n\";i++;}"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_do_while_loop.asp",
    "cours": {
      "titre": "C++Do/While Loop",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_do_while_loop.asp",
      "contenus": {
        "paragraphs": [
          "Thedo/whileloop is a variant of thewhileloop. This loop will \nexecute the code block once, before checking if the condition is true, then it will\nrepeat the loop as long as the condition is true.",
          "The example below uses ado/whileloop. The loop will always be \nexecuted at least once, even if the condition is false, because the code block \nis executed before the condition is tested:",
          "Do not forget to increase the variable used in the condition, otherwise \nthe loop will never end!"
        ],
        "lists": [],
        "examples": [
          "do {// code block to be executed}while (condition);",
          "int i = 0;do {cout << i << \"\\n\";i++;}while (i < 5);"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_while_loop_reallife.asp",
    "cours": {
      "titre": "C++While Loop Examples",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_while_loop_reallife.asp",
      "contenus": {
        "paragraphs": [
          "To demonstrate a practical example of the while loop, we have created a simple \"countdown\" program:",
          "In this example, we create a program that only print even numbers between 0 and 10 (inclusive):",
          "In this example we use a while loop to reverse some numbers:",
          "To demonstrate a practical example of the while loop combined with an if else statement, let's say we play a game of Yatzy:",
          "If the loop passes the values ranging from 1 to 5, it prints \"No Yatzy\". Whenever it passes the value 6, it prints \"Yatzy!\"."
        ],
        "lists": [],
        "examples": [
          "int countdown = 3;while (countdown > 0) {cout << countdown \n  << \"\\n\";countdown--;}cout << \"Happy New Year!!\\n\";",
          "int i = 0;while (i <= 10) {cout << i << \"\\n\";i \n  += 2;}",
          "// A variable with some specific numbersint numbers = 12345;// A \n  variable to store the reversed numberint revNumbers = 0;// Reverse \n  and reorder the numberswhile (numbers) {// Get the last number \n  of 'numbers' and add it to 'revNumbers'revNumbers = revNumbers * 10 \n  + numbers % 10;// Remove the last number of 'numbers'numbers /= 10;}cout << \"Reversed numbers: \" << revNumbers << \"\\n\";",
          "int dice = 1;while (dice <= 6) {if (dice < 6) {cout << \"No Yatzy\\n\";} else {cout << \n  \"Yatzy!\\n\";}dice = dice + 1;}"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_for_loop.asp",
    "cours": {
      "titre": "C++For Loop",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_for_loop.asp",
      "contenus": {
        "paragraphs": [
          "When you know exactly how many times you want to loop through a block of \ncode, use theforloop instead of awhileloop:",
          "Statement 1is executed (one time) before the execution of the code block.",
          "Statement 2defines the condition for executing the code block.",
          "Statement 3is executed (every time) after the code block has been executed.",
          "The example below will print the numbers 0 to 4:",
          "Statement 1 sets a variable before the loop starts (int i = 0).",
          "Statement 2 defines the condition for the loop to run (i must be less than \n5). If the condition is true, the loop will start over again, if it is false, \nthe loop will end.",
          "Statement 3 increases a value (i++) each time the code block in the loop has \nbeen executed.",
          "This example will only print even values between 0 and 10:"
        ],
        "lists": [],
        "examples": [
          "for (statement 1;statement 2;statement 3) {// code block to be executed}",
          "for (int i = 0; i < 5; i++) {cout << i << \"\\n\";}",
          "for (int i = 0; i <= 10; i = i + 2) {cout << i << \"\\n\";}"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_for_loop_nested.asp",
    "cours": {
      "titre": "C++Nested Loops",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_for_loop_nested.asp",
      "contenus": {
        "paragraphs": [
          "It is also possible to place a loop inside another loop. This is called anested loop.",
          "The \"inner loop\" will be executed one time for each iteration of the \"outer loop\":"
        ],
        "lists": [],
        "examples": [
          "// Outer loopfor (int i = 1; i <= 2; ++i) {cout << \"Outer: \" << i << \"\\n\"; // Executes 2 times// Inner \n  loopfor (int j = 1; j <= 3; ++j) {cout << \" \n  Inner: \" << j << \"\\n\"; // Executes 6 times (2 * 3)}}"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_for_loop_foreach.asp",
    "cours": {
      "titre": "C++The foreach Loop",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_for_loop_foreach.asp",
      "contenus": {
        "paragraphs": [
          "There is also a \"for-eachloop\" (also known as ranged-based for loop), which is \nused exclusively to loop through elements in anarray(or otherdata structures):",
          "The following example outputs all elements in an array, using a \"for-eachloop\":",
          "Note:Don't worry if you don't understand the example above. You will learn more about arrays in theC++ Arrays chapter.Good to know: Thefor-eachloop was introduced in C++ version 11 (2011).",
          "Good to know: Thefor-eachloop was introduced in C++ version 11 (2011)."
        ],
        "lists": [],
        "examples": [
          "for (type variableName:arrayName) {// code block to be executed}",
          "int myNumbers[5] = {10, 20, 30, 40, 50};for (int i : myNumbers) {cout << i << \"\\n\";}"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_for_loop_reallife.asp",
    "cours": {
      "titre": "C++For Loop Examples",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_for_loop_reallife.asp",
      "contenus": {
        "paragraphs": [
          "To demonstrate a practical example of the for loop, let's create a program that counts to 100 by tens:",
          "In this example, we create a program that only print even numbers between 0 and 10 (inclusive):",
          "Here we only print odd numbers:",
          "In this example we print the powers of 2 up to 512:",
          "And in this example, we create a program that prints the multiplication table for a specified number:"
        ],
        "lists": [],
        "examples": [
          "for (int i = 0; i <= 100; i += 10) {cout << i << \"\\n\";}",
          "for (int i = 0; i <= 10; i = i + 2) {cout << i << \"\\n\";}",
          "for (int i = 1; i <= 10; i = i + 2) {cout << i << \"\\n\";}",
          "for (int i = 2; i <= 512; i *= 2) {cout << i << \"\\n\";}",
          "int number = 2;int i;// Print the multiplication table for the \n  number 2for (i = 1; i <= 10; i++) {cout << number << \" x \" << i \n  << \" = \" << number * i << \"\\n\";}"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_break.asp",
    "cours": {
      "titre": "C++Break and Continue",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_break.asp",
      "contenus": {
        "paragraphs": [
          "You have already seen thebreakstatement used in an earlier chapter of this tutorial. It was used to \"jump out\" of aswitchstatement.",
          "Thebreakstatement can also be used to jump out of aloop.",
          "This example jumps out of the loop wheniis equal to 4:",
          "Thecontinuestatement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.",
          "This example skips the value of 4:",
          "You can also usebreakandcontinuein while loops:"
        ],
        "lists": [],
        "examples": [
          "for (int i = 0; i < 10; i++) {if (i == 4) {break;}cout << i << \"\\n\";}",
          "for (int i = 0; i < 10; i++) {if (i == 4) {continue;}cout << i << \"\\n\";}",
          "int i = 0;while (i < 10) {cout << i << \"\\n\";i++;if (i == 4) {break;}}",
          "int i = 0;while (i < 10) {if (i == 4) {i++;continue;}cout << i << \"\\n\";i++;}"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_arrays.asp",
    "cours": {
      "titre": "C++Arrays",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_arrays.asp",
      "contenus": {
        "paragraphs": [
          "Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each \nvalue.",
          "To declare an array, define the variable type, specify the name \nof the array followed bysquare bracketsand specify the number of elements it should store:",
          "We have now declared a variable that holds an array of four strings. To insert \nvalues to it, we can use an array literal - place the values in a \ncomma-separated list, inside curly braces:",
          "To create an array of three integers, you could write:",
          "You access an array element by referring to the index number inside square \nbrackets[].",
          "This statement accesses the value of thefirst elementincars:",
          "Note:Array indexes start with 0: [0] is the first element. [1] is the second \nelement, etc.",
          "To change the value of a specific element, refer to the index number:"
        ],
        "lists": [],
        "examples": [
          "string cars[4];",
          "string cars[4] = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};",
          "int myNum[3] = {10, 20, 30};",
          "string cars[4] = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cout << cars[0];// Outputs Volvo",
          "cars[0] = \"Opel\";",
          "string cars[4] = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cars[0] = \"Opel\";cout << cars[0];// Now outputs Opel instead of Volvo"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_arrays_loop.asp",
    "cours": {
      "titre": "C++Arrays and Loops",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_arrays_loop.asp",
      "contenus": {
        "paragraphs": [
          "You can loop through the array elements with theforloop.",
          "The following example outputs all elements in thecarsarray:",
          "This example outputs the index of each element together with its value:",
          "And this example shows how to loop through an array of integers:",
          "There is also a \"for-eachloop\" (introduced in C++ version 11 (2011)), which is used exclusively to loop through elements in an array (and other data structures, likevectorsandlists):",
          "The following examples output all elements in an array using a \"for-eachloop\":",
          "Loop through integers:",
          "Loop through strings:"
        ],
        "lists": [],
        "examples": [
          "// Create an array of stringsstring cars[5] = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\", \n  \"Tesla\"};// Loop through stringsfor (int i = 0; i < 5; \n  i++) {cout << cars[i] << \"\\n\";}",
          "string cars[5] = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\", \n  \"Tesla\"};for (int i = 0; i < 5; \n  i++) {cout << i << \" = \" << cars[i] << \"\\n\";}",
          "int myNumbers[5] = {10, 20, 30, 40, 50};for (int i = 0; i < 5; i++) {cout << myNumbers[i] << \"\\n\";}",
          "for (type variableName:arrayName) {// code block to be executed}",
          "// Create an array of integersint myNumbers[5] = {10, 20, 30, 40, 50};// Loop through integersfor (int i : myNumbers) {cout << i << \"\\n\";}",
          "// Create an array of stringsstring cars[5] = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\", \"Tesla\"};// Loop through stringsfor (string \n  car : cars) {cout << car << \"\\n\";}"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_arrays_omit.asp",
    "cours": {
      "titre": "C++Omit Array Size",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_arrays_omit.asp",
      "contenus": {
        "paragraphs": [
          "In C++, you don't have to specify the size of the array. The compiler is \nsmart enough to determine the size of the array based on the number of inserted values:",
          "The example above is equal to:",
          "However, the last approach is considered as \"good practice\", because it will reduce \nthe chance of errors in your program.",
          "It is also possible to declare an array without specifying the elements on \ndeclaration, and add them later:",
          "Note:The example above only works when you have specified the size of the array.",
          "If you don't specify the array size, an error occurs:",
          "You will often hear the terms \"fixed size\" and \"dynamic size\" when discussing \narrays in C++.",
          "This is because the size of an array in C++ is fixed, meaning youcannotaddorremoveelements \nafter it is created.",
          "For operations that require adding and removing array elements, C++ providesvectors, which areresizable arrays.",
          "The size of a vector is dynamic, meaning it can grow and shrink as needed.",
          "Vectors are found in the<vector>library, and they come with many useful \nfunctions to add, remove and modify elements:",
          "This was just an introduction tovectorsto let you know that \n\"resizable \narrays\" exist.",
          "Don't worry if you don't understand the syntax above.",
          "You will learn much more about vectors and other data structures ina later chapter."
        ],
        "lists": [],
        "examples": [
          "string cars[] = {\"Volvo\", \"BMW\", \"Ford\"}; // Three array elements",
          "string cars[3] = {\"Volvo\", \"BMW\", \"Ford\"}; // Also three array elements",
          "string cars[5];cars[0] = \"Volvo\";cars[1] = \"BMW\";cars[2] \n  = \"Ford\";cars[3] = \"Mazda\";cars[4] = \"Tesla\";",
          "string cars[];  \n  // Array size is not specifiedcars[0] = \"Volvo\";cars[1] = \"BMW\";cars[2] \n  = \"Ford\";cars[3] = \"Mazda\";cars[4] = \"Tesla\";// error: array size missing in 'cars'",
          "// An array with 3 elementsstring cars[3] = {\"Volvo\", \"BMW\", \"Ford\"};// Trying to add another element (a fourth element) to the cars array will \n  result in an errorcars[3] = \"Tesla\";",
          "// A vector with 3 elementsvector<string> cars = {\"Volvo\", \"BMW\", \"Ford\"};// Adding another element to the vectorcars.push_back(\"Tesla\");"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_arrays_size.asp",
    "cours": {
      "titre": "C++Array Size",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_arrays_size.asp",
      "contenus": {
        "paragraphs": [
          "To get the size of an array, you can use thesizeof()operator:",
          "Result:",
          "Why did the result show20instead of5, when the array contains 5 elements?",
          "It is because thesizeof()operator returns the size of a type inbytes.",
          "You learned from theData Types chapterthat aninttype is usually 4 bytes, so from the example above,4 x 5 (4 bytes x 5 elements) =20 bytes.",
          "To find out how many elements an array has, you have to divide the size of the array \nby the size of the first element in the array:",
          "Result:",
          "In theArrays and Loops Chapter, we wrote the size of the array in the loop condition (i < \n5). This is not ideal, since it will only work for arrays of a specified size.",
          "However, by using thesizeof()approach from \nthe example above, we can now make loops that work for arrays of any size, which \nis more \nsustainable.",
          "Instead of writing:",
          "It is better to write:",
          "Note that, in C++ version 11 (2011), you can also use the\"for-each\" loop, \nwhich is even cleaner and simpler:",
          "It is good to know the different ways to loop through an array, since you may encounter them all in different programs."
        ],
        "lists": [],
        "examples": [
          "int myNumbers[5] = {10, 20, 30, 40, 50};cout <<sizeof(myNumbers);",
          "int myNumbers[5] = {10, 20, 30, 40, 50};int getArrayLength =sizeof(myNumbers) / sizeof(myNumbers[0]);cout << getArrayLength;",
          "int myNumbers[5] = {10, 20, 30, 40, 50};for (int i = 0; i < \n  5; i++) {cout << myNumbers[i] << \n  \"\\n\";}",
          "int myNumbers[5] = {10, 20, 30, 40, 50};for (int i = 0; i < \n  sizeof(myNumbers) / sizeof(myNumbers[0]); i++) {cout << myNumbers[i] << \n  \"\\n\";}",
          "int myNumbers[5] = {10, 20, 30, 40, 50};for (int i : myNumbers) {cout << i << \"\\n\";}"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_arrays_reallife.asp",
    "cours": {
      "titre": "C++ ArraysReal-Life Examples",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_arrays_reallife.asp",
      "contenus": {
        "paragraphs": [
          "To demonstrate a practical example of using arrays, let's create a program that calculates the average of different ages:",
          "And in this example, we create a program that finds the lowest age among different ages:"
        ],
        "lists": [],
        "examples": [
          "// An array storing different agesint ages[8] = {20, 22, 18, 35, 48, 26, \n  87, 70};float avg, sum = 0;int i;// Get the length of the \n  arrayint length = sizeof(ages) / sizeof(ages[0]);// Loop through \n  the elements of the arrayfor (int age : ages) {sum += age;}// Calculate the average by dividing the sum by the lengthavg = sum / \n  length;// Print the averagecout << \"The average age is: \" << avg \n  << \"\\n\";",
          "// An array storing different agesint ages[8] = {20, 22, 18, 35, 48, 26, \n  87, 70};int i;// Get the length of the arrayint length = \n  sizeof(ages) / sizeof(ages[0]);// Create a variable and assign the \n  first array element of ages to itint lowestAge = ages[0];// Loop \n  through the elements of the ages array to find the lowest agefor (int age \n  : ages) {if (lowestAge > age) {lowestAge = \n  age;}}// Print the lowest agecout << \"The lowest \n  age is: \" << lowestAge << \"\\n\";"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_arrays_multi.asp",
    "cours": {
      "titre": "C++Multi-Dimensional Arrays",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_arrays_multi.asp",
      "contenus": {
        "paragraphs": [
          "A multi-dimensional array is an array of arrays.",
          "To declare a multi-dimensional array, define the variable type, specify the name of the array followed by square brackets which specify how many elements the main array has, followed by another set of square brackets which indicates how many elements the sub-arrays have:",
          "As with ordinary arrays, you can insert values with an array literal - a \ncomma-separated list inside curly braces. In a multi-dimensional array, each \nelement in an array literal is another array literal.",
          "Each set of square brackets in an array declaration adds anotherdimensionto an array. An array like the one above is said to have two dimensions.",
          "Arrays can have any number of dimensions. The more dimensions an array has, the more complex the code becomes. The following array has three dimensions:",
          "To access an element of a multi-dimensional array, specify an index number in each of the array's dimensions.",
          "This statement accesses the value of the element in thefirst row (0)andthird column \n(2)of thelettersarray.",
          "Remember that:Array indexes start with 0: [0] is the first element. [1] is the second element, etc.",
          "To change the value of an element, refer to the index number of the element in each of the dimensions:",
          "To loop through a multi-dimensional array, you need one loop for each of the array's dimensions.",
          "The following example outputs all elements in thelettersarray:",
          "This example shows how to loop through a three-dimensional array:",
          "Multi-dimensional arrays are great at representing grids. This example shows a\npractical use for them. In the following example we use a multi-dimensional\narray to represent a small game of Battleship:"
        ],
        "lists": [],
        "examples": [
          "string letters[2][4];",
          "string letters[2][4] = {{ \"A\", \"B\", \"C\", \"D\" },{ \"E\", \n  \"F\", \"G\", \"H\" }};",
          "string letters[2][2][2] = {{{ \"A\", \"B\" },{ \"C\", \"D\" }},{{ \"E\", \"F\" },{ \"G\", \"H\" }}};",
          "string letters[2][4] = {{ \"A\", \"B\", \"C\", \"D\" },{ \"E\", \n  \"F\", \"G\", \"H\" }};cout << letters[0][2];  // Outputs \"C\"",
          "string letters[2][4] = {{ \"A\", \"B\", \"C\", \"D\" },{ \"E\", \n  \"F\", \"G\", \"H\" }};letters[0][0] = \"Z\";cout << letters[0][0];  // Now outputs \n  \"Z\" instead of \"A\"",
          "string letters[2][4] = {{ \"A\", \"B\", \"C\", \"D\" },{ \"E\", \n  \"F\", \"G\", \"H\" }};for (int i = 0; i < 2; i++) {for (int j \n  = 0; j < 4; j++) {cout << letters[i][j] << \"\\n\";}}",
          "string letters[2][2][2] = {{{ \"A\", \"B\" },{ \"C\", \"D\" }},{{ \"E\", \"F\" },{ \"G\", \"H\" }}};for (int i = 0; i < 2; i++) {for (int j = 0; j < 2; j++) {for (int k = 0; k < 2; k++) \n  {cout << letters[i][j][k] << \"\\n\";}}}",
          "// We put \"1\" to indicate there is a ship.bool ships[4][4] = {{ \n  0, 1, 1, 0 },{ 0, 0, 0, 0 },{ 0, 0, 1, 0 },{ \n  0, 0, 1, 0 }};// Keep track of how many hits the player has and \n  how many turns they have played in these variablesint hits = 0;int \n  numberOfTurns = 0;// Allow the player to keep going until they have \n  hit all four shipswhile (hits < 4) {int row, column;cout << \"Selecting coordinates\\n\";// Ask the player for a rowcout << \"Choose a row number between 0 and 3: \";cin >> row;// Ask the player for a columncout << \"Choose a column number \n  between 0 and 3: \";cin >> column;// Check if a ship \n  exists in those coordinatesif (ships[row][column]) {// If the player hit a ship, remove it by setting the value to zero.ships[row][column] = 0;// Increase the hit counterhits++;// Tell the player that they have hit a ship \n  and how many ships are leftcout << \"Hit! \" << (4-hits) \n  << \" left.\\n\\n\";} else {// Tell the player \n  that they missedcout << \"Miss\\n\\n\";}// Count how many turns the player has takennumberOfTurns++;}cout << \"Victory!\\n\";cout << \"You won in \" << numberOfTurns << \" turns\";"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_structs.asp",
    "cours": {
      "titre": "C++Structures (struct)",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_structs.asp",
      "contenus": {
        "paragraphs": [
          "Structures (also called structs) are a way to group several related variables into one place. Each variable in the structure is \nknown as amemberof the structure.",
          "Unlike anarray, a structure can contain many \ndifferent data types (int, string, bool, etc.).",
          "To create a structure, use thestructkeyword and declare each of its members inside curly braces.",
          "After the declaration, specify the name of the structure variable (myStructurein the example below):",
          "To access members of a structure, use the dot syntax (.):",
          "Assign data to members of a structure and print it:",
          "You can use a comma (,) to use one structure in many variables:",
          "This example shows how to use a structure in two different variables:",
          "Use one structure to represent two cars:",
          "By giving a name to the structure, you can treat it as a data type. This means that you can create variables with this structure anywhere in the program at any time.",
          "To create a named structure, put the name of the structure right after thestructkeyword:",
          "To declare a variable that uses the structure, use the name of the structure as the data type of the variable:",
          "Use one structure to represent two cars:"
        ],
        "lists": [],
        "examples": [
          "struct {             // Structure declarationint myNum;         // Member (int \n  variable)string myString;   // Member (string variable)} \n  myStructure;       // Structure variable",
          "// Create a structure variable called myStructurestruct {int myNum;string myString;} myStructure;// Assign values to members of myStructuremyStructure.myNum = 1;myStructure.myString = \"Hello World!\";// Print members of myStructurecout << myStructure.myNum << \"\\n\";cout << myStructure.myString << \"\\n\";",
          "struct {int myNum;string myString;} myStruct1, myStruct2, myStruct3; // Multiple structure variables separated with commas",
          "struct {string brand;string model;int year;} myCar1, myCar2;  // We can add variables by separating them with a comma here// Put data into the first structuremyCar1.brand = \"BMW\";myCar1.model = \"X5\";myCar1.year = 1999;// Put data into the second structuremyCar2.brand = \"Ford\";myCar2.model = \"Mustang\";myCar2.year = 1969;// Print the structure memberscout << myCar1.brand << \" \" << myCar1.model << \" \" << myCar1.year << \"\\n\";cout << myCar2.brand << \" \" << myCar2.model << \" \" << myCar2.year << \"\\n\";",
          "struct myDataType { // This structure is named \"myDataType\"int myNum;string myString;};",
          "myDataType myVar;",
          "// Declare a structure named \"car\"struct car {string brand;string model;int year;};int main() {// Create a car structure and store it in myCar1;car myCar1;myCar1.brand = \"BMW\";myCar1.model = \"X5\";myCar1.year = 1999;// Create another car structure and store it in myCar2;car myCar2;myCar2.brand = \"Ford\";myCar2.model = \"Mustang\";myCar2.year = 1969;// Print the structure memberscout << myCar1.brand << \" \" << myCar1.model << \" \" << myCar1.year << \"\\n\";cout << myCar2.brand << \" \" << myCar2.model << \" \" << myCar2.year << \"\\n\";return 0;}"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_enum.asp",
    "cours": {
      "titre": "C++Enumeration (enum)",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_enum.asp",
      "contenus": {
        "paragraphs": [
          "Anenumis a special type that represents a group of constants (unchangeable values).",
          "To create an enum, use theenumkeyword, \nfollowed by the name of the enum, and separate the enum items with a comma:",
          "Note that the last item does not need a comma.",
          "It is not required to use uppercase, but often considered as good practice.",
          "Enum is short for \"enumerations\", which means \"specifically listed\".",
          "To access the enum, you must create a variable of it.",
          "Inside themain()method, specify theenumkeyword, followed by the name \nof the enum (Level) and then the name of the enum variable (myVarin this \nexample):",
          "Now that you have created an enum variable (myVar), you can assign \na value to it.",
          "The assigned value must be one of the items inside the enum (LOW,MEDIUMorHIGH):",
          "By default, the first item (LOW) has the value0, the second \n(MEDIUM) has the value1, etc.",
          "If you now try to print myVar, it will output1, which representsMEDIUM:",
          "As you know, the first item of an enum has the value 0. The second has the value 1, and so on.",
          "To make more sense of the values, you can easily change them:",
          "Note that if you assign a value to one specific item, the next items will update their numbers accordingly:",
          "Enums are often used in switch statements to check for corresponding values:",
          "Enums are used to give names to constants, which makes the code easier to \n  read and maintain.",
          "Use enums when you have values that you know aren't going to change, like month days, days, colors, deck of cards, etc."
        ],
        "lists": [],
        "examples": [
          "enum Level {LOW,MEDIUM,HIGH};",
          "enum Level myVar;",
          "enum Level myVar = MEDIUM;",
          "int main() {// Create an enum variable and assign a value to itenum Level myVar \n  = MEDIUM;// Print the enum variablecout << myVar;return 0;}",
          "enum Level {LOW = 25,MEDIUM = 50,HIGH = 75};",
          "int main() {enum Level myVar = MEDIUM;cout << myVar;  // Now outputs 50return 0;}",
          "enum Level {LOW = 5,MEDIUM, // Now 6HIGH // Now 7};",
          "enum Level {LOW = 1,MEDIUM,HIGH};int main() {enum Level myVar = MEDIUM;switch (myVar) \n  {case 1:cout << \"Low \n  Level\";break;case 2:cout << \"Medium level\";break;case 3:cout << \"High level\";break;}return 0;}"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_references.asp",
    "cours": {
      "titre": "C++References",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_references.asp",
      "contenus": {
        "paragraphs": [
          "A reference variable is a \"reference\" to an existing variable, and \nit is created with the&operator:",
          "Now, we can use either the variable namefoodor the reference namemealto refer to thefoodvariable:"
        ],
        "lists": [],
        "examples": [
          "string food = \"Pizza\";  // food variablestring &meal = food;    \n  // reference to food",
          "string food = \"Pizza\";string &meal = food;cout << food << \"\\n\";  \n  // Outputs Pizzacout << meal << \"\\n\";  // \n  Outputs Pizza"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_references_memory.asp",
    "cours": {
      "titre": "C++Memory Address",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_references_memory.asp",
      "contenus": {
        "paragraphs": [
          "In the example from the previous page, the&operator was used to create a reference variable. \nBut it can also be used to get the memory address of a variable; which is the \nlocation of where the variable is stored on the computer.",
          "When a variable is created in C++, a memory address is assigned to the variable. \nAnd when we assign a value to the variable, it is stored in this memory \naddress.",
          "To access it, use the&operator, and the result will represent where the variable is stored:",
          "Note:The memory address is in hexadecimal form (0x..). Note \nthat \nyou may not get the same result in your program.",
          "ReferencesandPointers(which you will learn about in the next chapter) \n  are important in C++, because they give you the \nability to manipulate the data in the computer's memory -which can reduce the code and improve the performance.",
          "These two features are one of the things that make C++ stand out from other \n  programming languages, likePythonandJava."
        ],
        "lists": [],
        "examples": [
          "string food = \"Pizza\";cout << &food; // Outputs 0x6dfed4"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_pointers.asp",
    "cours": {
      "titre": "C++Pointers",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_pointers.asp",
      "contenus": {
        "paragraphs": [
          "You learned from the previous chapter, that we can get thememory \naddressof a variable by using the&operator:",
          "Apointerhowever, is a variable thatstores the memory address as its value.",
          "A pointer variable points to a data type (likeintorstring) of the same \ntype, and is created with the*operator. The address of the variable you're working with is assigned to the pointer:",
          "Create a pointer variable with the nameptr, thatpoints toastringvariable, by using the \nasterisk sign*(string* ptr). \nNote that the type of the pointer has to match the type of the variable you're \nworking with.",
          "Use the&operator to store the memory address of the \nvariable calledfood, and assign it to the pointer.",
          "Now,ptrholds the value offood's memory address.",
          "Tip:There are three ways to declare pointer variables, but the first way is preferred:"
        ],
        "lists": [],
        "examples": [
          "string food = \"Pizza\"; \n    // A food variable of type stringcout << \n    food;  // Outputs the value of food (Pizza)cout << &food; // Outputs the memory address of food (0x6dfed4)",
          "string food = \"Pizza\";  // A food variable \n    of type stringstring* ptr = \n    &food;// A pointer variable, with the name \n    ptr, that stores the \n    address of food// Output the value of food (Pizza)cout << food << \"\\n\";// Output \n    the memory address of food (0x6dfed4)cout << &food << \"\\n\";// \n    Output the memory address of food with the pointer (0x6dfed4)cout << \n    ptr << \"\\n\";",
          "string* mystring; // Preferredstring *mystring;string * mystring;"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_pointers_dereference.asp",
    "cours": {
      "titre": "C++Dereference",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_pointers_dereference.asp",
      "contenus": {
        "paragraphs": [
          "In the example from the previous page, we used the pointer variable to get the memory address of a variable \n(used together with the&referenceoperator). However, you can also \nuse the pointer to get the value of the variable, by using the*operator \n(thedereferenceoperator):",
          "Note that the*sign can be confusing here, as it does two different things \nin our code:"
        ],
        "lists": [
          [
            "When used in declaration (string* ptr), it creates apointer variable.",
            "When not used in declaration, it act as adereference operator."
          ]
        ],
        "examples": [
          "string food = \"Pizza\";  // Variable declarationstring* ptr = \n    &food;// Pointer declaration// \n    Reference: Output the memory address of food with the pointer (0x6dfed4)cout << \n    ptr << \"\\n\";// \n    Dereference: Output the value of food with the pointer (Pizza)cout << \n    *ptr << \"\\n\";"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_pointers_modify.asp",
    "cours": {
      "titre": "C++Modify Pointers",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_pointers_modify.asp",
      "contenus": {
        "paragraphs": [
          "You can also change the pointer's value. But note that this will also change \nthe value of the original variable:"
        ],
        "lists": [],
        "examples": [
          "string food = \"Pizza\";string* ptr = &food;// Output the value \n    of food (Pizza)cout << food << \"\\n\";// Output the memory address \n    of food (0x6dfed4)cout << &food << \"\\n\";// Access the memory \n    address of food and output its value (Pizza)cout << *ptr << \"\\n\";// Change the value of the pointer*ptr = \"Hamburger\";// \n    Output the new value of the pointer (Hamburger)cout << *ptr << \"\\n\";// \n    Output the new value of the food variable (Hamburger)cout << food << \"\\n\";"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_functions.asp",
    "cours": {
      "titre": "C++Functions",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_functions.asp",
      "contenus": {
        "paragraphs": [
          "A function is a block of code which only runs when it is called.",
          "You can pass data, known as parameters, into a function.",
          "Functions are used to perform certain actions, and they are \nimportant for reusing code: Define the code once, and use it many times.",
          "C++ provides some pre-defined \nfunctions, such asmain(), which is used to \nexecute code. But you can also \ncreate your own functions to perform certain actions.",
          "To create (often referred to asdeclare) a function, specify the name of the function, followed by parentheses():",
          "Declared functions are not executed immediately. They are \"saved for later \nuse\", and will be executed later, when they are called.",
          "To call a function, write the function's name followed by two parentheses()and a semicolon;",
          "In the following example,myFunction()is used to print a text (the action), when it is called:",
          "Insidemain, \ncallmyFunction():",
          "A function can be called multiple times:",
          "A C++ function consist of two parts:",
          "Note:If a user-defined function, such asmyFunction()is declared after themain()function,an error will occur:",
          "However, it is possible to separate the declaration and the definition of the function - for code optimization.",
          "You will often see C++ programs that have function declaration abovemain(), \nand function definition belowmain(). This will make the code \nbetter organized and easier to read:"
        ],
        "lists": [
          [
            "myFunction()is the name of the function",
            "voidmeans that the function does not have a \nreturn value. You will learn more about return values later in the next chapter",
            "inside the function (the body), add code that defines what the function should do"
          ],
          [
            "Declaration:the return type, the name of the function, and parameters (if any)",
            "Definition:the body of the function (code to be executed)"
          ]
        ],
        "examples": [
          "voidmyFunction() {// code to be executed}",
          "// Create a functionvoid myFunction() {cout << \"I just got executed!\";}int main() {myFunction();// call the functionreturn 0;}// Outputs \n  \"I just got executed!\"",
          "void myFunction() {cout << \"I just got executed!\\n\";}int main() {myFunction();myFunction();myFunction();return 0;}// \n  I just got executed!// I just got executed!// I just got executed!",
          "voidmyFunction(){ //declaration// \n    the body of the function (definition)}",
          "int main() {myFunction();return 0;}void myFunction() {cout << \"I just got executed!\";}// Error",
          "//Function declarationvoid myFunction();// The main methodint main() {myFunction();  //callthe functionreturn 0;}//Function definitionvoid myFunction() {cout << \"I just got executed!\";}"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_function_param.asp",
    "cours": {
      "titre": "C++Function Parameters",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_function_param.asp",
      "contenus": {
        "paragraphs": [
          "Information can be passed to functions as a parameter. Parameters act as \nvariables inside the function.",
          "Parameters are specified after the function name, inside the parentheses.\nYou can add as many parameters as you want, just separate them with a comma:",
          "The following example has a \nfunction that takes astringcalledfnameas parameter.\nWhen the function is called, we pass along a first name,\nwhich is used inside the function to print the full name:",
          "When aparameteris passed to the function, it is called anargument. So, from the example above:fnameis aparameter, whileLiam,JennyandAnjaarearguments."
        ],
        "lists": [],
        "examples": [
          "voidfunctionName(parameter1,parameter2,parameter3) {// code to be executed}",
          "void myFunction(string fname) {cout << fname << \" Refsnes\\n\";}int main() {myFunction(\"Liam\");myFunction(\"Jenny\");myFunction(\"Anja\");return 0;}// Liam Refsnes// Jenny Refsnes// \n  Anja Refsnes"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_function_default.asp",
    "cours": {
      "titre": "C++Default Parameters",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_function_default.asp",
      "contenus": {
        "paragraphs": [
          "You can also use a default parameter value, by using the equals sign (=).",
          "If we call the function without an argument, it uses the default value (\"Norway\"):",
          "A parameter with a default value, is often known as an \"optional parameter\". From the example above,countryis an optional parameter and\"Norway\"is the default value."
        ],
        "lists": [],
        "examples": [
          "void myFunction(string country = \"Norway\") {cout \n  << country << \"\\n\";}int main() {myFunction(\"Sweden\");myFunction(\"India\");myFunction();myFunction(\"USA\");return 0;}// Sweden// \n  India// Norway// USA"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_function_multiple.asp",
    "cours": {
      "titre": "C++Multiple Parameters",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_function_multiple.asp",
      "contenus": {
        "paragraphs": [
          "Inside the function, you can add as many parameters as you want:",
          "Note that when you are working with multiple parameters, the function call must \nhave the same number of arguments as there are parameters, and the arguments must be passed in the same order."
        ],
        "lists": [],
        "examples": [
          "void myFunction(string fname, int age) {cout << fname << \" Refsnes. \n  \" << age << \" years old. \\n\";}int main() {myFunction(\"Liam\", 3);myFunction(\"Jenny\", 14);myFunction(\"Anja\", 30);return 0;}// Liam Refsnes. 3 years old.// Jenny Refsnes. 14 years old.// Anja Refsnes. 30 years old."
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_function_return.asp",
    "cours": {
      "titre": "C++The Return Keyword",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_function_return.asp",
      "contenus": {
        "paragraphs": [
          "Thevoidkeyword, used in the previous examples, indicates that the \nfunction should not return a value. If you \nwant the function to return a value, you can use a data type (such asint,string, etc.) instead ofvoid, and use thereturnkeyword inside the function:",
          "This example returns the sum of a function withtwo parameters:",
          "You can also store the result in a variable:"
        ],
        "lists": [],
        "examples": [
          "intmyFunction(int x) {return5 \n    + x;}int main() {cout << myFunction(3);return 0;}// Outputs \n  8 (5 + 3)",
          "int myFunction(int x, int y) {return x + y;}int main() \n  {cout << myFunction(5, 3);return 0;}// Outputs 8 (5 + 3)",
          "int myFunction(int x, int y) {return x + y;}int main() {int z = myFunction(5, 3);cout << z;return 0;}// Outputs 8 (5 + 3)"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_function_reference.asp",
    "cours": {
      "titre": "C++Functions - Pass By Reference",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_function_reference.asp",
      "contenus": {
        "paragraphs": [
          "In the examples from the previous page, we used normal variables when we passed parameters to \na function. You can also pass areferenceto \nthe function. This can be useful when you need to change the value of the arguments:",
          "Pass integers by reference:",
          "Pass a string by reference:"
        ],
        "lists": [],
        "examples": [
          "void swapNums(int &x, int &y) {int z = x;x = y;y = z;}int main() {int firstNum = 10;int secondNum = 20;cout << \n    \"Before swap: \" << \"\\n\";cout << firstNum << secondNum << \"\\n\";// Call the function, which will change the values of firstNum \n    and secondNumswapNums(firstNum, secondNum);cout << \"After swap: \n    \" << \"\\n\";cout << firstNum << secondNum << \"\\n\";return 0;}",
          "void modifyStr(string &str) {str += \" World!\";}int main() {string greeting = \"Hello\";modifyStr(greeting);cout << \n    greeting;return 0;}"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_function_array.asp",
    "cours": {
      "titre": "C++Pass Array to a Function",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_function_array.asp",
      "contenus": {
        "paragraphs": [
          "You can also passarraysto \na function:",
          "The function (myFunction) takes an array as its parameter (int myNumbers[5]), and loops through the array elements with theforloop.",
          "When the function is called insidemain(), we pass along themyNumbersarray, which outputs the array elements.",
          "Notethat when you call the function, you only need to use the name of the array when passing it as an argumentmyFunction(myNumbers). However, the full declaration of the array is needed in the function parameter (int myNumbers[5])."
        ],
        "lists": [],
        "examples": [
          "void myFunction(int myNumbers[5]) {for (int i = 0; i < 5; i++) {cout << myNumbers[i] << \"\\n\";}}int main() {int \n    myNumbers[5] = {10, 20, 30, 40, 50};myFunction(myNumbers);return 0;}"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_function_reallife.asp",
    "cours": {
      "titre": "C++ FunctionExamples",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_function_reallife.asp",
      "contenus": {
        "paragraphs": [
          "To demonstrate a practical example of using functions, let's create a program that converts a value from fahrenheit to celsius:"
        ],
        "lists": [],
        "examples": [
          "// Function to convert \n  Fahrenheit to Celsiusfloat toCelsius(float fahrenheit) {return \n  (5.0 / 9.0) * (fahrenheit - 32.0);}int main() {// Set a \n  fahrenheit valuefloat f_value = 98.8;// Call the \n  function with the fahrenheit valuefloat result = \n  toCelsius(f_value);// Print the fahrenheit valuecout \n  << \"Fahrenheit: \" << f_value << \"\\n\";// Print the resultcout << \"Convert Fahrenheit to Celsius: \" << result << \"\\n\";return 0;}"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_function_overloading.asp",
    "cours": {
      "titre": "C++Function Overloading",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_function_overloading.asp",
      "contenus": {
        "paragraphs": [
          "Withfunction overloading, multiple functions can have the same name with different\nparameters:",
          "Consider the following example, which have two functions that add numbers of different type:",
          "Instead of defining two functions that should do the same thing, it is better to overload one.",
          "In the example below, we overload theplusFuncfunction to work for bothintanddouble:",
          "Note:Multiple functions can have the same name \n  as long as the number and/or type of parameters are different."
        ],
        "lists": [],
        "examples": [
          "int myFunction(int x)float myFunction(float x)double \n  myFunction(double x, double y)",
          "int plusFuncInt(int x, int y) {return x + y;}double plusFuncDouble(double x, double y) {return x + y;}int main() {int myNum1 = plusFuncInt(8, \n  5);double myNum2 = plusFuncDouble(4.3, 6.26);cout << \n  \"Int: \" << myNum1 << \"\\n\";cout << \"Double: \" << myNum2;return 0;}",
          "int plusFunc(int x, int \n  y) {return x + y;}double plusFunc(double x, double y) {return x + y;}int main() {int myNum1 = plusFunc(8, \n  5);double myNum2 = plusFunc(4.3, 6.26);cout << \"Int: \" << \n  myNum1 << \"\\n\";cout << \"Double: \" << myNum2;return 0;}"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_scope.asp",
    "cours": {
      "titre": "C++Variable Scope",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_scope.asp",
      "contenus": {
        "paragraphs": [
          "Now that you understand how functions work, it is important to \nlearn how variables act inside and outside of functions.",
          "In C++, variables are only accessible inside the region they are created. This is calledscope.",
          "A variable created inside a function belongs to thelocal scopeof that function, and can only be used inside that function:",
          "Alocal variablecannot be used outside the function it belongs to.",
          "If you try to access it outside the function, an error occurs:",
          "A variable created outside of a function, is called aglobal variableand \nbelongs to theglobal scope.Global variables are available from within any scope, global and local:ExampleA variable created outside of a function is global and can therefore be used by anyone:// Global variable xint x = 5;void myFunction() {// \n  We can use x herecout << x << \"\\n\";}int main() {myFunction();// We can also use x herecout << x;return 0;}Try it Yourself »Naming VariablesIf you operate with the same variable name inside and outside of a function, \nC++ will treat them as two separate variables; One available in the global scope (outside the function) and one available in the local scope (inside the function):ExampleThe function will print the localx, and \n  then the code will print the globalx:// Global variable xint x = 5;void myFunction() {// \n    Local variable with the same name as the global variable (x)int x \n    = 22;cout << x << \"\\n\"; // Refers to the local variable x}int main() \n    {myFunction();cout << x; // Refers to the global \n    variable xreturn 0;}Try it Yourself »However, you should avoid using the same variable name for both globally and locally variables as it can lead to errors and confusion.In general, you should be careful with global variables, since they can be \naccessed and modified from any function:ExampleChange the value ofxfrommyFunction:// Global variable xint x = 5;void myFunction() {cout << ++x << \"\\n\"; // Increment the value of x by 1 and print it}int \n    main() {myFunction();cout << x; // Print the \n    global variable xreturn 0;}// The value of \n    x is now 6 (no longer 5)Try it Yourself »ConclusionTo sum up, use local variables (with good variable names) as much as you can. This will make your code easier to maintain and \nbetter to understand. However, you may find global variables when working on existing C++ programs or \nwhile collaborating with others. Therefore, it is good to understand how the scope works and how to use it effectively to make sure your code is clear and functional.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "A variable created outside of a function, is called aglobal variableand \nbelongs to theglobal scope.",
          "Global variables are available from within any scope, global and local:",
          "A variable created outside of a function is global and can therefore be used by anyone:",
          "If you operate with the same variable name inside and outside of a function, \nC++ will treat them as two separate variables; One available in the global scope (outside the function) and one available in the local scope (inside the function):",
          "The function will print the localx, and \n  then the code will print the globalx:",
          "However, you should avoid using the same variable name for both globally and locally variables as it can lead to errors and confusion.",
          "In general, you should be careful with global variables, since they can be \naccessed and modified from any function:",
          "Change the value ofxfrommyFunction:",
          "To sum up, use local variables (with good variable names) as much as you can. This will make your code easier to maintain and \nbetter to understand. However, you may find global variables when working on existing C++ programs or \nwhile collaborating with others. Therefore, it is good to understand how the scope works and how to use it effectively to make sure your code is clear and functional."
        ],
        "lists": [],
        "examples": [
          "void myFunction() {// Local variable that belongs to myFunctionint x = 5;// Print the variable xcout << x;}int main() {myFunction();return 0;}",
          "void myFunction() {// Local variable that belongs to myFunctionint x = 5;}int main() {myFunction();// Print \n  the variable x in the main functioncout << x;return 0;}",
          "// Global variable xint x = 5;void myFunction() {// \n  We can use x herecout << x << \"\\n\";}int main() {myFunction();// We can also use x herecout << x;return 0;}",
          "// Global variable xint x = 5;void myFunction() {// \n    Local variable with the same name as the global variable (x)int x \n    = 22;cout << x << \"\\n\"; // Refers to the local variable x}int main() \n    {myFunction();cout << x; // Refers to the global \n    variable xreturn 0;}",
          "// Global variable xint x = 5;void myFunction() {cout << ++x << \"\\n\"; // Increment the value of x by 1 and print it}int \n    main() {myFunction();cout << x; // Print the \n    global variable xreturn 0;}// The value of \n    x is now 6 (no longer 5)"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_functions_recursion.asp",
    "cours": {
      "titre": "C++Recursion",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_functions_recursion.asp",
      "contenus": {
        "paragraphs": [
          "Recursion is the technique of making a function call itself. This technique provides a way\nto break complicated problems down into simple problems which are easier to solve.",
          "Recursion may be a bit difficult to understand. The\nbest way to figure out how it works is to experiment with it.",
          "Adding two numbers together is easy to do, but adding a range of numbers is more\ncomplicated. In the following example, recursion is used to add a range of numbers\ntogether by breaking it down into the simple task of adding two numbers:",
          "When thesum()function is called, it adds parameterkto the sum of all numbers smaller\nthankand returns the result. When k becomes 0, the function just returns 0. When\nrunning, the program follows these steps:",
          "Since the function does not call itself whenkis 0, the program stops there and returns the\nresult.",
          "The developer should be very careful with recursion as it can be quite easy to slip into writing a function which never terminates, or one that uses excess amounts of memory or processor power. However, when written correctly recursion can be a very efficient and mathematically-elegant approach to programming."
        ],
        "lists": [],
        "examples": [
          "int sum(int k) {if (k > 0) {return k + sum(k - 1);} else {return 0;}}int main() {int result = sum(10);cout << \n  result;return 0;}"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_oop.asp",
    "cours": {
      "titre": "C++OOP",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_oop.asp",
      "contenus": {
        "paragraphs": [
          "OOP stands for Object-Oriented Programming.",
          "Procedural programming is about writing procedures or functions that perform \noperations on the data, while object-oriented programming is about \ncreating objects that contain both data and functions.",
          "Object-oriented programming has several advantages over procedural \nprogramming:",
          "Tip:The \"Don't Repeat Yourself\" (DRY) principle is about \nreducing the repetition of code. You should extract out the codes that are \ncommon for the application, and place them at a single place and reuse them \ninstead of repeating it.",
          "Classes and objects are the two main aspects of object-oriented programming.",
          "Look at the following illustration to see the difference between class and \nobjects:",
          "Fruit",
          "Apple",
          "Banana",
          "Mango",
          "Another example:",
          "Car",
          "Volvo",
          "Audi",
          "Toyota",
          "So, a class is a template for objects, and an object is an instance of a class.",
          "When the individual objects are created, they inherit all the \nvariables and functions from the class.",
          "You will learn much more aboutclasses and objectsin the next chapter."
        ],
        "lists": [
          [
            "OOP is faster and easier to execute",
            "OOP provides a clear structure for the programs",
            "OOP helps to keep the C++ code DRY \"Don't Repeat Yourself\", and makes \n  the \n  code easier to maintain, modify and debug",
            "OOP makes it possible to create full reusable \n  applications with less code and shorter development time"
          ]
        ],
        "examples": []
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_classes.asp",
    "cours": {
      "titre": "C++Classes and Objects",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_classes.asp",
      "contenus": {
        "paragraphs": [
          "C++ is an object-oriented programming language.",
          "Everything in C++ is associated with classes and objects, along with its attributes and \nmethods. For example: in real life, a car is anobject. The car hasattributes, such as weight and color, andmethods, such as drive and brake.",
          "Attributes and methods are basicallyvariablesandfunctionsthat belongs to the class. These are often referred to as \n\"class members\".",
          "A class is a user-defined data type that we can use in our program, and it \nworks as an object constructor, or a \"blueprint\" for creating objects.",
          "To create a class, use theclasskeyword:",
          "Create a class called \"MyClass\":",
          "In C++, an object is created from a class. We have already created the class namedMyClass, \nso now we can use this to create objects.",
          "To create an object ofMyClass, specify the \nclass name, followed by the object name.",
          "To access the class attributes (myNumandmyString), use the dot syntax (.) \non the object:",
          "Create an object called \"myObj\" and access \nthe attributes:",
          "You can create multiple objects of one class:"
        ],
        "lists": [
          [
            "Theclasskeyword is used to create a class calledMyClass.",
            "Thepublickeyword is anaccess specifier, which specifies that members (attributes and methods) of the class are accessible from outside the class. You will learn more aboutaccess specifierslater.",
            "Inside the class, there is an integer variablemyNumand a string variablemyString. When variables are declared \nwithin a class, they are calledattributes.",
            "At last, end the class definition with a semicolon;."
          ]
        ],
        "examples": [
          "class MyClass {       \n  // The classpublic:             \n  // Access specifierint myNum;        // \n  Attribute (int variable)string myString;  // \n  Attribute (string variable)};",
          "class MyClass {       // The classpublic:             \n  // Access specifierint myNum;        // \n  Attribute (int variable)string myString;  // \n  Attribute (string variable)};int main() {MyClassmyObj;  \n  // Create an object of MyClass// Access attributes and set valuesmyObj.myNum= 15;myObj.myString= \"Some text\";// Print attribute valuescout << myObj.myNum << \"\\n\";cout << myObj.myString;return 0;}",
          "// Create a Car class with some attributesclass Car {public:string brand;string model;int \n  year;};int main() {// Create an object of CarCar carObj1;carObj1.brand = \"BMW\";carObj1.model = \"X5\";carObj1.year = 1999;// Create another object of CarCar \n  carObj2;carObj2.brand = \"Ford\";carObj2.model = \n  \"Mustang\";carObj2.year = 1969;// Print \n  attribute valuescout << carObj1.brand \n  << \" \" << carObj1.model << \" \" << carObj1.year << \"\\n\";cout << \n  carObj2.brand << \" \" << carObj2.model << \" \" << carObj2.year << \"\\n\";return 0;}"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_class_methods.asp",
    "cours": {
      "titre": "C++Class Methods",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_class_methods.asp",
      "contenus": {
        "paragraphs": [
          "Methods arefunctionsthat belongs to the class.",
          "There are two ways to define functions that belongs to a class:",
          "In the following example, we define a function inside the class, and we name \nit \"myMethod\".",
          "Note:You access methods just like you access attributes; by creating an object of \nthe class and using the dot syntax (.):",
          "To define a function outside the class definition, you have to declare it \ninside the class and then define it outside of the class. This is done by specifiying the \nname of the class, followed the scope resolution::operator, \nfollowed by the name of the function:",
          "You can also add parameters:"
        ],
        "lists": [
          [
            "Inside class definition",
            "Outside class definition"
          ]
        ],
        "examples": [
          "class MyClass {        // The classpublic:              \n  // Access specifiervoid myMethod() {  // Method/function \n  defined inside the \n  classcout << \"Hello World!\";}};int main() {MyClass \n  myObj;     // Create an object of MyClassmyObj.myMethod();  // Call the methodreturn 0;}",
          "class MyClass {        // The classpublic:              \n  // Access specifiervoid myMethod();   // Method/function \n  declaration};// Method/function definition outside the classvoidMyClass::myMethod(){cout << \"Hello World!\";}int main() {MyClass \n  myObj;     // Create an object of MyClassmyObj.myMethod();  // Call the methodreturn 0;}",
          "#include <iostream>using namespace std;class Car {public:int speed(int maxSpeed);};int Car::speed(int maxSpeed) {return maxSpeed;}int main() {Car myObj; // Create an object of Carcout << myObj.speed(200); // \n  Call the method with an argumentreturn 0;}"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_constructors.asp",
    "cours": {
      "titre": "C++Constructors",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_constructors.asp",
      "contenus": {
        "paragraphs": [
          "A constructor in C++ is aspecial methodthat is \nautomatically called when an object of a class is created.",
          "To create a constructor, use the same name as the class, followed by \nparentheses():",
          "Note:The constructor has the same name as the class, it is alwayspublic, and it does not have any return value.",
          "Constructors can also take parameters (just like regular functions), which can be \nuseful for setting initial values for attributes.",
          "The following class havebrand,modelandyearattributes, and a constructor with \ndifferent parameters. Inside the constructor we set the attributes equal to the \nconstructor parameters (brand=x, etc). When we call the constructor \n(by creating an object of the class), we pass parameters to the constructor, which will set the value of \nthe corresponding attributes to the same:",
          "Just like functions, constructors can also be defined outside the class. \nFirst, declare the constructor inside the class, and then define it outside of the \nclass by specifying the name of the class, followed by the scope resolution::operator, followed by the name of the constructor (which is the same as the \nclass):"
        ],
        "lists": [],
        "examples": [
          "class MyClass {     // The classpublic:           \n  // Access specifierMyClass() {     \n  // Constructorcout << \"Hello World!\";}};int main() {MyClass myObj;    // Create an object of MyClass (this will call \n  the constructor)return 0;}",
          "class Car {        // The classpublic:          // Access specifierstring brand;  // Attributestring model;  // Attributeint year;      // AttributeCar(string x, string y, int z) \n    { // Constructor with parametersbrand = \n    x;model = y;year = z;}};int main() {// \n    Create Car objects and call the constructor with different valuesCar carObj1(\"BMW\", \"X5\", 1999);Car carObj2(\"Ford\", \"Mustang\", \n    1969);// Print valuescout << carObj1.brand << \" \" \n    << carObj1.model << \" \" << carObj1.year << \"\\n\";cout << \n    carObj2.brand << \" \" << carObj2.model << \" \" << carObj2.year << \"\\n\";return 0;}",
          "class Car {        // The classpublic:          // Access \n    specifierstring brand;  // Attributestring model;  // Attributeint year;      \n    // AttributeCar(string x, string y, int z); // \n    Constructor declaration};// Constructor definition outside the \n    classCar::Car(string x, string y, int z) {brand = x;model = y;year = z;}int main() {// Create \n    Car objects and call the constructor with different valuesCar \n    carObj1(\"BMW\", \"X5\", 1999);Car carObj2(\"Ford\", \"Mustang\", 1969);// Print valuescout << carObj1.brand << \" \" << \n    carObj1.model << \" \" << carObj1.year << \"\\n\";cout << \n    carObj2.brand << \" \" << carObj2.model << \" \" << carObj2.year << \"\\n\";return 0;}"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_access_specifiers.asp",
    "cours": {
      "titre": "C++Access Specifiers",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_access_specifiers.asp",
      "contenus": {
        "paragraphs": [
          "By now, you are quite familiar with thepublickeyword that appears in all of our class examples:",
          "Thepublickeyword is anaccess specifier.Access specifiers define how the members (attributes and methods) of a class can \nbe accessed. In the example above, the members arepublic- which means that they \ncan be accessed and modified from outside the code.",
          "However, what if we want \nmembers to be private and hidden from the outside world?",
          "In C++, there are three access specifiers:",
          "In the following example, we demonstrate the differences betweenpublicandprivatemembers:",
          "If you try to access a private member, an error occurs:",
          "Note:It is possible to access private members of a class \nusing a public method inside the same class. See the next chapter (Encapsulation) \non how to do this.",
          "Tip:It is considered good practice to declare your class attributes as private (as \noften as you can). This will reduce the possibility of yourself (or others) to mess up the code. This is also the \n  main ingredient of theEncapsulationconcept, which you will learn more about in the next chapter.",
          "Note:By default, all members of a class areprivateif you don't specify an access specifier:"
        ],
        "lists": [
          [
            "public- members are accessible from outside the class",
            "private- members cannot be accessed (or \nviewed) from outside the class",
            "protected- members cannot be accessed from \noutside the class, however, they can be accessed in inherited classes. You will learn more aboutInheritancelater."
          ]
        ],
        "examples": [
          "class MyClass {  // The classpublic:// Access specifier// class members goes here};",
          "class \n    MyClass {public:// Public access \n    specifierint x;   // Public attributeprivate:// Private access specifierint y;   // Private attribute};int main() {MyClass \n    myObj;myObj.x = 25;  // Allowed (public)myObj.y = 50;  // \n    Not allowed (private)return 0;}",
          "class \n    MyClass {int x;   // Private attributeint y;   // Private attribute};"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_encapsulation.asp",
    "cours": {
      "titre": "C++Encapsulation",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_encapsulation.asp",
      "contenus": {
        "paragraphs": [
          "The meaning ofEncapsulation, is to make sure that \n\"sensitive\" data is hidden from users. To achieve this, you must declare class variables/attributes asprivate(cannot \nbe accessed from outside the class). If you want others to read or modify the \nvalue of a private member, you can provide publicgetandsetmethods.Access Private MembersTo access a private attribute, use public \"get\" and \"set\" methods:Example#include <iostream>using namespace std;class Employee {private:// Private attributeint salary;public:// Settervoid setSalary(int s) {salary = s;}// Getterint getSalary() {return salary;}};int \n    main() {Employee myObj;myObj.setSalary(50000);cout << myObj.getSalary();return 0;}Try it Yourself »Example explainedThesalaryattribute isprivate, \nwhich have restricted access.The publicsetSalary()method takes a parameter (s) and assigns it to thesalaryattribute (salary = s).The publicgetSalary()method returns the value of \nthe privatesalaryattribute.Insidemain(), we create an object of theEmployeeclass. Now we can use thesetSalary()method to set the value of the \nprivate attribute to50000. Then we call thegetSalary()method on the object to return the value.Why Encapsulation?It is considered good practice to declare your class attributes as private (as \noften as you can). Encapsulation ensures better control of your data, \nbecause you (or others) can change one part of the code without affecting other partsIncreased security of data❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "To access a private attribute, use public \"get\" and \"set\" methods:",
          "Thesalaryattribute isprivate, \nwhich have restricted access.",
          "The publicsetSalary()method takes a parameter (s) and assigns it to thesalaryattribute (salary = s).",
          "The publicgetSalary()method returns the value of \nthe privatesalaryattribute.",
          "Insidemain(), we create an object of theEmployeeclass. Now we can use thesetSalary()method to set the value of the \nprivate attribute to50000. Then we call thegetSalary()method on the object to return the value."
        ],
        "lists": [
          [
            "It is considered good practice to declare your class attributes as private (as \noften as you can). Encapsulation ensures better control of your data, \nbecause you (or others) can change one part of the code without affecting other parts",
            "Increased security of data"
          ]
        ],
        "examples": [
          "#include <iostream>using namespace std;class Employee {private:// Private attributeint salary;public:// Settervoid setSalary(int s) {salary = s;}// Getterint getSalary() {return salary;}};int \n    main() {Employee myObj;myObj.setSalary(50000);cout << myObj.getSalary();return 0;}"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_inheritance.asp",
    "cours": {
      "titre": "C++Inheritance",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_inheritance.asp",
      "contenus": {
        "paragraphs": [
          "In C++, it is possible to inherit attributes and methods from one class to another. We group the \"inheritance concept\" into two categories:",
          "To inherit from a class, use the:symbol.",
          "In the example below, theCarclass \n(child) inherits the attributes and methods from theVehicleclass \n(parent):",
          "- It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class."
        ],
        "lists": [
          [
            "derived class(child) - the class that inherits from another class",
            "base class(parent) - the class being inherited from"
          ]
        ],
        "examples": [
          "// Base classclass Vehicle {public:string brand = \"Ford\";void honk() {cout << \"Tuut, tuut! \\n\" ;}};// Derived \n    classclass Car: public Vehicle{public:string model = \"Mustang\";};int main() {Car myCar;myCar.honk();cout << myCar.brand + \" \" + myCar.model;return 0;}"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_inheritance_multilevel.asp",
    "cours": {
      "titre": "C++Multilevel Inheritance",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_inheritance_multilevel.asp",
      "contenus": {
        "paragraphs": [
          "A class can also be derived from one class, which is already derived from \nanother class.",
          "In the following example,MyGrandChildis derived from classMyChild(which is derived \nfromMyClass)."
        ],
        "lists": [],
        "examples": [
          "// Base class (parent)class MyClass {public:void \n    myFunction() {cout << \"Some content in parent class.\" ;}};// \n    Derived \n    class (child)class MyChild: public MyClass {};// Derived class \n    (grandchild)class MyGrandChild: public MyChild {};int main() {MyGrandChild myObj;myObj.myFunction();return 0;}"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_inheritance_multiple.asp",
    "cours": {
      "titre": "C++Multiple Inheritance",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_inheritance_multiple.asp",
      "contenus": {
        "paragraphs": [
          "A class can also be derived from more than one base class, using acomma-separated list:"
        ],
        "lists": [],
        "examples": [
          "// Base classclass MyClass {public:void \n    myFunction() {cout << \"Some content in parent class.\" ;}};// \n    Another base classclass MyOtherClass {public:void \n    myOtherFunction() {cout << \"Some content in another class.\" ;}};// \n    Derived \n    classclass MyChildClass: public MyClass, public MyOtherClass{};int main() {MyChildClass myObj;myObj.myFunction();myObj.myOtherFunction();return 0;}"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_inheritance_access.asp",
    "cours": {
      "titre": "C++Inheritance Access",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_inheritance_access.asp",
      "contenus": {
        "paragraphs": [
          "You learned from theAccess Specifierschapter that there are three \nspecifiers available in C++. Until now, we have only usedpublic(members of a \nclass are accessible from outside the class) andprivate(members can only be \naccessed within the class). The third specifier,protected, is similar toprivate, but it can also be accessed in theinheritedclass:"
        ],
        "lists": [],
        "examples": [
          "// Base classclass \n    Employee {protected: // Protected access specifierint salary;};// Derived classclass Programmer: public Employee {public:int bonus;void \n    setSalary(int s) {salary = s;}int getSalary() {return salary;}};int main() {Programmer myObj;myObj.setSalary(50000);myObj.bonus = \n    15000;cout << \n    \"Salary: \" << myObj.getSalary() << \"\\n\";cout << \"Bonus: \" << \n    myObj.bonus << \"\\n\";return 0;}"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_polymorphism.asp",
    "cours": {
      "titre": "C++Polymorphism",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_polymorphism.asp",
      "contenus": {
        "paragraphs": [
          "Polymorphism means \"many forms\", and it occurs when we have many classes that are related to each other by inheritance.",
          "Like we specified in the previous chapter;Inheritancelets us \ninherit attributes and methods from another class.Polymorphismuses those methods to perform different tasks. This allows us to perform a single \naction in different ways.",
          "For example, think of a base class calledAnimalthat has a method calledanimalSound(). Derived classes of Animals could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc.):",
          "Remember from theInheritance chapterthat we use the:symbol to inherit from a class.",
          "Now we can createPigandDogobjects and override theanimalSound()method:",
          "- It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class."
        ],
        "lists": [],
        "examples": [
          "// Base classclass Animal {public:void \n    animalSound() {cout << \"The animal makes a sound \\n\";}};// Derived classclass Pig : public Animal {public:void \n    animalSound() {cout << \"The pig says: wee wee \\n\";}};// Derived classclass Dog \n    : public Animal {public:void animalSound() \n    {cout << \"The dog says: bow wow \\n\";}};",
          "// Base classclass Animal {public:void \n    animalSound() {cout << \"The animal makes a sound \\n\";}};// Derived classclass Pig : public Animal {public:void \n    animalSound() {cout << \"The pig says: wee wee \\n\";}};// Derived classclass Dog \n    : public Animal {public:void animalSound() \n    {cout << \"The dog says: bow wow \\n\";}};int main() {Animal \n    myAnimal;Pig myPig;Dog myDog;myAnimal.animalSound();myPig.animalSound();myDog.animalSound();return 0;}"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_files.asp",
    "cours": {
      "titre": "C++Files",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_files.asp",
      "contenus": {
        "paragraphs": [
          "Thefstreamlibrary allows us to work with files.",
          "To use thefstreamlibrary, include both the standard<iostream>ANDthe<fstream>header file:",
          "There are three classes included in thefstreamlibrary, \nwhich are used to create, write or read files:",
          "To create a file, use either theofstreamorfstreamclass, \nand specify the name of the file.",
          "To write to the file, use the insertion operator (<<).",
          "It is considered good practice, and it can clean up unnecessary memory space.",
          "To read from a file, use either theifstreamorfstreamclass, and the name of the file.",
          "Note that we also use awhileloop together with thegetline()function \n(which belongs to theifstreamclass) to read the file line by line, and to print the content of the file:",
          "For a complete reference of <fstream> classes and functions, go to ourC++ fstream Reference."
        ],
        "lists": [],
        "examples": [
          "#include <iostream>#include <fstream>",
          "#include <iostream>#include <fstream>using namespace std;int main() {// Create and open a text fileofstream MyFile(\"filename.txt\");// \n    Write to the fileMyFile << \"Files can be tricky, but it is fun \n    enough!\";// \n    Close the fileMyFile.close();}",
          "// Create a \n    text string, which is used to output the text filestring myText;// Read from the text fileifstream MyReadFile(\"filename.txt\");// Use a while \n    loop together with the getline() function to read the file line by linewhile (getline (MyReadFile, \n    myText)) {// Output the text from the filecout << myText;}// Close the fileMyReadFile.close();"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_exceptions.asp",
    "cours": {
      "titre": "C++Exceptions",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_exceptions.asp",
      "contenus": {
        "paragraphs": [
          "When executing C++ code, different errors can occur: coding errors made by the programmer, errors due to wrong input, \nor other unforeseeable things.",
          "When an error occurs, C++ will normally stop and generate an error message. The technical term for this is: C++ will throw anexception(throw an error).",
          "Exception handling in C++ consist of three keywords:try,throwandcatch:",
          "Thetrystatement allows you to define a block of code to be \ntested for errors while it is being executed.",
          "Thethrowkeyword throws an exception when a \nproblem is detected, which lets us create a custom error.",
          "Thecatchstatement allows you to define a block of code to \nbe executed, if an error occurs in the try block.",
          "Thetryandcatchkeywords \ncome in pairs:",
          "Consider the following example:",
          "We use thetryblock to test some code: If theagevariable is less than18, we willthrowan exception, and handle it in ourcatchblock.",
          "In thecatchblock, we catch the error and \ndo something about it. Thecatchstatement takes aparameter: in our example we use anintvariable (myNum) (because we are throwing an exception ofinttype in thetryblock (age)), \nto output the value ofage.",
          "If no error occurs (e.g. ifageis20instead of15, \nmeaning it will be be greater \nthan 18), thecatchblock is skipped:",
          "You can also use thethrowkeyword to output a reference number, like a \ncustom error number/code for organizing purposes (505in our example):",
          "If you do not know thethrowtypeused in thetryblock, you can use the \"three dots\" syntax (...) inside thecatchblock, which will handle any type of exception:"
        ],
        "lists": [],
        "examples": [
          "try {// Block of code to trythrowexception; \n    // Throw an exception when a problem arise}catch () {// Block of code to handle errors}",
          "try {int age = 15;if (age >= 18) {cout << \"Access granted - you are old enough.\";} else {throw (age);}}catch (int \n    myNum) {cout << \"Access denied - You must be at least 18 years \n    old.\\n\";cout << \"Age is: \" << myNum;}",
          "int age = 20;",
          "try {int age = 15;if (age >= 18) {cout << \"Access granted - you are old enough.\";} else {throw 505;}}catch (int myNum) {cout << \"Access denied - You must be at least 18 years old.\\n\";cout << \"Error number: \" << myNum;}",
          "try {int age = 15;if (age >= 18) {cout << \"Access granted - you are old enough.\";} else {throw 505;}}catch (...) {cout << \"Access denied - You must be at least 18 years \n    old.\\n\";}"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_date.asp",
    "cours": {
      "titre": "C++Date and Time",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_date.asp",
      "contenus": {
        "paragraphs": [
          "The<ctime>library allows us to work \nwith dates and times.",
          "To use it, you must import the<ctime>header file:",
          "The<ctime>library has a variety of functions to measure dates and times.",
          "Thetime()function gives us atimestamprepresenting the current date and time. We can use thectime()function to show the date and time that a timestamp represents:",
          "Display the current date:",
          "Thetime()function writes a timestamp to the memory location given by the parameter, but it also returns the timestamp's value.",
          "An alternative way to use thetime()function is to pass in a NULL pointer and use the return value instead.",
          "There are two different data types used to store the date and time:time_tfortimestampsandstruct tmfordatetime structures.",
          "Timestampsrepresent a moment in time as a single number, which makes it easier for the computer to do calculations.",
          "Datetime structuresare structures that represent different components of the date and time as members. This makes it easier for us to specify dates. Datetime structures have the following members:",
          "Always keep in mind the way that date components are represented:",
          "Thetime()function can only create a timestamp for the current date, but we can create a timestamp for any date by using themktime()function.",
          "Themktime()function converts a datetime structure into a timestamp.",
          "Create a timestamp using themktime()function:",
          "Note:Themktime()function needs these members to have a value:tm_year,tm_mon,tm_mday,tm_hour,tm_min,tm_secandtm_isdst.",
          "Themktime()function also fills in thetm_wdayandtm_ydaymembers of the datetime structure with the correct values, which completes the structure and gives a valid datetime. It can be used, for example, to find the weekday of a given date:",
          "Find the weekday of a specified date:",
          "Thelocaltime()andgmtime()functions can convert timestamps into datetime structures.",
          "Thelocaltime()function returns a pointer to a structure representing the time in the computer's time zone.",
          "Thegmtime()function returns a pointer to a structure representing the time in the GMT time zone.",
          "These functions return apointerto a datetime structure. If we want to make sure its value does not change unexpectedly we should make a copy of it by dereferencing the pointer. To learn about dereferencing, see theC++ Dereference tutorial.",
          "Get a datetime structure and output the current hour:",
          "So far we have been using thectime()function to display the date contained in a timestamp. To display dates from a datetime structure we can use theasctime()function.",
          "Display the date represented by a datetime structure:",
          "Note:Theasctime()function does not correct invalid dates. For example, if you set the day of the month to 32 it will display 32. Themktime()function can correct these kinds of errors:",
          "Correct a date before displaying it:",
          "Thectime()andasctime()functions allow us to display the date but they do not allow us to choose how it is displayed.",
          "To choose how a date is displayed we can use thestrftime()function.",
          "Represent the current date in different ways:",
          "Thestrftime()function formats a date and writes it as a C-style string into achararray. It has four parameters:",
          "The following table has some useful format specifiers. For a more complete list, look at thestrftime() reference page.",
          "There are two different functions that can be used to measure differences in time.",
          "Thedifftime()function measures the number of seconds that passed between two different time stamps. This is useful when measuring time differences between dates.",
          "Measure the time difference between two timestamps",
          "Theclock()function is useful for measuring short intervals of time while the program is running. It is more precise than thedifftime()function.",
          "Each call to the clock function returns a special kind of timestamp measured in clocks (a unit of time that depends on how the library was implemented) which has a data typeclock_t. To measure a time difference, store a timestamp at two different moments in time and then subtract them. The time difference is measured in clocks, but you can convert it into seconds by dividing it by theCLOCKS_PER_SECconstant.",
          "Measure how long it takes for the program to run:",
          "Note:Make sure to cast the value to afloatordoubletype before dividing, otherwise it may result in an integer division which would cause the decimal part to be cut off.",
          "For a complete reference of <ctime> functions, go to ourC++ ctime Reference."
        ],
        "lists": [
          [
            "tm_sec- The seconds within a minute",
            "tm_min- The minutes within an hour",
            "tm_hour- The hour within a day (from 0 to 23)",
            "tm_mday- The day of the month",
            "tm_mon- The month (from 0 to 11 starting with January)",
            "tm_year- The number of years since 1900",
            "tm_wday- The weekday (from 0 to 6 starting with Sunday)",
            "tm_yday- The day of the year (from 0 to 365 with 0 being January 1)",
            "tm_isdst- Positive when daylight saving time is in effect, zero when not in effect and negative when unknown"
          ],
          [
            "Hours are represented in 24-hour format. 11pm would be represented as23.",
            "The months go from 0 to 11. For example, December would be represented as11rather than 12.",
            "Years are represented relative to the year 1900. The year 2024 would be represented as124because 124 years have passed since 1900."
          ],
          [
            "The first parameter points to the char array where the formatted date will be written.",
            "The second parameter specifies the space available in the array.",
            "The third parameter allows us to choose how the date is formatted using format specifiers.",
            "The last parameter is a pointer to the datetime structure which contains the date we want to display."
          ]
        ],
        "examples": []
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_data_structures.asp",
    "cours": {
      "titre": "C++Data Structures and STL",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_data_structures.asp",
      "contenus": {
        "paragraphs": [
          "Data structures are used to store and organize data. Anarrayis an example of a data structure, which \nallows multiple elements to be stored in a single variable.",
          "C++ includes many other data structures as well, each is used to handle data \nin different ways.",
          "These are part of the C++ STL, which stands for TheStandardTemplateLibrary.",
          "STL is a library that consist of differentdata structuresandalgorithmsto effectively store and manipulate data.",
          "If we say that data structures store data, we can say that algorithms are used to solve different problems, \noften by searching through and manipulating those data structures.",
          "Using the right data structure and algorithm makes your program run faster, \nespecially when working with lots of data.",
          "The most common data structures are:",
          "Which one to use depends on your specific needs. One thing they all have in common is that you must include the \nappropriate header file to use them:",
          "Here is an example of using vectors, after we have included the<vector>library:",
          "The next chapters will explain how each data structure works and how to use them.",
          "The key components of the STL consist ofcontainers,iterators,andalgorithms, and the relationship betweem them:",
          "In Computer Science, data structures and algorithms go hand in hand. A data structure is not worth \nmuch if you cannot search through it or manipulate it efficiently using \nalgorithms, and algorithms are not worth much without a data structure to work \non.",
          "In the following chapters, you will see how everything is connected."
        ],
        "lists": [
          [
            "Containersare data structures that provides a way to store data, likevectors,lists, etc.",
            "Iteratorsare objects used to access elements of \na data structure.",
            "Algorithmsinclude functions, likesort()andfind(), \nthat perform operations on data structures throughiterators."
          ]
        ],
        "examples": [
          "// Include the vector library#include <vector>// Include the list library#include <list>// Include the set \n  library#include <set>// Include the map library#include <map>// Include the stack library#include <stack>// \n  Include the queue library#include <queue>",
          "// Create a vector called cars that will store stringsvector<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Print vector elementsfor (string car : cars) {cout << car << \"\\n\";}"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_vectors.asp",
    "cours": {
      "titre": "C++Vectors",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_vectors.asp",
      "contenus": {
        "paragraphs": [
          "A vector in C++ is like a resizablearray.",
          "Both vectors and arrays are data structures used to store multiple elements of the same datatype.",
          "The difference between an array and a vector, is that the size of an array cannot be modified (you cannot add or remove elements from an array). \nA vector however, can grow or shrink in size as needed.",
          "To use a vector, you have to include the<vector>header file:",
          "To create a vector, use thevectorkeyword, \nand specify thetypeof values it should store within angle brackets<>and then the name of the vector, like:vector<type>vectorName.",
          "If you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces{}, just like \nwith arrays:",
          "Note:The type of the vector (stringin our example) cannot be changed after its been declared.",
          "You can access a vector element by referring to the index number inside square brackets[].",
          "Vectors, like arrays, are 0-indexed, meaning that[0]is the first element,[1]is the second element, and so on:",
          "One advantage of using the vector library, is that it includes many useful \nfunctions. For example, you can access the first or the last element of a vector \nwith the.front()and.back()functions:",
          "To access an element at a specified index, you can use the.at()function \nand specify the index number:",
          "Note:The.at()function is often preferred over square brackets[]because it \nlets you know if an error occurs.",
          "For example if the element is out of range:",
          "To change the value of a specific element, you can refer to the index number:",
          "However, it is safer to use the.at()function:",
          "The biggest difference between a vector and an array is that vectors can grow dynamically. \nThat means you can add or remove elements from the vector.",
          "To add an element to the vector, you can use the.push_back()function, which \nwill add an element at the end of the vector:",
          "You can add as many elements as you want:",
          "To remove an element from the vector, you can use the.pop_back()function, which \nremoves an element from the end of the vector:",
          "Note:Elements are usually only added and removed from the end of the vector. If you need to add or remove elements from both ends, it is often better to use adequeinstead of a vector.",
          "To find out how many elements a vector has, use the.size()function:",
          "There is also a function to find out whether a vector is empty or not.",
          "The.empty()function returns1(true) if the vector is empty and0(false) if it contains one or more elements:",
          "You can loop through the vector elements by using aforloop combined with the.size()function:",
          "You can also use afor-each loop(introduced in C++ version 11 (2011), which is cleaner and more readable:",
          "Tip:It is also possible to loop through vectors with aniterator, which you will learn more about in a later chapter.",
          "For a complete reference of Vector functions, go to ourC++ Vector Reference."
        ],
        "lists": [],
        "examples": [
          "// Include the vector library#include <vector>",
          "// Create a vector called cars that will store stringsvector<string> cars;",
          "// Create a vector called cars that will store stringsvector<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Print vector elementsfor (string car : cars) {cout << car << \"\\n\";}",
          "// Create a vector called cars that will store stringsvector<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Get the first elementcout << cars[0];  // Outputs Volvo// Get the \n  second elementcout << cars[1];  // Outputs BMW",
          "// Create a vector called cars that will store stringsvector<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Get the first elementcout << cars.front();// Get the last elementcout << cars.back();",
          "// Create a vector called cars that will store stringsvector<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Get the second elementcout << cars.at(1);// Get the third elementcout << cars.at(2);",
          "// Create a vector called cars that will store stringsvector<string> cars \n  = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// \n  Try to access an element that does \n  not exist (throws an error message)cout << cars.at(6);",
          "vector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Change the value of the first elementcars[0] = \"Opel\";cout << cars[0];  // Now outputs Opel instead of Volvo",
          "vector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Change the value of the first elementcars.at(0) = \"Opel\";cout << cars.at(0);  // Now outputs Opel instead of Volvo",
          "vector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cars.push_back(\"Tesla\");",
          "vector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cars.push_back(\"Tesla\");cars.push_back(\"VW\");cars.push_back(\"Mitsubishi\");cars.push_back(\"Mini\");",
          "vector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cars.pop_back();",
          "vector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cout << cars.size();  \n  // Outputs 4",
          "vector<string> cars;cout << cars.empty();  \n  // Outputs 1 (The vector is empty)",
          "vector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cout << cars.empty();  \n  // Outputs 0 (not empty)",
          "vector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};for (int i = \n  0; i < cars.size(); i++) {cout << cars[i] << \"\\n\";}",
          "vector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};for (string car : cars) {cout << car << \"\\n\";}"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_list.asp",
    "cours": {
      "titre": "C++List",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_list.asp",
      "contenus": {
        "paragraphs": [
          "A list is similar to avectorin that it can store multiple elements of the same type and dynamically grow in size.",
          "However, two major differences between lists and vectors are:",
          "To use a list, you have to include the<list>header file:// Include the list library#include <list>Create a ListTo create a list, use thelistkeyword, and \nspecify thetypeof values it should store within angle brackets<>and then the name of the list, like:list<type>listName.Example// Create a list called cars that will store stringslist<string> cars;If you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces{}:Example// Create a list called cars that will store stringslist<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Print list elementsfor (string car : cars) {cout << car << \"\\n\";}Try it Yourself »Note:The type of the list (stringin our example) cannot be changed after its been declared.Access a ListYou cannot access list elements by referring to index numbers, like with \narrays and vectors.However, you can access the first or the last element with the.front()and.back()functions, respectively:Example// Create a list called cars that will store stringslist<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Get the first elementcout << cars.front();  // Outputs Volvo// Get the \n  last elementcout << cars.back();  // Outputs MazdaTry it Yourself »Change a List ElementYou can also change the value of the first or the last element with the.front()and.back()functionsExamplelist<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Change the \n  value of the first elementcars.front() = \"Opel\";// Change the \n  value of the last elementcars.back() = \"Toyota\";cout << cars.front(); // Now \n  outputs Opel instead of Volvocout << cars.back();  // Now \n  outputs Toyota instead of MazdaTry it Yourself »Add List ElementsTo add elements to a list, you can use.push_front()to insert an element at the beginning of the list and.push_back()to add an element at the end:Examplelist<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Add an \n  element at the beginningcars.push_front(\"Tesla\");// Add an element \n  at the endcars.push_back(\"VW\");Try it Yourself »Remove List ElementsTo remove elements from a list, use.pop_front()to remove an element from the beginning of the list and.pop_back()to remove an element at the end:Examplelist<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Remove the \n  first elementcars.pop_front();// Remove the last elementcars.pop_back();Try it Yourself »List SizeTo find out how many elements a list has, use the.size()function:Examplelist<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cout << cars.size();  \n  // Outputs 4Try it Yourself »Check if a List is EmptyUse the.empty()function to find out if a list is empty or not.The.empty()function returns1(true) if the list is empty and0(false) \notherwise:Examplelist<string> cars;cout << cars.empty();  \n  // Outputs 1 (The list is empty)Try it Yourself »Examplelist<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cout << cars.empty();  \n  // Outputs 0 (not empty)Try it Yourself »Loop Through a ListYou cannot loop through the list elements with a traditionalforloop combined with the.size()function, since it is not possible to access \nelements in a list by index:Examplelist<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};for (int i = \n  0; i < cars.size(); i++) {cout << cars[i] << \"\\n\";}The simplest way to loop through a list is with thefor-eachloop:Examplelist<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};for (string car : cars) {cout << car << \"\\n\";}Try it Yourself »Tip:It is also possible to loop through lists with aniterator, which you will learn more about in a later chapter.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "To create a list, use thelistkeyword, and \nspecify thetypeof values it should store within angle brackets<>and then the name of the list, like:list<type>listName.",
          "If you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces{}:",
          "Note:The type of the list (stringin our example) cannot be changed after its been declared.",
          "You cannot access list elements by referring to index numbers, like with \narrays and vectors.",
          "However, you can access the first or the last element with the.front()and.back()functions, respectively:",
          "You can also change the value of the first or the last element with the.front()and.back()functions",
          "To add elements to a list, you can use.push_front()to insert an element at the beginning of the list and.push_back()to add an element at the end:",
          "To remove elements from a list, use.pop_front()to remove an element from the beginning of the list and.pop_back()to remove an element at the end:",
          "To find out how many elements a list has, use the.size()function:",
          "Use the.empty()function to find out if a list is empty or not.",
          "The.empty()function returns1(true) if the list is empty and0(false) \notherwise:",
          "You cannot loop through the list elements with a traditionalforloop combined with the.size()function, since it is not possible to access \nelements in a list by index:",
          "The simplest way to loop through a list is with thefor-eachloop:",
          "Tip:It is also possible to loop through lists with aniterator, which you will learn more about in a later chapter."
        ],
        "lists": [
          [
            "You can add and remove elements from both the beginning and at the end of a list, while vectors are generally \noptimized for adding and removing at the end.",
            "Unlike vectors, a list does not support random access, meaning you cannot \ndirectly jump to a specific index, or \naccess elements by index numbers."
          ]
        ],
        "examples": [
          "// Include the list library#include <list>",
          "// Create a list called cars that will store stringslist<string> cars;",
          "// Create a list called cars that will store stringslist<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Print list elementsfor (string car : cars) {cout << car << \"\\n\";}",
          "// Create a list called cars that will store stringslist<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Get the first elementcout << cars.front();  // Outputs Volvo// Get the \n  last elementcout << cars.back();  // Outputs Mazda",
          "list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Change the \n  value of the first elementcars.front() = \"Opel\";// Change the \n  value of the last elementcars.back() = \"Toyota\";cout << cars.front(); // Now \n  outputs Opel instead of Volvocout << cars.back();  // Now \n  outputs Toyota instead of Mazda",
          "list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Add an \n  element at the beginningcars.push_front(\"Tesla\");// Add an element \n  at the endcars.push_back(\"VW\");",
          "list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Remove the \n  first elementcars.pop_front();// Remove the last elementcars.pop_back();",
          "list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cout << cars.size();  \n  // Outputs 4",
          "list<string> cars;cout << cars.empty();  \n  // Outputs 1 (The list is empty)",
          "list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cout << cars.empty();  \n  // Outputs 0 (not empty)",
          "list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};for (int i = \n  0; i < cars.size(); i++) {cout << cars[i] << \"\\n\";}",
          "list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};for (string car : cars) {cout << car << \"\\n\";}"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_stacks.asp",
    "cours": {
      "titre": "C++Stacks",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_stacks.asp",
      "contenus": {
        "paragraphs": [
          "A stack stores multiple elements in a specific order, calledLIFO.",
          "LIFOstands forLast in, First Out. To vizualise LIFO, think of a pile of pancakes, \nwhere pancakes are both added and removed from the top. So when removing a pancake, it will always be the last \none you added. This way of organizing elements is called LIFO in computer \nscience and programming.",
          "Unlikevectors, elements in the stack are not \naccessed by index numbers. Since elements are added and removed from the top, you can only access the element at the top of the stack.",
          "To use a stack, you have to include the<stack>header file:// Include the stack library#include <stack>Create a StackTo create a stack, use thestackkeyword, \nand specify thetypeof values it should store within angle brackets<>and then the name of the stack, like:stack<type>stackName.// Create a \n  stack of strings called carsstack<string> cars;Note:The type of the stack (string in our example) cannot be changed after its been declared.Note:You cannot add elements to the stack at the time of declaration, like you can withvectors:stack<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};Add ElementsTo add elements to the stack, use the.push()function, after declaring the stack:Example// Create a stack of strings called carsstack<string> cars;// \n  Add elements to the stackcars.push(\"Volvo\");cars.push(\"BMW\");cars.push(\"Ford\");cars.push(\"Mazda\");The stack will look like this (remember that the last element added is the top element):Mazda (top element)FordBMWVolvoAccess Stack ElementsYou cannot access stack elements by referring to index numbers, like you would witharraysandvectors.In a stack, you can only access the top element, which is done using the.top()function:Example// Access the top elementcout << cars.top();  // Outputs \n    \"Mazda\"Try it Yourself »Change the Top ElementYou can also use the.topfunction to change the value of the top element:Example// \n    Change the value of the top elementcars.top() = \"Tesla\";// \n    Access the top elementcout << cars.top();  // Now outputs \"Tesla\" \n    instead of \"Mazda\"Try it Yourself »Remove ElementsYou can use the.pop()function to remove an element from the stack.This will remove the last element that was added to the stack:Example// Create a stack of strings called carsstack<string> cars;// \n  Add elements to the stackcars.push(\"Volvo\");cars.push(\"BMW\");cars.push(\"Ford\");cars.push(\"Mazda\");// Remove the \n  last added \n  element (Mazda)cars.pop();// Access the top \n  element (Now Ford)cout << cars.top();Try it Yourself »Get the Size of the StackTo find out how many elements a stack has, use the.size()function:Examplecout \n  << cars.size();Try it Yourself »Check if the Stack is EmptyUse the.empty()function to find out if the \nstack is empty or not.The.empty()function returns1(true) if the stack is empty and0(false) \notherwise:Examplestack<string> cars;cout << cars.empty(); \n  // Outputs 1 (The stack is empty)Try it Yourself »Examplestack<string> cars;cars.push(\"Volvo\");cars.push(\"BMW\");cars.push(\"Ford\");cars.push(\"Mazda\");cout \n  << cars.empty();  \n  // Outputs 0 (not empty)Try it Yourself »Stacks and QueuesStacks are often mentioned together withQueues, which is a similar data structure described on thenext page.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "To create a stack, use thestackkeyword, \nand specify thetypeof values it should store within angle brackets<>and then the name of the stack, like:stack<type>stackName.",
          "Note:The type of the stack (string in our example) cannot be changed after its been declared.",
          "Note:You cannot add elements to the stack at the time of declaration, like you can withvectors:",
          "To add elements to the stack, use the.push()function, after declaring the stack:",
          "The stack will look like this (remember that the last element added is the top element):",
          "You cannot access stack elements by referring to index numbers, like you would witharraysandvectors.",
          "In a stack, you can only access the top element, which is done using the.top()function:",
          "You can also use the.topfunction to change the value of the top element:",
          "You can use the.pop()function to remove an element from the stack.",
          "This will remove the last element that was added to the stack:",
          "To find out how many elements a stack has, use the.size()function:",
          "Use the.empty()function to find out if the \nstack is empty or not.",
          "The.empty()function returns1(true) if the stack is empty and0(false) \notherwise:",
          "Stacks are often mentioned together withQueues, which is a similar data structure described on thenext page."
        ],
        "lists": [],
        "examples": [
          "// Include the stack library#include <stack>",
          "// Create a \n  stack of strings called carsstack<string> cars;",
          "stack<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};",
          "// Create a stack of strings called carsstack<string> cars;// \n  Add elements to the stackcars.push(\"Volvo\");cars.push(\"BMW\");cars.push(\"Ford\");cars.push(\"Mazda\");",
          "// Access the top elementcout << cars.top();  // Outputs \n    \"Mazda\"",
          "// \n    Change the value of the top elementcars.top() = \"Tesla\";// \n    Access the top elementcout << cars.top();  // Now outputs \"Tesla\" \n    instead of \"Mazda\"",
          "// Create a stack of strings called carsstack<string> cars;// \n  Add elements to the stackcars.push(\"Volvo\");cars.push(\"BMW\");cars.push(\"Ford\");cars.push(\"Mazda\");// Remove the \n  last added \n  element (Mazda)cars.pop();// Access the top \n  element (Now Ford)cout << cars.top();",
          "cout \n  << cars.size();",
          "stack<string> cars;cout << cars.empty(); \n  // Outputs 1 (The stack is empty)",
          "stack<string> cars;cars.push(\"Volvo\");cars.push(\"BMW\");cars.push(\"Ford\");cars.push(\"Mazda\");cout \n  << cars.empty();  \n  // Outputs 0 (not empty)"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_queues.asp",
    "cours": {
      "titre": "C++Queues",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_queues.asp",
      "contenus": {
        "paragraphs": [
          "A queue stores multiple elements in a specific order, calledFIFO.",
          "FIFOstands forFirst in, First Out. To visualize FIFO, think of a queue as people standing in line in a supermarket.\nThe first person to stand in line is also the first who can pay and leave the supermarket. This way of organizing elements is called FIFO in computer science and programming.",
          "Unlikevectors, elements in the queue are not \naccessed by index numbers. Since queue elements are added at the end and removed \nfrom the front, you can only access an element at the front or the back.",
          "To use a queue, you have to include the<queue>header file:// Include the queue library#include <queue>Create a QueueTo create a queue, use thequeuekeyword, \nand specify thetypeof values it should store within angle brackets<>and then the name of the queue, like:queue<type>queueName.// Create a \n  queue of strings called carsqueue<string> cars;Note:The type of the queue (string in our example) cannot be changed after its been declared.Note:You cannot add elements to the queue at the time of declaration, like you can withvectors:queue<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};Add ElementsTo add elements to the queue, you can use the.push()function after declaring the queue.The.push()function adds an element at the \nend of the queue:Example// Create a queue of stringsqueue<string> cars;// Add elements to the queuecars.push(\"Volvo\");cars.push(\"BMW\");cars.push(\"Ford\");cars.push(\"Mazda\");The queue will look like this:Volvo (front (first) element)BMWFordMazda (back (last) element)Access Queue ElementsYou cannot access queue elements by referring to index numbers, like you would witharraysandvectors.In a queue, you can only access the element at the front or the back, using.front()and.back()respectively:Example// Access the \n    front element (first and oldest)cout << cars.front();  // \n    Outputs \"Volvo\"// Access the \n    back element (last and newest)cout << cars.back();  // \n    Outputs \"Mazda\"Try it Yourself »Change Front and Back ElementsYou can also use.frontand.backto change the value of the front and back elements:Example// Change the value of the front elementcars.front() = \"Tesla\";// Change the value of the back elementcars.back() = \"VW\";// \n    Access the front elementcout << cars.front();  // Now outputs \n    \"Tesla\" instead of \"Volvo\"// Access the back elementcout << cars.back();  // Now outputs \"VW\" instead \n    of \"Mazda\"Try it Yourself »Remove ElementsYou can use the.pop()function to remove an element from the \nqueue.This will remove the front element (the first and oldest element that was added to the \nqueue):Example// Create a queue of stringsqueue<string> cars;// Add elements to the queuecars.push(\"Volvo\");cars.push(\"BMW\");cars.push(\"Ford\");cars.push(\"Mazda\");// Remove the \n  front \n  element (Volvo)cars.pop();// Access the front \n  element (Now BMW)cout << cars.front();Try it Yourself »Get the Size of a QueueTo find out how many elements there are in a queue, use the.size()function:Examplecout \n  << cars.size();Try it Yourself »Check if the Queue is EmptyUse the.empty()function to find out if the \nqueue is empty or not.The.empty()function returns1(true) if the queue is empty and0(false) \notherwise:Examplequeue<string> cars;cout << cars.empty(); \n  // Outputs 1 (The queue is empty)Try it Yourself »Examplequeue<string> cars;cars.push(\"Volvo\");cars.push(\"BMW\");cars.push(\"Ford\");cars.push(\"Mazda\");cout \n  << cars.empty();  \n  // Outputs 0 (not empty)Try it Yourself »Stacks and QueuesQueues are often mentioned together withStacks, which is a similar data structure described in theprevious page.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "To create a queue, use thequeuekeyword, \nand specify thetypeof values it should store within angle brackets<>and then the name of the queue, like:queue<type>queueName.",
          "Note:The type of the queue (string in our example) cannot be changed after its been declared.",
          "Note:You cannot add elements to the queue at the time of declaration, like you can withvectors:",
          "To add elements to the queue, you can use the.push()function after declaring the queue.",
          "The.push()function adds an element at the \nend of the queue:",
          "The queue will look like this:",
          "You cannot access queue elements by referring to index numbers, like you would witharraysandvectors.",
          "In a queue, you can only access the element at the front or the back, using.front()and.back()respectively:",
          "You can also use.frontand.backto change the value of the front and back elements:",
          "You can use the.pop()function to remove an element from the \nqueue.",
          "This will remove the front element (the first and oldest element that was added to the \nqueue):",
          "To find out how many elements there are in a queue, use the.size()function:",
          "Use the.empty()function to find out if the \nqueue is empty or not.",
          "The.empty()function returns1(true) if the queue is empty and0(false) \notherwise:",
          "Queues are often mentioned together withStacks, which is a similar data structure described in theprevious page."
        ],
        "lists": [],
        "examples": [
          "// Include the queue library#include <queue>",
          "// Create a \n  queue of strings called carsqueue<string> cars;",
          "queue<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};",
          "// Create a queue of stringsqueue<string> cars;// Add elements to the queuecars.push(\"Volvo\");cars.push(\"BMW\");cars.push(\"Ford\");cars.push(\"Mazda\");",
          "// Access the \n    front element (first and oldest)cout << cars.front();  // \n    Outputs \"Volvo\"// Access the \n    back element (last and newest)cout << cars.back();  // \n    Outputs \"Mazda\"",
          "// Change the value of the front elementcars.front() = \"Tesla\";// Change the value of the back elementcars.back() = \"VW\";// \n    Access the front elementcout << cars.front();  // Now outputs \n    \"Tesla\" instead of \"Volvo\"// Access the back elementcout << cars.back();  // Now outputs \"VW\" instead \n    of \"Mazda\"",
          "// Create a queue of stringsqueue<string> cars;// Add elements to the queuecars.push(\"Volvo\");cars.push(\"BMW\");cars.push(\"Ford\");cars.push(\"Mazda\");// Remove the \n  front \n  element (Volvo)cars.pop();// Access the front \n  element (Now BMW)cout << cars.front();",
          "cout \n  << cars.size();",
          "queue<string> cars;cout << cars.empty(); \n  // Outputs 1 (The queue is empty)",
          "queue<string> cars;cars.push(\"Volvo\");cars.push(\"BMW\");cars.push(\"Ford\");cars.push(\"Mazda\");cout \n  << cars.empty();  \n  // Outputs 0 (not empty)"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_deque.asp",
    "cours": {
      "titre": "C++Deque",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_deque.asp",
      "contenus": {
        "paragraphs": [
          "In the previous page, your learned that elements in aqueueare added at the \nend and removed from the front.A deque (stands fordouble-endedqueue) however, is more flexible, as elements can be added and removed \nfrom both ends (at the front and the back). You can also access elements by \nindex numbers.To use a deque, you have to include the<deque>header file:// Include the deque library#include <deque>Create a DequeTo create a deque, use thedequekeyword, \nand specify thetypeof values it should store within angle brackets<>and then the name of the deque, like:deque<type>dequeName.Example// Create a deque called cars that will store stringsdeque<string> cars;If you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces{}:Example// Create a deque called cars that will store stringsdeque<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Print deque elementsfor (string car : cars) {cout << car << \"\\n\";}Try it Yourself »Note:The type of the deque (stringin our example) cannot be changed after its been declared.Access a DequeYou can access a deque element by referring to the index number inside square brackets[].Deques are 0-indexed, meaning that[0]is the first element,[1]is the second element, and so on:Example// Create a deque called cars that will store stringsdeque<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Get the first elementcout << cars[0];  // Outputs Volvo// Get the \n  second elementcout << cars[1];  // Outputs BMWTry it Yourself »You can also access the first or the last element of a deque \nwith the.front()and.back()functions:Example// Create a deque called cars that will store stringsdeque<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Get the first elementcout << cars.front();// Get the last elementcout << cars.back();Try it Yourself »To access an element at a specified index, you can use the.at()function \nand specify the index number:Example// Create a deque called cars that will store stringsdeque<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Get the second elementcout << cars.at(1);// Get the third elementcout << cars.at(2);Try it Yourself »Note:The.at()function is often preferred over square brackets[]because it throws an \nerror message if the element is out of range:Example// Create a deque called cars that will store stringsdeque<string> cars \n  = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// \n  Try to access an element that does \n  not exist (will throw an exception)cout << cars.at(6);Try it Yourself »Change a Deque ElementTo change the value of a specific element, you can refer to the index number:Exampledeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Change the value of the first elementcars[0] = \"Opel\";cout << cars[0];  // Now outputs Opel instead of VolvoTry it Yourself »However, it is safer to use the.at()function:Exampledeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Change the value of the first elementcars.at(0) = \"Opel\";cout << cars.at(0);  // Now outputs Opel instead of VolvoTry it Yourself »Add Deque ElementsTo add elements to a deque, you can use.push_front()to insert an element at the beginning of the deque and.push_back()to add an element at the end:Exampledeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Add an \n  element at the beginningcars.push_front(\"Tesla\");// Add an element \n  at the endcars.push_back(\"VW\");Try it Yourself »Remove Deque ElementsTo remove elements from a deque, use.pop_front()to remove an element from the beginning of the deque and.pop_back()to remove an element at the end:Exampledeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Remove the \n  first elementcars.pop_front();// Remove the last elementcars.pop_back();Try it Yourself »Deque SizeTo find out how many elements a deque has, use the.size()function:Exampledeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cout << cars.size();  \n  // Outputs 4Try it Yourself »Check if a Deque is EmptyUse the.empty()function to find out if a \ndeque is empty or not.The.empty()function returns1(true) if the deque is empty and0(false) \notherwise:Exampledeque<string> cars;cout << cars.empty();  \n  // Outputs 1 (The deque is empty)Try it Yourself »Exampledeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cout << cars.empty();  \n  // Outputs 0 (not empty)Try it Yourself »Loop Through a DequeYou can loop through the deque elements by using aforloop combined with the.size()function:Exampledeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};for (int i = \n  0; i < cars.size(); i++) {cout << cars[i] << \"\\n\";}Try it Yourself »You can also use afor-each loop(introduced in C++ version 11 (2011), which is cleaner and more readable:Exampledeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};for (string car : cars) {cout << car << \"\\n\";}Try it Yourself »Tip:It is also possible to loop through deques with aniterator, which you will learn more about in a later chapter.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "A deque (stands fordouble-endedqueue) however, is more flexible, as elements can be added and removed \nfrom both ends (at the front and the back). You can also access elements by \nindex numbers.",
          "To use a deque, you have to include the<deque>header file:// Include the deque library#include <deque>Create a DequeTo create a deque, use thedequekeyword, \nand specify thetypeof values it should store within angle brackets<>and then the name of the deque, like:deque<type>dequeName.Example// Create a deque called cars that will store stringsdeque<string> cars;If you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces{}:Example// Create a deque called cars that will store stringsdeque<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Print deque elementsfor (string car : cars) {cout << car << \"\\n\";}Try it Yourself »Note:The type of the deque (stringin our example) cannot be changed after its been declared.Access a DequeYou can access a deque element by referring to the index number inside square brackets[].Deques are 0-indexed, meaning that[0]is the first element,[1]is the second element, and so on:Example// Create a deque called cars that will store stringsdeque<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Get the first elementcout << cars[0];  // Outputs Volvo// Get the \n  second elementcout << cars[1];  // Outputs BMWTry it Yourself »You can also access the first or the last element of a deque \nwith the.front()and.back()functions:Example// Create a deque called cars that will store stringsdeque<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Get the first elementcout << cars.front();// Get the last elementcout << cars.back();Try it Yourself »To access an element at a specified index, you can use the.at()function \nand specify the index number:Example// Create a deque called cars that will store stringsdeque<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Get the second elementcout << cars.at(1);// Get the third elementcout << cars.at(2);Try it Yourself »Note:The.at()function is often preferred over square brackets[]because it throws an \nerror message if the element is out of range:Example// Create a deque called cars that will store stringsdeque<string> cars \n  = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// \n  Try to access an element that does \n  not exist (will throw an exception)cout << cars.at(6);Try it Yourself »Change a Deque ElementTo change the value of a specific element, you can refer to the index number:Exampledeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Change the value of the first elementcars[0] = \"Opel\";cout << cars[0];  // Now outputs Opel instead of VolvoTry it Yourself »However, it is safer to use the.at()function:Exampledeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Change the value of the first elementcars.at(0) = \"Opel\";cout << cars.at(0);  // Now outputs Opel instead of VolvoTry it Yourself »Add Deque ElementsTo add elements to a deque, you can use.push_front()to insert an element at the beginning of the deque and.push_back()to add an element at the end:Exampledeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Add an \n  element at the beginningcars.push_front(\"Tesla\");// Add an element \n  at the endcars.push_back(\"VW\");Try it Yourself »Remove Deque ElementsTo remove elements from a deque, use.pop_front()to remove an element from the beginning of the deque and.pop_back()to remove an element at the end:Exampledeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Remove the \n  first elementcars.pop_front();// Remove the last elementcars.pop_back();Try it Yourself »Deque SizeTo find out how many elements a deque has, use the.size()function:Exampledeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cout << cars.size();  \n  // Outputs 4Try it Yourself »Check if a Deque is EmptyUse the.empty()function to find out if a \ndeque is empty or not.The.empty()function returns1(true) if the deque is empty and0(false) \notherwise:Exampledeque<string> cars;cout << cars.empty();  \n  // Outputs 1 (The deque is empty)Try it Yourself »Exampledeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cout << cars.empty();  \n  // Outputs 0 (not empty)Try it Yourself »Loop Through a DequeYou can loop through the deque elements by using aforloop combined with the.size()function:Exampledeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};for (int i = \n  0; i < cars.size(); i++) {cout << cars[i] << \"\\n\";}Try it Yourself »You can also use afor-each loop(introduced in C++ version 11 (2011), which is cleaner and more readable:Exampledeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};for (string car : cars) {cout << car << \"\\n\";}Try it Yourself »Tip:It is also possible to loop through deques with aniterator, which you will learn more about in a later chapter.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "To create a deque, use thedequekeyword, \nand specify thetypeof values it should store within angle brackets<>and then the name of the deque, like:deque<type>dequeName.",
          "If you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces{}:",
          "Note:The type of the deque (stringin our example) cannot be changed after its been declared.",
          "You can access a deque element by referring to the index number inside square brackets[].",
          "Deques are 0-indexed, meaning that[0]is the first element,[1]is the second element, and so on:",
          "You can also access the first or the last element of a deque \nwith the.front()and.back()functions:",
          "To access an element at a specified index, you can use the.at()function \nand specify the index number:",
          "Note:The.at()function is often preferred over square brackets[]because it throws an \nerror message if the element is out of range:",
          "To change the value of a specific element, you can refer to the index number:",
          "However, it is safer to use the.at()function:",
          "To add elements to a deque, you can use.push_front()to insert an element at the beginning of the deque and.push_back()to add an element at the end:",
          "To remove elements from a deque, use.pop_front()to remove an element from the beginning of the deque and.pop_back()to remove an element at the end:",
          "To find out how many elements a deque has, use the.size()function:",
          "Use the.empty()function to find out if a \ndeque is empty or not.",
          "The.empty()function returns1(true) if the deque is empty and0(false) \notherwise:",
          "You can loop through the deque elements by using aforloop combined with the.size()function:",
          "You can also use afor-each loop(introduced in C++ version 11 (2011), which is cleaner and more readable:",
          "Tip:It is also possible to loop through deques with aniterator, which you will learn more about in a later chapter."
        ],
        "lists": [],
        "examples": [
          "// Include the deque library#include <deque>",
          "// Create a deque called cars that will store stringsdeque<string> cars;",
          "// Create a deque called cars that will store stringsdeque<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Print deque elementsfor (string car : cars) {cout << car << \"\\n\";}",
          "// Create a deque called cars that will store stringsdeque<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Get the first elementcout << cars[0];  // Outputs Volvo// Get the \n  second elementcout << cars[1];  // Outputs BMW",
          "// Create a deque called cars that will store stringsdeque<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Get the first elementcout << cars.front();// Get the last elementcout << cars.back();",
          "// Create a deque called cars that will store stringsdeque<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Get the second elementcout << cars.at(1);// Get the third elementcout << cars.at(2);",
          "// Create a deque called cars that will store stringsdeque<string> cars \n  = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// \n  Try to access an element that does \n  not exist (will throw an exception)cout << cars.at(6);",
          "deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Change the value of the first elementcars[0] = \"Opel\";cout << cars[0];  // Now outputs Opel instead of Volvo",
          "deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Change the value of the first elementcars.at(0) = \"Opel\";cout << cars.at(0);  // Now outputs Opel instead of Volvo",
          "deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Add an \n  element at the beginningcars.push_front(\"Tesla\");// Add an element \n  at the endcars.push_back(\"VW\");",
          "deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Remove the \n  first elementcars.pop_front();// Remove the last elementcars.pop_back();",
          "deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cout << cars.size();  \n  // Outputs 4",
          "deque<string> cars;cout << cars.empty();  \n  // Outputs 1 (The deque is empty)",
          "deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cout << cars.empty();  \n  // Outputs 0 (not empty)",
          "deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};for (int i = \n  0; i < cars.size(); i++) {cout << cars[i] << \"\\n\";}",
          "deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};for (string car : cars) {cout << car << \"\\n\";}"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_sets.asp",
    "cours": {
      "titre": "C++Sets",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_sets.asp",
      "contenus": {
        "paragraphs": [
          "A set stores unique elements where they:",
          "To use a set, you have to include the<set>header file:// Include the set library#include <set>Create a SetTo create a set, use thesetkeyword, \nand specify thetypeof values it should store within angle brackets<>and then the name of the set, like:set<type>setName.Example// Create a set called cars that will store stringsset<string> cars;If you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces{}:Example// Create a set called cars that will store stringsset<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Print set elementsfor (string car : cars) {cout << car << \"\\n\";}The output will be:BMWFordMazdaVolvoTry it Yourself »As you can see from the result above, the elements in the set are \nsorted automatically. In this case, alphabetically, as we are working with strings.If you store integers in the set, the returned values are sorted numerically:Example// Create a set called \n  numbers that will store integersset<int> numbers = {1, 7, 3, 2, 5, 9};// Print set elementsfor (int num : numbers) {cout << \n  num << \"\\n\";}The output will be:123579Try it Yourself »Note:The type of the set (e.g.stringandintin \n  the examples above) cannot be changed after its been declared.Sort a Set in Descending OrderBy default, the elements in a set are sorted in ascending order. If you want to reverse the order, \nyou can use thegreater<type>functor inside the angle brackets, like this:Example// Sort elements in a set in descending orderset<int,greater<int>> numbers = {1, 7, 3, 2, 5, 9};// Print \n  the elementsfor (int num : numbers) {cout << \n  num << \"\\n\";}The output will be:975321Try it Yourself »Note:The type specified in greater<type> must match the type of elements in the set (intin our example).Unique ElementsElements in a set are unique, which means they cannot be \nduplicated or equal.For example, if we try to add \"BMW\" two times in the set, the duplicate \nelement is ignored:Exampleset<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"BMW\", \"Mazda\"};// Print set elementsfor (string car : cars) {cout << car << \"\\n\";}The output will be:BMWFordMazdaVolvoTry it Yourself »Add ElementsTo add elements to a set, you can use the.insert()function:Exampleset<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Add new elementscars.insert(\"Tesla\");cars.insert(\"VW\");cars.insert(\"Toyota\");cars.insert(\"Audi\");Try it Yourself »Remove ElementsTo remove specific elements from a set, you can use the.erase()function:Exampleset<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Remove elementscars.erase(\"Volvo\");cars.erase(\"Mazda\");Try it Yourself »To remove all elements from a set, you can use the.clear()function:Exampleset<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Remove all elementscars.clear();Try it Yourself »Find the Size of a SetTo find out how many elements a set has, use the.size()function:Exampleset<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cout << cars.size();  \n  // Outputs 4Try it Yourself »Check if a Set is EmptyUse the.empty()function to find out if a \nset is empty or not.The.empty()function returns1(true) if the set is empty and0(false) \notherwise:Exampleset<string> cars;cout << cars.empty();  \n  // Outputs 1 (The set is empty)Try it Yourself »Exampleset<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cout << cars.empty();  \n  // Outputs 0 (not empty)Try it Yourself »Loop Through a SetYou can loop through a set with thefor-each loop:Exampleset<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};for (string car : cars) {cout << car << \"\\n\";}Try it Yourself »Tip:It is also possible to loop through sets with aniterator, which you will learn more about in a later chapter.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "To create a set, use thesetkeyword, \nand specify thetypeof values it should store within angle brackets<>and then the name of the set, like:set<type>setName.",
          "If you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces{}:",
          "The output will be:",
          "As you can see from the result above, the elements in the set are \nsorted automatically. In this case, alphabetically, as we are working with strings.",
          "If you store integers in the set, the returned values are sorted numerically:",
          "The output will be:",
          "Note:The type of the set (e.g.stringandintin \n  the examples above) cannot be changed after its been declared.",
          "By default, the elements in a set are sorted in ascending order. If you want to reverse the order, \nyou can use thegreater<type>functor inside the angle brackets, like this:",
          "The output will be:",
          "Note:The type specified in greater<type> must match the type of elements in the set (intin our example).",
          "Elements in a set are unique, which means they cannot be \nduplicated or equal.",
          "For example, if we try to add \"BMW\" two times in the set, the duplicate \nelement is ignored:",
          "The output will be:",
          "To add elements to a set, you can use the.insert()function:",
          "To remove specific elements from a set, you can use the.erase()function:",
          "To remove all elements from a set, you can use the.clear()function:",
          "To find out how many elements a set has, use the.size()function:",
          "Use the.empty()function to find out if a \nset is empty or not.",
          "The.empty()function returns1(true) if the set is empty and0(false) \notherwise:",
          "You can loop through a set with thefor-each loop:",
          "Tip:It is also possible to loop through sets with aniterator, which you will learn more about in a later chapter."
        ],
        "lists": [
          [
            "Are sorted automatically in ascending order.",
            "Are unique, meaning equal or duplicate values are ignored.",
            "Can be added or removed, but the value of an existing element cannot be changed.",
            "Cannot be accessed by index numbers, because the order is based on \nsorting and not indexing."
          ]
        ],
        "examples": [
          "// Include the set library#include <set>",
          "// Create a set called cars that will store stringsset<string> cars;",
          "// Create a set called cars that will store stringsset<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Print set elementsfor (string car : cars) {cout << car << \"\\n\";}",
          "// Create a set called \n  numbers that will store integersset<int> numbers = {1, 7, 3, 2, 5, 9};// Print set elementsfor (int num : numbers) {cout << \n  num << \"\\n\";}",
          "// Sort elements in a set in descending orderset<int,greater<int>> numbers = {1, 7, 3, 2, 5, 9};// Print \n  the elementsfor (int num : numbers) {cout << \n  num << \"\\n\";}",
          "set<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"BMW\", \"Mazda\"};// Print set elementsfor (string car : cars) {cout << car << \"\\n\";}",
          "set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Add new elementscars.insert(\"Tesla\");cars.insert(\"VW\");cars.insert(\"Toyota\");cars.insert(\"Audi\");",
          "set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Remove elementscars.erase(\"Volvo\");cars.erase(\"Mazda\");",
          "set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Remove all elementscars.clear();",
          "set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cout << cars.size();  \n  // Outputs 4",
          "set<string> cars;cout << cars.empty();  \n  // Outputs 1 (The set is empty)",
          "set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};cout << cars.empty();  \n  // Outputs 0 (not empty)",
          "set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};for (string car : cars) {cout << car << \"\\n\";}"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_maps.asp",
    "cours": {
      "titre": "C++Maps",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_maps.asp",
      "contenus": {
        "paragraphs": [
          "A map stores elements in \"key/value\" pairs.",
          "Elements in a map are:",
          "To use a map, you have to include the<map>header file:// Include the map library#include <map>Create a MapTo create a map, use themapkeyword, \nand specify thetypeof both the key and the value it should store within angle brackets<>. \nAt last, specify the name of the map, like:map<keytype, \nvaluetype>mapName:Example// Create a \n  map called people that will store strings as keys and integers as valuesmap<string, int> peopleIf you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces{}:Example// Create a \n  map that will store the name and age of different peoplemap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };Access a MapYou cannot access map elements by referring to index numbers, like you would witharraysandvectors.Instead, you can access a map element by referring to its key inside square \nbrackets[]:Example// Create a map that will store the name and age of different peoplemap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };// Get the value associated with the key \"John\"cout << \"John is: \" << \n  people[\"John\"] << \"\\n\";// Get the value associated with the key \n  \"Adele\"cout << \"Adele is: \" << people[\"Adele\"] << \"\\n\";Try it Yourself »You can also access elements with the.at()function:Example// Create a map that will store the name and age of different peoplemap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };// \n  Get the value associated with the key \"Adele\"cout << \"Adele is: \" <<people.at(\"Adele\") << \"\\n\";// Get the value associated with the key \n  \"Bo\"cout << \"Bo is: \" << people.at(\"Bo\") << \"\\n\";Try it Yourself »Note:The.at()function is often preferred over square brackets[]because it throws an \nerror message if the element does not exist:Example// Create a map that will store the name and age of different peoplemap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };// \n  Try to access an element that does \n  not exist (will throw an exception)cout << people.at(\"Jenny\");Try it Yourself »Change ValuesYou can also change the value associated with a key:Examplemap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };// Change John's value to 50 instead of 32people[\"John\"] = 50;cout << \"John is: \" << people[\"John\"];  // Now outputs John is: 50Try it Yourself »However, it is safer to use the.at()function:Examplemap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };// Change John's value to 50 instead of 32people.at(\"John\") = 50;cout << \"John is: \" << people.at(\"John\");  // Now outputs John is: 50Try it Yourself »Add ElementsTo add elements to a map, it is ok to use square brackets[]:Examplemap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };// Add new elementspeople[\"Jenny\"] = 22;people[\"Liam\"] = 24;people[\"Kasper\"] = 20;people[\"Anja\"] = 30;Try it Yourself »But you can also use the.insert()function:Examplemap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };// Add new elementspeople.insert({\"Jenny\", 22});people.insert({\"Liam\", 24});people.insert({\"Kasper\", 20});people.insert({\"Anja\", 30});Try it Yourself »Elements with Equal KeysA map cannot have elements with equal keys.For example, if we try to add \"Jenny\" two times to the map, it will only keep the first one:Examplemap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };// Trying to add two elements with equal keyspeople.insert({\"Jenny\", 22});people.insert({\"Jenny\", 30});Try it Yourself »To sum up;values can be equal, but keys must be unique.Remove ElementsTo remove specific elements from a map, you can use the.erase()function:Examplemap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };// Remove an element by keypeople.erase(\"John\");Try it Yourself »To remove all elements from a set, you can use the.clear()function:Examplemap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };// Remove all elementspeople.clear();Find the Size of a MapTo find out how many elements a map has, use the.size()function:Examplemap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };cout \n  << people.size();  // Outputs 3Try it Yourself »Check if a Map is EmptyUse the.empty()function to find out if a \nmap is empty or not.The.empty()function returns1(true) if the map is empty and0(false) \notherwise:Examplemap<string, int> people;cout << people.empty(); \n  // Outputs 1 (The map is empty)Try it Yourself »Examplemap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };cout \n  << people.empty();  \n  // Outputs 0 (not empty)Try it Yourself »Note:You can also check if a specific element exists, by using the.count(key)function.It returns1(true) if the element exists and0(false) \notherwise:Examplemap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };cout \n  << people.count(\"John\");  \n  // Outputs 1 (John exists)Try it Yourself »Loop Through a MapYou can loop through a map with thefor-eachloop. \nHowever, there are a couple of things to be aware of:You should use theautokeyword (introduced in C++ version 11) inside theforloop. \nThis allows the compiler \nto automatically determine the correct data type for each key-value pair.Since map elements consist of both keys and values, you have to include.firstto access the keys, and.secondto access values in the loop.Elements in the map are sorted automatically in ascending order by their \n  keys:Examplemap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };for (autoperson : people) {cout <<person.first<< \" is: \" <<person.second<< \"\\n\";}The output will be:Adele is: 45Bo is: 29John is: 32Try it Yourself »If you want to reverse the order, you can use thegreater<type>functor inside the angle brackets, like this:Examplemap<string, int,greater<string>> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };for (auto person : people) {cout << person.first << \" is: \" << \n  person.second << \"\\n\";}The output will be:John is: 32Bo is: 29Adele is: 45Try it Yourself »Tip:It is also possible to loop through maps with aniterator, which you will learn more about in the next chapter.❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
          "To create a map, use themapkeyword, \nand specify thetypeof both the key and the value it should store within angle brackets<>. \nAt last, specify the name of the map, like:map<keytype, \nvaluetype>mapName:",
          "If you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces{}:",
          "You cannot access map elements by referring to index numbers, like you would witharraysandvectors.",
          "Instead, you can access a map element by referring to its key inside square \nbrackets[]:",
          "You can also access elements with the.at()function:",
          "Note:The.at()function is often preferred over square brackets[]because it throws an \nerror message if the element does not exist:",
          "You can also change the value associated with a key:",
          "However, it is safer to use the.at()function:",
          "To add elements to a map, it is ok to use square brackets[]:",
          "But you can also use the.insert()function:",
          "A map cannot have elements with equal keys.",
          "For example, if we try to add \"Jenny\" two times to the map, it will only keep the first one:",
          "To sum up;values can be equal, but keys must be unique.",
          "To remove specific elements from a map, you can use the.erase()function:",
          "To remove all elements from a set, you can use the.clear()function:",
          "To find out how many elements a map has, use the.size()function:",
          "Use the.empty()function to find out if a \nmap is empty or not.",
          "The.empty()function returns1(true) if the map is empty and0(false) \notherwise:",
          "Note:You can also check if a specific element exists, by using the.count(key)function.",
          "It returns1(true) if the element exists and0(false) \notherwise:",
          "You can loop through a map with thefor-eachloop. \nHowever, there are a couple of things to be aware of:",
          "The output will be:",
          "If you want to reverse the order, you can use thegreater<type>functor inside the angle brackets, like this:",
          "The output will be:",
          "Tip:It is also possible to loop through maps with aniterator, which you will learn more about in the next chapter."
        ],
        "lists": [
          [
            "Accessible by keys (not index), and each key is unique.",
            "Automatically sorted in ascending order by their keys."
          ],
          [
            "You should use theautokeyword (introduced in C++ version 11) inside theforloop. \nThis allows the compiler \nto automatically determine the correct data type for each key-value pair.",
            "Since map elements consist of both keys and values, you have to include.firstto access the keys, and.secondto access values in the loop.",
            "Elements in the map are sorted automatically in ascending order by their \n  keys:"
          ]
        ],
        "examples": [
          "// Include the map library#include <map>",
          "// Create a \n  map called people that will store strings as keys and integers as valuesmap<string, int> people",
          "// Create a \n  map that will store the name and age of different peoplemap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };",
          "// Create a map that will store the name and age of different peoplemap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };// Get the value associated with the key \"John\"cout << \"John is: \" << \n  people[\"John\"] << \"\\n\";// Get the value associated with the key \n  \"Adele\"cout << \"Adele is: \" << people[\"Adele\"] << \"\\n\";",
          "// Create a map that will store the name and age of different peoplemap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };// \n  Get the value associated with the key \"Adele\"cout << \"Adele is: \" <<people.at(\"Adele\") << \"\\n\";// Get the value associated with the key \n  \"Bo\"cout << \"Bo is: \" << people.at(\"Bo\") << \"\\n\";",
          "// Create a map that will store the name and age of different peoplemap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };// \n  Try to access an element that does \n  not exist (will throw an exception)cout << people.at(\"Jenny\");",
          "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };// Change John's value to 50 instead of 32people[\"John\"] = 50;cout << \"John is: \" << people[\"John\"];  // Now outputs John is: 50",
          "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };// Change John's value to 50 instead of 32people.at(\"John\") = 50;cout << \"John is: \" << people.at(\"John\");  // Now outputs John is: 50",
          "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };// Add new elementspeople[\"Jenny\"] = 22;people[\"Liam\"] = 24;people[\"Kasper\"] = 20;people[\"Anja\"] = 30;",
          "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };// Add new elementspeople.insert({\"Jenny\", 22});people.insert({\"Liam\", 24});people.insert({\"Kasper\", 20});people.insert({\"Anja\", 30});",
          "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };// Trying to add two elements with equal keyspeople.insert({\"Jenny\", 22});people.insert({\"Jenny\", 30});",
          "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };// Remove an element by keypeople.erase(\"John\");",
          "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };// Remove all elementspeople.clear();",
          "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };cout \n  << people.size();  // Outputs 3",
          "map<string, int> people;cout << people.empty(); \n  // Outputs 1 (The map is empty)",
          "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };cout \n  << people.empty();  \n  // Outputs 0 (not empty)",
          "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };cout \n  << people.count(\"John\");  \n  // Outputs 1 (John exists)",
          "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };for (autoperson : people) {cout <<person.first<< \" is: \" <<person.second<< \"\\n\";}",
          "map<string, int,greater<string>> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };for (auto person : people) {cout << person.first << \" is: \" << \n  person.second << \"\\n\";}"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_iterators.asp",
    "cours": {
      "titre": "C++Iterator",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_iterators.asp",
      "contenus": {
        "paragraphs": [
          "Iterators are used to access and iterate through elements of data structures (vectors,sets, \netc.), by \"pointing\" to them.",
          "It is called an \"iterator\" because \"iterating\" is the technical term forlooping.",
          "To iterate through a vector, look at the following example:",
          "Note:The type of the iterator \n  must match the type of the data structure it should iterate through (stringin \n  our example)",
          "begin()andend()arefunctionsthatbelong to data structures, such \nasvectorsandlists. Theydo not belong to the iteratoritself. Instead, they are used with iterators to \naccess and iterate through the elements of these data structures.",
          "To understand how they work, let's continue to use vectors as an example:",
          "begin()points to the first element in the \nvector (index 0, which is \"Volvo\"):",
          "To point to the second element (BMW), you can writecars.begin() + 1:",
          "And of course, that also means you can point to the third element withcars.begin() + 2:",
          "end()points to one positionafterthe last \nelement in the vector (meaning it doesn't point to an actual element, but rather \nindicates that this is the end of the vector).",
          "So, to useend()to point to \nthe last element in the cars vector (Mazda), you can usecars.end() - 1:",
          "Why do we say \"point\"?",
          "Iterators are like \"pointers\" in that they \n  \"point\" to elements in a data structure rather than returning values from \n  them. They refer to a specific position, providing a way to access and modify \n  the value when needed, without making a copy of it. For example:",
          "In C++ 11 and later versions, you can use theautokeyword instead of \nexplicitly declaring and specifying the type of the iterator.",
          "Theautokeyword allows the compiler to \nautomatically determine the correct data type, which simplifies the code and \nmakes it more readable:",
          "Instead of this:",
          "You can simply write this:",
          "In the example above, the compiler knows the type ofitbased on the return type ofcars.begin(), which isvector<string>::iterator.",
          "Theautokeyword works inforloops as well:",
          "You can use afor-eachloop to just loop through elements of a data structure, like this:",
          "When you are just reading the elements, and don't need to modify them, the for-each loop is much simpler and cleaner than \niterators.",
          "However, when you need to add, modify, or remove elementsduring iteration, iterate in reverse, or skip elements, \nyou should use \niterators:",
          "To iterate in reverse order, you can userbegin()andrend()instead ofbegin()andend():",
          "Iterators are great for code reusability since you can use the same syntax \nfor iterating through vectors, lists, deques, sets and maps:",
          "The examples above shows how to iterate through different data structures that support iterators (vector,list,deque,mapandsetsupport iterators, whilestacksandqueuesdo not).",
          "Another important feature of iterators is that they are used with different \nalgorithm functions, such assort()andfind()(found in the<algorithm>library), to sort and \nsearch for elements in a data structure.",
          "For example, thesort()function takes \niterators (typically returned bybegin()andend()) as parameters to sort elements in a data structure \nfrom the beginning to the end.",
          "In this example, the elements are sorted alphabetically since they are \nstrings:",
          "And in this example, the elements are sorted numerically since they are \nintegers:",
          "To reverse the order, you can userbegin()andrend()instead ofbegin()andend():"
        ],
        "lists": [
          [
            "First we create a vector of strings to store the names of different car manufactures.",
            "Then we create a \"vector iterator\" calledit, that we will use to loop through the vector.",
            "Next, we use aforloop to loop through the vector with the \niterator. The iterator \n(it) points to the first element in the vector (cars.begin()) and the loop continues as along asitis not equal tocars.end().",
            "The increment operator (++it) \n  moves the iterator to the next element in the vector.",
            "The dereference operator (*it) accesses the \n  element the iterator points to."
          ],
          [
            "begin()returns an iterator that points to the first element of the data structure.",
            "end()returns an iterator that points to one position after the last element."
          ]
        ],
        "examples": [
          "// Create a vector called cars that will store stringsvector<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Create a vector iterator \n  called itvector<string>::iterator it;// Loop through the vector with the \n  iteratorfor (it = cars.begin(); it != cars.end(); ++it) {cout << *it << \n  \"\\n\";}",
          "vector<string> cars \n  = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};vector<string>::iterator it;",
          "// Point \n  to the first element in the vectorit = cars.begin();",
          "// Point \n  to the second elementit = cars.begin() + 1;",
          "// Point \n  to the third elementit = cars.begin() + 2;",
          "// Point \n  to the last elementit = cars.end() - 1;",
          "// Point to the first element in the vectorit = cars.begin();// \n  Modify the value of the first element*it = \"Tesla\";// Volvo is now \n  Tesla",
          "vector<string>::iterator it = cars.begin();",
          "auto it = cars.begin();",
          "for (auto it = cars.begin(); it != cars.end(); ++it) {cout << *it \n  << \"\\n\";}",
          "// Create a vector called cars that will store stringsvector<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Print vector elementsfor (string car : cars) {cout << car << \"\\n\";}",
          "// Create a vector called cars that will store stringsvector<string> cars \n  = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Loop through vector elementsfor (auto it = cars.begin(); it != cars.end(); ) {if (*it == \"BMW\") \n  {it = cars.erase(it); // Remove the BMW element} else {++it;}}// Print vector elementsfor (const \n  string& car : cars) {cout << car << \"\\n\";}",
          "// Iterate in reverse orderfor (auto it = cars.rbegin(); it != \n  cars.rend(); ++it) {cout << *it << \"\\n\";}",
          "// Create a list called cars that will store stringslist<string> cars = \n  {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Loop through the list with an \n  iteratorfor (auto it = cars.begin(); it != cars.end(); ++it) {cout << *it << \"\\n\";}",
          "// Create a deque called cars that will store stringsdeque<string> cars = \n  {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Loop through the deque with an \n  iteratorfor (auto it = cars.begin(); it != cars.end(); ++it) {cout << *it << \"\\n\";}",
          "// Create a set called cars that will store stringsset<string> cars = \n  {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};// Loop through the set with an \n  iteratorfor (auto it = cars.begin(); it != cars.end(); ++it) {cout << *it << \"\\n\";}",
          "// Create a map that will store strings and integersmap<string, int> \n  people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };// Loop through \n  the map with an iteratorfor (auto it = people.begin(); it != people.end(); \n  ++it) {cout << it->first << \" is: \" << it->second << \"\\n\";}",
          "#include <iostream>#include <vector>#include <algorithm>// Include the <algorithm> libraryusing namespace std;int main() {// Create a vector called cars \n  that will store stringsvector<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Sort cars in alphabetical ordersort(cars.begin(), cars.end());// Print cars in alphabetical orderfor (string car : cars) {cout << car << \"\\n\";}return 0;}",
          "#include <iostream>#include <vector>#include <algorithm>using namespace std;int main() {// Create a vector called numbers that will store integersvector<int> numbers = {1, 7, 3, 5, 9, 2};// Sort numbers \n  numericallysort(numbers.begin(), numbers.end());for (int num : numbers) {cout << num << \"\\n\";}return 0;}",
          "#include <iostream>#include <vector>#include <algorithm>using namespace std;int main() {// Create a vector called numbers that will store integersvector<int> numbers = {1, 7, 3, 5, 9, 2};// Sort numbers \n  numerically in reverse ordersort(numbers.rbegin(), numbers.rend());for (int num : numbers) {cout << num << \"\\n\";}return 0;}"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_algorithms.asp",
    "cours": {
      "titre": "C++Algorithm",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_algorithms.asp",
      "contenus": {
        "paragraphs": [
          "In the previous chapters, you learned that data structures (likevectors,lists, etc) are used to store and organize data.",
          "Algorithmsare used to solve problems by sorting, searching, and manipulating data structures.",
          "The<algorithm>library provides many \nuseful functions to perform these tasks \nwithiterators.",
          "To use these functions, you must include the<algorithm>header file:",
          "To sort elements in a data structure, you can use thesort()function.",
          "Thesort()function takesiterators(typically astart iteratorreturned bybegin()and anend iteratorreturned byend()) as \nparameters:",
          "By default, the elements are sorted in ascending order. In the example above, \nthe elements are sorted alphabetically since they are strings.",
          "If we had a vector of integers, they would be sorted numerically:",
          "To reverse the order, you can userbegin()andrend()instead ofbegin()andend():",
          "To only sort specific elements, you could write:",
          "To search for specific elements in a vector, you can use thefind()function.",
          "It takes three parameters:start_iterator,end_iterator,value, wherevalueis the value to search for:",
          "Seach for the number3in \"numbers\":",
          "To search for the first element that isgreater thana specific value, you can use theupper_bound()function:",
          "Find the first value greater than5in \"numbers\":",
          "Theupper_bound()function is typically used on sorted data structures. That's \nwhy we first sort the vector in the example above.",
          "To find the smallest element in a vector, use themin_element()function:",
          "To find the largest element, use themax_element()function:",
          "To copy elements from one vector to another, you can use thecopy()function:",
          "Copy elements from one vector to another:",
          "To fill all elements in a vector with a value, you can use thefill()function:",
          "Fill all elements in the numbers vector with the value 35:",
          "For a complete reference of algorithm functions, go to ourC++ Algorithm Reference."
        ],
        "lists": [],
        "examples": [
          "// Include the algorithm library#include <algorithm>",
          "// Create a vector called cars that will store stringsvector<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};// Sort cars alphabeticallysort(cars.begin(), cars.end());",
          "// Create a vector called numbers that will store integersvector<int> numbers = {1, 7, 3, 5, 9, 2};// Sort numbers numericallysort(numbers.begin(), numbers.end());",
          "// Create a vector called numbers that will store integersvector<int> numbers = {1, 7, 3, 5, 9, 2};// Sort numbers \n  numerically in reverse ordersort(numbers.rbegin(), numbers.rend());",
          "// Create a vector called numbers that will store integersvector<int> \n  numbers = {1, 7, 3, 5, 9, 2};// Sort numbers numerically, starting \n  from the fourth element (only sort 5, 9, and 2)sort(numbers.begin() \n  + 3, numbers.end());",
          "// Create a vector called numbers that will store integersvector<int> \n  numbers = {1, 7, 3, 5, 9, 2};// Search for the number 3auto it = find(numbers.begin(), numbers.end(), 3);",
          "// Create a vector called numbers that will store integersvector<int> \n  numbers = {1, 7, 3, 5, 9, 2};// Sort the vector in ascending ordersort(numbers.begin(), numbers.end());// Find the first value that is greater \n  than 5 in the sorted vectorauto it = upper_bound(numbers.begin(), \n  numbers.end(), 5);",
          "// Create a vector called numbers that will store integersvector<int> \n  numbers = {1, 7, 3, 5, 9, 2};// Find the smallest numberauto it = \n  min_element(numbers.begin(), numbers.end());",
          "// Create a vector called numbers that will store integersvector<int> \n  numbers = {1, 7, 3, 5, 9, 2};// Find the largest numberauto it = \n  max_element(numbers.begin(), numbers.end());",
          "// Create a vector called numbers that will store integersvector<int> \n  numbers = {1, 7, 3, 5, 9, 2};// Create a vector called copiedNumbers \n  that should store 6 integersvector<int> copiedNumbers(6);// \n  Copy elements from numbers to copiedNumberscopy(numbers.begin(), \n  numbers.end(), copiedNumbers.begin());",
          "// Create a vector called numbers that will store 6 integersvector<int> \n  numbers(6);// Fill all elements in the numbers vector with the value \n  35fill(numbers.begin(), numbers.end(), 35);"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_howto_add_two_numbers.asp",
    "cours": {
      "titre": "C++How To Add Two Numbers",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_howto_add_two_numbers.asp",
      "contenus": {
        "paragraphs": [
          "Learn how to add two numbers in C++:",
          "In this example, the user must input two numbers. Then we print the \nsum by calculating (adding) the two numbers:"
        ],
        "lists": [],
        "examples": [
          "int x = 5;int y = 6;int sum = x + y;cout << sum;",
          "int x, y;int sum;cout << \"Type a number: \";cin >> x;cout << \"Type another number: \";cin >> \n  y;sum = x + y;cout << \"Sum is: \" << sum;"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_howto_random_number.asp",
    "cours": {
      "titre": "C++How To Generate Random Numbers",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_howto_random_number.asp",
      "contenus": {
        "paragraphs": [
          "You can use therand()function, found in the<cstdlib>library, to generate a random number:",
          "To get more control over the random number, for example, if you only want a random number between 0 and 100, you can use the following formula:",
          "Note:The examples above just outputs a random number once. \nThey don't output different random numbers each time the program runs. To fix \nthis, you can use thesrand()function \nand add thetime()function from the<ctime>library.",
          "This will generate a random number from 0 to 100 each time the program runs:"
        ],
        "lists": [],
        "examples": [
          "cout << rand();",
          "// Generate a random number between 0 and 100int \n  randomNum = rand() % 101;cout << randomNum;return 0;",
          "// Get a different random number each time the program runssrand(time(0));// Generate a random number between 0 and 100int \n  randomNum = rand() % 101;cout << randomNum;return 0;"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_ref_reference.asp",
    "cours": {
      "titre": "C++ReferenceDocumentation",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_ref_reference.asp",
      "contenus": {
        "paragraphs": [
          "This section contains a C++ reference documentation.",
          "A list of C++ keywords and popular libraries can be found here:"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_ref_keywords.asp",
    "cours": {
      "titre": "C++Keywords",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_ref_keywords.asp",
      "contenus": {
        "paragraphs": [
          "A list of useful keywords in C++ can be found in the table below."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_ref_iostream.asp",
    "cours": {
      "titre": "C++iostreamLibrary (Standard Input / Output Streams)",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_ref_iostream.asp",
      "contenus": {
        "paragraphs": [
          "The<iostream>library provides objects which can read user input and output data to the console or to a file.",
          "A list of all iostream objects can be found in the table below."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_ref_fstream.asp",
    "cours": {
      "titre": "C++fstreamLibrary (File Streams)",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_ref_fstream.asp",
      "contenus": {
        "paragraphs": [
          "The<fstream>library provides classes for reading and writing into files or data streams.",
          "A list of useful fstream classes can be found in the table below.",
          "Learn more about files in ourC++ Files Tutorial."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_ref_math.asp",
    "cours": {
      "titre": "C++cmathLibrary",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_ref_math.asp",
      "contenus": {
        "paragraphs": [
          "The<cmath>library has many functions that allow you to perform mathematical tasks on numbers.",
          "A list of all math functions can be found in the table below:",
          "Learn more about math in ourC++ Math Tutorial."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_ref_string.asp",
    "cours": {
      "titre": "C++stringLibrary",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_ref_string.asp",
      "contenus": {
        "paragraphs": [
          "The<string>library has many functions that allow you to perform tasks on strings.",
          "A list of popular string functions can be found in the table below.",
          "Learn more about strings in ourC++ Strings Tutorial."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_ref_cstring.asp",
    "cours": {
      "titre": "C++cstringLibrary",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_ref_cstring.asp",
      "contenus": {
        "paragraphs": [
          "The<cstring>library has many functions that allow you to perform tasks on arrays and C-style strings.",
          "Note that C-style strings are different than regularstrings. A C-style string is an array of characters, created with thechartype. To learn more about C-style strings, read ourC Strings Tutorial.",
          "A list of allcstringfunctions can be found in the table below.",
          "Learn more about c-style strings in ourC-Style Strings Tutorial."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_ref_ctime.asp",
    "cours": {
      "titre": "C++ctimeLibrary",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_ref_ctime.asp",
      "contenus": {
        "paragraphs": [
          "The<ctime>library has a variety of functions that allow you to measure dates and times."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_ref_vector.asp",
    "cours": {
      "titre": "C++vectorLibrary",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_ref_vector.asp",
      "contenus": {
        "paragraphs": [
          "The<vector>library has many functions that allow you to perform tasks on vectors.",
          "A list of popular vector functions can be found in the table below.",
          "Learn more about vectors in ourC++ Vector Tutorial."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_ref_algorithm.asp",
    "cours": {
      "titre": "C++algorithmLibrary",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_ref_algorithm.asp",
      "contenus": {
        "paragraphs": [
          "The<algorithm>library has many functions that allow you to modify ranges of data from data structures.",
          "A list of useful functions in the algorithm library can be found below.",
          "Learn more about algorithms in ourC++ Algorithm Tutorial."
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_examples.asp",
    "cours": {
      "titre": "C++Examples",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_examples.asp",
      "contenus": {
        "paragraphs": [],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_real_life_examples.asp",
    "cours": {
      "titre": "C++Real-Life Examples",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_real_life_examples.asp",
      "contenus": {
        "paragraphs": [
          "This page contains a list of practical examples used in real world projects.",
          "Use variables to store different data of a college student:",
          "Calculate the area of a rectangle (by multiplying the length and width):",
          "Use different data types to calculate and output the total cost of a number of items:",
          "For a tutorial about variables and data types in C++, visit ourVariables ChapterandData Types Chapter.",
          "Use strings to create a simple welcome message:",
          "For a tutorial about strings in C++, visit ourStrings Chapter.",
          "Find out if a person is old enough to vote:",
          "For a tutorial about booleans in C++, visit ourBooleans Chapter.",
          "Check whether the user enters the correct code:",
          "Find out if a number is positive or negative:",
          "Find out if a person is old enough to vote:",
          "Find out if a number is even or odd:",
          "For a tutorial about conditions in C++, visit ourIf..Else Chapter.",
          "Use the weekday number to calculate and output the weekday name:",
          "For a tutorial about switch in C++, visit ourSwitch Chapter.",
          "Create a simple \"countdown\" program:",
          "Create a program that only print even numbers between 0 and 10 (inclusive):",
          "Use a while loop to reverse some numbers:",
          "Use a while loop together with an if else statement to play a game of Yatzy:",
          "For a tutorial about while loops in C++, visit ourWhile Loops Chapter.",
          "Use a for loop to create a program that counts to 100 by tens:",
          "Use a for loop to create a program that only print even values between 0 and 10:",
          "Use a for loop to create a program that only prints odd numbers:",
          "Use a for loop to print the powers of 2 up to 512:",
          "Use a for loop to create a program that prints the multiplication table of a specified number (2 in this example):",
          "For a tutorial about for loops in C++, visit ourFor Loops Chapter.",
          "Create a program that calculates the average of different ages:",
          "Create a program that finds the lowest age among different ages:",
          "For a tutorial about arrays in C++, visit ourArrays Chapter.",
          "Use a structure to store and output different information about Cars:",
          "For a tutorial about structs in C++, visit ourStructures Chapter.",
          "Create a program that converts a value from fahrenheit to celsius:",
          "For a tutorial about functions in C++, visit ourFunctions Chapter."
        ],
        "lists": [],
        "examples": [
          "// Student dataint studentID = 15;int studentAge = 23;float \n  studentFee = 75.25;char studentGrade = 'B';// Print variablescout << \"Student ID: \" << studentID << \"\\n\";cout << \"Student \n  Age: \" << studentAge << \"\\n\";cout << \"Student Fee: \" << studentFee << \n  \"\\n\";cout << \"Student Grade: \" << studentGrade << \"\\n\";",
          "// Create integer variablesint length = 4;int width = 6;int \n  area;// Calculate the area of a rectanglearea = length * width;// Print the variablescout << \"Length is: \" << length << \"\\n\";cout << \"Width is: \" << width << \"\\n\";cout << \"Area of the \n  rectangle is: \" << area << \"\\n\";",
          "// Create variables of different data typesint items = 50;double \n  cost_per_item = 9.99;double total_cost = items * cost_per_item;char \n  currency = '$';// Print variablescout << \"Number of items: \" << \n  items << \"\\n\";cout << \"Cost per item: \" << cost_per_item << \"\" << \n  currency << \"\\n\";cout << \"Total cost = \" << total_cost << \"\" << currency \n  << \"\\n\";",
          "string message = \"Good to see you, \";string fname = \"John\";cout << \n  greeting + fname;",
          "int myAge = 25;int votingAge = 18;cout << (myAge >= votingAge); \n  // returns 1 (true), meaning 25 year olds are allowed to vote!",
          "int doorCode = 1337;if (doorCode == 1337) {cout << \"Correct \n  code.\\nThe door is now open.\\n\";} else {cout << \"Wrong \n  code.\\nThe door remains closed.\\n\";}",
          "int myNum = 10; // Is this a positive or negative number?if (myNum > \n  0) {cout << \"The value is a positive number.\\n\";} else if \n  (myNum < 0) {cout << \"The value is a negative number.\\n\";} else \n  {cout << \"The value is 0.\\n\";}",
          "int myNum = 10; // Is this a positive or negative number?if (myNum > \n  0) {cout << \"The value is a positive number.\\n\";} else if \n  (myNum < 0) {cout << \"The value is a negative number.\\n\";} else \n  {cout << \"The value is 0.\\n\";}",
          "int myNum = 5;if (myNum % 2 == 0) {cout << myNum << \" is \n  even.\\n\";} else {cout << myNum << \" is odd.\\n\";}",
          "int day = 4;switch (day) {case 1:cout << \"Monday\";break;case 2:cout << \"Tuesday\";break;case 3:cout << \"Wednesday\";break;case \n  4:cout << \"Thursday\";break;case 5:cout << \"Friday\";break;case 6:cout << \"Saturday\";break;case 7:cout << \"Sunday\";break;}// Outputs \"Thursday\" (day 4)",
          "int countdown = 3;while (countdown > 0) {cout << countdown \n  << \"\\n\";countdown--;}cout << \"Happy New Year!!\\n\";",
          "int i = 0;while (i <= 10) {cout << i << \"\\n\";i \n  += 2;}",
          "// A variable with some specific numbersint numbers = 12345;// A \n  variable to store the reversed numberint revNumbers = 0;// Reverse \n  and reorder the numberswhile (numbers) {// Get the last number \n  of 'numbers' and add it to 'revNumbers'revNumbers = revNumbers * 10 \n  + numbers % 10;// Remove the last number of 'numbers'numbers /= 10;}cout << \"Reversed numbers: \" << revNumbers << \"\\n\";",
          "int dice = 1;while (dice <= 6) {if (dice < 6) {cout << \"No Yatzy\\n\";} else {cout << \n  \"Yatzy!\\n\";}dice = dice + 1;}",
          "for (int i = 0; i <= 100; i += 10) {cout << i << \"\\n\";}",
          "for (int i = 0; i <= 10; i = i + 2) {cout << i << \"\\n\";}",
          "for (int i = 1; i <= 10; i = i + 2) {cout << i << \"\\n\";}",
          "for (int i = 2; i <= 512; i *= 2) {cout << i << \"\\n\";}",
          "int number = 2;int i;// Print the multiplication table for the \n  number 2for (i = 1; i <= 10; i++) {cout << number << \" x \" << i \n  << \" = \" << number * i << \"\\n\";}",
          "// An array storing different agesint ages[8] = {20, 22, 18, 35, 48, 26, \n  87, 70};float avg, sum = 0;int i;// Get the length of the \n  arrayint length = sizeof(ages) / sizeof(ages[0]);// Loop through \n  the elements of the arrayfor (int age : ages) {sum += age;}// Calculate the average by dividing the sum by the lengthavg = sum / \n  length;// Print the averagecout << \"The average age is: \" << avg \n  << \"\\n\";",
          "// An array storing different agesint ages[8] = {20, 22, 18, 35, 48, 26, \n  87, 70};int i;// Get the length of the arrayint length = \n  sizeof(ages) / sizeof(ages[0]);// Create a variable and assign the \n  first array element of ages to itint lowestAge = ages[0];// Loop \n  through the elements of the ages array to find the lowest agefor (int age \n  : ages) {if (lowestAge > age) {lowestAge = \n  age;}}// Print the lowest agecout << \"The lowest \n  age is: \" << lowestAge << \"\\n\";",
          "// Declare a structure named \"car\"struct car {string brand;string model;int year;};int main() {// Create a car structure and store it in myCar1;car myCar1;myCar1.brand = \"BMW\";myCar1.model = \"X5\";myCar1.year = 1999;// Create another car structure and store it in myCar2;car myCar2;myCar2.brand = \"Ford\";myCar2.model = \"Mustang\";myCar2.year = 1969;// Print the structure memberscout << myCar1.brand << \" \" << myCar1.model << \" \" << myCar1.year << \"\\n\";cout << myCar2.brand << \" \" << myCar2.model << \" \" << myCar2.year << \"\\n\";return 0;}",
          "// Function to convert \n  Fahrenheit to Celsiusfloat toCelsius(float fahrenheit) {return \n  (5.0 / 9.0) * (fahrenheit - 32.0);}int main() {// Set a \n  fahrenheit valuefloat f_value = 98.8;// Call the \n  function with the fahrenheit valuefloat result = \n  toCelsius(f_value);// Print the fahrenheit valuecout \n  << \"Fahrenheit: \" << f_value << \"\\n\";// Print the resultcout << \"Convert Fahrenheit to Celsius: \" << result << \"\\n\";return 0;}"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_compiler.asp",
    "cours": {
      "titre": "C++Online Compiler",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_compiler.asp",
      "contenus": {
        "paragraphs": [
          "With our online C++ compiler, you can edit C++ code, and view the result in your browser.",
          "Click on the \"Try it Yourself\" button to see how it works.",
          "The window to the left is editable - edit the code and click on the \"Run\" button to view the result in the right window.",
          "The icons are explained in the table below:",
          "If you don't know C++, we suggest that you read ourC++ Tutorialfrom scratch."
        ],
        "lists": [],
        "examples": [
          "#include <iostream>using namespace std;int main() {cout << \"Hello World!\";return 0;}"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_exercises.asp",
    "cours": {
      "titre": "C++Exercises",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_exercises.asp",
      "contenus": {
        "paragraphs": [
          "Test your C++ skills with exercises from all categories:",
          "If you haven't already,sign upto become a W3Schooler, and get points for every exercise you complete.",
          "As a logged-in W3Schools user you will have access to many features like havingyour own web page,track your learning progress,receive personal guided paths, andmore.",
          "The exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. \nThere are between 3 and 9 questions in  each category.\nThe answer can be found in the corresponding tutorial chapter. If you're stuck, \nor answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer.",
          "Get certified by completingthecourse"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_quiz.asp",
    "cours": {
      "titre": "C++Quiz",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_quiz.asp",
      "contenus": {
        "paragraphs": [
          "You can test your C++ skills with W3Schools' Quiz.",
          "The test contains 25 questions and there is no time limit.",
          "The test is not official, it's just a nice way to see how much you know, or don't know, about \nC++.",
          "You will get 1 point for each correct answer. At the end of the Quiz,\nyour total score will be displayed. Maximum score is 25 points.",
          "Good luck!",
          "Start the C++ Quiz ❯",
          "If you don't know C++, we suggest that you read ourC++ Tutorialfrom scratch.",
          "Get certified by completingthecourse"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_syllabus.asp",
    "cours": {
      "titre": "C++Syllabus",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_syllabus.asp",
      "contenus": {
        "paragraphs": [
          "TheW3Schools C++ Tutorialis comprehensive and beginner-friendly.",
          "It will give you a fundamental knowledge of C++.",
          "It is designed for beginners and requires no prior experience with programming.",
          "The content has been carefully made to be bite-sized, simple, and easy to understand.",
          "The content has been proven by millions of users over the years. It is updated and improved frequently.",
          "The syllabus outline and its sequence are structured so you can learn C++ step by step, from the introduction to creating your first application with C++.",
          "Get Started With C++ »",
          "Note:Are you a teacher teaching C++ programming?W3Schools Academyis a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more aboutAcademy here.",
          "Get Started",
          "In this tutorial we offer different activities for you to learn C++ for free:",
          "You can also create a free account to track your progress.",
          "As a signed-in user, you get access to features such as:",
          "Sign Up - It's free",
          "Get Started",
          "C++, like any other coding language, is best learned by working hands-on with code.",
          "Easily try code with our \"Try it Yourself\" editor.",
          "Here, you can edit C++ code and view the result:",
          "W3Schools offers an end-of-pathway certification program.",
          "Here you can take exams to get certified.",
          "The C++ exam is a test that summarizes the W3Schools C++ syllabus.",
          "After passing the exam you get the \"Certified C++ Developer\" Certification.",
          "There are two different types of certifications:",
          "The non-adaptive is pass or no pass.",
          "The adaptive certification is adaptive and graded; students will get a grade from intermediate, advanced to professional.",
          "Buy Certificate »",
          "Are you interested in learning how you can useW3Schools Academyto Teach \nC++?",
          "Join our upcoming webinar for a guided demo ofW3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.",
          "Join our FREE Webinar »"
        ],
        "lists": [
          [
            "Understand what C++ is and why it is used.",
            "Use cout to print text and cin for user input.",
            "Create and use variables with different data types.",
            "Use if statements and loops like for and while.",
            "Write functions and use arrays.",
            "Work with C++ strings.",
            "Understand basic object-oriented concepts like classes and objects.",
            "Identify errors and debug your code.",
            "Write and run C++ programs."
          ],
          [
            "Computer Science:C++ is used to teach programming concepts, algorithms, and software development.",
            "Mathematics:C++ can be used for algorithms and solving math problems.",
            "Engineering:C++ is useful for building programs that help with engineering projects, like robots and machines.",
            "Physics:C++ is used for running simulations and solving equations in physics.",
            "Game Development and Graphics:C++ is used to create games and animations.",
            "Robotics:C++ can be used to program robots to move and react to their environment.",
            "Information Technology (IT):C++ is used to understand how software communicates to hardware and how systems work.",
            "C++ in general can help to learn problem-solving, logic, and programming."
          ],
          [
            "Lessons",
            "Exercises",
            "Quizzes"
          ],
          [
            "Learning paths",
            "Sandbox and lab environments",
            "Achievements",
            "And much more!"
          ],
          [
            "C++ Introduction",
            "C++ Get Started",
            "C++ Syntax",
            "C++ Output",
            "C++ Comments",
            "C++ Variables",
            "C++ User Input",
            "C++ Data Types",
            "C++ Operators",
            "C++ Strings",
            "C++ Math",
            "C++ Booleans",
            "C++ If...Else (Conditions)",
            "C++ Switch",
            "C++ While Loop",
            "C++ For Loop",
            "C++ Break/Continue",
            "C++ Arrays",
            "C++ Structures",
            "C++ Enums",
            "C++ References",
            "C++ Pointers",
            "C++ Functions",
            "C++ Function Parameters",
            "C++ Function Overloading",
            "C++ Scope",
            "C++ Recursion",
            "C++ OOP (Object-Oriented Programming)",
            "C++ Classes/Objects",
            "C++ Class Methods",
            "C++ Constructors",
            "C++ Access Specifiers",
            "C++ Encapsulation",
            "C++ Inheritance",
            "C++ Polymorphism",
            "C++ Files",
            "C++ Exceptions",
            "C++ Date",
            "C++ Data Structures and STL",
            "C++ Vectors",
            "C++ List",
            "C++ Stacks",
            "C++ Queues",
            "C++ Deque",
            "C++ Sets",
            "C++ Maps",
            "C++ Iterators",
            "C++ Algorithms"
          ],
          [
            "Non-adaptive",
            "Adaptive"
          ]
        ],
        "examples": [
          "#include <iostream>using namespace std;int main() {cout << \"Hello World!\";return 0;}"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_study_plan.asp",
    "cours": {
      "titre": "C++Study Plan",
      "description": "",
      "lien": "https://www.w3schools.com/cpp/cpp_study_plan.asp",
      "contenus": {
        "paragraphs": [
          "The C++ study plan helps you teach your students C++ step-by-step.",
          "Creating a study plan for C++ is easy.",
          "You can use a pre-built study plan or customize it.",
          "Students have different skill levels. The study plans can be customized to ensure that everyone is challenged.",
          "Save time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of C++ to the final exam.",
          "This study plan is a feature of W3Schools Academy.",
          "W3Schools Academy is a platform that has everything you need to teach coding, all in one place.",
          "It offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom.",
          "You need to have an active subscription to access the study plan feature. There are two different subscription tiers:",
          "Learn More »",
          "Academy also offer other features such as:",
          "Get a free demo »",
          "W3Schools has everything you need to teach C++.",
          "The C++ training materials is available for you to include and use in your study plan:",
          "With the C++ Syllabus, your students will start with the basics, like understanding variables, data types, and simple input/output, and move to more advanced topics, like object-oriented programming, working with classes, and managing memory using pointers. Each chapter has examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun.",
          "Read more about C++ Syllabus.",
          "The study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level.",
          "Learn More »",
          "You choose the timeline and paceof your study plans.",
          "Schools have different preferences.",
          "Some would like more intensive pace, e.g. 5 weeks, others 12 or more weeks.",
          "It is completely up to you.",
          "For example, this is how a 5-week C++ study plan could look like:",
          "Image of Sample C++ study plan:",
          "Start withC++ Study Planstoday.",
          "Get Started »",
          "Are you interested in learning how you can useW3Schools Academyto Teach C++ programming?",
          "Join our upcoming webinar for a guided demo ofW3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.",
          "Join our FREE Webinar »"
        ],
        "lists": [
          [
            "Essentials ($1.99 / month per student)",
            "Full Access ($5.99 / month per student)",
            "Calculate your price and orderhere."
          ],
          [
            "Managing your classroom",
            "Tracking of student progress and reports",
            "Labs, assignments, and code challenges (prebuilt challenges or create your own ones)",
            "Auto-grading",
            "Teaching materials",
            "Certification exams"
          ],
          [
            "W3Schools C++ Tutorial",
            "C++ Exercises",
            "C++ Quiz",
            "C++ Challenges (Coding challenges)",
            "C++ Certification Exam (End of Pathway Exam)"
          ],
          [
            "Learning PathsYou can add ready-made learning paths.The learning paths are by default ordered by our recommended order.You can change the order.You can add custom activities with text, links, or multi-media files.Drag and drop or click to make changes to the path.",
            "You can add ready-made learning paths.",
            "The learning paths are by default ordered by our recommended order.",
            "You can change the order.",
            "You can add custom activities with text, links, or multi-media files.",
            "Drag and drop or click to make changes to the path.",
            "Interactive ContentTutorialsTry-its (test code snippets)ExercisesQuizChallengesLabs",
            "Tutorials",
            "Try-its (test code snippets)",
            "Exercises",
            "Quiz",
            "Challenges",
            "Labs",
            "Timeline and PaceYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).You can decide the learning pace for your class.Different study plans can be assigned to different students in the same class.The flexibility can help to make sure that everyone is challenged.",
            "You can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).",
            "You can decide the learning pace for your class.",
            "Different study plans can be assigned to different students in the same class.",
            "The flexibility can help to make sure that everyone is challenged.",
            "Track Student ProgressThere are tools to track student progress.The analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.The challenges can be auto-graded or manually graded. The results are available to you as a teacher.",
            "There are tools to track student progress.",
            "The analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.",
            "The challenges can be auto-graded or manually graded. The results are available to you as a teacher.",
            "End of Pathway ExamThe C++ study plan aligns with the C++ Certification Exam.The exam can be taken at the end of the study plan, at your selected date.The exam summarizes the C++ Tutorial.You get reports of the students' results.",
            "The C++ study plan aligns with the C++ Certification Exam.",
            "The exam can be taken at the end of the study plan, at your selected date.",
            "The exam summarizes the C++ Tutorial.",
            "You get reports of the students' results.",
            "AccessibilityStudy plans and learning materials are accessible on desktops, tablets, and smartphones.This ensures students can learn anytime, anywhere.",
            "Study plans and learning materials are accessible on desktops, tablets, and smartphones.",
            "This ensures students can learn anytime, anywhere."
          ],
          [
            "You can add ready-made learning paths.",
            "The learning paths are by default ordered by our recommended order.",
            "You can change the order.",
            "You can add custom activities with text, links, or multi-media files.",
            "Drag and drop or click to make changes to the path."
          ],
          [
            "Tutorials",
            "Try-its (test code snippets)",
            "Exercises",
            "Quiz",
            "Challenges",
            "Labs"
          ],
          [
            "You can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).",
            "You can decide the learning pace for your class.",
            "Different study plans can be assigned to different students in the same class.",
            "The flexibility can help to make sure that everyone is challenged."
          ],
          [
            "There are tools to track student progress.",
            "The analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.",
            "The challenges can be auto-graded or manually graded. The results are available to you as a teacher."
          ],
          [
            "The C++ study plan aligns with the C++ Certification Exam.",
            "The exam can be taken at the end of the study plan, at your selected date.",
            "The exam summarizes the C++ Tutorial.",
            "You get reports of the students' results."
          ],
          [
            "Study plans and learning materials are accessible on desktops, tablets, and smartphones.",
            "This ensures students can learn anytime, anywhere."
          ],
          [
            "Week 1: Introduction, Output & Input",
            "Week 2: Variables, Data Types",
            "Week 3: Operators, Strings, Math, Booleans",
            "Week 4: Conditions, Loop, Arrays, Structures, References",
            "Week 5: Pointers, Functions, Classes, Exceptions, Inheritance & Polymorphism, Date, Files, Data Structures, C++ Certification Exam"
          ]
        ],
        "examples": []
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/cpp/cpp_exam.asp",
    "cours": {
      "titre": "C++Certification",
      "description": "How Does It Work?Study for free at W3Schools.comStudy at your own speedTest your skills with W3Schools online quizzesApply for your certificate by paying an exam feeTake your exam online, at any time, and from any location",
      "lien": "https://www.w3schools.com/cpp/cpp_exam.asp",
      "contenus": {
        "paragraphs": [
          "W3Schools offers an Online Certification Program.",
          "The perfect solution for busy professionals who need to balance work, family, and career building.",
          "More than 50 000 certificates already issued!",
          "Get Your Certificate »",
          "W3Schools offers an Online Certification Program.",
          "The perfect solution for busy professionals who need to balance work, family, and career building.",
          "More than 50 000 certificates already issued!",
          "Get Your Certificate »",
          "Any student or professional within the digital industry.",
          "Certifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.",
          "W3Schools has over two decades of experience with teaching coding online.",
          "Our certificates are recognized and valued by companies looking to employ skilled developers.",
          "Show the world your coding skills by getting a certification.",
          "The prices is a small fraction compared to the price of traditional education.",
          "Document and validate your competence by getting certified!",
          "Fee:95 USD",
          "Achievable certification levels:Intermediate (40%)Advanced (75%)Professional (90%)",
          "Number of questions:Adaptive,60on average",
          "Requirement to pass:Minimum 40% - Intermediate level",
          "Time limit:60 minutes",
          "Number of attempts to pass:3",
          "Exam deadline:None",
          "Certification Expiration:None",
          "Format:Online, multiple choice",
          "Register now »",
          "Getting a certificate proves your commitment to upgrading your skills.",
          "The certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.",
          "It gives you the credibility needed for more responsibilities, larger projects, and a higher salary.",
          "Knowledge is power, especially in the current job market.",
          "Documentation of your skills enables you to advance your career or helps you to start a new one.",
          "Example certificate:",
          "Each certificate gets a unique link that can be shared with others.",
          "Validate your certification with the link or QR code.",
          "Check how it looks like in thisExample.",
          "Share your certificate on Linkedin the Certifications section in just one click!",
          "Getting a certificate proves your commitment to upgrade your skills,\ngives you the credibility needed for more responsibilities, larger projects, and a higher salary.",
          "Get Your Certificate »",
          "Are you an educator, manager or business owner looking for courses or certifications?",
          "We are working with schools, companies and organizations from all over the world.",
          "Get courses and/or certifications for your team here."
        ],
        "lists": [
          [
            "Study for free at W3Schools.com",
            "Study at your own speed",
            "Test your skills with W3Schools online quizzes",
            "Apply for your certificate by paying an exam fee",
            "Take your exam online, at any time, and from any location"
          ]
        ],
        "examples": []
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://campus.w3schools.com/products/c-certificate?utm_source=w3schools&utm_medium=referral&utm_campaign=cpp_exam&utm_content=get_your_certificate",
    "cours": {
      "id": "",
      "contenus": {
        "texte": "",
        "lienVideo": ""
      },
      "categories": [],
      "niveau": 1,
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  }
]