[
    {
        "url": "https://www.w3schools.com/python/default.asp",
        "cours": {
            "titre": "PythonTutorial",
            "description": "Learn PythonPython is a popular programming language.Python can be used on a server to create web applications.Start learning Python now »",
            "lien": "https://www.w3schools.com/python/default.asp",
            "contenus": {
                "paragraphs": [
                    "Python is a popular programming language.",
                    "Python can be used on a server to create web applications.",
                    "With our \"Try it Yourself\" editor, you can edit Python code and view the result.",
                    "Click on the \"Try it Yourself\" button to see how it works.",
                    "In our File Handling section you will learn how to open, read, write, and \ndelete files.",
                    "Python File Handling",
                    "In our database section you will learn how to access and work with MySQL and MongoDB databases:",
                    "Python MySQL Tutorial",
                    "Python MongoDB Tutorial",
                    "Many chapters in this tutorial end with an exercise where you can check your level of knowledge.",
                    "See all Python Exercises",
                    "Learn by examples! This tutorial supplements all explanations with clarifying examples.",
                    "See All Python Examples",
                    "Test your Python skills with a quiz.",
                    "Python Quiz",
                    "Track your progress with the free \"My Learning\" program here at W3Schools.",
                    "Log in to your account, and start earning points!",
                    "This is an optional feature. You can study at W3Schools without using My Learning.",
                    "You will also find complete function and method references:",
                    "Reference Overview",
                    "Built-in Functions",
                    "String Methods",
                    "List/Array Methods",
                    "Dictionary Methods",
                    "Tuple Methods",
                    "Set Methods",
                    "File Methods",
                    "Python Keywords",
                    "Python Exceptions",
                    "Python Glossary",
                    "Random Module",
                    "Requests Module",
                    "Math Module",
                    "CMath Module",
                    "Download Python from the official Python web site:https://python.org",
                    "Get certified by completingthecourse"
                ],
                "lists": [],
                "examples": [
                    "print(\"Hello, World!\")"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_intro.asp",
        "cours": {
            "titre": "PythonIntroduction",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_intro.asp",
            "contenus": {
                "paragraphs": [
                    "Python is a popular programming language. It was created by Guido van Rossum, \nand released in 1991.",
                    "It is used for:"
                ],
                "lists": [
                    [
                        "web development (server-side),",
                        "software development,",
                        "mathematics,",
                        "system scripting."
                    ],
                    [
                        "Python can be used on a server to create web applications.",
                        "Python can be used alongside software to create workflows.",
                        "Python can connect to database systems. It can also read and modify files.",
                        "Python can be used to handle big data and perform complex mathematics.",
                        "Python can be used for rapid prototyping, or for production-ready software development."
                    ],
                    [
                        "Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).",
                        "Python has a simple syntax similar to the English language.",
                        "Python has syntax that allows developers to write programs with fewer lines than some other programming languages.",
                        "Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.",
                        "Python can be treated in a procedural way, an object-oriented way or a functional way."
                    ],
                    [
                        "The most recent major version of Python is Python 3, which we shall be using in this tutorial. However, Python 2, although not being updated with anything other than security updates, is still quite popular.",
                        "In this tutorial Python will be written in a text editor. It is possible to write Python in an Integrated Development Environment, such as Thonny, Pycharm, Netbeans or Eclipse which are particularly useful when managing larger collections of Python files."
                    ],
                    [
                        "Python was designed for readability, and has some similarities to the English language with influence from mathematics.",
                        "Python uses new lines to complete a command, as opposed to other programming languages which often use semicolons or parentheses.",
                        "Python relies on indentation, using whitespace, to define scope; such as the scope of loops, functions and classes. Other programming languages often use curly-brackets for this purpose."
                    ]
                ],
                "examples": [
                    "print(\"Hello, World!\")"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_getstarted.asp",
        "cours": {
            "titre": "PythonGetting Started",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_getstarted.asp",
            "contenus": {
                "paragraphs": [
                    "Many PCs and Macs will have python already installed.",
                    "To check if you have python installed on a Windows PC, search in the start bar for Python or run the following on the Command Line (cmd.exe):",
                    "To check if you have python installed on a Linux or Mac, then on linux open the command line or on Mac open the Terminal and type:",
                    "If you find that you do not have Python installed on your computer, then you can download it for free from the following website:https://www.python.org/",
                    "Python is an interpreted programming language, this means that as a developer you write Python (.py) files in a text editor and then put those files into the python interpreter to be executed.",
                    "The way to run a python file is like this on the command line:",
                    "Where \"helloworld.py\" is the name of your python file.",
                    "Let's write our first Python file, called helloworld.py, which can be done in any text editor.",
                    "Simple as that. Save your file. Open your command line, navigate to the directory where you saved your file, and run:",
                    "The output should read:",
                    "Congratulations, you have written and executed your first Python program.",
                    "We have an online Python editor where you can execute your own Python code and see the result:",
                    "Try our online Python editor:",
                    "This editor will be used in the entire tutorial to demonstrate the different aspects of Python.",
                    "To check the Python version of the editor, you can find it by importing thesysmodule:",
                    "Check the Python version of the editor:",
                    "You will learn more about importing modules in ourPython Moduleschapter.",
                    "To test a short amount of code in python sometimes it is quickest and easiest not to write the code in a file. This is made possible because Python can be run as a command line itself.",
                    "Type the following on the Windows, Mac or Linux command line:",
                    "From there you can write any python, including our hello world example from earlier in the tutorial:",
                    "Which will write \"Hello, World!\" in the command line:",
                    "Whenever you are done in the python command line, you can simply type the following to quit the python command line interface:"
                ],
                "lists": [],
                "examples": [
                    "C:\\Users\\Your Name>python --version",
                    "python --version",
                    "C:\\Users\\Your Name>python helloworld.py",
                    "C:\\Users\\Your Name>python helloworld.py",
                    "Hello, World!",
                    "print(\"Hello, World!\")",
                    "import sysprint(sys.version)",
                    "C:\\Users\\Your Name>python",
                    "C:\\Users\\Your Name>py",
                    "C:\\Users\\Your Name>pythonPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC v.1900 32 bit (Intel)] on win32Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.>>> print(\"Hello, World!\")",
                    "C:\\Users\\Your Name>pythonPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC v.1900 32 bit (Intel)] on win32Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.>>> print(\"Hello, World!\")Hello, World!",
                    "exit()"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_syntax.asp",
        "cours": {
            "titre": "PythonSyntax",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_syntax.asp",
            "contenus": {
                "paragraphs": [
                    "As we learned in the previous page, Python syntax can be executed by writing directly in the Command Line:",
                    "Or by creating a python file on the server, using the .py file extension, and running it in the Command Line:",
                    "Indentation refers to the spaces at the beginning of a code line.",
                    "Where in other programming languages the indentation in code is for readability \nonly, the indentation in Python is very important.",
                    "Python uses indentation to indicate a block of code.",
                    "Python will give you an error if you skip the indentation:",
                    "Syntax Error:",
                    "The number of spaces is up to you as a programmer, the most common use is four, but it has \nto be at least one.",
                    "You have to use the same number of spaces in the same block of code, \notherwise Python will give you an error:",
                    "Syntax Error:",
                    "In Python, variables are created when you assign a value to it:ExampleVariables in Python:x = 5y = \"Hello, World!\"Try it Yourself »Python has no command for declaring a variable.You will learn more about variables in thePython Variableschapter.CommentsPython has commenting capability for the purpose of in-code documentation.Comments start with a #, and Python will render the rest of the line as a comment:ExampleComments in Python:#This is a comment.print(\"Hello, World!\")Try it Yourself »Video: Python Syntax❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
                    "Variables in Python:",
                    "Python has no command for declaring a variable.",
                    "You will learn more about variables in thePython Variableschapter.",
                    "Python has commenting capability for the purpose of in-code documentation.",
                    "Comments start with a #, and Python will render the rest of the line as a comment:ExampleComments in Python:#This is a comment.print(\"Hello, World!\")Try it Yourself »Video: Python Syntax❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
                    "Comments in Python:"
                ],
                "lists": [],
                "examples": [
                    ">>> print(\"Hello, World!\")Hello, World!",
                    "C:\\Users\\Your Name>python myfile.py",
                    "if 5 > 2:print(\"Five is greater than two!\")",
                    "if 5 > 2:print(\"Five is greater than two!\")",
                    "if 5 > 2:print(\"Five is greater than two!\")if 5 > 2:print(\"Five is greater than two!\")",
                    "if 5 > 2:print(\"Five is greater than two!\")print(\"Five is greater than \n  two!\")",
                    "x = 5y = \"Hello, World!\"",
                    "#This is a comment.print(\"Hello, World!\")"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_comments.asp",
        "cours": {
            "titre": "PythonComments",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_comments.asp",
            "contenus": {
                "paragraphs": [
                    "Comments can be used to explain Python code.",
                    "Comments can be used to make the code more readable.",
                    "Comments can be used to prevent execution when testing code.",
                    "Comments starts with a#, and Python will \nignore them:",
                    "Comments can be placed at the end of a line, and Python will ignore the rest \nof the line:",
                    "A comment does not have to be text that explains the code, it can also be used to \nprevent Python from executing code:",
                    "Python does not really have a syntax for multiline comments.",
                    "To add a multiline comment you could insert a#for each line:",
                    "Or, not quite as intended, you can use a multiline string.",
                    "Since Python will ignore string literals that are not assigned to a variable, you can add a multiline string (triple quotes) in your code, and place your comment inside it:",
                    "As long as the string is not assigned to a variable, Python will read the code, but then ignore it, and you have made a multiline comment."
                ],
                "lists": [],
                "examples": [
                    "#This is a commentprint(\"Hello, World!\")",
                    "print(\"Hello, World!\") #This is a comment",
                    "#print(\"Hello, World!\")print(\"Cheers, Mate!\")",
                    "#This is a comment#written in#more than just one lineprint(\"Hello, \n  World!\")",
                    "\"\"\"This is a commentwritten inmore than just \n  one line\"\"\"print(\"Hello, World!\")"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_variables.asp",
        "cours": {
            "titre": "PythonVariables",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_variables.asp",
            "contenus": {
                "paragraphs": [
                    "Variables are containers for storing data values.",
                    "Python has no command for declaring a variable.",
                    "A variable is created the moment you first assign a value to it.",
                    "Variables do not need to be declared with any particulartype, and can even change type after they have been set.",
                    "If you want to specify the data type of a variable, this can be done with casting.",
                    "You can get the data type of a variable with thetype()function.",
                    "String variables can be declared either by using single or double quotes:",
                    "Variable names are case-sensitive.",
                    "This will create two variables:"
                ],
                "lists": [],
                "examples": [
                    "x = 5y = \"John\"print(x)print(y)",
                    "x = 4       # x is of type intx = \"Sally\" # x is now of type strprint(x)",
                    "x = \n  str(3)    # x will be '3'y = int(3)    # y \n  will be 3z = float(3)  # z will be 3.0",
                    "x = 5y = \"John\"print(type(x))print(type(y))",
                    "x = \"John\"# is the same asx = \n  'John'",
                    "a = 4A = \n  \"Sally\"#A will not overwrite a"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_variables_names.asp",
        "cours": {
            "titre": "Python -Variable Names",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_variables_names.asp",
            "contenus": {
                "paragraphs": [
                    "Legal variable names:",
                    "Illegal variable names:",
                    "Remember that variable names are case-sensitive",
                    "Variable names with more than one word can be difficult to read.",
                    "There are several techniques you can use to make them more readable:",
                    "Each word, except the first, starts with a capital letter:",
                    "Each word starts with a capital letter:",
                    "Each word is separated by an underscore character:"
                ],
                "lists": [
                    [
                        "A variable name must start with a letter or the underscore character",
                        "A variable name cannot start with a number",
                        "A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )",
                        "Variable names are case-sensitive (age, Age and AGE are three different variables)",
                        "A variable name cannot be any of thePython keywords."
                    ]
                ],
                "examples": [
                    "myvar = \"John\"my_var = \"John\"_my_var = \"John\"myVar = \"John\"MYVAR = \"John\"myvar2 = \"John\"",
                    "2myvar = \"John\"my-var = \"John\"my var = \"John\""
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_variables_multiple.asp",
        "cours": {
            "titre": "Python Variables -Assign Multiple Values",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_variables_multiple.asp",
            "contenus": {
                "paragraphs": [
                    "Python allows you to assign values to multiple variables in one line:",
                    "Note:Make sure the number of variables matches the number of values, or else you will get an error.",
                    "And you can assign thesamevalue to multiple variables in one line:",
                    "If you have a collection of values in a list, tuple etc.\nPython allows you to extract the values into variables. This is calledunpacking.",
                    "",
                    "Unpack a list:",
                    "Learn more about unpacking in ourUnpack TuplesChapter."
                ],
                "lists": [],
                "examples": [
                    "x, y, z = \"Orange\", \"Banana\", \"Cherry\"print(x)print(y)print(z)",
                    "x = y = z = \"Orange\"print(x)print(y)print(z)",
                    "fruits = [\"apple\", \"banana\", \"cherry\"]x, y, z = fruitsprint(x)print(y)print(z)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_variables_output.asp",
        "cours": {
            "titre": "Python -Output Variables",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_variables_output.asp",
            "contenus": {
                "paragraphs": [
                    "The Pythonprint()function is often used to output variables.",
                    "In theprint()function, you output multiple \nvariables, separated by a comma:",
                    "You can also use the+operator to output \nmultiple variables:",
                    "Notice the space character after\"Python \"and\"is \",\n  without them the result would be \"Pythonisawesome\".",
                    "For numbers, the+character works as a mathematical operator:",
                    "In theprint()function, when you try to \ncombine a string and a number with the+operator, Python will give you an error:",
                    "The best way to output multiple variables in theprint()function is to separate them with commas,\nwhich even support different data types:"
                ],
                "lists": [],
                "examples": [
                    "x = \"Python is awesome\"print(x)",
                    "x = \"Python\"y = \"is\"z = \"awesome\"print(x, y, z)",
                    "x = \"Python \"y = \"is \"z = \"awesome\"print(x \n  + y + z)",
                    "x = 5y = 10print(x + y)",
                    "x = 5y = \"John\"print(x + y)",
                    "x = 5y = \"John\"print(x, y)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_variables_global.asp",
        "cours": {
            "titre": "Python -Global Variables",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_variables_global.asp",
            "contenus": {
                "paragraphs": [
                    "Variables that are created outside of a function (as in all of the examples \nin the previous pages) are known as global variables.",
                    "Global variables can be used by everyone, both inside of \nfunctions and outside.",
                    "Create a variable outside of a function, and use it inside the function",
                    "If you create a variable with the same name inside a function, this variable \nwill be local, and can only be used inside the function. The global variable \nwith the same name will remain as it was, global and with the original value.",
                    "Create a variable inside a function, with the same name as the global \n  variable",
                    "Normally, when you create a variable inside a function, that variable is \nlocal, and can only be used inside that function.",
                    "To create a global variable inside a function, you can use theglobalkeyword.",
                    "If you use theglobalkeyword, the variable belongs to the global scope:",
                    "Also, use theglobalkeyword if you want to change a global variable inside a function.",
                    "To change the value of a global variable inside a function, refer to the \n  variable by using theglobalkeyword:"
                ],
                "lists": [],
                "examples": [
                    "x = \"awesome\"def myfunc():print(\"Python is \" + x)myfunc()",
                    "x = \"awesome\"def myfunc():x = \"fantastic\"print(\"Python is \" + x)myfunc()print(\"Python is \" + x)",
                    "def myfunc():global xx = \"fantastic\"myfunc()print(\"Python is \" + x)",
                    "x = \"awesome\"def myfunc():global xx = \"fantastic\"myfunc()print(\"Python is \" + x)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_variables_exercises.asp",
        "cours": {
            "titre": "Python -Variable Exercises",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_variables_exercises.asp",
            "contenus": {
                "paragraphs": [
                    "Now you have learned a lot about variables, and how to use them in Python.",
                    "Are you ready for a test?",
                    "Test your Python Variables skills with exercises from all categories:",
                    "More Python Exercises:",
                    "Python Exercises"
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_datatypes.asp",
        "cours": {
            "titre": "PythonData Types",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_datatypes.asp",
            "contenus": {
                "paragraphs": [
                    "In programming, data type is an important concept.",
                    "Variables can store data of different types, and different types can do \ndifferent things.",
                    "Python has the following data types built-in by default, in these categories:",
                    "You can get the data type of any object by using thetype()function:",
                    "Print the data type of the variable x:",
                    "In Python, the data type is set when you assign a value to a variable:",
                    "If you want to specify the data type, you can use the following \nconstructor functions:"
                ],
                "lists": [],
                "examples": [
                    "x = 5print(type(x))"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_numbers.asp",
        "cours": {
            "titre": "PythonNumbers",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_numbers.asp",
            "contenus": {
                "paragraphs": [
                    "There are three numeric types in Python:",
                    "Variables of numeric types are created when you assign a value to them:",
                    "To verify the type of any object in Python, use thetype()function:",
                    "Int, or integer, is a whole number, \npositive or negative, without decimals, of unlimited length.",
                    "Integers:",
                    "Float, or \"floating point number\" is a number, positive or negative, containing one or more decimals.",
                    "Floats:",
                    "Float can also be scientific numbers with an \"e\" to indicate the power of 10.",
                    "Floats:",
                    "Complex numbers are written with a \"j\" as the imaginary part:",
                    "Complex:",
                    "You can convert from one type to another with theint(),float(), andcomplex()methods:",
                    "Convert from one type to another:",
                    "Note:You cannot convert complex numbers into another number type.",
                    "Python does not have arandom()function to \nmake a random number, but Python has a built-in module calledrandomthat can be used to make random numbers:",
                    "Import the random module, and display a random number between 1 and 9:",
                    "In ourRandom Module Referenceyou will learn more about the Random module."
                ],
                "lists": [
                    [
                        "int",
                        "float",
                        "complex"
                    ]
                ],
                "examples": [
                    "x = 1    \n  # inty = 2.8  # floatz = 1j   # complex",
                    "print(type(x))print(type(y))print(type(z))",
                    "x = 1y = 35656222554887711z = \n  -3255522print(type(x))print(type(y))print(type(z))",
                    "x = 1.10y = 1.0z = -35.59print(type(x))print(type(y))print(type(z))",
                    "x = 35e3y = 12E4z = -87.7e100print(type(x))print(type(y))print(type(z))",
                    "x = 3+5jy = 5jz = -5jprint(type(x))print(type(y))print(type(z))",
                    "x = 1    # inty = 2.8  # floatz = 1j   # complex#convert from int to float:a = float(x)#convert from float to int:b = int(y)#convert from int to complex:c = complex(x)print(a)print(b)print(c)print(type(a))print(type(b))print(type(c))",
                    "import randomprint(random.randrange(1, 10))"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_casting.asp",
        "cours": {
            "titre": "PythonCasting",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_casting.asp",
            "contenus": {
                "paragraphs": [
                    "There may be times when you want to specify a type on to a variable. This can be done with casting. Python is an object-orientated language, and as such it uses classes to define data types, including its primitive types.",
                    "Casting in python is therefore done using constructor functions:",
                    "Integers:",
                    "Floats:",
                    "Strings:"
                ],
                "lists": [
                    [
                        "int()- constructs an integer number from an integer literal, a float literal (by removing \n    all decimals), or a string literal (providing the string represents a whole number)",
                        "float()- constructs a float number from an integer literal, a float literal or a string literal (providing the string represents a float or an integer)",
                        "str()- constructs a string from a wide variety of data types, including strings, integer literals and float literals"
                    ]
                ],
                "examples": [
                    "x = int(1)   # x will be 1y = int(2.8) # y will be 2z = int(\"3\") # z will be 3",
                    "x = float(1)     # x will be 1.0y = float(2.8)   # y will be 2.8z = float(\"3\")   # z will be 3.0w = float(\"4.2\") # w will be 4.2",
                    "x = str(\"s1\") # x will be 's1'y = str(2)    # y will be '2'z = str(3.0)  # z will be '3.0'"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_strings.asp",
        "cours": {
            "titre": "PythonStrings",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_strings.asp",
            "contenus": {
                "paragraphs": [
                    "Strings in python are surrounded by either single quotation marks, or double quotation marks.",
                    "'hello'is the same as\"hello\".",
                    "You can display a string literal with theprint()function:",
                    "You can use quotes inside a string, as long as they don't match the quotes surrounding the string:",
                    "Assigning a string to a variable is done with the variable name followed by \nan equal sign and the string:",
                    "You can assign a multiline string to a variable by using three quotes:",
                    "You can use three double quotes:",
                    "Or three single quotes:",
                    "Note:in the result, the line breaks are inserted at the same position as in the code.",
                    "Like many other popular programming languages, strings in Python are arrays of bytes representing unicode characters.",
                    "However, Python does not have a character data type, a single character is simply a string with a length of 1.",
                    "Square brackets can be used to access elements of the string.",
                    "Get the character at position 1 (remember that the first character has the \nposition 0):",
                    "Since strings are arrays, we can loop through the characters in a string, with aforloop.",
                    "Loop through the letters in the word \"banana\":",
                    "Learn more about For Loops in ourPython For Loopschapter.",
                    "To get the length of a string, use thelen()function.",
                    "Thelen()function returns the length of a string:",
                    "To check if a certain phrase or character is present in a string, we can use \nthe keywordin.",
                    "Check if \"free\" is present in the following text:",
                    "Use it in anifstatement:",
                    "Print only if \"free\" is present:",
                    "Learn more about If statements in ourPython \nIf...Elsechapter.",
                    "To check if a certain phrase or character is NOT present in a string, we can use \nthe keywordnot in.",
                    "Check if \"expensive\" is NOT present in the following text:",
                    "Use it in anifstatement:",
                    "print only if \"expensive\" is NOT present:"
                ],
                "lists": [],
                "examples": [
                    "print(\"Hello\")print('Hello')",
                    "print(\"It's alright\")print(\"He is called 'Johnny'\")print('He is called \"Johnny\"')",
                    "a = \"Hello\"print(a)",
                    "a = \"\"\"Lorem ipsum dolor sit amet,consectetur adipiscing elit,sed do \n  eiusmod tempor incididuntut labore et dolore magna aliqua.\"\"\"print(a)",
                    "a = '''Lorem ipsum dolor sit amet,consectetur adipiscing elit,sed do \n  eiusmod tempor incididuntut labore et dolore magna aliqua.'''print(a)",
                    "a = \"Hello, World!\"print(a[1])",
                    "for x in \"banana\":print(x)",
                    "a = \"Hello, World!\"print(len(a))",
                    "txt = \"The best things in life are free!\"print(\"free\" in txt)",
                    "txt = \"The best things in life are free!\"if \"free\" in txt:print(\"Yes, 'free' is present.\")",
                    "txt = \"The best things in life are free!\"print(\"expensive\" not in txt)",
                    "txt = \"The best things in life are free!\"if \"expensive\" not in txt:print(\"No, 'expensive' is NOT present.\")"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_strings_slicing.asp",
        "cours": {
            "titre": "Python -Slicing Strings",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_strings_slicing.asp",
            "contenus": {
                "paragraphs": [
                    "You can return a range of characters by using the slice syntax.",
                    "Specify the start index and the end index, separated by a colon, to return a \npart of the string.",
                    "Get the characters from position 2 to position 5 (not included):",
                    "Note:The first character has index 0.",
                    "By leaving out the start index, the range will start at the first character:",
                    "Get the characters from the start to position 5 (not included):",
                    "By leaving out theendindex, the range will go to the end:",
                    "Get the characters from position 2, and all the way to the end:",
                    "Get the characters:",
                    "From: \"o\" in \"World!\" (position -5)",
                    "To, but not included: \"d\" in \"World!\" (position -2):"
                ],
                "lists": [],
                "examples": [
                    "b = \"Hello, World!\"print(b[2:5])",
                    "b = \"Hello, World!\"print(b[:5])",
                    "b = \"Hello, World!\"print(b[2:])",
                    "b = \"Hello, World!\"print(b[-5:-2])"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_strings_modify.asp",
        "cours": {
            "titre": "Python -Modify Strings",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_strings_modify.asp",
            "contenus": {
                "paragraphs": [
                    "Python has a set of built-in methods that you can use on strings.",
                    "Theupper()method returns the string in upper case:",
                    "Thelower()method returns the string in lower case:",
                    "Whitespace is the space before and/or after the actual text, and very often you want to remove this space.",
                    "Thestrip()method removes any whitespace from the beginning or the end:",
                    "Thereplace()method replaces a string with another string:",
                    "Thesplit()method returns a list where the text between the specified separator becomes the list items.",
                    "Thesplit()method splits the string into substrings if it finds instances of the separator:",
                    "Learn more about Lists in ourPython Listschapter.",
                    "Learn more about String Methods with ourString Methods Reference"
                ],
                "lists": [],
                "examples": [
                    "a = \"Hello, World!\"print(a.upper())",
                    "a = \"Hello, World!\"print(a.lower())",
                    "a = \" Hello, World! \"print(a.strip()) # returns \"Hello, World!\"",
                    "a = \"Hello, World!\"print(a.replace(\"H\", \"J\"))",
                    "a = \"Hello, World!\"print(a.split(\",\")) # \n  returns ['Hello', ' World!']"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_strings_concatenate.asp",
        "cours": {
            "titre": "Python -String Concatenation",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_strings_concatenate.asp",
            "contenus": {
                "paragraphs": [
                    "To concatenate, or combine, two strings you can use the + operator.",
                    "Merge variableawith variablebinto variablec:",
                    "To add a space between them, add a\" \":"
                ],
                "lists": [],
                "examples": [
                    "a = \"Hello\"b = \"World\"c = a + bprint(c)",
                    "a = \"Hello\"b = \"World\"c = a + \" \" + bprint(c)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_strings_format.asp",
        "cours": {
            "titre": "Python -Format - Strings",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_strings_format.asp",
            "contenus": {
                "paragraphs": [
                    "As we learned in the Python Variables chapter, we cannot combine strings and numbers like this:",
                    "But we can combine strings and numbers by usingf-stringsor theformat()method!",
                    "F-String was introduced in Python 3.6,\nand is now the preferred way of formatting strings.",
                    "To specify a string as an f-string, simply put anfin front of the string \nliteral, and add curly brackets{}as \nplaceholders for variables and other operations.",
                    "Create an f-string:",
                    "A placeholder can contain variables,\noperations, functions, and modifiers to format the value.",
                    "Add a placeholder for thepricevariable:",
                    "A placeholder can include amodifierto format the value.",
                    "A modifier is included by adding a colon:followed by a legal formatting type, like.2fwhich means fixed point number with 2 decimals:",
                    "Display the price with 2 decimals:",
                    "A placeholder can contain Python code, like math operations:",
                    "Perform a math operation in the placeholder, and return the result:",
                    "Learn more about String Formatting in ourString Formattingchapter."
                ],
                "lists": [],
                "examples": [
                    "age = 36txt = \"My name is John, I am \" + ageprint(txt)",
                    "age = 36txt = f\"My name is John, I am {age}\"print(txt)",
                    "price = 59txt = f\"The price is {price} dollars\"print(txt)",
                    "price = 59txt = f\"The price is {price:.2f} dollars\"print(txt)",
                    "txt = f\"The price is {20 * 59} dollars\"print(txt)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_strings_escape.asp",
        "cours": {
            "titre": "Python -Escape Characters",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_strings_escape.asp",
            "contenus": {
                "paragraphs": [
                    "To insert characters that are illegal in a string, use an escape character.",
                    "An escape character is a backslash\\followed by the character you want to insert.",
                    "An example of an illegal character is a double quote inside a string that is surrounded by double quotes:",
                    "You will get an error if you use double quotes inside a string that is \nsurrounded by double quotes:",
                    "To fix this problem, use the escape character\\\":",
                    "The escape character allows you to use double quotes when you normally would not be allowed:",
                    "Other escape characters used in Python:"
                ],
                "lists": [],
                "examples": [
                    "txt = \"We are the so-called \"Vikings\" from the north.\"",
                    "txt = \"We are the so-called \\\"Vikings\\\" from the north.\""
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_strings_methods.asp",
        "cours": {
            "titre": "Python -String Methods",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_strings_methods.asp",
            "contenus": {
                "paragraphs": [
                    "Python has a set of built-in methods that you can use on strings.",
                    "Note:All string methods return new values. They do not change the original string."
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_strings_exercises.asp",
        "cours": {
            "titre": "Python -String Exercises",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_strings_exercises.asp",
            "contenus": {
                "paragraphs": [
                    "Now you have learned a lot about Strings, and how to use them in Python.",
                    "Are you ready for a test?",
                    "Test your Python String skills with exercises from all categories:",
                    "More Python Exercises:",
                    "Python Exercises"
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_booleans.asp",
        "cours": {
            "titre": "PythonBooleans",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_booleans.asp",
            "contenus": {
                "paragraphs": [
                    "Booleans represent one of two values:TrueorFalse.",
                    "In programming you often need to know if an expression isTrueorFalse.",
                    "You can evaluate any expression in Python, and get one of two \nanswers,TrueorFalse.",
                    "When you compare two values, the expression is evaluated and Python returns \nthe Boolean answer:",
                    "When you run a condition in an if statement, Python returnsTrueorFalse:",
                    "Print a message based on whether the condition isTrueorFalse:",
                    "Thebool()function allows you to evaluate \nany value, and give youTrueorFalsein return,",
                    "Evaluate a string and a number:",
                    "Evaluate two variables:",
                    "Almost any value is evaluated toTrueif it \nhas some sort of content.",
                    "Any string isTrue, except empty strings.",
                    "Any number isTrue, except0.",
                    "Any list, tuple, set, and dictionary areTrue, except \nempty ones.",
                    "The following will return True:",
                    "In fact, there are not many values that evaluate toFalse, except empty values, such as(),[],{},\"\", the number0, and the valueNone. \nAnd of course the valueFalseevaluates toFalse.",
                    "The following will return False:",
                    "One more value, or object in this case, evaluates toFalse, and that is if you have an object that \nis made from a class with a__len__function that returns0orFalse:",
                    "You can create functions that returns a Boolean Value:",
                    "Print the answer of a function:",
                    "You can execute code based on the Boolean answer of a function:",
                    "Print \"YES!\" if the function returns True, otherwise print \"NO!\":",
                    "Python also has many built-in functions that return a boolean value, like theisinstance()function, which can be used to determine if an object is of a certain data type:",
                    "Check if an object is an integer or not:"
                ],
                "lists": [],
                "examples": [
                    "print(10 > 9)print(10 == 9)print(10 < 9)",
                    "a = 200b = 33if b > a:print(\"b is greater than a\")else:print(\"b is not greater than a\")",
                    "print(bool(\"Hello\"))print(bool(15))",
                    "x = \"Hello\"y = 15print(bool(x))print(bool(y))",
                    "bool(\"abc\")bool(123)bool([\"apple\", \"cherry\", \"banana\"])",
                    "bool(False)bool(None)bool(0)bool(\"\")bool(())bool([])bool({})",
                    "class myclass():def __len__(self):return 0myobj = myclass()print(bool(myobj))",
                    "def myFunction() :return Trueprint(myFunction())",
                    "def myFunction() :return Trueif myFunction():print(\"YES!\")else:print(\"NO!\")",
                    "x = 200print(isinstance(x, int))"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_operators.asp",
        "cours": {
            "titre": "PythonOperators",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_operators.asp",
            "contenus": {
                "paragraphs": [
                    "Operators are used to perform operations on variables and values.",
                    "In the example below, we use the+operator to add together two values:",
                    "Python divides the operators in the following groups:",
                    "Arithmetic operators are used with numeric values to perform common mathematical operations:",
                    "Assignment operators are used to assign values to variables:",
                    "Comparison operators are used to compare two values:",
                    "Logical operators are used to combine conditional statements:",
                    "Identity operators are used to compare the objects, not if they are equal, but if they are actually the same object, with the same memory location:",
                    "Membership operators are used to test if a sequence is presented in an object:",
                    "Bitwise operators are used to compare (binary) numbers:",
                    "Operator precedence describes the order in which operations are performed.",
                    "Parentheses has the highest precedence, meaning that expressions inside \nparentheses must be evaluated first:",
                    "Multiplication*has higher precedence than\naddition+, and therefor multiplications are \nevaluated before additions:",
                    "The precedence order is described in the table below, starting with the highest precedence at the top:",
                    "If two operators have the same precedence, the expression is evaluated from left \nto right.",
                    "Addition+and\nsubtraction-has the same precedence, and therefor\nwe evaluate the expression from left to right:"
                ],
                "lists": [
                    [
                        "Arithmetic operators",
                        "Assignment operators",
                        "Comparison operators",
                        "Logical operators",
                        "Identity operators",
                        "Membership operators",
                        "Bitwise operators"
                    ]
                ],
                "examples": [
                    "print(10 + 5)",
                    "print((6 + 3) - (6 + 3))",
                    "print(100 + 5 * 3)",
                    "print(5 + 4 - 7 + 3)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_lists.asp",
        "cours": {
            "titre": "PythonLists",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_lists.asp",
            "contenus": {
                "paragraphs": [
                    "Lists are used to store multiple items in a single variable.",
                    "Lists are one of 4 built-in data types in Python used to store collections of \ndata, the other 3 areTuple,Set, andDictionary, all with different qualities and usage.",
                    "Lists are created using square brackets:",
                    "Create a List:",
                    "List items are ordered, changeable, and allow duplicate values.",
                    "List items are indexed, the first item has index[0],\nthe second item has index[1]etc.",
                    "When we say that lists are ordered, it means that the items have a defined order, and that order will not change.",
                    "If you add new items to a list,\nthe new items will be placed at the end of the list.",
                    "Note:There are somelist methodsthat will change the order, but in general: the order of the items will not change.",
                    "The list is changeable, meaning that we can change, add, and remove items in a list after it has been created.",
                    "Since lists are indexed, lists can have items with the same value:",
                    "Lists allow duplicate values:",
                    "To determine how many items a list has, use thelen()function:",
                    "Print the number of items in the list:",
                    "List items can be of any data type:",
                    "String, int and boolean data types:",
                    "A list can contain different data types:",
                    "A list with strings, integers and boolean values:",
                    "From Python's perspective, lists are defined as objects with the data type 'list':",
                    "What is the data type of a list?",
                    "It is also possible to use thelist()constructor when creating a \nnew list.",
                    "Using thelist()constructor to make a List:",
                    "There are four collection data types in the Python programming language:",
                    "*Setitemsare unchangeable, but you can remove and/or add items \n  whenever you like.",
                    "**As of Python version 3.7, dictionaries areordered. \n  In Python 3.6 and earlier, dictionaries areunordered.",
                    "When choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security."
                ],
                "lists": [
                    [
                        "Listis a collection which is ordered and changeable. Allows duplicate members.",
                        "Tupleis a collection which is ordered and unchangeable. Allows duplicate members.",
                        "Setis a collection which is unordered, \nunchangeable*, and unindexed. No duplicate members.",
                        "Dictionaryis a collection which is ordered** \nand changeable. No duplicate members."
                    ]
                ],
                "examples": [
                    "thislist = [\"apple\", \"banana\", \"cherry\"]print(thislist)",
                    "thislist = [\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\"]print(thislist)",
                    "thislist = [\"apple\", \"banana\", \"cherry\"]print(len(thislist))",
                    "list1 = [\"apple\", \"banana\", \"cherry\"]list2 = [1, 5, 7, 9, 3]list3 = [True, False, False]",
                    "list1 = [\"abc\", 34, True, 40, \"male\"]",
                    "mylist = [\"apple\", \"banana\", \"cherry\"]print(type(mylist))",
                    "thislist = list((\"apple\", \"banana\", \"cherry\")) # note the double round-bracketsprint(thislist)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_lists_access.asp",
        "cours": {
            "titre": "Python - Access List Items",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_lists_access.asp",
            "contenus": {
                "paragraphs": [
                    "List items are indexed and you can access them by referring to the index number:",
                    "Print the second item of the list:",
                    "Note:The first item has index 0.",
                    "Negative indexing means start from the end",
                    "-1refers to the last item,-2refers to the second last item etc.",
                    "Print the last item of the list:",
                    "You can specify a range of indexes by specifying where to start and where to \nend the range.",
                    "When specifying a range, the return value will be a new list with the \nspecified items.",
                    "Return the third, fourth, and fifth item:",
                    "Note:The search will start at index 2 (included) and end at index 5 (not included).",
                    "Remember that the first item has index 0.",
                    "By leaving out the start value, the range will start at the first item:",
                    "This example returns the items from the beginning to, but NOT including, \"kiwi\":",
                    "By leaving out the end value, the range will go on to the end of the list:",
                    "This example returns the items from \"cherry\" to the end:",
                    "Specify negative indexes if you want to start the search from the end of the \nlist:",
                    "This example returns the items from \"orange\" (-4) to, but NOT including \n\"mango\" (-1):",
                    "To determine if a specified item is present in a list use theinkeyword:",
                    "Check if \"apple\" is present in the list:"
                ],
                "lists": [],
                "examples": [
                    "thislist = [\"apple\", \"banana\", \"cherry\"]print(thislist[1])",
                    "thislist = [\"apple\", \"banana\", \"cherry\"]print(thislist[-1])",
                    "thislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \n  \"kiwi\", \"melon\", \"mango\"]print(thislist[2:5])",
                    "thislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \n  \"kiwi\", \"melon\", \"mango\"]print(thislist[:4])",
                    "thislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \n  \"kiwi\", \"melon\", \"mango\"]print(thislist[2:])",
                    "thislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \n  \"kiwi\", \"melon\", \"mango\"]print(thislist[-4:-1])",
                    "thislist = [\"apple\", \"banana\", \"cherry\"]if \"apple\" in thislist:print(\"Yes, 'apple' is in the fruits list\")"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_lists_change.asp",
        "cours": {
            "titre": "Python -Change List Items",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_lists_change.asp",
            "contenus": {
                "paragraphs": [
                    "To change the value of a specific item, \nrefer to the index number:",
                    "Change the second item:",
                    "To change the value of items within a specific range, define a list with the new values, and refer to the range of index numbers where you want to insert the new values:",
                    "Change the values \"banana\" and \"cherry\" with the values \"blackcurrant\" and \"watermelon\":",
                    "If you insertmoreitems than you replace, the new items will be inserted \nwhere you specified, and the remaining items will move accordingly:",
                    "Change the second value by replacing it withtwonew \nvalues:",
                    "Note:The length of the list will change when the number of items inserted does not match the number of items replaced.",
                    "If you insertlessitems than you replace, the new items will be inserted \nwhere you specified, and the remaining items will move accordingly:",
                    "Change the second and third value by replacing it withonevalue:",
                    "To insert a new list item, without replacing any of the existing values, we can use theinsert()method.",
                    "Theinsert()method inserts an item at the specified index:",
                    "Insert \"watermelon\" as the third item:",
                    "Note:As a result of the example above, the list will now contain 4 items."
                ],
                "lists": [],
                "examples": [
                    "thislist = [\"apple\", \"banana\", \"cherry\"]thislist[1] = \"blackcurrant\"print(thislist)",
                    "thislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"mango\"]thislist[1:3] = [\"blackcurrant\", \"watermelon\"]print(thislist)",
                    "thislist = [\"apple\", \"banana\", \"cherry\"]thislist[1:2] = [\"blackcurrant\", \n  \"watermelon\"]print(thislist)",
                    "thislist = [\"apple\", \"banana\", \"cherry\"]thislist[1:3] = [\"watermelon\"]print(thislist)",
                    "thislist = [\"apple\", \"banana\", \"cherry\"]thislist.insert(2, \"watermelon\")print(thislist)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_lists_add.asp",
        "cours": {
            "titre": "Python - Add List Items",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_lists_add.asp",
            "contenus": {
                "paragraphs": [
                    "To add an item to the end of the list, use theappend()method:",
                    "Using theappend()method to append an item:",
                    "To insert a list item at a specified index, use theinsert()method.",
                    "Theinsert()method inserts an item at the specified index:",
                    "Insert an item as the second position:",
                    "Note:As a result of the examples above, the lists will now contain 4 items.",
                    "To append elements fromanother listto the current list, use theextend()method.",
                    "Add the elements oftropicaltothislist:",
                    "The elements will be added to theendof the list.",
                    "Theextend()method does not have to appendlists, you can add any iterable object (tuples, sets, dictionaries \netc.).",
                    "Add elements of a tuple to a list:"
                ],
                "lists": [],
                "examples": [
                    "thislist = [\"apple\", \"banana\", \"cherry\"]thislist.append(\"orange\")print(thislist)",
                    "thislist = [\"apple\", \"banana\", \"cherry\"]thislist.insert(1, \"orange\")print(thislist)",
                    "thislist = [\"apple\", \"banana\", \"cherry\"]tropical = [\"mango\", \"pineapple\", \"papaya\"]thislist.extend(tropical)print(thislist)",
                    "thislist = [\"apple\", \"banana\", \"cherry\"]thistuple = (\"kiwi\", \"orange\")thislist.extend(thistuple)print(thislist)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_lists_remove.asp",
        "cours": {
            "titre": "Python - Remove List Items",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_lists_remove.asp",
            "contenus": {
                "paragraphs": [
                    "Theremove()method removes the specified item.",
                    "Remove \"banana\":",
                    "If there are more than one item with the specified value, theremove()method removes the first \noccurrence:",
                    "Remove the first occurrence of \"banana\":",
                    "Thepop()method removes the specified \nindex.",
                    "Remove the second item:",
                    "If you do not specify the index, thepop()method removes the last item.",
                    "Remove the last item:",
                    "Thedelkeyword also removes the specified \nindex:",
                    "Remove the first item:",
                    "Thedelkeyword can also delete the list completely.",
                    "Delete the entire list:",
                    "Theclear()method empties the list.",
                    "The list still remains, but it has no content.",
                    "Clear the list content:"
                ],
                "lists": [],
                "examples": [
                    "thislist = [\"apple\", \"banana\", \"cherry\"]thislist.remove(\"banana\")print(thislist)",
                    "thislist = [\"apple\", \"banana\", \"cherry\", \"banana\", \"kiwi\"]thislist.remove(\"banana\")print(thislist)",
                    "thislist = [\"apple\", \"banana\", \"cherry\"]thislist.pop(1)print(thislist)",
                    "thislist = [\"apple\", \"banana\", \"cherry\"]thislist.pop()print(thislist)",
                    "thislist = [\"apple\", \"banana\", \"cherry\"]del\nthislist[0]print(thislist)",
                    "thislist = [\"apple\", \"banana\", \"cherry\"]del\nthislist",
                    "thislist = [\"apple\", \"banana\", \"cherry\"]thislist.clear()print(thislist)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_lists_loop.asp",
        "cours": {
            "titre": "Python - Loop Lists",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_lists_loop.asp",
            "contenus": {
                "paragraphs": [
                    "You can loop through the list items by using aforloop:",
                    "Print all items in the list, one by one:",
                    "Learn more aboutforloops in ourPython For LoopsChapter.",
                    "You can also loop through the list items by referring to their index number.",
                    "Use therange()andlen()functions to create a suitable iterable.",
                    "Print all items by referring to their index number:",
                    "The iterable created in the example above is[0, 1, 2].",
                    "You can loop through the list items by using awhileloop.",
                    "Use thelen()function to determine the length of the list,\nthen start at 0 and loop your way through the list items by referring to their indexes.",
                    "Remember to increase the index by 1 after each iteration.",
                    "Print all items, using awhileloop to go \n  through all the index numbers",
                    "Learn more aboutwhileloops in ourPython While LoopsChapter.",
                    "List Comprehension offers the shortest syntax for looping through lists:",
                    "A short handforloop that will print all items in a list:",
                    "Learn more about list comprehension in the next chapter:List Comprehension."
                ],
                "lists": [],
                "examples": [
                    "thislist = [\"apple\", \"banana\", \"cherry\"]for x in thislist:print(x)",
                    "thislist = [\"apple\", \"banana\", \"cherry\"]for i \n  in range(len(thislist)):print(thislist[i])",
                    "thislist = [\"apple\", \"banana\", \"cherry\"]i = 0while i < len(thislist):print(thislist[i])i = i + 1",
                    "thislist = [\"apple\", \"banana\", \"cherry\"][print(x) for x in thislist]"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_lists_comprehension.asp",
        "cours": {
            "titre": "Python - List Comprehension",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_lists_comprehension.asp",
            "contenus": {
                "paragraphs": [
                    "List comprehension offers a shorter syntax when you want to create a new list based on the values of an \nexisting list.",
                    "Example:",
                    "Based on a list of fruits, you want a new list, containing only the fruits \nwith the letter \"a\" in the name.",
                    "Without list comprehension you will have to write aforstatement \nwith a conditional test inside:",
                    "With list comprehension you can do all that with only one line of code:",
                    "The return value is a new list, leaving the old list unchanged.",
                    "Theconditionis like a filter that only accepts the items that valuate toTrue.",
                    "Only accept items that are not \"apple\":",
                    "The conditionif x != \"apple\"will returnTruefor all elements other \nthan \"apple\", making the new list contain all fruits except \"apple\".",
                    "Theconditionis optional and can be omitted:",
                    "With noifstatement:",
                    "Theiterablecan be any iterable object, like a list, tuple, set etc.",
                    "You can use therange()function to create an iterable:",
                    "Same example, but with a condition:",
                    "Accept only numbers lower than 5:",
                    "Theexpressionis the current item in the iteration, but it is also the \noutcome, which you can manipulate before it ends up like a list item in the new \nlist:",
                    "Set the values in the new list to upper case:",
                    "You can set the outcome to whatever you like:",
                    "Set all values in the new list to 'hello':",
                    "Theexpressioncan also contain conditions, not like a filter, but as a \nway to manipulate the outcome:",
                    "Return \"orange\" instead of \"banana\":",
                    "Theexpressionin the example above says:",
                    "\"Return the item if it is not banana, if it is banana return orange\"."
                ],
                "lists": [],
                "examples": [
                    "fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]newlist = []for x in fruits:if \"a\" in x:newlist.append(x)print(newlist)",
                    "fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]newlist = [x \n  for x in fruits if \"a\" in x]print(newlist)",
                    "newlist = [x for x in fruits if x != \"apple\"]",
                    "newlist = [x for x in fruits]",
                    "newlist = [x for x in range(10)]",
                    "newlist = [x for x in range(10) if x < 5]",
                    "newlist = [x.upper() \n  for x in fruits]",
                    "newlist = ['hello' for x in fruits]",
                    "newlist = [x if x != \"banana\" else \"orange\" \n  for x in fruits]"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_lists_sort.asp",
        "cours": {
            "titre": "Python -Sort Lists",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_lists_sort.asp",
            "contenus": {
                "paragraphs": [
                    "List objects have asort()method that will sort the list alphanumerically, ascending, by default:",
                    "Sort the list alphabetically:",
                    "Sort the list numerically:",
                    "To sort descending, use the keyword argumentreverse = True:",
                    "Sort the list descending:",
                    "Sort the list descending:",
                    "You can also customize your own function by using the keyword argumentkey =function.",
                    "The function will return a number that will be used to sort the list (the \nlowest number first):",
                    "Sort the list based on how close the number is to 50:",
                    "By default thesort()method is case sensitive,\nresulting in all capital letters being sorted before lower case letters:",
                    "Case sensitive sorting can give an unexpected result:",
                    "Luckily we can use built-in functions as key functions when sorting a list.",
                    "So if you want a case-insensitive sort function, use str.lower as a key function:",
                    "Perform a case-insensitive sort of the list:",
                    "What if you want to reverse the order of a list, regardless of the alphabet?",
                    "Thereverse()method reverses the current sorting order of the elements.",
                    "Reverse the order of the list items:"
                ],
                "lists": [],
                "examples": [
                    "thislist = [\"orange\", \"mango\", \"kiwi\", \n  \"pineapple\", \"banana\"]thislist.sort()print(thislist)",
                    "thislist = [100, 50, 65, 82, 23]thislist.sort()print(thislist)",
                    "thislist = [\"orange\", \"mango\", \"kiwi\", \n  \"pineapple\", \"banana\"]thislist.sort(reverse = True)print(thislist)",
                    "thislist = [100, 50, 65, 82, 23]thislist.sort(reverse = True)print(thislist)",
                    "def myfunc(n):return abs(n - 50)thislist = [100, 50, 65, 82, 23]thislist.sort(key = \n  myfunc)print(thislist)",
                    "thislist = [\"banana\", \"Orange\", \"Kiwi\", \"cherry\"]thislist.sort()print(thislist)",
                    "thislist = [\"banana\", \"Orange\", \"Kiwi\", \"cherry\"]thislist.sort(key \n  = str.lower)print(thislist)",
                    "thislist = [\"banana\", \"Orange\", \"Kiwi\", \"cherry\"]thislist.reverse()print(thislist)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_lists_copy.asp",
        "cours": {
            "titre": "Python - Copy Lists",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_lists_copy.asp",
            "contenus": {
                "paragraphs": [
                    "You cannot copy a list simply by typinglist2 = \nlist1, because:list2will only be areferencetolist1, and changes made inlist1will automatically also be made inlist2.",
                    "You can use the built-in List methodcopy()to copy a list.",
                    "Make a copy of a list with thecopy()method:",
                    "Another way to make a copy is to use the built-in methodlist().",
                    "Make a copy of a list with thelist()method:",
                    "You can also make a copy of a list by using the:(slice) operator.",
                    "Make a copy of a list with the:operator:"
                ],
                "lists": [],
                "examples": [
                    "thislist = [\"apple\", \"banana\", \"cherry\"]mylist \n  = thislist.copy()print(mylist)",
                    "thislist = [\"apple\", \"banana\", \"cherry\"]mylist \n  = list(thislist)print(mylist)",
                    "thislist = [\"apple\", \"banana\", \"cherry\"]mylist = thislist[:]print(mylist)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_lists_join.asp",
        "cours": {
            "titre": "Python -Join Lists",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_lists_join.asp",
            "contenus": {
                "paragraphs": [
                    "There are several ways to join, or concatenate, two or more lists in Python.",
                    "One of the easiest ways are by using the+operator.",
                    "Join two list:",
                    "Another way to join two lists is by appending all the items from list2 into \nlist1, one by one:",
                    "Append list2 into list1:",
                    "Or you can use theextend()method, \nwhere the purpose is to add elements from one list to another \nlist:",
                    "Use theextend()method to add list2 at the end of list1:"
                ],
                "lists": [],
                "examples": [
                    "list1 = [\"a\", \"b\", \"c\"]list2 = [1, 2, 3]list3 = list1 + list2print(list3)",
                    "list1 = [\"a\", \"b\" , \"c\"]list2 = [1, 2, 3]for x in list2:list1.append(x)print(list1)",
                    "list1 = [\"a\", \"b\" , \"c\"]list2 = [1, 2, 3]list1.extend(list2)print(list1)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_lists_methods.asp",
        "cours": {
            "titre": "Python -List Methods",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_lists_methods.asp",
            "contenus": {
                "paragraphs": [
                    "Python has a set of built-in methods that you can use on lists."
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_lists_exercises.asp",
        "cours": {
            "titre": "PythonList Exercises",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_lists_exercises.asp",
            "contenus": {
                "paragraphs": [
                    "Now you have learned a lot about lists, and how to use them in Python.",
                    "Are you ready for a test?",
                    "Test your Python List skills with exercises from all categories:",
                    "More Python Exercises:",
                    "Python Exercises"
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_tuples.asp",
        "cours": {
            "titre": "PythonTuples",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_tuples.asp",
            "contenus": {
                "paragraphs": [
                    "Tuples are used to store multiple items in a single variable.",
                    "Tuple is one of 4 built-in data types in Python used to store collections of \ndata, the other 3 areList,Set, andDictionary, all with different qualities and usage.",
                    "A tuple is a collection which is ordered andunchangeable.",
                    "Tuples are written with round brackets.",
                    "Create a Tuple:",
                    "Tuple items are ordered, unchangeable, and allow duplicate values.",
                    "Tuple items are indexed, the first item has index[0], the second item has index[1]etc.",
                    "When we say that tuples are ordered, it means that the items have a defined order, and that order will not change.",
                    "Tuples are unchangeable, meaning that we cannot change, add or remove items after the tuple has been created.",
                    "Since tuples are indexed, they can have items with the same value:",
                    "Tuples allow duplicate values:",
                    "To determine how many items a tuple has, use thelen()function:",
                    "Print the number of items in the tuple:",
                    "To create a tuple with only one item, you have to add a comma after the item, \notherwise Python will not recognize it as a tuple.",
                    "One item tuple, remember the comma:",
                    "Tuple items can be of any data type:",
                    "String, int and boolean data types:",
                    "A tuple can contain different data types:",
                    "A tuple with strings, integers and boolean values:",
                    "From Python's perspective, tuples are defined as objects with the data type 'tuple':",
                    "What is the data type of a tuple?",
                    "It is also possible to use thetuple()constructor to make a tuple.",
                    "Using the tuple() method to make a tuple:",
                    "There are four collection data types in the Python programming language:",
                    "*Setitemsare unchangeable, but you can remove and/or add items \n  whenever you like.",
                    "**As of Python version 3.7, dictionaries areordered. \n  In Python 3.6 and earlier, dictionaries areunordered.",
                    "When choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security."
                ],
                "lists": [
                    [
                        "Listis a collection which is ordered and changeable. Allows duplicate members.",
                        "Tupleis a collection which is ordered and unchangeable. Allows duplicate members.",
                        "Setis a collection which is unordered, \nunchangeable*, and unindexed. No duplicate members.",
                        "Dictionaryis a collection which is ordered** \nand changeable. No duplicate members."
                    ]
                ],
                "examples": [
                    "thistuple = (\"apple\", \"banana\", \"cherry\")print(thistuple)",
                    "thistuple = (\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\")print(thistuple)",
                    "thistuple = (\"apple\", \"banana\", \"cherry\")print(len(thistuple))",
                    "thistuple = (\"apple\",)print(type(thistuple))#NOT a tuplethistuple = (\"apple\")print(type(thistuple))",
                    "tuple1 = (\"apple\", \"banana\", \"cherry\")tuple2 = (1, 5, 7, 9, 3)tuple3 = (True, False, False)",
                    "tuple1 = (\"abc\", 34, True, 40, \"male\")",
                    "mytuple = (\"apple\", \"banana\", \"cherry\")print(type(mytuple))",
                    "thistuple = tuple((\"apple\", \"banana\", \"cherry\")) # note the double round-bracketsprint(thistuple)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_tuples_access.asp",
        "cours": {
            "titre": "Python -Access Tuple Items",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_tuples_access.asp",
            "contenus": {
                "paragraphs": [
                    "You can access tuple items by referring to the index number, inside square \nbrackets:",
                    "Print the second item in the tuple:",
                    "Note:The first item has index 0.",
                    "Negative indexing means start from the end.",
                    "-1refers to the last item,-2refers to the second last item etc.",
                    "Print the last item of the tuple:",
                    "You can specify a range of indexes by specifying where to start and where to \nend the range.",
                    "When specifying a range, the return value will be a new tuple with the \nspecified items.",
                    "Return the third, fourth, and fifth item:",
                    "Note:The search will start at index 2 (included) and end at index 5 (not included).",
                    "Remember that the first item has index 0.",
                    "By leaving out the start value, the range will start at the first item:",
                    "This example returns the items from the beginning to, but NOT included, \"kiwi\":",
                    "By leaving out the end value, the range will go on to the end of the tuple:",
                    "This example returns the items from \"cherry\" and to the end:",
                    "Specify negative indexes if you want to start the search from the end of the \ntuple:",
                    "This example returns the items from index -4 (included) to index -1 (excluded)",
                    "To determine if a specified item is present in a tuple use theinkeyword:",
                    "Check if \"apple\" is present in the tuple:"
                ],
                "lists": [],
                "examples": [
                    "thistuple = (\"apple\", \"banana\", \"cherry\")print(thistuple[1])",
                    "thistuple = (\"apple\", \"banana\", \"cherry\")print(thistuple[-1])",
                    "thistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")print(thistuple[2:5])",
                    "thistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")print(thistuple[:4])",
                    "thistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")print(thistuple[2:])",
                    "thistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")print(thistuple[-4:-1])",
                    "thistuple = (\"apple\", \"banana\", \"cherry\")if \"apple\" in thistuple:print(\"Yes, 'apple' is in the fruits \n  tuple\")"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_tuples_update.asp",
        "cours": {
            "titre": "Python -Update Tuples",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_tuples_update.asp",
            "contenus": {
                "paragraphs": [
                    "Tuples are unchangeable, meaning that you cannot change, add, or remove items once the tuple is created.",
                    "But there are some workarounds.",
                    "Once a tuple is created, you cannot change its values. Tuples areunchangeable, \norimmutableas it also is called.",
                    "But there is a workaround. You can convert the tuple into a list, change the \nlist, and convert the list back into a tuple.",
                    "Convert the tuple into a list to be able to change it:",
                    "Since tuples are immutable, they do not have a built-inappend()method, but \nthere are other ways to add items to a tuple.",
                    "1.Convert into a list: Just like the workaround forchanginga tuple, you can convert it into a list, add your item(s), and convert it back into a tuple.",
                    "Convert the tuple into a list, add \"orange\", and convert it back into a tuple:",
                    "2.Add tuple to a tuple. You are allowed to add tuples to \ntuples, so if you want to add one item, (or many), create a new tuple with the \nitem(s), and add it to the existing tuple:",
                    "Create a new tuple with the value \"orange\", and add that tuple:",
                    "Note:When creating a tuple with only one item, remember to include a comma \n  after the item, otherwise it will not be identified as a tuple.",
                    "Note:You cannot remove items in a tuple.",
                    "Tuples areunchangeable, so you cannot remove items \nfrom it, but you can use the same workaround as we used for changing and adding tuple items:",
                    "Convert the tuple into a list, remove \"apple\", and convert it back into a tuple:",
                    "Or you can delete the tuple completely:",
                    "Thedelkeyword can delete the tuple \ncompletely:"
                ],
                "lists": [],
                "examples": [
                    "x = (\"apple\", \"banana\", \"cherry\")y = list(x)y[1] = \"kiwi\"x = \n  tuple(y)print(x)",
                    "thistuple = (\"apple\", \"banana\", \"cherry\")y = list(thistuple)y.append(\"orange\")thistuple = \n  tuple(y)",
                    "thistuple = (\"apple\", \"banana\", \"cherry\")y = (\"orange\",)thistuple += yprint(thistuple)",
                    "thistuple = (\"apple\", \"banana\", \"cherry\")y = list(thistuple)y.remove(\"apple\")thistuple = \n  tuple(y)",
                    "thistuple = (\"apple\", \"banana\", \"cherry\")del\nthistupleprint(thistuple)\n  #this will raise an error because the tuple no longer exists"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_tuples_unpack.asp",
        "cours": {
            "titre": "Python -Unpack Tuples",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_tuples_unpack.asp",
            "contenus": {
                "paragraphs": [
                    "When we create a tuple, we normally assign values to it. This is called \"packing\" a tuple:",
                    "Packing a tuple:",
                    "But, in Python, we are also allowed to extract the values back into variables. This is called \"unpacking\":",
                    "Unpacking a tuple:",
                    "Note:The number of variables must match the number of values in the tuple, \n  if not, you must use an asterisk to collect the remaining values as a list.",
                    "If the number of variables is less than the number of values, you can add an*to the variable name and the\nvalues will be assigned to the variable as a list:",
                    "Assign the rest of the values as a list called \"red\":",
                    "If the asterisk is added to another variable name than the last,\nPython will assign values to the variable until the number of values left matches the number of variables left.",
                    "Add a list of values the \"tropic\" variable:"
                ],
                "lists": [],
                "examples": [
                    "fruits = (\"apple\", \"banana\", \"cherry\")",
                    "fruits = (\"apple\", \"banana\", \"cherry\")(green, yellow, red) = fruitsprint(green)print(yellow)print(red)",
                    "fruits = (\"apple\", \"banana\", \"cherry\", \"strawberry\", \"raspberry\")(green, yellow, *red) = fruitsprint(green)print(yellow)print(red)",
                    "fruits = (\"apple\", \"mango\", \"papaya\", \"pineapple\", \"cherry\")(green, *tropic, red) = fruitsprint(green)print(tropic)print(red)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_tuples_loop.asp",
        "cours": {
            "titre": "Python -Loop Tuples",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_tuples_loop.asp",
            "contenus": {
                "paragraphs": [
                    "You can loop through the tuple items by using aforloop.",
                    "Iterate through the items and print the values:",
                    "Learn more aboutforloops in ourPython For LoopsChapter.",
                    "You can also loop through the tuple items by referring to their index number.",
                    "Use therange()andlen()functions to create a suitable iterable.",
                    "Print all items by referring to their index number:",
                    "You can loop through the tuple items by using awhileloop.",
                    "Use thelen()function to determine the length of the tuple,\nthen start at 0 and loop your way through the tuple items by referring to their indexes.",
                    "Remember to increase the index by 1 after each iteration.",
                    "Print all items, using awhileloop to go through all the index numbers:",
                    "Learn more aboutwhileloops in ourPython While LoopsChapter."
                ],
                "lists": [],
                "examples": [
                    "thistuple = (\"apple\", \"banana\", \"cherry\")for x in thistuple:print(x)",
                    "thistuple = (\"apple\", \"banana\", \"cherry\")for i in range(len(thistuple)):print(thistuple[i])",
                    "thistuple = (\"apple\", \"banana\", \"cherry\")i = 0while i < len(thistuple):print(thistuple[i])i = i + 1"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_tuples_join.asp",
        "cours": {
            "titre": "Python -Join Tuples",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_tuples_join.asp",
            "contenus": {
                "paragraphs": [
                    "To join two or more tuples you can use the+operator:",
                    "Join two tuples:",
                    "If you want to multiply the content of a tuple a given number of times, you can use the*operator:",
                    "Multiply the fruits tuple by 2:"
                ],
                "lists": [],
                "examples": [
                    "tuple1 = (\"a\", \"b\" , \"c\")tuple2 = (1, 2, 3)tuple3 = tuple1 + tuple2print(tuple3)",
                    "fruits = (\"apple\", \"banana\", \"cherry\")mytuple = fruits * 2print(mytuple)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_tuples_methods.asp",
        "cours": {
            "titre": "Python -Tuple Methods",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_tuples_methods.asp",
            "contenus": {
                "paragraphs": [
                    "Python has two built-in methods that you can use on tuples."
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_tuples_exercises.asp",
        "cours": {
            "titre": "Python -Tuple Exercises",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_tuples_exercises.asp",
            "contenus": {
                "paragraphs": [
                    "Now you have learned a lot about tuples, and how to use them in Python.",
                    "Are you ready for a test?",
                    "Test your Python Tuple skills with exercises from all categories:",
                    "More Python Exercises:",
                    "Python Exercises"
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_sets.asp",
        "cours": {
            "titre": "PythonSets",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_sets.asp",
            "contenus": {
                "paragraphs": [
                    "Sets are used to store multiple items in a single variable.",
                    "Set is one of 4 built-in data types in Python used to store collections of \ndata, the other 3 areList,Tuple, andDictionary, all with different qualities and usage.",
                    "A set is a collection which isunordered,unchangeable*, andunindexed.",
                    "* Note:Setitemsare unchangeable, but you can remove \n  items and add new items.",
                    "Sets are written with curly brackets.",
                    "Create a Set:",
                    "Note:Sets are unordered, so you cannot be sure in which \n  order the items will appear.",
                    "Set items are unordered, unchangeable, and do not allow duplicate values.",
                    "Unordered means that the items in a set do not have a defined order.",
                    "Set items can appear in a different order every time you use them, \nand cannot be referred to by index or key.",
                    "Set items are unchangeable, meaning that we cannot change the items after the set has been created.",
                    "Once a set is created, you cannot change its items, but you can remove items \nand add new items.",
                    "Sets cannot have two items with the same value.",
                    "Duplicate values will be ignored:",
                    "Note:The valuesTrueand1are considered the same value in sets, \n  and are treated as duplicates:",
                    "Trueand1is considered the same value:",
                    "Note:The valuesFalseand0are considered the same value in sets, \n  and are treated as duplicates:",
                    "Falseand0is considered the same value:",
                    "To determine how many items a set has, use thelen()function.",
                    "Get the number of items in a set:",
                    "Set items can be of any data type:",
                    "String, int and boolean data types:",
                    "A set can contain different data types:",
                    "A set with strings, integers and boolean values:",
                    "From Python's perspective, sets are defined as objects with the data type 'set':",
                    "What is the data type of a set?",
                    "It is also possible to use theset()constructor to make a set.",
                    "Using the set() constructor to make a set:",
                    "There are four collection data types in the Python programming language:",
                    "*Setitemsare unchangeable, but you can remove items and add new \n  items.",
                    "**As of Python version 3.7, dictionaries areordered. \n  In Python 3.6 and earlier, dictionaries areunordered.",
                    "When choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security."
                ],
                "lists": [
                    [
                        "Listis a collection which is ordered and changeable. Allows duplicate members.",
                        "Tupleis a collection which is ordered and unchangeable. Allows duplicate members.",
                        "Setis a collection which is unordered, unchangeable*, and unindexed. No duplicate members.",
                        "Dictionaryis a collection which is ordered** \nand changeable. No duplicate members."
                    ]
                ],
                "examples": [
                    "thisset = {\"apple\", \"banana\", \"cherry\"}print(thisset)",
                    "thisset = {\"apple\", \"banana\", \"cherry\", \"apple\"}print(thisset)",
                    "thisset = {\"apple\", \"banana\", \"cherry\", True, 1, 2}print(thisset)",
                    "thisset = {\"apple\", \"banana\", \"cherry\", False, True, 0}print(thisset)",
                    "thisset = {\"apple\", \"banana\", \"cherry\"}print(len(thisset))",
                    "set1 = {\"apple\", \"banana\", \"cherry\"}set2 = {1, 5, 7, 9, 3}set3 = {True, False, False}",
                    "set1 = {\"abc\", 34, True, 40, \"male\"}",
                    "myset = {\"apple\", \"banana\", \"cherry\"}print(type(myset))",
                    "thisset = set((\"apple\", \"banana\", \"cherry\")) # note the double round-bracketsprint(thisset)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_sets_access.asp",
        "cours": {
            "titre": "Python -Access Set Items",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_sets_access.asp",
            "contenus": {
                "paragraphs": [
                    "You cannot access items in a set by referring to an index or a key.",
                    "But you can loop through the set items using aforloop, or ask if a specified value is present in a set, by using theinkeyword.",
                    "Loop through the set, and print the values:",
                    "Check if \"banana\" is present in the set:",
                    "Check if \"banana\" is NOT present in the set:",
                    "Once a set is created, you cannot change its items, but you can add new items."
                ],
                "lists": [],
                "examples": [
                    "thisset = {\"apple\", \"banana\", \"cherry\"}for x in thisset:print(x)",
                    "thisset = {\"apple\", \"banana\", \"cherry\"}print(\"banana\" \n  in thisset)",
                    "thisset = {\"apple\", \"banana\", \"cherry\"}print(\"banana\" \n  not in thisset)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_sets_add.asp",
        "cours": {
            "titre": "Python -Add Set Items",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_sets_add.asp",
            "contenus": {
                "paragraphs": [
                    "Once a set is created, you cannot change its items, but you can add new items.",
                    "To add one item to a set use theadd()method.",
                    "Add an item to a set, using theadd()method:",
                    "To add items from another set into the current set, use theupdate()method.",
                    "Add elements fromtropicalintothisset:",
                    "The object in theupdate()method does not have \nto be a set, it can be any iterable object (tuples, lists, dictionaries etc.).",
                    "Add elements of a list to at set:"
                ],
                "lists": [],
                "examples": [
                    "thisset = {\"apple\", \"banana\", \"cherry\"}thisset.add(\"orange\")print(thisset)",
                    "thisset = {\"apple\", \"banana\", \"cherry\"}tropical = {\"pineapple\", \"mango\", \"papaya\"}thisset.update(tropical)print(thisset)",
                    "thisset = {\"apple\", \"banana\", \"cherry\"}mylist = [\"kiwi\", \"orange\"]thisset.update(mylist)print(thisset)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_sets_remove.asp",
        "cours": {
            "titre": "Python -Remove Set Items",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_sets_remove.asp",
            "contenus": {
                "paragraphs": [
                    "To remove an item in a set, use theremove(), or thediscard()method.",
                    "Remove \"banana\" by using theremove()method:",
                    "Note:If the item to remove does not exist,remove()will raise an error.",
                    "Remove \"banana\" by using thediscard()method:",
                    "Note:If the item to remove does not exist,discard()willNOTraise an error.",
                    "You can also use thepop()method to remove \nan item, but this method will remove a random item, so you cannot be sure what item that gets removed.",
                    "The return value of thepop()method is the \nremoved item.",
                    "Remove a random item by using thepop()method:",
                    "Note:Sets areunordered, so when using thepop()method, \nyou do not know which item that gets removed.",
                    "Theclear()method empties the set:",
                    "Thedelkeyword will delete the set \ncompletely:"
                ],
                "lists": [],
                "examples": [
                    "thisset = {\"apple\", \"banana\", \"cherry\"}thisset.remove(\"banana\")print(thisset)",
                    "thisset = {\"apple\", \"banana\", \"cherry\"}thisset.discard(\"banana\")print(thisset)",
                    "thisset = {\"apple\", \"banana\", \"cherry\"}x =\n  thisset.pop()print(x)print(thisset)",
                    "thisset = {\"apple\", \"banana\", \"cherry\"}thisset.clear()print(thisset)",
                    "thisset = {\"apple\", \"banana\", \"cherry\"}del\n  thissetprint(thisset)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_sets_loop.asp",
        "cours": {
            "titre": "Python -Loop Sets",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_sets_loop.asp",
            "contenus": {
                "paragraphs": [
                    "You can loop through the set items by using aforloop:",
                    "Loop through the set, and print the values:"
                ],
                "lists": [],
                "examples": [
                    "thisset = {\"apple\", \"banana\", \"cherry\"}for x in thisset:print(x)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_sets_join.asp",
        "cours": {
            "titre": "Python -Join Sets",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_sets_join.asp",
            "contenus": {
                "paragraphs": [
                    "There are several ways to join two or more sets in Python.",
                    "Theunion()andupdate()methods joins all items from both sets.",
                    "Theintersection()method keeps ONLY the duplicates.",
                    "Thedifference()method keeps the items \nfrom the first set that are not in the other set(s).",
                    "Thesymmetric_difference()method keeps all \nitems EXCEPT the duplicates.",
                    "Theunion()method returns a new set with all items from both sets.",
                    "Join set1 and set2 into a new set:",
                    "You can use the|operator instead of theunion()method, and you will get the same result.",
                    "Use|to join two sets:",
                    "All the joining methods and operators can be used to join multiple sets.",
                    "When using a method, just add more sets in the parentheses, separated by commas:",
                    "Join multiple sets with theunion()method:",
                    "When using the|operator, separate the sets \nwith more|operators:",
                    "Use|to join two sets:",
                    "Theunion()method allows you to join a set with other data types, like lists or tuples.",
                    "The result will be a set.",
                    "Join a set with a tuple:",
                    "Note:The|operator only allows you to join sets with sets, and not with other data types like you \ncan with theunion()method.",
                    "Theupdate()method inserts all items from one set into another.",
                    "Theupdate()changes the original set, and does not return a new set.",
                    "Theupdate()method inserts the items in set2 into set1:",
                    "Note:Bothunion()andupdate()will exclude any duplicate items.",
                    "Keep ONLY the duplicates",
                    "Theintersection()method will return a new set, that only contains the items that are present in both sets.",
                    "Join set1 and set2, but keep only the duplicates:",
                    "You can use the&operator instead of theintersection()method, and you will get the same result.",
                    "Use&to join two sets:",
                    "Note:The&operator only allows you to join sets with sets, and not with other data types like you \ncan with theintersection()method.",
                    "Theintersection_update()method will also keep ONLY the duplicates,\nbut it will change the original set instead of returning a new set.",
                    "Keep the items that exist in bothset1, andset2:",
                    "The valuesTrueand1are considered the same value. The same goes forFalseand0.",
                    "Join sets that contains the valuesTrue,False,1, and0, and see what is considered as duplicates:",
                    "Thedifference()method will\nreturn a new set that will contain only the items from the first set that are not present in the other set.",
                    "Keep all items from set1 that are not in set2:",
                    "You can use the-operator instead of thedifference()method, and you will get the same result.",
                    "Use-to join two sets:",
                    "Note:The-operator only allows you to join sets with sets, and not with other data types like you \ncan with thedifference()method.",
                    "Thedifference_update()method will also keep \nthe items from the first set that are not in the other set,\nbut it will change the original set instead of returning a new set.",
                    "Use thedifference_update()method to keep the items that are not present in both sets:",
                    "Thesymmetric_difference()method will keep only the elements that are NOT present in both sets.",
                    "Keep the items that are not present in both sets:",
                    "You can use the^operator instead of thesymmetric_difference()method, and you will get the same result.",
                    "Use^to join two sets:",
                    "Note:The^operator only allows you to join sets with sets, and not with other data types like you \ncan with thesymmetric_difference()method.",
                    "Thesymmetric_difference_update()method will also keep all \nbut the duplicates,\nbut it will change the original set instead of returning a new set.",
                    "Use thesymmetric_difference_update()method to keep the items that are not present in both sets:"
                ],
                "lists": [],
                "examples": [
                    "set1 = {\"a\", \"b\", \"c\"}set2 = {1, 2, 3}set3 = set1.union(set2)print(set3)",
                    "set1 = {\"a\", \"b\", \"c\"}set2 = {1, 2, 3}set3 = set1 | set2print(set3)",
                    "set1 = {\"a\", \"b\", \"c\"}set2 = {1, 2, 3}set3 = {\"John\", \"Elena\"}set4 = {\"apple\", \n  \"bananas\", \"cherry\"}myset = set1.union(set2, set3, set4)print(myset)",
                    "set1 = {\"a\", \"b\", \"c\"}set2 = {1, 2, 3}set3 = {\"John\", \"Elena\"}set4 = {\"apple\", \n  \"bananas\", \"cherry\"}myset = set1 | set2 | set3 |set4print(myset)",
                    "x = {\"a\", \"b\", \"c\"}y = (1, 2, 3)z = x.union(y)print(z)",
                    "set1 = {\"a\", \"b\" , \"c\"}set2 = {1, 2, 3}set1.update(set2)print(set1)",
                    "set1 = {\"apple\", \"banana\", \"cherry\"}set2 = {\"google\", \"microsoft\", \"apple\"}set3 = set1.intersection(set2)print(set3)",
                    "set1 = {\"apple\", \"banana\", \"cherry\"}set2 = {\"google\", \"microsoft\", \"apple\"}set3 = set1 \n  & set2print(set3)",
                    "set1 = {\"apple\", \"banana\", \"cherry\"}set2 = {\"google\", \"microsoft\", \"apple\"}set1.intersection_update(set2)print(set1)",
                    "set1 = {\"apple\", 1,  \"banana\", 0, \"cherry\"}set2 = {False, \"google\", \n  1, \"apple\", 2, True}set3 = set1.intersection(set2)print(set3)",
                    "set1 = {\"apple\", \"banana\", \"cherry\"}set2 = {\"google\", \"microsoft\", \"apple\"}set3 = set1.difference(set2)print(set3)",
                    "set1 = {\"apple\", \"banana\", \"cherry\"}set2 = {\"google\", \"microsoft\", \"apple\"}set3 = set1 - set2print(set3)",
                    "set1 = {\"apple\", \"banana\", \"cherry\"}set2 = {\"google\", \"microsoft\", \"apple\"}set1.difference_update(set2)print(set1)",
                    "set1 = {\"apple\", \"banana\", \"cherry\"}set2 = {\"google\", \"microsoft\", \"apple\"}set3 = set1.symmetric_difference(set2)print(set3)",
                    "set1 = {\"apple\", \"banana\", \"cherry\"}set2 = {\"google\", \"microsoft\", \"apple\"}set3 = set1 ^ set2print(set3)",
                    "set1 = {\"apple\", \"banana\", \"cherry\"}set2 = {\"google\", \"microsoft\", \"apple\"}set1.symmetric_difference_update(set2)print(set1)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_sets_methods.asp",
        "cours": {
            "titre": "Python -Set Methods",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_sets_methods.asp",
            "contenus": {
                "paragraphs": [
                    "Python has a set of built-in methods that you can use on sets."
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_sets_exercises.asp",
        "cours": {
            "titre": "Python -Set Exercises",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_sets_exercises.asp",
            "contenus": {
                "paragraphs": [
                    "Now you have learned a lot about sets, and how to use them in Python.",
                    "Are you ready for a test?",
                    "Test your Python Set skills with exercises from all categories:",
                    "More Python Exercises:",
                    "Python Exercises"
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_dictionaries.asp",
        "cours": {
            "titre": "PythonDictionaries",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_dictionaries.asp",
            "contenus": {
                "paragraphs": [
                    "Dictionaries are used to store data values in key:value pairs.",
                    "A dictionary is a collection which is ordered*, changeable and do not \nallow duplicates.",
                    "As of Python version 3.7, dictionaries areordered. \n  In Python 3.6 and earlier, dictionaries areunordered.",
                    "Dictionaries are written with curly brackets, and have keys and values:",
                    "Create and print a dictionary:",
                    "Dictionary items are ordered, changeable, and do not allow duplicates.",
                    "Dictionary items are presented in key:value pairs, and can be referred to by \nusing the key name.",
                    "Print the \"brand\" value of the dictionary:",
                    "As of Python version 3.7, dictionaries areordered. \n  In Python 3.6 and earlier, dictionaries areunordered.",
                    "When we say that dictionaries are ordered, it means that the items have a defined order, and that order will not change.",
                    "Unordered means that the items do not \nhave a defined order, you cannot refer to an item by using an index.",
                    "Dictionaries are changeable, meaning that we can change, add or remove items after the \ndictionary has been created.",
                    "Dictionaries cannot have two items with the same key:",
                    "Duplicate values will overwrite existing values:",
                    "To determine how many items a dictionary has, use thelen()function:",
                    "Print the number of items in the dictionary:",
                    "The values in dictionary items can be of any data type:",
                    "String, int, boolean, and list data types:",
                    "From Python's perspective, dictionaries are defined as objects with the data type 'dict':",
                    "Print the data type of a dictionary:",
                    "It is also possible to use thedict()constructor to make a dictionary.",
                    "Using the dict() method to make a dictionary:",
                    "There are four collection data types in the Python programming language:",
                    "*Setitemsare unchangeable, but you can remove and/or add items \n  whenever you like.",
                    "**As of Python version 3.7, dictionaries areordered. \n  In Python 3.6 and earlier, dictionaries areunordered.",
                    "When choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security."
                ],
                "lists": [
                    [
                        "Listis a collection which is ordered and changeable. Allows duplicate members.",
                        "Tupleis a collection which is ordered and unchangeable. Allows duplicate members.",
                        "Setis a collection which is unordered, \nunchangeable*, and unindexed. No duplicate members.",
                        "Dictionaryis a collection which is ordered** and changeable. No duplicate members."
                    ]
                ],
                "examples": [
                    "thisdict =\t{\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}print(thisdict)",
                    "thisdict =\t{\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}print(thisdict[\"brand\"])",
                    "thisdict =\t{\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964,\"year\": 2020}print(thisdict)",
                    "print(len(thisdict))",
                    "thisdict =\t{\"brand\": \"Ford\",\"electric\": False,\"year\": 1964,\"colors\": [\"red\", \"white\", \"blue\"]}",
                    "thisdict =\t{\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}print(type(thisdict))",
                    "thisdict = \n  dict(name = \"John\", age = 36, country = \"Norway\")print(thisdict)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_dictionaries_access.asp",
        "cours": {
            "titre": "Python -Access Dictionary Items",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_dictionaries_access.asp",
            "contenus": {
                "paragraphs": [
                    "You can access the items of a dictionary by referring to its key name, inside \nsquare brackets:",
                    "Get the value of the \"model\" key:",
                    "There is also a method calledget()that will give you the same result:",
                    "Get the value of the \"model\" key:",
                    "Thekeys()method will return a list of all the keys in the dictionary.",
                    "Get a list of the keys:",
                    "The list of the keys is aviewof the dictionary, meaning that any \nchanges done to the dictionary will be reflected in the keys list.",
                    "Add a new item to the original dictionary, and see that the keys list gets \nupdated as well:",
                    "Thevalues()method will return a list of all the values in the dictionary.",
                    "Get a list of the values:",
                    "The list of the values is aviewof the dictionary, meaning that any \nchanges done to the dictionary will be reflected in the values list.",
                    "Make a change in the original dictionary, and see that the values list gets \nupdated as well:",
                    "Add a new item to the original dictionary, and see that the values list gets \nupdated as well:",
                    "Theitems()method will return each item in a dictionary, as tuples in a list.",
                    "Get a list of the key:value pairs",
                    "The returned list is aviewof the items of the dictionary, meaning that any \nchanges done to the dictionary will be reflected in the items list.",
                    "Make a change in the original dictionary, and see that the items list gets \nupdated as well:",
                    "Add a new item to the original dictionary, and see that the items list gets \nupdated as well:",
                    "To determine if a specified key is present in a dictionary use theinkeyword:",
                    "Check if \"model\" is present in the dictionary:"
                ],
                "lists": [],
                "examples": [
                    "thisdict =\t{\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}x = thisdict[\"model\"]",
                    "x = thisdict.get(\"model\")",
                    "x = thisdict.keys()",
                    "car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}x = car.keys()print(x) #before the changecar[\"color\"] = \n  \"white\"print(x) #after the change",
                    "x = thisdict.values()",
                    "car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}x = car.values()print(x) #before the changecar[\"year\"] \n  = 2020print(x) #after the change",
                    "car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}x = car.values()print(x) #before the changecar[\"color\"] \n  = \"red\"print(x) #after the change",
                    "x = thisdict.items()",
                    "car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}x = car.items()print(x) #before the changecar[\"year\"] \n  = 2020print(x) #after the change",
                    "car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}x = car.items()print(x) #before the changecar[\"color\"] \n  = \"red\"print(x) #after the change",
                    "thisdict =\t{\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}if \"model\" in thisdict:print(\"Yes, 'model' is \n  one of the keys in the thisdict dictionary\")"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_dictionaries_change.asp",
        "cours": {
            "titre": "Python -Change Dictionary Items",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_dictionaries_change.asp",
            "contenus": {
                "paragraphs": [
                    "You can change the value of a specific item by referring to its key name:",
                    "Change the \"year\" to 2018:",
                    "Theupdate()method will update the dictionary with the items from the given \nargument.",
                    "The argument must be a dictionary, or an iterable object with key:value pairs.",
                    "Update the \"year\" of the car by using theupdate()method:"
                ],
                "lists": [],
                "examples": [
                    "thisdict =\t{\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}thisdict[\"year\"] = 2018",
                    "thisdict =\t{\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}thisdict.update({\"year\": 2020})"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_dictionaries_add.asp",
        "cours": {
            "titre": "Python -Add Dictionary Items",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_dictionaries_add.asp",
            "contenus": {
                "paragraphs": [
                    "Adding an item to the dictionary is done by using a new index key and assigning a value to it:",
                    "Theupdate()method will update the dictionary with the items from \na given \nargument. If the item does not exist, the item will be added.",
                    "The argument must be a dictionary, or an iterable object with key:value pairs.",
                    "Add a color item to the dictionary by using theupdate()method:"
                ],
                "lists": [],
                "examples": [
                    "thisdict =\t{\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}thisdict[\"color\"] = \"red\"print(thisdict)",
                    "thisdict =\t{\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}thisdict.update({\"color\": \n  \"red\"})"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_dictionaries_remove.asp",
        "cours": {
            "titre": "Python -Remove Dictionary Items",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_dictionaries_remove.asp",
            "contenus": {
                "paragraphs": [
                    "There are several methods to remove items from a dictionary:",
                    "Thepop()method removes the item with the specified key name:",
                    "Thepopitem()method removes the last \n  inserted item (in versions before 3.7, a random item is removed instead):",
                    "Thedelkeyword removes the item with the specified \n  key name:",
                    "Thedelkeyword can also delete the \n  dictionary completely:",
                    "Theclear()method empties the \n  dictionary:"
                ],
                "lists": [],
                "examples": [
                    "thisdict =\t{\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}thisdict.pop(\"model\")print(thisdict)",
                    "thisdict =\t{\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}thisdict.popitem()print(thisdict)",
                    "thisdict =\t{\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}del thisdict[\"model\"]print(thisdict)",
                    "thisdict =\t{\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}del thisdictprint(thisdict) #this will cause an error because \"thisdict\" \n  no longer exists.",
                    "thisdict =\t{\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}thisdict.clear()print(thisdict)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_dictionaries_loop.asp",
        "cours": {
            "titre": "Python -Loop Dictionaries",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_dictionaries_loop.asp",
            "contenus": {
                "paragraphs": [
                    "You can loop through a dictionary by using aforloop.",
                    "When looping through a dictionary, the return value are thekeysof \nthe dictionary, but there are methods to return thevaluesas well.",
                    "Print all key names in the dictionary, one by one:",
                    "Print allvaluesin the dictionary, one by one:",
                    "You can also use thevalues()method to \nreturn values of a dictionary:",
                    "You can use thekeys()method to \nreturn the keys of a dictionary:",
                    "Loop through bothkeysandvalues, by using theitems()method:"
                ],
                "lists": [],
                "examples": [
                    "for x in thisdict:print(x)",
                    "for x in thisdict:print(thisdict[x])",
                    "for x in thisdict.values():print(x)",
                    "for x in thisdict.keys():print(x)",
                    "for x, y in thisdict.items():print(x, y)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_dictionaries_copy.asp",
        "cours": {
            "titre": "Python -Copy Dictionaries",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_dictionaries_copy.asp",
            "contenus": {
                "paragraphs": [
                    "You cannot copy a dictionary simply by typingdict2 = \ndict1, because:dict2will only be areferencetodict1, and changes made indict1will automatically also be made indict2.",
                    "There are ways to make a copy, one way is to use the built-in Dictionary \nmethodcopy().",
                    "Make a copy of a dictionary with thecopy()method:",
                    "Another way to make a copy is to use the built-in functiondict().",
                    "Make a copy of a dictionary with thedict()function:"
                ],
                "lists": [],
                "examples": [
                    "thisdict =\t{\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}mydict \n  = thisdict.copy()print(mydict)",
                    "thisdict =\t{\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}mydict \n  = dict(thisdict)print(mydict)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_dictionaries_nested.asp",
        "cours": {
            "titre": "Python -Nested Dictionaries",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_dictionaries_nested.asp",
            "contenus": {
                "paragraphs": [
                    "A dictionary can contain dictionaries, this is called nested \ndictionaries.",
                    "Create a dictionary that contain three dictionaries:",
                    "Or, if you want to add three dictionaries into a new \ndictionary:",
                    "Create three dictionaries, then create one dictionary that will contain the \nother three dictionaries:",
                    "To access items from a nested dictionary, you use the name of the dictionaries, starting with the \nouter dictionary:",
                    "Print the name of child 2:",
                    "You can loop through a dictionary by using theitems()method like this:",
                    "Loop through the keys and values of all nested dictionaries:"
                ],
                "lists": [],
                "examples": [
                    "myfamily = {\"child1\" : {\"name\" : \"Emil\",\"year\" : 2004},\"child2\" : {\"name\" : \"Tobias\",\"year\" : 2007},\"child3\" : {\"name\" : \"Linus\",\"year\" : 2011}}",
                    "child1 = {\"name\" : \"Emil\",\"year\" : 2004}child2 = {\"name\" : \"Tobias\",\"year\" : 2007}child3 = {\"name\" : \"Linus\",\"year\" : 2011}myfamily = {\"child1\" : child1,\"child2\" : child2,\"child3\" : child3}",
                    "print(myfamily[\"child2\"][\"name\"])",
                    "for x, obj in myfamily.items():print(x)for y in obj:print(y + ':', obj[y])"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_dictionaries_methods.asp",
        "cours": {
            "titre": "PythonDictionary Methods",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_dictionaries_methods.asp",
            "contenus": {
                "paragraphs": [
                    "Python has a set of built-in methods that you can use on dictionaries."
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_dictionaries_exercises.asp",
        "cours": {
            "titre": "PythonDictionary Exercises",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_dictionaries_exercises.asp",
            "contenus": {
                "paragraphs": [
                    "Now you have learned a lot about dictionaries, and how to use them in Python.",
                    "Are you ready for a test?",
                    "Test your Python Dictionary skills with exercises from all categories:",
                    "More Python Exercises:",
                    "Python Exercises"
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_conditions.asp",
        "cours": {
            "titre": "PythonIf ... Else",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_conditions.asp",
            "contenus": {
                "paragraphs": [
                    "Python supports the usual logical conditions from mathematics:",
                    "These conditions can be used in several ways, most commonly in \"if statements\" and loops.",
                    "An \"if statement\" is written by using theifkeyword.",
                    "If statement:",
                    "In this example we use two variables,aandb,\nwhich are used as part of the if statement to test whetherbis greater thana.\nAsais33, andbis200,\nwe know that 200 is greater than 33, and so we print to screen that \"b is greater than a\".",
                    "Python relies on indentation (whitespace at the beginning of a line) to define scope in the code. Other programming languages often use curly-brackets for this purpose.ExampleIf statement, without indentation (will raise an error):a = 33b = 200if b > a:print(\"b is greater than a\")\n# you will get an errorTry it Yourself »ElifTheelifkeyword is Python's way of saying \"if the previous conditions were not true, then \ntry this condition\".Examplea = 33b = 33if b > a:print(\"b is greater than a\")elif a == b:print(\"a and b are equal\")Try it Yourself »In this exampleais equal tob, so the first condition is not true, but theelifcondition is true, so we print to screen that \"a and b are equal\".ElseTheelsekeyword catches anything which isn't caught by the preceding conditions.Examplea = 200b = 33if b > a:print(\"b is greater than a\")elif a == b:print(\"a and b are equal\")else:print(\"a is greater than b\")Try it Yourself »In this exampleais greater thanb,\nso the first condition is not true, also theelifcondition is not true,\nso we go to theelsecondition and print to screen that \"a is greater than b\".You can also have anelsewithout theelif:Examplea = 200b = 33if b > a:print(\"b is greater than a\")else:print(\"b is not greater than a\")Try it Yourself »Short Hand IfIf you have only one statement to execute, you can put it on the same line as the if statement.ExampleOne line if statement:if a > b: print(\"a is greater than b\")Try it Yourself »Short Hand If ... ElseIf you have only one statement to execute, one for if, and one for else, you can put it \nall on the same line:ExampleOne line if else statement:a = 2b = 330print(\"A\") if a > b else print(\"B\")Try it Yourself »This technique is known asTernary Operators, orConditional \n  Expressions.You can also have multiple else statements on the same line:ExampleOne line if else statement, with 3 conditions:a = 330b = 330print(\"A\") if a > b else print(\"=\") if a == b else print(\"B\")Try it Yourself »AndTheandkeyword is a logical operator, and \nis used to combine conditional statements:ExampleTest ifais greater thanb, AND ifcis greater thana:a = 200b = 33c = 500if a > b and c > a:print(\"Both conditions are True\")Try it Yourself »OrTheorkeyword is a logical operator, and \nis used to combine conditional statements:ExampleTest ifais greater thanb, OR ifais greater thanc:a = 200b = 33c = 500if a > b or a > c:print(\"At least one of the conditions is True\")Try it Yourself »NotThenotkeyword is a logical operator, and \nis used to reverse the result of the conditional statement:ExampleTest ifais NOT greater thanb:a = 33b = 200if not a > b:print(\"a is NOT greater than b\")Try it Yourself »Nested IfYou can haveifstatements insideifstatements, this is callednestedifstatements.Examplex = 41if x > 10:print(\"Above ten,\")if x > 20:print(\"and \n  also above 20!\")else:print(\"but not \n  above 20.\")Try it Yourself »The pass Statementifstatements cannot be empty, but if you \nfor some reason have anifstatement with no content, put in thepassstatement to avoid getting an error.Examplea = 33b = 200if b > a:passTry it Yourself »❮ PreviousNext ❯★+1Track your progress - it's free!Log inSign Up",
                    "If statement, without indentation (will raise an error):",
                    "Theelifkeyword is Python's way of saying \"if the previous conditions were not true, then \ntry this condition\".",
                    "In this exampleais equal tob, so the first condition is not true, but theelifcondition is true, so we print to screen that \"a and b are equal\".",
                    "Theelsekeyword catches anything which isn't caught by the preceding conditions.",
                    "In this exampleais greater thanb,\nso the first condition is not true, also theelifcondition is not true,\nso we go to theelsecondition and print to screen that \"a is greater than b\".",
                    "You can also have anelsewithout theelif:",
                    "If you have only one statement to execute, you can put it on the same line as the if statement.",
                    "One line if statement:",
                    "If you have only one statement to execute, one for if, and one for else, you can put it \nall on the same line:",
                    "One line if else statement:",
                    "This technique is known asTernary Operators, orConditional \n  Expressions.",
                    "You can also have multiple else statements on the same line:",
                    "One line if else statement, with 3 conditions:",
                    "Theandkeyword is a logical operator, and \nis used to combine conditional statements:",
                    "Test ifais greater thanb, AND ifcis greater thana:",
                    "Theorkeyword is a logical operator, and \nis used to combine conditional statements:",
                    "Test ifais greater thanb, OR ifais greater thanc:",
                    "Thenotkeyword is a logical operator, and \nis used to reverse the result of the conditional statement:",
                    "Test ifais NOT greater thanb:",
                    "You can haveifstatements insideifstatements, this is callednestedifstatements.",
                    "ifstatements cannot be empty, but if you \nfor some reason have anifstatement with no content, put in thepassstatement to avoid getting an error."
                ],
                "lists": [
                    [
                        "Equals:a == b",
                        "Not Equals:a != b",
                        "Less than:a < b",
                        "Less than or equal to:a <= b",
                        "Greater than:a > b",
                        "Greater than or equal to:a >= b"
                    ]
                ],
                "examples": [
                    "a = 33b = 200if b > a:print(\"b is greater than a\")",
                    "a = 33b = 200if b > a:print(\"b is greater than a\")\n# you will get an error",
                    "a = 33b = 33if b > a:print(\"b is greater than a\")elif a == b:print(\"a and b are equal\")",
                    "a = 200b = 33if b > a:print(\"b is greater than a\")elif a == b:print(\"a and b are equal\")else:print(\"a is greater than b\")",
                    "a = 200b = 33if b > a:print(\"b is greater than a\")else:print(\"b is not greater than a\")",
                    "if a > b: print(\"a is greater than b\")",
                    "a = 2b = 330print(\"A\") if a > b else print(\"B\")",
                    "a = 330b = 330print(\"A\") if a > b else print(\"=\") if a == b else print(\"B\")",
                    "a = 200b = 33c = 500if a > b and c > a:print(\"Both conditions are True\")",
                    "a = 200b = 33c = 500if a > b or a > c:print(\"At least one of the conditions is True\")",
                    "a = 33b = 200if not a > b:print(\"a is NOT greater than b\")",
                    "x = 41if x > 10:print(\"Above ten,\")if x > 20:print(\"and \n  also above 20!\")else:print(\"but not \n  above 20.\")",
                    "a = 33b = 200if b > a:pass"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_while_loops.asp",
        "cours": {
            "titre": "PythonWhile Loops",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_while_loops.asp",
            "contenus": {
                "paragraphs": [
                    "Python has two primitive loop commands:",
                    "With thewhileloop we can execute a set of statements as long as a condition is true.",
                    "Print i as long as i is less than 6:",
                    "Note:remember to increment i, or else the loop will continue forever.",
                    "Thewhileloop requires relevant variables to be ready, in this example we need to define an indexing variable,i, \nwhich we set to 1.",
                    "With thebreakstatement we can stop the loop even if the \nwhile condition is true:",
                    "Exit the loop when i is 3:",
                    "With thecontinuestatement we can stop the \ncurrent iteration, and continue with the next:",
                    "Continue to the next iteration if i is 3:",
                    "With theelsestatement we can run a block of code once when the \ncondition no longer is true:",
                    "Print a message once the condition is false:"
                ],
                "lists": [
                    [
                        "whileloops",
                        "forloops"
                    ]
                ],
                "examples": [
                    "i = 1while i < 6:print(i)i += 1",
                    "i = 1while i < 6:print(i)if i == 3:breaki += 1",
                    "i = 0while i < 6:i += 1if i == 3:continueprint(i)",
                    "i = 1while i < 6:print(i)i += 1else:print(\"i is no longer less than 6\")"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_for_loops.asp",
        "cours": {
            "titre": "PythonFor Loops",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_for_loops.asp",
            "contenus": {
                "paragraphs": [
                    "Aforloop is used for iterating over a sequence (that is either a list, a tuple, \na dictionary, a set, or a string).",
                    "This is less like theforkeyword in other programming languages, and works more like an iterator method as found in other object-orientated programming languages.",
                    "With theforloop we can execute a set of statements, once for each item in a list, tuple, set etc.",
                    "Print each fruit in a fruit list:",
                    "Theforloop does not require an indexing variable to set beforehand.",
                    "Even strings are iterable objects, they contain a sequence of characters:",
                    "Loop through the letters in the word \"banana\":",
                    "With thebreakstatement we can stop the \nloop before it has looped through all the items:",
                    "Exit the loop whenxis \"banana\":",
                    "Exit the loop whenxis \"banana\", \nbut this time the break comes before the print:",
                    "With thecontinuestatement we can stop the \ncurrent iteration of the loop, and continue with the next:",
                    "Do not print banana:",
                    "Therange()function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and ends at a specified number.",
                    "Using the range() function:",
                    "Note thatrange(6)is not the values of 0 to 6, but the values 0 to 5.",
                    "Therange()function defaults to 0 as a starting value, however it is possible to specify the starting value by adding a parameter:range(2, 6), which \nmeans values from 2 to 6 (but not including 6):",
                    "Using the start parameter:",
                    "Therange()function defaults to increment the sequence by 1,\nhowever it is possible to specify the increment value by adding a third parameter:range(2, 30,3):",
                    "Increment the sequence with 3 (default is 1):",
                    "Theelsekeyword in aforloop specifies a block of code to be \nexecuted when the loop is finished:",
                    "Print all numbers from 0 to 5, and print a message when the loop has ended:",
                    "Note:Theelseblock will NOT be executed if the loop is stopped by abreakstatement.",
                    "Break the loop whenxis 3, and see what happens with theelseblock:",
                    "A nested loop is a loop inside a loop.",
                    "The \"inner loop\" will be executed one time for each iteration of the \"outer \nloop\":",
                    "Print each adjective for every fruit:",
                    "forloops cannot be empty, but if you for \nsome reason have aforloop with no content, put in thepassstatement to avoid getting an error."
                ],
                "lists": [],
                "examples": [
                    "fruits = [\"apple\", \"banana\", \"cherry\"]for \n  x in fruits:print(x)",
                    "for x in \"banana\":print(x)",
                    "fruits = [\"apple\", \"banana\", \"cherry\"]for x in fruits:print(x)if x == \n  \"banana\":break",
                    "fruits = [\"apple\", \"banana\", \"cherry\"]for x in fruits:if x == \n  \"banana\":breakprint(x)",
                    "fruits = [\"apple\", \"banana\", \"cherry\"]for x in fruits:if x == \n  \"banana\":continueprint(x)",
                    "for x in range(6):print(x)",
                    "for x in range(2, 6):print(x)",
                    "for x in range(2, 30, 3):print(x)",
                    "for x in range(6):print(x)else:print(\"Finally finished!\")",
                    "for x in range(6):if x == 3: breakprint(x)else:print(\"Finally finished!\")",
                    "adj = [\"red\", \"big\", \"tasty\"]fruits = [\"apple\", \"banana\", \"cherry\"]for x in adj:for y in fruits:print(x, y)",
                    "for x in [0, 1, 2]:pass"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_functions.asp",
        "cours": {
            "titre": "PythonFunctions",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_functions.asp",
            "contenus": {
                "paragraphs": [
                    "A function is a block of code which only runs when it is called.",
                    "You can pass data, known as parameters, into a function.",
                    "A function can return data as a result.",
                    "In Python a function is defined using thedefkeyword:",
                    "To call a function, use the function name followed by parenthesis:",
                    "Information can be passed into functions as arguments.",
                    "Arguments are specified after the function name, inside the parentheses.\nYou can add as many arguments as you want, just separate them with a comma.",
                    "The following example has a function with one argument (fname).\nWhen the function is called, we pass along a first name,\nwhich is used inside the function to print the full name:",
                    "Argumentsare often shortened toargsin Python documentations.",
                    "The termsparameterandargumentcan be used for the same thing: information that are passed into a function.",
                    "From a function's perspective:",
                    "A parameter is the variable listed inside the parentheses in the function definition.",
                    "An argument is the value that is sent to the function when it is called.",
                    "By default, a function must be called with the correct number of arguments. \nMeaning that if your function expects 2 arguments, you have to call the function \nwith 2 arguments, not more, and not less.",
                    "This function expects 2 arguments, and gets 2 arguments:",
                    "This function expects 2 arguments, but gets only 1:",
                    "If you do not know how many arguments that will be passed into your function,\nadd a*before the parameter name in the function definition.",
                    "This way the function will receive atupleof arguments, and can access the items accordingly:",
                    "If the number of arguments is unknown, add a*before the parameter name:",
                    "Arbitrary Argumentsare often shortened to*argsin Python documentations.",
                    "You can also send arguments with thekey=valuesyntax.",
                    "This way the order of the arguments does not matter.",
                    "The phraseKeyword Argumentsare often shortened tokwargsin Python documentations.",
                    "If you do not know how many keyword arguments that will be passed into your function,\nadd two asterisk:**before the parameter name in the function definition.",
                    "This way the function will receive adictionaryof arguments, and can access the items accordingly:",
                    "If the number of keyword arguments is unknown, add a double**before the parameter name:",
                    "Arbitrary Kword Argumentsare often shortened to**kwargsin Python documentations.",
                    "The following example shows how to use a default parameter value.",
                    "If we call the function without argument, it uses the default value:",
                    "You can send any data types of argument to a function (string, number, list, dictionary etc.), \nand it will\nbe treated as the same data type inside the function.",
                    "E.g. if you send a List as an argument, it will still be a List when it \nreaches the function:",
                    "To let a function return a value, use thereturnstatement:",
                    "functiondefinitions cannot be empty, but if \nyou for some reason have afunctiondefinition with no content, put in thepassstatement to avoid getting an error.",
                    "You can specify that a function can have ONLY positional arguments, or ONLY keyword arguments.",
                    "To specify that a function can have only positional arguments, add, /after the arguments:",
                    "Without the, /you are actually allowed to use keyword arguments even if the function\nexpects positional arguments:",
                    "But when adding the, /you will get an error if you try to send a \nkeyword argument:",
                    "To specify that a function can have only keyword arguments, add*,beforethe arguments:",
                    "Without the*,you are allowed to use positionale arguments even if the function\nexpects keyword arguments:",
                    "But with the*,you will get an error if you try to send a \npositional argument:",
                    "You can combine the two argument types in the same function.",
                    "Any argumentbeforethe/ ,are positional-only,\nand any argumentafterthe*,are keyword-only.",
                    "Python also accepts function recursion, which means a defined function can call itself.",
                    "Recursion is a common mathematical and programming concept. It means that a function calls itself. This has the benefit of meaning that you can loop through data to reach a result.",
                    "The developer should be very careful with recursion as it can be quite easy to slip into writing a function which never terminates, or one that uses excess amounts of memory or processor power. However, when written correctly recursion can be a very efficient and mathematically-elegant approach to programming.",
                    "In this example,tri_recursion()is a function that we have defined to call itself (\"recurse\"). We use thekvariable as the data, which decrements (-1) every time we recurse. The recursion ends when the condition is not greater than 0 (i.e. when it is 0).",
                    "To a new developer it can take some time to work out how exactly this works, best way to find out is by testing and modifying it.",
                    "Recursion Example"
                ],
                "lists": [],
                "examples": [
                    "def my_function():print(\"Hello from a function\")",
                    "def my_function():print(\"Hello from a function\")my_function()",
                    "def my_function(fname):print(fname + \" Refsnes\")my_function(\"Emil\")my_function(\"Tobias\")my_function(\"Linus\")",
                    "def my_function(fname, lname):print(fname + \" \" + lname)my_function(\"Emil\", \"Refsnes\")",
                    "def my_function(fname, lname):print(fname + \" \" + lname)my_function(\"Emil\")",
                    "def my_function(*kids):print(\"The youngest child \n  is \" + kids[2])my_function(\"Emil\", \"Tobias\", \"Linus\")",
                    "def my_function(child3, child2, child1):print(\"The youngest child \n  is \" + child3)my_function(child1 = \"Emil\", child2 = \"Tobias\", child3 = \"Linus\")",
                    "def my_function(**kid):print(\"His last name is \" + kid[\"lname\"])my_function(fname = \"Tobias\", lname = \"Refsnes\")",
                    "def my_function(country = \"Norway\"):print(\"I am from \" + \n  country)my_function(\"Sweden\")my_function(\"India\")my_function()my_function(\"Brazil\")",
                    "def my_function(food):for x in food:print(x)fruits = [\"apple\", \"banana\", \"cherry\"]my_function(fruits)",
                    "def my_function(x):return 5 * xprint(my_function(3))print(my_function(5))print(my_function(9))",
                    "def myfunction():pass",
                    "def my_function(x, /):print(x)my_function(3)",
                    "def my_function(x):print(x)my_function(x = 3)",
                    "def my_function(x, /):print(x)my_function(x = 3)",
                    "def my_function(*, x):print(x)my_function(x = 3)",
                    "def my_function(x):print(x)my_function(3)",
                    "def my_function(*, x):print(x)my_function(3)",
                    "def my_function(a, b, /, *, c, d):print(a + b + c + d)my_function(5, 6, c = 7, d = 8)",
                    "def tri_recursion(k):if(k > 0):result = k + tri_recursion(k - 1)print(result)else:result = 0return resultprint(\"Recursion Example Results:\")tri_recursion(6)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_lambda.asp",
        "cours": {
            "titre": "PythonLambda",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_lambda.asp",
            "contenus": {
                "paragraphs": [
                    "A lambda function is a small anonymous function.",
                    "A lambda function can take any number of arguments, but can only have one expression.",
                    "The expression is executed and the result is returned:",
                    "Add 10 to argumenta, and \n  return the result:",
                    "Lambda functions can take any number of arguments:",
                    "Multiply argumentawith argumentband return the \n  result:",
                    "Summarize argumenta,b, andcand \n  return the \n  result:",
                    "The power of lambda is better shown when you use them as an anonymous \nfunction inside another function.",
                    "Say you have a function definition that takes one argument, and that argument \nwill be multiplied with an unknown number:",
                    "Use that function definition to make a function that always doubles the \nnumber you send in:",
                    "Or, use the same function definition to make a function that alwaystriplesthe \nnumber you send in:",
                    "Or, use the same function definition to make both functions, in the same \nprogram:",
                    "Use lambda functions when an anonymous function is required for a short period of time."
                ],
                "lists": [],
                "examples": [
                    "lambdaarguments:expression",
                    "x = lambda a : a + 10print(x(5))",
                    "x = lambda a, b : a * bprint(x(5, 6))",
                    "x = lambda a, b, c : a + b + cprint(x(5, 6, \n  2))",
                    "def myfunc(n):return lambda a : a * n",
                    "def myfunc(n):return lambda a : a * nmydoubler = myfunc(2)print(mydoubler(11))",
                    "def myfunc(n):return lambda a : a * nmytripler = myfunc(3)print(mytripler(11))",
                    "def myfunc(n):return lambda a : a * nmydoubler = myfunc(2)mytripler = myfunc(3)print(mydoubler(11))print(mytripler(11))"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_arrays.asp",
        "cours": {
            "titre": "PythonArrays",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_arrays.asp",
            "contenus": {
                "paragraphs": [
                    "Note:Python does not have built-in support for Arrays, \n  butPython Listscan be used instead.",
                    "Note:This page shows you how to use LISTS as ARRAYS, however, to work with arrays in Python you will have to import\n  a library, like theNumPy library.",
                    "Arrays are used to store multiple values in one single variable:",
                    "Create an array containing car names:",
                    "An array is a special variable, which can hold more than one value at a time.",
                    "If you have a list of items (a list of car names, for example), storing the \ncars in single variables could look like this:",
                    "However, what if you want to loop through the cars and find a specific one? \nAnd what if you had not 3 cars, but 300?",
                    "The solution is an array!",
                    "An array can hold many values under a single name, and you can \naccess the values by referring to an index number.",
                    "You refer to an array element by referring to theindex number.",
                    "Get the value of the first array item:",
                    "Modify the value of the first array item:",
                    "Use thelen()method to return the length of \nan array (the number of elements in an array).",
                    "Return the number of elements in thecarsarray:",
                    "Note:The length of an array is always one more than the highest array index.",
                    "You can use thefor inloop to loop through all the elements of an array.",
                    "Print each item in thecarsarray:",
                    "You can use theappend()method to add an element to an array.",
                    "Add one more element to thecarsarray:",
                    "You can use thepop()method to remove an element from the array.",
                    "Delete the second element of thecarsarray:",
                    "You can also use theremove()method to remove an element from the array.",
                    "Delete the element that has the value \"Volvo\":",
                    "Note:The list'sremove()method \n  only removes the first occurrence of the specified value.",
                    "Python has a set of built-in methods that you can use on lists/arrays.",
                    "Note:Python does not have built-in support for Arrays, \n  but Python Lists can be used instead."
                ],
                "lists": [],
                "examples": [
                    "cars = [\"Ford\", \"Volvo\", \"BMW\"]",
                    "car1 = \"Ford\"car2 = \"Volvo\"car3 = \"BMW\"",
                    "x = cars[0]",
                    "cars[0] = \"Toyota\"",
                    "x = len(cars)",
                    "for x in cars:print(x)",
                    "cars.append(\"Honda\")",
                    "cars.pop(1)",
                    "cars.remove(\"Volvo\")"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_classes.asp",
        "cours": {
            "titre": "PythonClasses and Objects",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_classes.asp",
            "contenus": {
                "paragraphs": [
                    "Python is an object oriented programming language.",
                    "Almost everything in Python is an object, with its properties and methods.",
                    "A Class is like an object constructor, or a \"blueprint\" for creating objects.",
                    "To create a class, use the keywordclass:",
                    "Create a class named MyClass, with a property named x:",
                    "Now we can use the class named MyClass to create objects:",
                    "Create an object named p1, and print the value of x:",
                    "The examples above are classes and objects in their simplest form, and are \nnot really useful in real life applications.",
                    "To understand the meaning of classes we have to understand the built-in__init__()function.",
                    "All classes have a function called__init__(), which is always executed when \nthe class is being initiated.",
                    "Use the__init__()function to assign values to object properties, or other \noperations that are necessary to do when the object \nis being created:",
                    "Create a class named Person, use the__init__()function to assign values \nfor name and age:",
                    "Note:The__init__()function is called automatically every time the class is being used to create a new object.",
                    "The__str__()function controls what should be returned when the class object \nis represented as a string.",
                    "If the__str__()function is not set, the string representation of the object \nis returned:",
                    "The string representation of an object WITHOUT the__str__()function:",
                    "The string representation of an object WITH the__str__()function:",
                    "Objects can also contain methods. Methods in objects are functions that \nbelong to the object.",
                    "Let us create a method in the Person class:",
                    "Insert a function that prints a greeting, and execute it on the p1 object:",
                    "Note:Theselfparameter \n  is a reference to the current instance of the class, and is used to access variables that belong to the class.",
                    "Theselfparameter is a reference to the \ncurrent instance of the class, and is used to access variables that belong to the class.",
                    "It does not have to be namedself, you can \ncall it whatever you like, but it has to be the first parameter of any function \nin the class:",
                    "Use the wordsmysillyobjectandabcinstead ofself:",
                    "You can modify properties on objects like this:",
                    "Set the age of p1 to 40:",
                    "You can delete properties on objects by using thedelkeyword:",
                    "Delete the age property from the p1 object:",
                    "You can delete objects by using thedelkeyword:",
                    "Delete the p1 object:",
                    "classdefinitions cannot be empty, but if \nyou for some reason have aclassdefinition with no content, put in thepassstatement to avoid getting an error."
                ],
                "lists": [],
                "examples": [
                    "class MyClass:x = 5",
                    "p1 = MyClass()print(p1.x)",
                    "class Person:def __init__(self, name, age):self.name = nameself.age = agep1 = Person(\"John\", \n  36)print(p1.name)print(p1.age)",
                    "class Person:def __init__(self, name, age):self.name = nameself.age = agep1 = Person(\"John\", \n  36)print(p1)",
                    "class Person:def __init__(self, name, age):self.name = nameself.age = agedef __str__(self):return f\"{self.name}({self.age})\"p1 = Person(\"John\", \n  36)print(p1)",
                    "class Person:def __init__(self, name, age):self.name = nameself.age = agedef myfunc(self):print(\"Hello my name is \" + self.name)p1 = Person(\"John\", \n  36)p1.myfunc()",
                    "class Person:def __init__(mysillyobject, name, age):mysillyobject.name = namemysillyobject.age = agedef myfunc(abc):print(\"Hello my name is \" + abc.name)p1 = Person(\"John\", \n  36)p1.myfunc()",
                    "p1.age = 40",
                    "del p1.age",
                    "del p1",
                    "class Person:pass"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_inheritance.asp",
        "cours": {
            "titre": "PythonInheritance",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_inheritance.asp",
            "contenus": {
                "paragraphs": [
                    "Inheritance allows us to define a class that inherits all the methods and properties from another class.",
                    "Parent classis the class being inherited from, also called \nbase class.",
                    "Child classis the class that inherits from another class, \nalso called derived class.",
                    "Any class can be a parent class, so the syntax is the same as creating any \nother class:",
                    "Create a class namedPerson, withfirstnameandlastnameproperties, \nand aprintnamemethod:",
                    "To create a class that inherits the functionality from another class, send the parent class as a parameter when creating the child \nclass:",
                    "Create a class namedStudent, which will inherit the properties \nand methods from \nthePersonclass:",
                    "Note:Use thepasskeyword when you do not want to add any other properties or methods to the \n  class.",
                    "Now the Student class has the same properties and methods as the Person \nclass.",
                    "Use theStudentclass to create an object, \nand then execute theprintnamemethod:",
                    "So far we have created a child class that inherits the properties and methods \nfrom its parent.",
                    "We want to add the__init__()function to the child class (instead of thepasskeyword).",
                    "Note:The__init__()function is called automatically every time the class is being used to create a new object.",
                    "Add the__init__()function to theStudentclass:",
                    "When you add the__init__()function, the child class will no longer inherit \nthe parent's__init__()function.",
                    "Note:The child's__init__()functionoverridesthe inheritance of the parent's__init__()function.",
                    "To keep the inheritance of the parent's__init__()function, add a call to the \nparent's__init__()function:",
                    "Now we have successfully added the__init__()function, and kept the \ninheritance of the parent class, and we are ready to add functionality in the__init__()function.",
                    "Python also has asuper()function that \nwill make the child class inherit all the methods and properties from its \nparent:",
                    "By using thesuper()function, you do not \nhave to use the name of the parent element, it will automatically inherit the \nmethods and properties from its parent.",
                    "Add a property calledgraduationyearto theStudentclass:",
                    "In the example below, the year2019should be a variable, and passed into theStudentclass when creating student objects.\nTo do so, add another parameter in the__init__()function:",
                    "Add ayearparameter, and pass the correct \nyear when creating objects:",
                    "Add a method calledwelcometo theStudentclass:",
                    "If you add a method in the child class with the same name as a function in \nthe parent class, the inheritance of the parent method will be overridden."
                ],
                "lists": [],
                "examples": [
                    "class Person:def __init__(self, fname, lname):self.firstname = fnameself.lastname = lnamedef printname(self):print(self.firstname, \n  self.lastname)#Use the Person class to create an object, and then \n  execute the printname method:x = Person(\"John\", \"Doe\")x.printname()",
                    "class Student(Person):pass",
                    "x = Student(\"Mike\", \"Olsen\")x.printname()",
                    "class Student(Person):def __init__(self, fname, lname):#add properties etc.",
                    "class Student(Person):def __init__(self, fname, lname):Person.__init__(self, fname, lname)",
                    "class Student(Person):def __init__(self, fname, lname):super().__init__(fname, lname)",
                    "class Student(Person):def __init__(self, fname, lname):super().__init__(fname, lname)self.graduationyear \n  = 2019",
                    "class Student(Person):def __init__(self, fname, lname, year):super().__init__(fname, lname)self.graduationyear \n  = yearx = Student(\"Mike\", \"Olsen\", 2019)",
                    "class Student(Person):def __init__(self, fname, lname, year):super().__init__(fname, lname)self.graduationyear \n  = yeardef welcome(self):print(\"Welcome\", \n  self.firstname, self.lastname, \"to the class of\", self.graduationyear)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_iterators.asp",
        "cours": {
            "titre": "PythonIterators",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_iterators.asp",
            "contenus": {
                "paragraphs": [
                    "An iterator is an object that contains a countable number of values.",
                    "An iterator is an object that can be iterated upon, meaning that you can \ntraverse through all the values.",
                    "Technically, in Python, an iterator is an object which implements the \niterator protocol, which consist of the methods__iter__()and__next__().",
                    "Lists, tuples, dictionaries, and sets are all iterable objects. They are iterablecontainerswhich you can get an iterator from.",
                    "All these objects have aiter()method which is used to get an iterator:",
                    "Return an iterator from a tuple, and print each value:",
                    "Even strings are iterable objects, and can return an iterator:",
                    "Strings are also iterable objects, containing a sequence of characters:",
                    "We can also use aforloop to iterate through an iterable object:",
                    "Iterate the values of a tuple:",
                    "Iterate the characters of a string:",
                    "Theforloop actually creates an iterator object and executes thenext()method for each loop.",
                    "To create an object/class as an iterator you have to implement the methods__iter__()and__next__()to your object.",
                    "As you have learned in thePython \nClasses/Objectschapter, all classes have a function called__init__(), which allows you to do some \ninitializing when the object is being created.",
                    "The__iter__()method acts similar, you can \ndo operations (initializing etc.), but must always return the iterator object \nitself.",
                    "The__next__()method also allows you to do \noperations, and must return the next item in the sequence.",
                    "Create an iterator that returns numbers, starting with 1, and each sequence \nwill increase by one (returning 1,2,3,4,5 etc.):",
                    "The example above would continue forever if you had enough next() statements, or if it was used in aforloop.",
                    "To prevent the iteration from going on forever, we can use theStopIterationstatement.",
                    "In the__next__()method, we can add a terminating condition to raise an error if the iteration is done a specified number of times:",
                    "Stop after 20 iterations:"
                ],
                "lists": [],
                "examples": [
                    "mytuple = (\"apple\", \"banana\", \"cherry\")myit = iter(mytuple)print(next(myit))print(next(myit))print(next(myit))",
                    "mystr = \"banana\"myit = iter(mystr)print(next(myit))print(next(myit))print(next(myit))print(next(myit))print(next(myit))print(next(myit))",
                    "mytuple = (\"apple\", \"banana\", \"cherry\")for x in mytuple:print(x)",
                    "mystr = \"banana\"for x in mystr:print(x)",
                    "class MyNumbers:def __iter__(self):self.a = \n  1return selfdef __next__(self):x = self.aself.a += 1return xmyclass = MyNumbers()myiter =\n   iter(myclass)print(next(myiter))print(next(myiter))print(next(myiter))print(next(myiter))print(next(myiter))",
                    "class MyNumbers:def __iter__(self):self.a = \n  1return selfdef __next__(self):if self.a <= 20:x = self.aself.a += 1return xelse:raise StopIterationmyclass = \n  MyNumbers()myiter =\n   iter(myclass)for x in myiter:print(x)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_polymorphism.asp",
        "cours": {
            "titre": "PythonPolymorphism",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_polymorphism.asp",
            "contenus": {
                "paragraphs": [
                    "The word \"polymorphism\" means \"many forms\", and in programming it refers to\nmethods/functions/operators with the same name that can be executed on many \nobjects or classes.",
                    "An example of a Python function that can be used on different objects is thelen()function.",
                    "For stringslen()returns the number of characters:",
                    "For tupleslen()returns the number of items \nin the tuple:",
                    "For dictionarieslen()returns the number of key/value pairs \nin the dictionary:",
                    "Polymorphism is often used in Class methods, where we can have multiple \nclasses with the same method name.",
                    "For example, say we have three classes:Car,Boat, andPlane, and they all have \na method calledmove():",
                    "Different classes with the same method:",
                    "Look at the for loop at the end.\nBecause of polymorphism we can execute the same method for all three classes.",
                    "What about classes with child classes with the same name? Can we use polymorphism there?",
                    "Yes. If we use the example above and make a parent class calledVehicle, and makeCar,Boat,Planechild classes ofVehicle, the child classes \ninherits theVehiclemethods, but can override \nthem:",
                    "Create a class calledVehicleand makeCar,Boat,Planechild classes ofVehicle:",
                    "Child classes inherits the properties and methods from the parent class.",
                    "In the example above you can see that theCarclass is empty, but \nit inheritsbrand,model, andmove()fromVehicle.",
                    "TheBoatandPlaneclasses also \ninheritbrand,model, \nandmove()fromVehicle, but they both override themove()method.",
                    "Because of polymorphism we can execute the same method for all classes."
                ],
                "lists": [],
                "examples": [
                    "x = \"Hello World!\"print(len(x))",
                    "mytuple = (\"apple\", \"banana\", \"cherry\")print(len(mytuple))",
                    "thisdict =\t{\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}print(len(thisdict))",
                    "class Car:def __init__(self, brand, model):self.brand = brandself.model = modeldef move(self):print(\"Drive!\")class Boat:def __init__(self, brand, model):self.brand = brandself.model = modeldef move(self):print(\"Sail!\")class Plane:def __init__(self, brand, model):self.brand = brandself.model = modeldef move(self):print(\"Fly!\")car1 = Car(\"Ford\", \"Mustang\")        #Create a Car objectboat1 = Boat(\"Ibiza\", \"Touring 20\") #Create a Boat objectplane1 = Plane(\"Boeing\", \"747\")     #Create a Plane objectfor x in (car1, boat1, plane1):x.move()",
                    "class Vehicle:def __init__(self, brand, model):self.brand = brandself.model = modeldef move(self):print(\"Move!\")class \n    Car(Vehicle):passclass Boat(Vehicle):def \n    move(self):print(\"Sail!\")class \n    Plane(Vehicle):def move(self):print(\"Fly!\")car1 = Car(\"Ford\", \"Mustang\")       #Create a Car objectboat1 = Boat(\"Ibiza\", \"Touring 20\") #Create a Boat objectplane1 = \n    Plane(\"Boeing\", \"747\")     #Create a Plane objectfor x in (car1, boat1, \n    plane1):print(x.brand)print(x.model)x.move()"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_scope.asp",
        "cours": {
            "titre": "PythonScope",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_scope.asp",
            "contenus": {
                "paragraphs": [
                    "A variable is only available from inside the region it is \ncreated. This is calledscope.",
                    "A variable created inside a function belongs to thelocal scopeof \nthat function, and can only be used inside that function.",
                    "A variable created inside a function is available inside that function:",
                    "As explained in the example above, the variablexis not available outside the function, \nbut it is available for any function inside the function:",
                    "The local variable can be accessed from a function within the function:",
                    "A variable created in the main body of the Python code is a global variable \nand belongs to the global scope.",
                    "Global variables are available from within any scope, global and local.",
                    "A variable created outside of a function is global and can be used by \n  anyone:",
                    "If you operate with the same variable name inside and outside of a function, Python will treat them as two \nseparate variables,\none available in the global scope (outside the function) and one available in the local scope (inside the function):",
                    "The function will print the localx, and \n  then the code will print the globalx:",
                    "If you need to create a global variable, but are stuck in the local scope, you can use theglobalkeyword.",
                    "Theglobalkeyword makes the variable global.",
                    "If you use theglobalkeyword, the variable belongs to the global scope:",
                    "Also, use theglobalkeyword if you want to \nmake a change to a global variable inside a function.",
                    "To change the value of a global variable inside a function, refer to the \n  variable by using theglobalkeyword:",
                    "Thenonlocalkeyword is used to work with variables inside nested functions.",
                    "Thenonlocalkeyword makes the variable belong to the outer function.",
                    "If you use thenonlocalkeyword, the variable will belong to the outer function:"
                ],
                "lists": [],
                "examples": [
                    "def myfunc():x = 300print(x)myfunc()",
                    "def myfunc():x = 300def myinnerfunc():print(x)myinnerfunc()myfunc()",
                    "x = 300def myfunc():print(x)myfunc()print(x)",
                    "x = 300def myfunc():x = 200print(x)myfunc()print(x)",
                    "def myfunc():global xx = 300myfunc()print(x)",
                    "x = 300def myfunc():global xx = 200myfunc()print(x)",
                    "def myfunc1():x = \"Jane\"def myfunc2():nonlocal xx = \"hello\"myfunc2()return xprint(myfunc1())"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_modules.asp",
        "cours": {
            "titre": "PythonModules",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_modules.asp",
            "contenus": {
                "paragraphs": [
                    "Consider a module to be the same as a code library.",
                    "A file containing a set of functions you want to include in your application.",
                    "To create a module just save the code you want in a file with the file extension.py:",
                    "Save this code in a file namedmymodule.py",
                    "Now we can use the module we just created, by using theimportstatement:",
                    "Import the module named mymodule, and call the greeting function:",
                    "Note:When using a function from a module, use the syntax:module_name.function_name.",
                    "The module can contain functions, as already described, but also variables of \nall types (arrays, dictionaries, objects etc):",
                    "Save this code in the filemymodule.py",
                    "Import the module named mymodule, and access the person1 dictionary:",
                    "You can name the module file whatever you like, but it must have the file extension.py",
                    "You can create an alias when you import a module, by using theaskeyword:",
                    "Create an alias formymodulecalledmx:",
                    "There are several built-in modules in Python, which you can import whenever you like.",
                    "Import and use theplatformmodule:",
                    "There is a built-in function to list all the function names (or variable \nnames) in a module. Thedir()function:",
                    "List all the defined names belonging to the platform module:",
                    "Note:The dir() function can be used onallmodules, also the ones you create yourself.",
                    "You can choose to import only parts from a module, by using thefromkeyword.",
                    "The module namedmymodulehas one function \nand one dictionary:",
                    "Import only the person1 dictionary from the module:",
                    "Note:When importing using thefromkeyword, do not use the module name when referring to elements in the module. \n  Example:person1[\"age\"],notmymodule.person1[\"age\"]"
                ],
                "lists": [],
                "examples": [
                    "def greeting(name):print(\"Hello, \" + name)",
                    "import mymodulemymodule.greeting(\"Jonathan\")",
                    "person1 = {\"name\": \"John\",\"age\": 36,\"country\": \"Norway\"}",
                    "import mymodulea = mymodule.person1[\"age\"]print(a)",
                    "import mymodule as mxa = mx.person1[\"age\"]print(a)",
                    "import platformx = platform.system()print(x)",
                    "import platformx = dir(platform)print(x)",
                    "def greeting(name):print(\"Hello, \" + name)person1 \n  = {\"name\": \"John\",\"age\": 36,\"country\": \n  \"Norway\"}",
                    "from mymodule import person1print (person1[\"age\"])"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_datetime.asp",
        "cours": {
            "titre": "PythonDatetime",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_datetime.asp",
            "contenus": {
                "paragraphs": [
                    "A date in Python is not a data type of its own, but we can import a module \nnameddatetimeto work with dates as date \nobjects.",
                    "Import the datetime module and display the current date:",
                    "When we execute the code from the example above the result will be:",
                    "The date contains year, month, day, hour, minute, second, and microsecond.",
                    "Thedatetimemodule has many methods to return information about the date \nobject.",
                    "Here are a few examples, you will learn more about them later in this \nchapter:",
                    "Return the year and name of weekday:",
                    "To create a date, we can use thedatetime()class (constructor) of thedatetimemodule.",
                    "Thedatetime()class requires three parameters to create a date: year, \nmonth, day.",
                    "Create a date object:",
                    "Thedatetime()class also takes parameters for time and timezone (hour, \nminute, second, microsecond, tzone), but they are optional, and has a default \nvalue of0, (Nonefor timezone).",
                    "Thedatetimeobject has a method for formatting date objects into readable strings.",
                    "The method is calledstrftime(), and takes one parameter,format, to specify the format of the returned string:",
                    "Display the name of the month:",
                    "A reference of all the legal format codes:"
                ],
                "lists": [],
                "examples": [
                    "import datetimex = datetime.datetime.now()print(x)",
                    "import datetimex = datetime.datetime.now()print(x.year)print(x.strftime(\"%A\"))",
                    "import datetimex = datetime.datetime(2020, 5, 17)print(x)",
                    "import datetimex = datetime.datetime(2018, 6, 1)print(x.strftime(\"%B\"))"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_math.asp",
        "cours": {
            "titre": "PythonMath",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_math.asp",
            "contenus": {
                "paragraphs": [
                    "Python has a set of built-in math functions, including an extensive math module, that allows you to perform mathematical tasks on numbers.",
                    "Themin()andmax()functions can be used to find the lowest or highest value in an iterable:",
                    "Theabs()function returns the absolute (positive) value of the specified number:",
                    "Thepow(x,y)function returns the value of x to the power of y (xy).",
                    "Return the value of 4 to the power of 3 (same as 4 * 4 * 4):",
                    "Python has also a built-in module calledmath, which extends the list of mathematical functions.",
                    "To use it, you must import themathmodule:",
                    "When you have imported themathmodule, you \ncan start using methods and constants of the module.",
                    "Themath.sqrt()method for example, returns the square root of a number:",
                    "Themath.ceil()method rounds a number upwards to \nits nearest integer, and themath.floor()method rounds a number downwards to its nearest integer, and returns the result:",
                    "Themath.piconstant, returns the value of \nPI (3.14...):",
                    "In ourMath Module Referenceyou will \nfind a complete reference of all methods and constants that belongs to the Math module."
                ],
                "lists": [],
                "examples": [
                    "x = min(5, 10, 25)y = max(5, 10, 25)print(x)print(y)",
                    "x = abs(-7.25)print(x)",
                    "x = pow(4, 3)print(x)",
                    "import math",
                    "import \n    mathx = math.sqrt(64)print(x)",
                    "import \n    mathx = math.ceil(1.4)y = math.floor(1.4)print(x) # \n    returns 2print(y) # returns 1",
                    "import \n    mathx = math.piprint(x)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_json.asp",
        "cours": {
            "titre": "PythonJSON",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_json.asp",
            "contenus": {
                "paragraphs": [
                    "JSON is a syntax for storing and exchanging data.",
                    "JSON is text, written with JavaScript object notation.",
                    "Python has a built-in package calledjson, which can be used to work with JSON data.",
                    "Import the json module:",
                    "If you have a JSON string, you can parse it by using thejson.loads()method.",
                    "The result will be aPython dictionary.",
                    "Convert from JSON to Python:",
                    "If you have a Python object, you can convert it into a JSON string by \nusing thejson.dumps()method.",
                    "Convert from Python to JSON:",
                    "You can convert Python objects of the following types, into JSON strings:",
                    "Convert Python objects into JSON strings, and print the values:",
                    "When you convert from Python to JSON, Python objects are converted into the JSON (JavaScript) equivalent:",
                    "Convert a Python object containing all the legal data types:",
                    "The example above prints a JSON string, but it is not very easy to read, with no indentations and line breaks.",
                    "Thejson.dumps()method has parameters to \nmake it easier to read the result:",
                    "Use theindentparameter to define the numbers \nof indents:",
                    "You can also define the separators, default value is (\", \", \": \"), which \nmeans using a comma and a space to separate each object, and a colon and a space \nto separate keys from values:",
                    "Use theseparatorsparameter to change the \ndefault separator:",
                    "Thejson.dumps()method has parameters to \norder the keys in the result:",
                    "Use thesort_keysparameter to specify if \nthe result should be sorted or not:"
                ],
                "lists": [
                    [
                        "dict",
                        "list",
                        "tuple",
                        "string",
                        "int",
                        "float",
                        "True",
                        "False",
                        "None"
                    ]
                ],
                "examples": [
                    "import json",
                    "import json# some JSON:x =  '{ \"name\":\"John\", \"age\":30, \"city\":\"New \n  York\"}'# parse x:y = json.loads(x)# the result is a \n  Python dictionary:print(y[\"age\"])",
                    "import json# a Python object (dict):x = {\"name\": \n  \"John\",\"age\": 30,\"city\": \"New York\"}# \n  convert into JSON:y = json.dumps(x)# the result is a JSON string:print(y)",
                    "import jsonprint(json.dumps({\"name\": \"John\", \"age\": 30}))print(json.dumps([\"apple\", \n  \"bananas\"]))print(json.dumps((\"apple\", \"bananas\")))print(json.dumps(\"hello\"))print(json.dumps(42))print(json.dumps(31.76))print(json.dumps(True))print(json.dumps(False))print(json.dumps(None))",
                    "import jsonx = {\"name\": \n  \"John\",\"age\": 30,\"married\": True,\"divorced\": False,\"children\": (\"Ann\",\"Billy\"),\"pets\": \n  None,\"cars\": [{\"model\": \"BMW 230\", \"mpg\": \n  27.5},{\"model\": \"Ford Edge\", \"mpg\": 24.1}]}print(json.dumps(x))",
                    "json.dumps(x, indent=4)",
                    "json.dumps(x, indent=4, separators=(\". \", \" = \"))",
                    "json.dumps(x, indent=4, sort_keys=True)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_regex.asp",
        "cours": {
            "titre": "PythonRegEx",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_regex.asp",
            "contenus": {
                "paragraphs": [
                    "A RegEx, or Regular Expression, is a sequence of characters that forms a search pattern.",
                    "RegEx can be used to check if a string contains the specified search pattern.",
                    "Python has a built-in package calledre, which can be used to work with \nRegular Expressions.",
                    "Import theremodule:",
                    "When you have imported theremodule, you \ncan start using regular expressions:",
                    "Search the string to see if it starts with \"The\" and ends with \"Spain\":",
                    "Theremodule offers a set of functions that allows \nus to search a string for a match:",
                    "Metacharacters are characters with a special meaning:",
                    "A special sequence is a\\followed by one of the characters in the list below, and has a special meaning:",
                    "A set is a set of characters inside a pair of square brackets[]with a special meaning:",
                    "Thefindall()function returns a list containing all matches.",
                    "Print a list of all matches:",
                    "The list contains the matches in the order they are found.",
                    "If no matches are found, an empty list is returned:",
                    "Return an empty list if no match was found:",
                    "Thesearch()function searches the string \nfor a match, and returns aMatch objectif there is a \nmatch.",
                    "If there is more than one match, \nonly the first occurrence of the match will be returned:",
                    "Search for the first white-space character in the string:",
                    "If no matches are found, the valueNoneis returned:",
                    "Make a search that returns no match:",
                    "Thesplit()function returns a list where \nthe string has been split at each match:",
                    "Split at each white-space character:",
                    "You can control the number of occurrences by specifying themaxsplitparameter:",
                    "Split the string only at the first occurrence:",
                    "Thesub()function replaces the matches with \nthe text of your choice:",
                    "Replace every white-space character with the number 9:",
                    "You can control the number of replacements by specifying thecountparameter:",
                    "Replace the first 2 occurrences:",
                    "A Match Object is an object containing information \nabout the search and the result.",
                    "Note:If there is no match, the valueNonewill be \nreturned, instead of the Match Object.",
                    "Do a search that will return a Match Object:",
                    "The Match object has properties and methods used to retrieve information \nabout the search, and the result:",
                    ".span()returns a tuple containing the start-, and end positions of the match..stringreturns the string passed into the function.group()returns the part of the string where there was a match",
                    "Print the position (start- and end-position) of the first match occurrence.",
                    "The regular expression looks for any words that starts with an upper case \n  \"S\":",
                    "Print the string passed into the function:",
                    "Print the part of the string where there was a match.",
                    "The regular expression looks for any words that starts with an upper case \n  \"S\":",
                    "Note:If there is no match, the valueNonewill be \nreturned, instead of the Match Object."
                ],
                "lists": [],
                "examples": [
                    "import re",
                    "import \n    retxt = \"The rain in Spain\"x = re.search(\"^The.*Spain$\", txt)",
                    "import retxt = \"The rain in Spain\"x = re.findall(\"ai\", \n  txt)print(x)",
                    "import retxt = \"The rain in Spain\"x = re.findall(\"Portugal\", \n  txt)print(x)",
                    "import retxt = \"The rain in Spain\"x = re.search(\"\\s\", \n  txt)print(\"The first white-space character is located in \n  position:\", x.start())",
                    "import retxt = \"The rain in Spain\"x = re.search(\"Portugal\", \n  txt)print(x)",
                    "import retxt = \"The rain in Spain\"x = re.split(\"\\s\", \n  txt)print(x)",
                    "import retxt = \"The rain in Spain\"x = re.split(\"\\s\", \n  txt, \n  1)print(x)",
                    "import retxt = \"The rain in Spain\"x = re.sub(\"\\s\", \n  \"9\", txt)print(x)",
                    "import retxt = \"The rain in Spain\"x = re.sub(\"\\s\", \n  \"9\", txt, 2)print(x)",
                    "import retxt = \"The rain in Spain\"x = re.search(\"ai\", \n  txt)print(x) #this will print an object",
                    "import retxt = \"The rain in Spain\"x = re.search(r\"\\bS\\w+\", txt)print(x.span())",
                    "import retxt = \"The rain in Spain\"x = re.search(r\"\\bS\\w+\", txt)print(x.string)",
                    "import retxt = \"The rain in Spain\"x = re.search(r\"\\bS\\w+\", txt)print(x.group())"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_pip.asp",
        "cours": {
            "titre": "PythonPIP",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_pip.asp",
            "contenus": {
                "paragraphs": [
                    "PIP is a package manager for Python packages, or modules if you like.",
                    "Note:If you have Python version 3.4 or later, PIP is included by default.",
                    "A package contains all the files you need for a module.",
                    "Modules are Python code libraries you can include in your project.",
                    "Navigate your command line to the location of Python's script directory, and type the following:",
                    "Check PIP version:",
                    "If you do not have PIP installed, you can download and install it from this page:https://pypi.org/project/pip/",
                    "Downloading a package is very easy.",
                    "Open the command line interface and tell PIP to download the package you \nwant.",
                    "Navigate your command line to the location of Python's script directory, and type the following:",
                    "Download a package named \"camelcase\":",
                    "Now you have downloaded and installed your first package!",
                    "Once the package is installed, it is ready to use.",
                    "Import the \"camelcase\" package into your project.",
                    "Import and use \"camelcase\":",
                    "Find more packages athttps://pypi.org/.",
                    "Use theuninstallcommand to remove a package:",
                    "Uninstall the package named \"camelcase\":",
                    "The PIP Package Manager will ask you to confirm that you want to remove the \ncamelcase package:",
                    "Pressyand the package will be removed.",
                    "Use thelistcommand to list all the packages installed on your system:",
                    "List installed packages:",
                    "Result:"
                ],
                "lists": [],
                "examples": [
                    "C:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>pip --version",
                    "C:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>pip \n  install camelcase",
                    "import camelcasec = camelcase.CamelCase()txt = \"hello world\"print(c.hump(txt))",
                    "C:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>pip \n  uninstall camelcase",
                    "Uninstalling camelcase-02.1:Would remove:c:\\users\\Your Name\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\camelcase-0.2-py3.6.egg-infoc:\\users\\Your Name\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\camelcase\\*Proceed (y/n)?",
                    "C:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>pip list",
                    "Package         Version-----------------------camelcase       0.2mysql-connector 2.1.6pip             \n  18.1pymongo         3.6.1setuptools      39.0.1"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_try_except.asp",
        "cours": {
            "titre": "PythonTry Except",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_try_except.asp",
            "contenus": {
                "paragraphs": [
                    "Thetryblock lets you test a \nblock of code for errors.",
                    "Theexceptblock lets you \nhandle the error.",
                    "Theelseblock lets you \nexecute code when there is no error.",
                    "Thefinallyblock lets you \nexecute code, regardless of the result of the try- and except blocks.",
                    "When an error occurs, or exception as we call it, Python will normally stop and \ngenerate an error message.",
                    "These exceptions can be handled using thetrystatement:",
                    "Thetryblock will generate an exception, \n  becausexis not defined:",
                    "Since the try block raises an error, the except block will be executed.",
                    "Without the try block, the program will crash and raise an error:",
                    "This statement will raise an error, \n  becausexis not defined:",
                    "You can define as many exception blocks as you want, e.g. if you want to execute a \nspecial block of code for a special kind of error:",
                    "Print one message if the try block raises aNameErrorand another \n  for other errors:",
                    "You can use theelsekeyword to define a \nblock of code to be executed if no errors were raised:",
                    "In this example, thetryblock does not \n  generate any error:",
                    "Thefinallyblock, if specified, will be executed \nregardless if the try block \nraises an error or not.",
                    "This can be useful to close objects and clean up resources:",
                    "Try to open and write to a file that is not writable:",
                    "The program can continue, without leaving the file object open.",
                    "As a Python developer you can choose to throw an exception if a condition occurs.",
                    "To throw (or raise) an exception, use theraisekeyword.",
                    "Raise an error and stop the program if x is lower than 0:",
                    "Theraisekeyword is used to raise an \nexception.",
                    "You can define what kind of error to raise, and the text to print to the user.",
                    "Raise a TypeError if x is not an integer:"
                ],
                "lists": [],
                "examples": [
                    "try:print(x)except:print(\"An exception occurred\")",
                    "print(x)",
                    "try:print(x)except NameError:print(\"Variable x \n  is not defined\")except:print(\"Something else went \n  wrong\")",
                    "try:print(\"Hello\")except:print(\"Something went \n  wrong\")else:print(\"Nothing went wrong\")",
                    "try:print(x)except:print(\"Something went \n  wrong\")finally:print(\"The 'try except' is finished\")",
                    "try:f = open(\"demofile.txt\")try:f.write(\"Lorum Ipsum\")except:print(\"Something went wrong when writing to the file\")finally:f.close()except:print(\"Something went wrong when opening the \n  file\")",
                    "x = -1if x < 0:raise Exception(\"Sorry, no numbers below \n    zero\")",
                    "x = \"hello\"if not type(x) is int:raise TypeError(\"Only \n    integers are allowed\")"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_user_input.asp",
        "cours": {
            "titre": "PythonUser Input",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_user_input.asp",
            "contenus": {
                "paragraphs": [
                    "Python allows for user input.",
                    "That means we are able to ask the user for input.",
                    "The method is a bit different in Python 3.6 than Python 2.7.",
                    "Python 3.6 uses theinput()method.",
                    "Python 2.7 uses theraw_input()method.",
                    "The following example asks for the username, and when you entered the username, it gets printed on \nthe screen:",
                    "Python stops executing when it comes to theinput()function, and continues \nwhen the user has given some input."
                ],
                "lists": [],
                "examples": [
                    "username = input(\"Enter username:\")print(\"Username is: \" + username)",
                    "username = raw_input(\"Enter username:\")print(\"Username \n  is: \" + username)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_string_formatting.asp",
        "cours": {
            "titre": "PythonString Formatting",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_string_formatting.asp",
            "contenus": {
                "paragraphs": [
                    "F-String was introduced in Python 3.6,\nand is now the preferred way of formatting strings.",
                    "Before Python 3.6 we had to use theformat()method.",
                    "F-string allows you to format selected parts of a string.",
                    "To specify a string as an f-string, simply put anfin front of the string \nliteral, like this:",
                    "Create an f-string:",
                    "To format values in an f-string, add placeholders{}, \na placeholder can contain variables,\noperations, functions, and modifiers to format the value.",
                    "Add a placeholder for thepricevariable:",
                    "A placeholder can also include amodifierto format the value.",
                    "A modifier is included by adding a colon:followed by a legal formatting type, like.2fwhich means fixed point number with 2 decimals:",
                    "Display the price with 2 decimals:",
                    "You can also format a value directly without keeping it in a variable:",
                    "Display the value95with 2 decimals:",
                    "You can perform Python operations inside the placeholders.",
                    "You can do math operations:",
                    "Perform a math operation in the placeholder, and return the result:",
                    "You can perform math operations on variables:",
                    "Add taxes before displaying the price:",
                    "You can performif...elsestatements inside the placeholders:",
                    "Return \"Expensive\" if the price is over 50, otherwise return \"Cheap\":",
                    "You can execute functions inside the placeholder:",
                    "Use the string methodupper()to convert a \nvalue into upper case letters:",
                    "The function does not have to be a built-in Python method, you can create your own functions and use them:",
                    "Create a function that converts feet into meters:",
                    "At the beginning of this chapter we explained how to use the.2fmodifier to \nformat a number into a fixed point number with 2 decimals.",
                    "There are several other modifiers that can be used to format values:",
                    "Use a comma as a thousand separator:",
                    "Here is a list of all the formatting types.",
                    "Before Python 3.6 we used theformat()method to format strings.",
                    "Theformat()method can still be used,\nbut f-strings are faster and the preferred way to format strings.",
                    "The next examples in this page demonstrates how to format strings with theformat()method.",
                    "Theformat()method also uses curly brackets as placeholders{}, but the syntax is slightly different:",
                    "Add a placeholder where you want to display the price:",
                    "You can add parameters inside the curly brackets to specify how to convert \nthe value:",
                    "Format the price to be displayed as a number with two decimals:",
                    "Check out all formatting types in ourString format() Reference.",
                    "If you want to use more values, just add more values to the format() method:",
                    "And add more placeholders:",
                    "You can use index numbers (a number inside the curly brackets{0}) to be sure the \nvalues are placed \nin the correct placeholders:",
                    "Also, if you want to refer to the same value more than once, use the index number:",
                    "You can also use named indexes by entering a name inside the curly brackets{carname}, \nbut then you must use names when you pass the parameter valuestxt.format(carname = \"Ford\"):"
                ],
                "lists": [],
                "examples": [
                    "txt = f\"The price is 49 dollars\"print(txt)",
                    "price = 59txt = f\"The price is {price} dollars\"print(txt)",
                    "price = 59txt = f\"The price is {price:.2f} dollars\"print(txt)",
                    "txt = f\"The price is {95:.2f} dollars\"print(txt)",
                    "txt = f\"The price is {20 * 59} dollars\"print(txt)",
                    "price = 59tax = 0.25txt = f\"The price is {price + (price * tax)} dollars\"print(txt)",
                    "price = 49txt = f\"It is very {'Expensive' if price>50 else 'Cheap'}\"print(txt)",
                    "fruit = \"apples\"txt = f\"I love {fruit.upper()}\"print(txt)",
                    "def myconverter(x):return x * 0.3048txt = f\"The plane is flying at a {myconverter(30000)} meter altitude\"print(txt)",
                    "price = 59000txt = f\"The price is {price:,} dollars\"print(txt)",
                    "price = 49txt = \"The price is {} dollars\"print(txt.format(price))",
                    "txt = \"The price is {:.2f} dollars\"",
                    "print(txt.format(price, itemno, count))",
                    "quantity = 3itemno = 567price = 49myorder = \"I want {} pieces of \n  item number {} for {:.2f} dollars.\"print(myorder.format(quantity, itemno, price))",
                    "quantity = 3itemno = 567price = 49myorder = \"I want {0} pieces of \n  item number {1} for {2:.2f} dollars.\"print(myorder.format(quantity, itemno, price))",
                    "age = 36name = \"John\"txt = \"His name is {1}. {1} is {0} years old.\"print(txt.format(age, \n  name))",
                    "myorder = \"I have a {carname}, it is a {model}.\"print(myorder.format(carname \n  = \"Ford\", model = \"Mustang\"))"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_file_handling.asp",
        "cours": {
            "titre": "PythonFile Open",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_file_handling.asp",
            "contenus": {
                "paragraphs": [
                    "File handling is an important part of any web application.",
                    "Python has several functions for creating, reading, updating, and \ndeleting files.",
                    "The key function for working with files in Python is theopen()function.",
                    "Theopen()function takes two parameters;filename, andmode.",
                    "There are four different methods (modes) for opening a file:",
                    "\"r\"- Read - Default value. Opens a \nfile for reading, error if the file does not exist",
                    "\"a\"- Append - Opens a file for \nappending, creates the file if it does not exist",
                    "\"w\"- Write - Opens a file for writing, \ncreates the file if it does not exist",
                    "\"x\"- Create - Creates the specified file, returns \nan error if the file exists",
                    "In addition you can specify if the file should be handled as binary or text mode",
                    "\"t\"- Text - Default value. Text mode",
                    "\"b\"- Binary - Binary mode (e.g. \n  images)",
                    "To open a file for reading it is enough to specify the name of the file:",
                    "The code above is the same as:",
                    "Because\"r\"for read, and\"t\"for text are the default values, you do not need to specify them.",
                    "Note:Make sure the file exists, or else you will get an error."
                ],
                "lists": [],
                "examples": [
                    "f = open(\"demofile.txt\")",
                    "f = open(\"demofile.txt\", \"rt\")"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_file_open.asp",
        "cours": {
            "titre": "PythonFile Open",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_file_open.asp",
            "contenus": {
                "paragraphs": [
                    "Assume we have the following file, located in the same folder as Python:",
                    "demofile.txt",
                    "To open the file, use the built-inopen()function.",
                    "Theopen()function returns a file object, which has aread()method for reading the content of the file:",
                    "If the file is located in a different location, you will have to specify the file path, \nlike this:",
                    "Open a file on a different location:",
                    "By default theread()method returns the whole text, but you can also specify how many characters you want to return:",
                    "Return the 5 first characters of the file:",
                    "You can return one line by using thereadline()method:",
                    "Read one line of the file:",
                    "By callingreadline()two times, you can read the \ntwo first lines:",
                    "Read two lines of the file:",
                    "By looping through the lines of the file, you can read the whole file, line by line:",
                    "Loop through the file line by line:",
                    "It is a good practice to always close the file when you are done with it.",
                    "Close the file when you are finished with it:",
                    "Note:You should always close your files. In some cases, due to buffering, changes made to a file may not show until you close the file."
                ],
                "lists": [],
                "examples": [
                    "Hello! Welcome to demofile.txtThis file is for testing purposes.Good \n  Luck!",
                    "f = open(\"demofile.txt\", \"r\")print(f.read())",
                    "f = open(\"D:\\\\myfiles\\welcome.txt\", \"r\")print(f.read())",
                    "f = open(\"demofile.txt\", \"r\")print(f.read(5))",
                    "f = open(\"demofile.txt\", \"r\")print(f.readline())",
                    "f = open(\"demofile.txt\", \"r\")print(f.readline())print(f.readline())",
                    "f = open(\"demofile.txt\", \"r\")for x in f:print(x)",
                    "f = open(\"demofile.txt\", \"r\")print(f.readline())f.close()"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_file_write.asp",
        "cours": {
            "titre": "PythonFile Write",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_file_write.asp",
            "contenus": {
                "paragraphs": [
                    "To write to an existing file, you must add a parameter to theopen()function:",
                    "\"a\"- Append - will append to the end of the file",
                    "\"w\"- Write - will overwrite any existing content",
                    "Open the file \"demofile2.txt\" and append content to the file:",
                    "Open the file \"demofile3.txt\" and overwrite the content:",
                    "Note:the \"w\" method will overwrite the entire file.",
                    "To create a new file in Python, use theopen()method, \nwith one of the following parameters:",
                    "\"x\"- Create - will create a file, returns \nan error if the file exists",
                    "\"a\"- Append - will create a file if the \nspecified file does not exists",
                    "\"w\"- Write - will create a file if the \nspecified file does not exists",
                    "Create a file called \"myfile.txt\":",
                    "Result: a new empty file is created!",
                    "Create a new file if it does not exist:"
                ],
                "lists": [],
                "examples": [
                    "f = open(\"demofile2.txt\", \"a\")f.write(\"Now the file has more content!\")f.close()#open and read the file after the appending:f = \n  open(\"demofile2.txt\", \"r\")print(f.read())",
                    "f = open(\"demofile3.txt\", \"w\")f.write(\"Woops! I have deleted the content!\")f.close()#open and read the file after the overwriting:f = open(\"demofile3.txt\", \"r\")print(f.read())",
                    "f = open(\"myfile.txt\", \"x\")",
                    "f = open(\"myfile.txt\", \"w\")"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_file_remove.asp",
        "cours": {
            "titre": "PythonDelete File",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_file_remove.asp",
            "contenus": {
                "paragraphs": [
                    "To delete a file, you must import the OS module, and run itsos.remove()function:",
                    "Remove the file \"demofile.txt\":",
                    "To avoid getting an error, you might want to check if the file exists before you try to delete it:",
                    "Check if file exists,thendelete it:",
                    "To delete an entire folder, use theos.rmdir()method:",
                    "Remove the folder \"myfolder\":",
                    "Note:You can only removeemptyfolders."
                ],
                "lists": [],
                "examples": [
                    "import osos.remove(\"demofile.txt\")",
                    "import osif os.path.exists(\"demofile.txt\"):os.remove(\"demofile.txt\")else:print(\"The file does not exist\")",
                    "import osos.rmdir(\"myfolder\")"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/matplotlib_intro.asp",
        "cours": {
            "titre": "MatplotlibTutorial",
            "description": "",
            "lien": "https://www.w3schools.com/python/matplotlib_intro.asp",
            "contenus": {
                "paragraphs": [
                    "Matplotlib is a low level graph plotting library in python that serves as a visualization utility.",
                    "Matplotlib was created by John D. Hunter.",
                    "Matplotlib is open source and we can use it freely.",
                    "Matplotlib is mostly written in python, a few segments are written in C, Objective-C and Javascript for Platform compatibility.",
                    "The source code for Matplotlib is located at this github repositoryhttps://github.com/matplotlib/matplotlib"
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/matplotlib_getting_started.asp",
        "cours": {
            "titre": "MatplotlibGetting Started",
            "description": "",
            "lien": "https://www.w3schools.com/python/matplotlib_getting_started.asp",
            "contenus": {
                "paragraphs": [
                    "If you havePythonandPIPalready installed on a system, then installation of \nMatplotlib is very easy.",
                    "Install it using this command:",
                    "If this command fails, then use a python distribution that already has Matplotlib installed,  like Anaconda, Spyder etc.",
                    "Once Matplotlib is installed, import it in your applications by adding theimportmodulestatement:",
                    "Now Matplotlib is imported and ready to use:",
                    "The version string is stored under__version__attribute.",
                    "Note:two underscore characters are used in__version__."
                ],
                "lists": [],
                "examples": [
                    "C:\\Users\\Your Name>pip install matplotlib",
                    "import matplotlib",
                    "import matplotlibprint(matplotlib.__version__)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/matplotlib_pyplot.asp",
        "cours": {
            "titre": "MatplotlibPyplot",
            "description": "",
            "lien": "https://www.w3schools.com/python/matplotlib_pyplot.asp",
            "contenus": {
                "paragraphs": [
                    "Most of the Matplotlib utilities lies under thepyplotsubmodule,\nand are usually imported under thepltalias:",
                    "Now the Pyplot package can be referred to asplt.",
                    "Draw a line in a diagram from position (0,0) to position (6,250):",
                    "",
                    "You will learn more about drawing (plotting) in the next chapters."
                ],
                "lists": [],
                "examples": [
                    "import matplotlib.pyplot as plt",
                    "import matplotlib.pyplot as pltimport numpy as npxpoints = np.array([0, 6])ypoints = np.array([0, 250])plt.plot(xpoints, \n  ypoints)plt.show()"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/matplotlib_plotting.asp",
        "cours": {
            "titre": "MatplotlibPlotting",
            "description": "",
            "lien": "https://www.w3schools.com/python/matplotlib_plotting.asp",
            "contenus": {
                "paragraphs": [
                    "Theplot()function is used to draw points (markers) in a diagram.",
                    "By default, theplot()function draws a line from point to point.",
                    "The function takes parameters for specifying points in the diagram.",
                    "Parameter 1 is an array containing the points on thex-axis.",
                    "Parameter 2 is an array containing the points on they-axis.",
                    "If we need to plot a line from (1, 3) to (8, 10), we have to pass two arrays [1, 8] and [3, 10] to the plot function.",
                    "Draw a line in a diagram from position (1, 3) to position (8, 10):",
                    "",
                    "Thex-axisis the horizontal axis.",
                    "They-axisis the vertical axis.",
                    "To plot only the markers, you can useshortcut string notationparameter 'o', which means 'rings'.",
                    "Draw two points in the diagram, one at position (1, 3) and one in position (8, 10):",
                    "",
                    "You will learn more about markers in the next chapter.",
                    "You can plot as many points as you like, just make sure you have the same number of points in both axis.",
                    "Draw a line in a diagram from position (1, 3) to (2, 8) then to (6, 1) and finally to position (8, 10):",
                    "",
                    "If we do not specify the points on the x-axis, they will get the default values 0, 1, 2, 3 etc., depending on the length of the y-points.",
                    "So, if we take the same example as above, and leave out the x-points, the diagram will look like this:",
                    "Plotting without x-points:",
                    "",
                    "Thex-pointsin the example above are [0, 1, 2, 3, 4, 5]."
                ],
                "lists": [],
                "examples": [
                    "import matplotlib.pyplot as pltimport numpy as npxpoints = np.array([1, 8])ypoints = np.array([3, 10])plt.plot(xpoints, ypoints)plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npxpoints = np.array([1, 8])ypoints = np.array([3, 10])plt.plot(xpoints, ypoints, 'o')plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npxpoints = np.array([1, 2, 6, 8])ypoints = np.array([3, 8, 1, 10])plt.plot(xpoints, ypoints)plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npypoints = np.array([3, 8, 1, 10, 5, 7])plt.plot(ypoints)plt.show()"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/matplotlib_markers.asp",
        "cours": {
            "titre": "MatplotlibMarkers",
            "description": "",
            "lien": "https://www.w3schools.com/python/matplotlib_markers.asp",
            "contenus": {
                "paragraphs": [
                    "You can use the keyword argumentmarkerto \nemphasize each point with a specified marker:",
                    "Mark each point with a circle:",
                    "",
                    "Mark each point with a star:",
                    "",
                    "You can choose any of these markers:",
                    "You can also use theshortcut string notationparameter to specify the marker.",
                    "This parameter is also calledfmt, and is written with this syntax:",
                    "Mark each point with a circle:",
                    "",
                    "The marker value can be anything from the Marker Reference above.",
                    "The line value can be one of the following:",
                    "Note:If you leave out thelinevalue in the fmt parameter, no line will be plotted.",
                    "The short color value can be one of the following:",
                    "You can use the keyword argumentmarkersizeor the \nshorter version,msto set the size of the markers:",
                    "Set the size of the markers to 20:",
                    "",
                    "You can use the keyword argumentmarkeredgecoloror \nthe shortermecto set the color of theedgeof the markers:",
                    "Set the EDGE color to red:",
                    "",
                    "You can use the keyword argumentmarkerfacecoloror \nthe shortermfcto set the color inside the edge of the markers:",
                    "Set the FACE color to red:",
                    "",
                    "Useboththemecandmfcarguments to color the entire marker:",
                    "Set the color of both theedgeand thefaceto red:",
                    "",
                    "You can also useHexadecimal color values:",
                    "Mark each point with a beautiful green color:",
                    "",
                    "Or any of the140 supported color names.",
                    "Mark each point with the color named \"hotpink\":",
                    ""
                ],
                "lists": [],
                "examples": [
                    "import matplotlib.pyplot as pltimport numpy as npypoints = np.array([3, 8, 1, 10])plt.plot(ypoints, marker = 'o')plt.show()",
                    "...plt.plot(ypoints, marker = '*')...",
                    "import matplotlib.pyplot as pltimport numpy as npypoints = np.array([3, 8, 1, 10])plt.plot(ypoints, 'o:r')plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npypoints = np.array([3, 8, 1, 10])plt.plot(ypoints, marker = 'o', ms = 20)plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npypoints = np.array([3, 8, 1, 10])plt.plot(ypoints, marker = 'o', ms = 20, mec = 'r')plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npypoints = np.array([3, 8, 1, 10])plt.plot(ypoints, marker = 'o', ms = 20, mfc = 'r')plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npypoints = np.array([3, 8, 1, 10])plt.plot(ypoints, marker = 'o', ms = 20, mec = 'r', mfc = 'r')plt.show()",
                    "...plt.plot(ypoints, marker = 'o', ms = 20, mec = '#4CAF50', mfc = '#4CAF50')...",
                    "...plt.plot(ypoints, marker = 'o', ms = 20, mec = 'hotpink', mfc = 'hotpink')..."
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/matplotlib_line.asp",
        "cours": {
            "titre": "MatplotlibLine",
            "description": "",
            "lien": "https://www.w3schools.com/python/matplotlib_line.asp",
            "contenus": {
                "paragraphs": [
                    "You can use the keyword argumentlinestyle, or shorterls, to \nchange the style of the plotted line:",
                    "Use a dotted line:",
                    "",
                    "Use a dashed line:",
                    "",
                    "The line style can be written in a shorter syntax:",
                    "linestylecan be written asls.",
                    "dottedcan be written as:.",
                    "dashedcan be written as--.",
                    "Shorter syntax:",
                    "",
                    "You can choose any of these styles:",
                    "You can use the keyword argumentcoloror \nthe shortercto set the color of the line:",
                    "Set the line color to red:",
                    "",
                    "You can also useHexadecimal color values:",
                    "Plot with a beautiful green line:",
                    "",
                    "Or any of the140 supported color names.",
                    "Plot with the color named \"hotpink\":",
                    "",
                    "You can use the keyword argumentlinewidthor \nthe shorterlwto change the width of the line.",
                    "The value is a floating number, in points:",
                    "Plot with a 20.5pt wide line:",
                    "",
                    "You can plot as many lines as you like by simply adding moreplt.plot()functions:",
                    "Draw two lines by specifying aplt.plot()function for each line:",
                    "",
                    "You can also plot many lines by adding the points for the x- and y-axis for each line in the sameplt.plot()function.",
                    "(In the examples above we only specified the points on the y-axis, meaning that the points on the x-axis got the the default values (0, 1, 2, 3).)",
                    "The x- and y- values come in pairs:",
                    "Draw two lines by specifiyng the x- and y-point values for both lines:",
                    ""
                ],
                "lists": [],
                "examples": [
                    "import matplotlib.pyplot as pltimport numpy as npypoints = np.array([3, 8, 1, 10])plt.plot(ypoints, linestyle = 'dotted')plt.show()",
                    "plt.plot(ypoints, linestyle = 'dashed')",
                    "plt.plot(ypoints, ls = ':')",
                    "import matplotlib.pyplot as pltimport numpy as npypoints = np.array([3, 8, 1, 10])plt.plot(ypoints, color = 'r')plt.show()",
                    "...plt.plot(ypoints, c = '#4CAF50')...",
                    "...plt.plot(ypoints, c = 'hotpink')...",
                    "import matplotlib.pyplot as pltimport numpy as npypoints = np.array([3, 8, 1, 10])plt.plot(ypoints, linewidth = '20.5')plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npy1 = np.array([3, 8, 1, 10])y2 = np.array([6, 2, 7, 11])plt.plot(y1)plt.plot(y2)plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npx1 = np.array([0, 1, 2, 3])y1 = np.array([3, 8, 1, 10])x2 = np.array([0, 1, 2, 3])y2 = np.array([6, 2, 7, 11])plt.plot(x1, y1, x2, y2)plt.show()"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/matplotlib_labels.asp",
        "cours": {
            "titre": "MatplotlibLabels and Title",
            "description": "",
            "lien": "https://www.w3schools.com/python/matplotlib_labels.asp",
            "contenus": {
                "paragraphs": [
                    "With Pyplot, you can use thexlabel()andylabel()functions to set a label for the x- and y-axis.",
                    "Add labels to the x- and y-axis:",
                    "",
                    "With Pyplot, you can use thetitle()function to set a title for the plot.",
                    "Add a plot title and labels for the x- and y-axis:",
                    "",
                    "You can use thefontdictparameter inxlabel(),ylabel(), \nandtitle()to set font properties for the \ntitle and labels.",
                    "Set font properties for the title and labels:",
                    "",
                    "You can use thelocparameter intitle()to position the title.",
                    "Legal values are: 'left', 'right', and 'center'. Default value is 'center'.",
                    "Position the title to the left:",
                    ""
                ],
                "lists": [],
                "examples": [
                    "import numpy as npimport matplotlib.pyplot as pltx = np.array([80, \n  85, 90, 95, 100, 105, 110, 115, 120, 125])y = np.array([240, 250, 260, \n  270, 280, 290, 300, 310, 320, 330])plt.plot(x, y)plt.xlabel(\"Average \n  Pulse\")plt.ylabel(\"Calorie Burnage\")plt.show()",
                    "import numpy as npimport matplotlib.pyplot as pltx = np.array([80, \n  85, 90, 95, 100, 105, 110, 115, 120, 125])y = np.array([240, 250, 260, \n  270, 280, 290, 300, 310, 320, 330])plt.plot(x, y)plt.title(\"Sports Watch Data\")plt.xlabel(\"Average \n  Pulse\")plt.ylabel(\"Calorie Burnage\")plt.show()",
                    "import numpy as npimport matplotlib.pyplot as pltx = np.array([80, \n  85, 90, 95, 100, 105, 110, 115, 120, 125])y = np.array([240, 250, 260, \n  270, 280, 290, 300, 310, 320, 330])font1 = {'family':'serif','color':'blue','size':20}font2 = {'family':'serif','color':'darkred','size':15}plt.title(\"Sports \n  Watch Data\", fontdict = font1)plt.xlabel(\"Average Pulse\", fontdict = \n  font2)plt.ylabel(\"Calorie Burnage\", fontdict = font2)plt.plot(x, \n  y)plt.show()",
                    "import numpy as npimport matplotlib.pyplot as pltx = np.array([80, \n  85, 90, 95, 100, 105, 110, 115, 120, 125])y = np.array([240, 250, 260, \n  270, 280, 290, 300, 310, 320, 330])plt.title(\"Sports Watch Data\", loc = 'left')plt.xlabel(\"Average \n  Pulse\")plt.ylabel(\"Calorie Burnage\")plt.plot(x, \n  y)plt.show()"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/matplotlib_grid.asp",
        "cours": {
            "titre": "MatplotlibAdding Grid Lines",
            "description": "",
            "lien": "https://www.w3schools.com/python/matplotlib_grid.asp",
            "contenus": {
                "paragraphs": [
                    "With Pyplot, you can use thegrid()function to add grid lines to the plot.",
                    "Add grid lines to the plot:",
                    "",
                    "You can use theaxisparameter in\nthegrid()function to specify which grid lines \nto display.",
                    "Legal values are: 'x', 'y', and 'both'. Default value is 'both'.",
                    "Display only grid lines for the x-axis:",
                    "",
                    "Display only grid lines for the y-axis:",
                    "",
                    "You can also set the line properties of the grid, like this: grid(color = 'color', \nlinestyle = 'linestyle', linewidth =number).",
                    "Set the line properties of the grid:",
                    ""
                ],
                "lists": [],
                "examples": [
                    "import numpy as npimport matplotlib.pyplot as pltx = np.array([80, \n  85, 90, 95, 100, 105, 110, 115, 120, 125])y = np.array([240, 250, 260, \n  270, 280, 290, 300, 310, 320, 330])plt.title(\"Sports Watch Data\")plt.xlabel(\"Average Pulse\")plt.ylabel(\"Calorie Burnage\")plt.plot(x, \n  y)plt.grid()plt.show()",
                    "import numpy as npimport matplotlib.pyplot as pltx = np.array([80, \n  85, 90, 95, 100, 105, 110, 115, 120, 125])y = np.array([240, 250, 260, \n  270, 280, 290, 300, 310, 320, 330])plt.title(\"Sports Watch Data\")plt.xlabel(\"Average Pulse\")plt.ylabel(\"Calorie Burnage\")plt.plot(x, \n  y)plt.grid(axis = 'x')plt.show()",
                    "import numpy as npimport matplotlib.pyplot as pltx = np.array([80, \n  85, 90, 95, 100, 105, 110, 115, 120, 125])y = np.array([240, 250, 260, \n  270, 280, 290, 300, 310, 320, 330])plt.title(\"Sports Watch Data\")plt.xlabel(\"Average Pulse\")plt.ylabel(\"Calorie Burnage\")plt.plot(x, \n  y)plt.grid(axis = 'y')plt.show()",
                    "import numpy as npimport matplotlib.pyplot as pltx = np.array([80, \n  85, 90, 95, 100, 105, 110, 115, 120, 125])y = np.array([240, 250, 260, \n  270, 280, 290, 300, 310, 320, 330])plt.title(\"Sports Watch Data\")plt.xlabel(\"Average \n  Pulse\")plt.ylabel(\"Calorie Burnage\")plt.plot(x, \n  y)plt.grid(color = 'green', linestyle = '--', linewidth = 0.5)plt.show()"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/matplotlib_subplot.asp",
        "cours": {
            "titre": "MatplotlibSubplot",
            "description": "",
            "lien": "https://www.w3schools.com/python/matplotlib_subplot.asp",
            "contenus": {
                "paragraphs": [
                    "With thesubplot()function you can draw multiple plots in one figure:",
                    "Draw 2 plots:",
                    "",
                    "Thesubplot()function takes three arguments that describes the layout of the figure.",
                    "The layout is organized in rows and columns, which are represented by thefirstandsecondargument.",
                    "The third argument represents the index of the current plot.",
                    "So, if we want a figure with 2 rows an 1 column (meaning that the two plots will be displayed on top of each other instead of side-by-side),\nwe can write the syntax like this:",
                    "Draw 2 plots on top of each other:",
                    "",
                    "You can draw as many plots you like on one figure, just descibe the number of rows, columns, and the index of the plot.",
                    "Draw 6 plots:",
                    "",
                    "You can add a title to each plot with thetitle()function:",
                    "2 plots, with titles:",
                    "",
                    "You can add a title to the entire figure with thesuptitle()function:",
                    "Add a title for the entire figure:",
                    ""
                ],
                "lists": [],
                "examples": [
                    "import matplotlib.pyplot as pltimport numpy as np#plot 1:x = \n  np.array([0, 1, 2, 3])y = np.array([3, 8, 1, 10])plt.subplot(1, 2, 1)plt.plot(x,y)#plot 2:x = np.array([0, 1, 2, 3])y = np.array([10, 20, 30, \n  40])plt.subplot(1, 2, 2)plt.plot(x,y)plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as np#plot 1:x = \n  np.array([0, 1, 2, 3])y = np.array([3, 8, 1, 10])plt.subplot(2, 1, 1)plt.plot(x,y)#plot 2:x = np.array([0, 1, 2, 3])y = np.array([10, 20, 30, \n  40])plt.subplot(2, 1, 2)plt.plot(x,y)plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npx = np.array([0, \n  1, 2, 3])y = np.array([3, 8, 1, 10])plt.subplot(2, 3, 1)plt.plot(x,y)x = np.array([0, 1, 2, 3])y = np.array([10, 20, 30, \n  40])plt.subplot(2, 3, 2)plt.plot(x,y)x = np.array([0, 1, \n  2, 3])y = np.array([3, 8, 1, 10])plt.subplot(2, 3, 3)plt.plot(x,y)x = np.array([0, 1, 2, 3])y = np.array([10, 20, 30, 40])plt.subplot(2, 3, 4)plt.plot(x,y)x = np.array([0, 1, 2, 3])y = \n  np.array([3, 8, 1, 10])plt.subplot(2, 3, 5)plt.plot(x,y)x \n  = np.array([0, 1, 2, 3])y = np.array([10, 20, 30, 40])plt.subplot(2, \n  3, 6)plt.plot(x,y)plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as np#plot 1:x = \n  np.array([0, 1, 2, 3])y = np.array([3, 8, 1, 10])plt.subplot(1, 2, 1)plt.plot(x,y)plt.title(\"SALES\")#plot 2:x = np.array([0, 1, 2, 3])y = np.array([10, 20, 30, \n  40])plt.subplot(1, 2, 2)plt.plot(x,y)plt.title(\"INCOME\")plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as np#plot 1:x = \n  np.array([0, 1, 2, 3])y = np.array([3, 8, 1, 10])plt.subplot(1, 2, 1)plt.plot(x,y)plt.title(\"SALES\")#plot 2:x = np.array([0, 1, 2, 3])y = np.array([10, 20, 30, \n  40])plt.subplot(1, 2, 2)plt.plot(x,y)plt.title(\"INCOME\")plt.suptitle(\"MY SHOP\")plt.show()"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/matplotlib_scatter.asp",
        "cours": {
            "titre": "MatplotlibScatter",
            "description": "",
            "lien": "https://www.w3schools.com/python/matplotlib_scatter.asp",
            "contenus": {
                "paragraphs": [
                    "With Pyplot, you can use thescatter()function \nto draw a scatter plot.",
                    "Thescatter()function plots one dot for \neach observation. It needs two arrays of the same length, one for the values of \nthe x-axis, and one for values on the y-axis:",
                    "A simple scatter plot:",
                    "",
                    "The observation in the example above is the result of 13 cars passing by.",
                    "The X-axis shows how old the car is.",
                    "The Y-axis shows the speed of the car when it passes.",
                    "Are there any relationships between the observations?",
                    "It seems that the newer the car, the faster it drives, but that could be a coincidence, after all we only registered 13 cars.",
                    "In the example above, there seems to be a relationship between speed and age,\nbut what if we plot the observations from another day as well?\nWill the scatter plot tell us something else?",
                    "Draw two plots on the same figure:",
                    "",
                    "Note:The two plots are plotted with two different colors, by default blue and orange, you will learn how to change colors later in this chapter.",
                    "By comparing the two plots, I think it is safe to say that they both gives us the same conclusion: the newer the car, the faster it drives.",
                    "You can set your own color for each scatter plot with thecoloror thecargument:",
                    "Set your own color of the markers:",
                    "",
                    "You can even set a specific color for each dot by using an array of colors as value for thecargument:",
                    "Note:Youcannotuse thecolorargument for this, only thecargument.",
                    "Set your own color of the markers:",
                    "",
                    "The Matplotlib module has a number of available colormaps.",
                    "A colormap is like a list of colors, where each color has a value that ranges \nfrom 0 to 100.",
                    "Here is an example of a colormap:",
                    "",
                    "This colormap is called 'viridis' and as you can see it ranges from 0, which \nis a purple color, up to 100, which is a yellow color.",
                    "You can specify the colormap with the keyword argumentcmapwith the value of the colormap, in this \ncase'viridis'which is one of the \nbuilt-in colormaps available in Matplotlib.",
                    "In addition you have to create an array with values (from 0 to 100), one value for each point in the scatter plot:",
                    "Create a color array, and specify a colormap in the scatter plot:",
                    "",
                    "You can include the colormap in the drawing by including theplt.colorbar()statement:",
                    "Include the actual colormap:",
                    "",
                    "You can choose any of the built-in colormaps:",
                    "You can change the size of the dots with thesargument.",
                    "Just like colors, make sure the array for sizes has the same length as the arrays for the x- and y-axis:",
                    "Set your own size for the markers:",
                    "",
                    "You can adjust the transparency of the dots with thealphaargument.",
                    "Just like colors, make sure the array for sizes has the same length as the arrays for the x- and y-axis:",
                    "Set your own size for the markers:",
                    "",
                    "You can combine a colormap with different sizes of the dots. This is best visualized if the dots are transparent:",
                    "Create random arrays with 100 values for x-points, y-points, colors and \nsizes:",
                    ""
                ],
                "lists": [],
                "examples": [
                    "import matplotlib.pyplot as pltimport numpy as npx = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])plt.scatter(x, y)plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as np#day one, the age \n  and speed of 13 cars:x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])plt.scatter(x, \n  y)#day two, the age and speed of 15 cars:x = np.array([2,2,8,1,15,8,12,9,7,3,11,4,7,14,12])y = np.array([100,105,84,105,90,99,90,95,94,100,79,112,91,80,85])plt.scatter(x, y)plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npx = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])plt.scatter(x, \n  y, color = 'hotpink')x = np.array([2,2,8,1,15,8,12,9,7,3,11,4,7,14,12])y = np.array([100,105,84,105,90,99,90,95,94,100,79,112,91,80,85])plt.scatter(x, y, color = '#88c999')plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npx = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])colors = np.array([\"red\",\"green\",\"blue\",\"yellow\",\"pink\",\"black\",\"orange\",\"purple\",\"beige\",\"brown\",\"gray\",\"cyan\",\"magenta\"])plt.scatter(x, y, c=colors)plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npx = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])colors = np.array([0, \n  10, 20, 30, 40, 45, 50, 55, 60, 70, 80, 90, 100])plt.scatter(x, y, c=colors, cmap='viridis')plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npx = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])colors = np.array([0, \n  10, 20, 30, 40, 45, 50, 55, 60, 70, 80, 90, 100])plt.scatter(x, y, c=colors, cmap='viridis')plt.colorbar()plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npx = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])sizes = \n  np.array([20,50,100,200,500,1000,60,90,10,300,600,800,75])plt.scatter(x, \n  y, s=sizes)plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npx = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])sizes = \n  np.array([20,50,100,200,500,1000,60,90,10,300,600,800,75])plt.scatter(x, \n  y, s=sizes, alpha=0.5)plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npx = \n  np.random.randint(100, size=(100))y = np.random.randint(100, size=(100))colors = np.random.randint(100, size=(100))sizes = 10 * np.random.randint(100, \n  size=(100))plt.scatter(x, y, c=colors, s=sizes, alpha=0.5, cmap='nipy_spectral')plt.colorbar()plt.show()"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/matplotlib_bars.asp",
        "cours": {
            "titre": "MatplotlibBars",
            "description": "",
            "lien": "https://www.w3schools.com/python/matplotlib_bars.asp",
            "contenus": {
                "paragraphs": [
                    "With Pyplot, you can use thebar()function \nto draw bar graphs:",
                    "Draw 4 bars:",
                    "",
                    "Thebar()function takes arguments that describes the \nlayout of the bars.",
                    "The categories and their values represented by thefirstandsecondargument as arrays.",
                    "Try it Yourself »",
                    "If you want the bars to be displayed horizontally instead of vertically,\nuse thebarh()function:",
                    "Draw 4 horizontal bars:",
                    "",
                    "Thebar()andbarh()take the keyword argumentcolorto set the color of the bars:",
                    "Draw 4 red bars:",
                    "",
                    "You can use any of the140 supported color names.",
                    "Draw 4 \"hot pink\" bars:",
                    "",
                    "Or you can useHexadecimal color values:",
                    "Draw 4 bars with a beautiful green color:",
                    "",
                    "Thebar()takes the keyword argumentwidthto set the width of the bars:",
                    "Draw 4 very thin bars:",
                    "",
                    "The default width value is 0.8",
                    "Note:For horizontal bars, useheightinstead ofwidth.",
                    "Thebarh()takes the keyword argumentheightto set the height of the bars:",
                    "Draw 4 very thin bars:",
                    "",
                    "The default height value is 0.8"
                ],
                "lists": [],
                "examples": [
                    "import matplotlib.pyplot as pltimport numpy as npx = np.array([\"A\", \n  \"B\", \"C\", \"D\"])y = np.array([3, 8, 1, 10])plt.bar(x,y)plt.show()",
                    "x = [\"APPLES\", \"BANANAS\"]y = [400, 350]plt.bar(x, y)",
                    "import matplotlib.pyplot as pltimport numpy as npx = np.array([\"A\", \n  \"B\", \"C\", \"D\"])y = np.array([3, 8, 1, 10])plt.barh(x, y)plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npx = np.array([\"A\", \n  \"B\", \"C\", \"D\"])y = np.array([3, 8, 1, 10])plt.bar(x, y, color = \"red\")plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npx = np.array([\"A\", \n  \"B\", \"C\", \"D\"])y = np.array([3, 8, 1, 10])plt.bar(x, y, color = \"hotpink\")plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npx = np.array([\"A\", \n  \"B\", \"C\", \"D\"])y = np.array([3, 8, 1, 10])plt.bar(x, y, color = \"#4CAF50\")plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npx = np.array([\"A\", \n  \"B\", \"C\", \"D\"])y = np.array([3, 8, 1, 10])plt.bar(x, y, width = 0.1)plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npx = np.array([\"A\", \n  \"B\", \"C\", \"D\"])y = np.array([3, 8, 1, 10])plt.barh(x, y, height = 0.1)plt.show()"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/matplotlib_histograms.asp",
        "cours": {
            "titre": "MatplotlibHistograms",
            "description": "",
            "lien": "https://www.w3schools.com/python/matplotlib_histograms.asp",
            "contenus": {
                "paragraphs": [
                    "A histogram is a graph showingfrequencydistributions.",
                    "It is a graph showing the number of observations within each given interval.",
                    "Example: Say you ask for the height of 250 people, you \nmight end up with a histogram like this:",
                    "",
                    "You can read from the histogram that there are approximately:",
                    "2 people from 140 to 145cm5 people from 145 to 150cm15 people from \n151 to 156cm31 people from 157 to 162cm46 people from 163 to 168cm53 \npeople from 168 to 173cm45 people from 173 to 178cm28 people from 179 to \n184cm21 people from 185 to 190cm4 people from 190 to 195cm",
                    "In Matplotlib, we use thehist()function to \ncreate histograms.",
                    "Thehist()function will use an array of \nnumbers to create a histogram, the array is sent into the function as an \nargument.",
                    "For simplicity we use NumPy to randomly generate an array with 250 values, \nwhere the values will concentrate around 170, and the standard deviation is 10. \nLearn more aboutNormal Data \nDistributionin ourMachine Learning \nTutorial.",
                    "A Normal Data Distribution by NumPy:",
                    "This will generate arandomresult, and could look like this:",
                    "Try it Yourself »",
                    "Thehist()function will read the array and produce a histogram:",
                    "A simple histogram:",
                    ""
                ],
                "lists": [],
                "examples": [
                    "import numpy as npx = \n  np.random.normal(170, 10, 250)print(x)",
                    "import matplotlib.pyplot as pltimport numpy as npx = \n  np.random.normal(170, 10, 250)plt.hist(x)plt.show()"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/matplotlib_pie_charts.asp",
        "cours": {
            "titre": "MatplotlibPie Charts",
            "description": "",
            "lien": "https://www.w3schools.com/python/matplotlib_pie_charts.asp",
            "contenus": {
                "paragraphs": [
                    "With Pyplot, you can use thepie()function \nto draw pie charts:",
                    "A simple pie chart:",
                    "",
                    "As you can see the pie chart draws one piece (called a wedge) for each value \nin the array (in this case [35, 25, 25, 15]).",
                    "By default the plotting of the first wedge starts from the x-axis and movescounterclockwise:",
                    "",
                    "Note:The size of each wedge is determined by comparing the value with all the other values, by using this formula:",
                    "The value divided by the sum of all values:x/sum(x)",
                    "Add labels to the pie chart with thelabelsparameter.",
                    "Thelabelsparameter must be an array with one label for each wedge:",
                    "A simple pie chart:",
                    "",
                    "As mentioned the default start angle is at the x-axis, but you can change the start angle by specifying astartangleparameter.",
                    "Thestartangleparameter is defined with an angle in degrees, default angle is 0:",
                    "",
                    "Start the first wedge at 90 degrees:",
                    "",
                    "Maybe you want one of the wedges to stand out? Theexplodeparameter allows you to do that.",
                    "Theexplodeparameter, if specified, and notNone,\nmust be an array with one value for each wedge.",
                    "Each value represents how far from the center each wedge is displayed:",
                    "Pull the \"Apples\" wedge 0.2 from the center of the pie:",
                    "",
                    "Add a shadow to the pie chart by setting theshadowsparameter toTrue:",
                    "Add a shadow:",
                    "",
                    "You can set the color of each wedge with thecolorsparameter.",
                    "Thecolorsparameter, if specified, \nmust be an array with one value for each wedge:",
                    "Specify a new color for each wedge:",
                    "",
                    "You can useHexadecimal color values, any of the140 supported color names, \nor one of these shortcuts:",
                    "'r'- Red'g'- Green'b'- Blue'c'- Cyan'm'- Magenta'y'- Yellow'k'- Black'w'- White",
                    "To add a list of explanation for each wedge, use thelegend()function:",
                    "Add a legend:",
                    "",
                    "To add a header to the legend, add thetitleparameter to thelegendfunction.",
                    "Add a legend with a header:",
                    ""
                ],
                "lists": [],
                "examples": [
                    "import matplotlib.pyplot as pltimport numpy as npy = np.array([35, \n  25, 25, 15])plt.pie(y)plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npy = np.array([35, \n  25, 25, 15])mylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]plt.pie(y, \n  labels = mylabels)plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npy = np.array([35, \n  25, 25, 15])mylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]plt.pie(y, \n  labels = mylabels, startangle = 90)plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npy = np.array([35, \n  25, 25, 15])mylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]myexplode = [0.2, 0, 0, 0]plt.pie(y, \n  labels = mylabels, explode = myexplode)plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npy = np.array([35, \n  25, 25, 15])mylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]myexplode = [0.2, 0, 0, 0]plt.pie(y, \n  labels = mylabels, explode = myexplode, shadow = True)plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npy = np.array([35, \n  25, 25, 15])mylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]mycolors = [\"black\", \"hotpink\", \"b\", \"#4CAF50\"]plt.pie(y, labels = \n  mylabels, colors = mycolors)plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npy = np.array([35, \n  25, 25, 15])mylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]plt.pie(y, labels = mylabels)plt.legend()plt.show()",
                    "import matplotlib.pyplot as pltimport numpy as npy = np.array([35, \n  25, 25, 15])mylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]plt.pie(y, labels = mylabels)plt.legend(title = \"Four Fruits:\")plt.show()"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ml_getting_started.asp",
        "cours": {
            "titre": "Machine Learning",
            "description": "Machine Learning is making the computer learn from studying data and statistics.Machine Learning is a step into the direction of artificial intelligence (AI).Machine Learning is a program that analyses data and learns to predict the \noutcome.",
            "lien": "https://www.w3schools.com/python/python_ml_getting_started.asp",
            "contenus": {
                "paragraphs": [
                    "Machine Learning is making the computer learn from studying data and statistics.",
                    "Machine Learning is a step into the direction of artificial intelligence (AI).",
                    "Machine Learning is a program that analyses data and learns to predict the \noutcome.",
                    "In this tutorial we will go back to mathematics and study statistics, and how to calculate \nimportant numbers based on data sets.",
                    "We will also learn how to use various Python modules to get the answers we \nneed.",
                    "And we will learn how to make functions that are able to predict the outcome \nbased on what we have learned.",
                    "In the mind of a computer, a data set is any collection of data.\nIt can be anything from an array to a complete database.",
                    "Example of an array:",
                    "[99,86,87,88,111,86,103,87,94,78,77,85,86]",
                    "Example of a database:",
                    "By looking at the array, we can guess that the average value is probably around 80 \nor 90, and we are also able to determine the highest value and the lowest value, but what else can we do?",
                    "And by looking at the database we can see that the most popular color is white, and the oldest car is 17 years,\nbut what if we could predict if a car had an AutoPass, just by looking at the other values?",
                    "That is what Machine Learning is for! Analyzing data and predicting the outcome!",
                    "In Machine Learning it is common to work with very large data sets. In this \n  tutorial we will try to make it as easy as possible to understand the \n  different concepts of machine learning, and we will work with small \n  easy-to-understand data sets.",
                    "To analyze data, it is important to know what type of data we are dealing with.",
                    "We can split the data types into three main categories:",
                    "Numericaldata are numbers, and can be split into two \nnumerical categories:",
                    "Categoricaldata are values that cannot be measured up \nagainst each other. Example: a color value, or any yes/no values.",
                    "Ordinaldata are like categorical data, but can be measured \nup against each other. Example: school grades where A is better than B and so \non.",
                    "By knowing the data type of your data source, you will be able to know what \ntechnique to use when analyzing them.",
                    "You will learn more about statistics and analyzing data in the next chapters."
                ],
                "lists": [
                    [
                        "Numerical",
                        "Categorical",
                        "Ordinal"
                    ],
                    [
                        "Discrete Data- counted data that are limited to integers. Example: The number \nof cars passing by.",
                        "Continuous Data- measured data that can be any number. Example: The \n  price of an item, or the size of an item"
                    ]
                ],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ml_mean_median_mode.asp",
        "cours": {
            "titre": "Machine Learning - Mean Median Mode",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ml_mean_median_mode.asp",
            "contenus": {
                "paragraphs": [
                    "What can we learn from looking at a group of numbers?",
                    "In Machine Learning (and in mathematics) there are often three values that \ninterests us:",
                    "Example: We have registered the speed of 13 cars:",
                    "speed = [99,86,87,88,111,86,103,87,94,78,77,85,86]",
                    "What is the average, the middle, or the most common speed value?",
                    "The mean value is the average value.",
                    "To calculate the mean, find the sum of all values, and divide the sum by the number of values:",
                    "(99+86+87+88+111+86+103+87+94+78+77+85+86) / 13 = \n  89.77",
                    "The NumPy module has a method for this. Learn about the NumPy module in ourNumPy Tutorial.",
                    "Use the NumPymean()method to find the \naverage speed:",
                    "The median value is the value in the middle, after you have sorted all the values:",
                    "77, 78, 85, 86, 86, 86,87, 87, 88, 94, 99, 103, 111",
                    "It is important that the numbers are sorted before you can find the median.",
                    "The NumPy module has a method for this:",
                    "Use the NumPymedian()method to find the \nmiddle value:",
                    "If there are two numbers in the middle, divide the sum of those numbers by \n  two.",
                    "77, 78, 85, 86, 86,86, 87, \n  87, 94, 98, 99, 103(86 + 87) / 2 =86.5",
                    "Using the NumPy module:",
                    "The Mode value is the value that appears the most number of times:",
                    "99,86, 87, 88, 111,86, 103, 87, 94, 78, 77, 85,86= 86",
                    "The SciPy module has a method for this. Learn about the SciPy module in ourSciPy Tutorial.",
                    "Use the SciPymode()method to find the \nnumber that appears the most:",
                    "The Mean, Median, and Mode are techniques that are often used in Machine \nLearning, so it is important to understand the concept behind them."
                ],
                "lists": [
                    [
                        "Mean- The average value",
                        "Median- The mid point value",
                        "Mode- The most common value"
                    ]
                ],
                "examples": [
                    "import numpyspeed = [99,86,87,88,111,86,103,87,94,78,77,85,86]x = numpy.mean(speed)print(x)",
                    "import numpyspeed = [99,86,87,88,111,86,103,87,94,78,77,85,86]x = numpy.median(speed)print(x)",
                    "import numpyspeed = [99,86,87,88,86,103,87,94,78,77,85,86]x = numpy.median(speed)print(x)",
                    "from scipy import statsspeed = \n  [99,86,87,88,111,86,103,87,94,78,77,85,86]x = stats.mode(speed)print(x)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ml_standard_deviation.asp",
        "cours": {
            "titre": "Machine Learning - Standard Deviation",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ml_standard_deviation.asp",
            "contenus": {
                "paragraphs": [
                    "Standard deviation is a number that describes how spread out the values are.",
                    "A low standard deviation means that most of the numbers are close to the mean (average) value.",
                    "A high standard deviation means that the values are spread out over a wider range.",
                    "Example: This time we have registered the speed of 7 cars:",
                    "speed = [86,87,88,86,87,85,86]",
                    "The standard deviation is:",
                    "0.9",
                    "Meaning that most of the values are within the range of 0.9 from the mean \nvalue, which is 86.4.",
                    "Let us do the same with a selection of numbers with a wider range:",
                    "speed = [32,111,138,28,59,77,97]",
                    "The standard deviation is:",
                    "37.85",
                    "Meaning that most of the values are within the range of 37.85 from the mean \nvalue, which is 77.4.",
                    "As you can see, a higher standard deviation indicates that the values are \nspread out over a wider range.",
                    "The NumPy module has a method to calculate the standard deviation:",
                    "Use the NumPystd()method to find the \nstandard deviation:",
                    "Try a hands-on training sessions with step-by-step guidance from an expert. Try the guided project made in collaboration with Coursera now!",
                    "Variance is another number that indicates how spread out the values are.",
                    "In fact, if you take the square root of the variance, you get the standard \ndeviation!",
                    "Or the other way around, if you multiply the standard deviation by itself, you get the \nvariance!",
                    "To calculate the variance you have to do as follows:",
                    "1. Find the mean:",
                    "(32+111+138+28+59+77+97) / 7 = 77.4",
                    "2. For each value: find the difference from the mean:",
                    "32 - 77.4 = -45.4111 - 77.4 =  33.6138 \n  - 77.4 =  60.628 - 77.4 = -49.459 - 77.4 = -18.477 \n  - 77.4 = - 0.497 - 77.4 =  19.6",
                    "3. For each difference: find the square value:",
                    "(-45.4)2= 2061.16(33.6)2= 1128.96(60.6)2= 3672.36(-49.4)2= 2440.36(-18.4)2=  338.56(- 0.4)2=    0.16(19.6)2=  384.16",
                    "4. The variance is the average number of these squared differences:",
                    "(2061.16+1128.96+3672.36+2440.36+338.56+0.16+384.16) \n  / 7 = 1432.2",
                    "Luckily, NumPy has a method to calculate the variance:",
                    "Use the NumPyvar()method to find the variance:",
                    "As we have learned, the formula to find the standard deviation is the square root of the variance:",
                    "√1432.25 = 37.85",
                    "Or, as in the example from before, use the NumPy to calculate the standard deviation:",
                    "Use the NumPystd()method to find the standard deviation:",
                    "Standard Deviation is often represented by the symbol Sigma:σ",
                    "Variance is often represented by the symbol Sigma Squared:σ2",
                    "The Standard Deviation and Variance are terms that are often used in Machine Learning, so it is important to understand how to get them, and the concept behind them."
                ],
                "lists": [],
                "examples": [
                    "import numpyspeed = [86,87,88,86,87,85,86]x = numpy.std(speed)print(x)",
                    "import numpyspeed = [32,111,138,28,59,77,97]x = numpy.std(speed)print(x)",
                    "import numpyspeed = [32,111,138,28,59,77,97]x = numpy.var(speed)print(x)",
                    "import numpyspeed = [32,111,138,28,59,77,97]x = numpy.std(speed)print(x)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ml_percentile.asp",
        "cours": {
            "titre": "Machine Learning - Percentiles",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ml_percentile.asp",
            "contenus": {
                "paragraphs": [
                    "Percentiles are used in statistics to give you a number that describes the \nvalue that a given percent of the values are lower than.",
                    "Example: Let's say we have an array that contains the ages of every person \nliving on a street.",
                    "ages = [5,31,43,48,50,41,7,11,15,39,80,82,32,2,8,6,25,36,27,61,31]",
                    "What is the 75. percentile? The answer is 43, meaning that 75% of the people \nare 43 or younger.",
                    "The NumPy module has a method for finding the specified percentile:",
                    "Use the NumPypercentile()method to find \nthe percentiles:",
                    "What is the age that 90% of the people are younger than?"
                ],
                "lists": [],
                "examples": [
                    "import numpyages = \n  [5,31,43,48,50,41,7,11,15,39,80,82,32,2,8,6,25,36,27,61,31]x = numpy.percentile(ages, 75)print(x)",
                    "import numpyages = \n  [5,31,43,48,50,41,7,11,15,39,80,82,32,2,8,6,25,36,27,61,31]x = numpy.percentile(ages, 90)print(x)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ml_data_distribution.asp",
        "cours": {
            "titre": "Machine Learning - Data Distribution",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ml_data_distribution.asp",
            "contenus": {
                "paragraphs": [
                    "Earlier in this tutorial we have worked with very small amounts of data in our examples, just to \nunderstand the different concepts.",
                    "In the real world, the data sets are much bigger, but it can be difficult to \ngather real world data, at least at an early stage of a project.",
                    "To create big data sets for testing, we use the Python module NumPy, which \ncomes with a number of methods to create random data sets, of any size.",
                    "Create an array containing 250 random floats between 0 and 5:",
                    "To visualize the data set we can draw a histogram with the data we collected.",
                    "We will use the Python module Matplotlib to draw a histogram.",
                    "Learn about the Matplotlib module in ourMatplotlib Tutorial.",
                    "Draw a histogram:",
                    "",
                    "We use the array from the example above to draw a histogram with 5 bars.",
                    "The first bar represents how many values in the array are between 0 and 1.",
                    "The second bar represents how many values are between 1 and 2.",
                    "Etc.",
                    "Which gives us this result:",
                    "Note:The array values are random numbers and will not \n  show the exact same result on your computer.",
                    "An array containing 250 values is not considered very big, but now you know how to create a random set of values, and by changing the parameters, you can create the data set \nas big as you want.",
                    "Create an array with 100000 random numbers, and display them using a \n  histogram with 100 bars:"
                ],
                "lists": [
                    [
                        "52 values are between 0 and 1",
                        "48 values are between 1 and 2",
                        "49 values are between 2 and 3",
                        "51 values are between 3 and 4",
                        "50 values are between 4 and 5"
                    ]
                ],
                "examples": [
                    "import numpyx = numpy.random.uniform(0.0, 5.0, 250)print(x)",
                    "import numpyimport matplotlib.pyplot as pltx = \n  numpy.random.uniform(0.0, 5.0, 250)plt.hist(x, 5)plt.show()",
                    "import numpyimport matplotlib.pyplot as pltx = \n  numpy.random.uniform(0.0, 5.0, 100000)plt.hist(x, 100)plt.show()"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ml_normal_data_distribution.asp",
        "cours": {
            "titre": "Machine Learning - Normal Data Distribution",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ml_normal_data_distribution.asp",
            "contenus": {
                "paragraphs": [
                    "In the previous chapter we learned how to create a completely random array, of a given size, and between two given values.",
                    "In this chapter we will learn how to create an array where the values are concentrated around a given value.",
                    "In probability theory this kind of data distribution is known as thenormal \ndata distribution, or theGaussian data distribution, after the mathematician \nCarl Friedrich Gauss who came up with the formula of this data distribution.",
                    "A typical normal data distribution:",
                    "",
                    "Note:A normal distribution graph is also known as thebell curvebecause of it's characteristic shape of a bell.",
                    "We use the array from thenumpy.random.normal()method, with 100000 values,  to draw a histogram with 100 bars.",
                    "We specify that the mean value is 5.0, and the standard deviation is 1.0.",
                    "Meaning that the values should be concentrated around 5.0, and rarely further \naway than 1.0 from the mean.",
                    "And as you can see from the histogram, most values are between 4.0 and 6.0, \nwith a top at approximately 5.0."
                ],
                "lists": [],
                "examples": [
                    "import numpyimport matplotlib.pyplot as pltx = \n  numpy.random.normal(5.0, 1.0, 100000)plt.hist(x, 100)plt.show()"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ml_scatterplot.asp",
        "cours": {
            "titre": "Machine Learning - Scatter Plot",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ml_scatterplot.asp",
            "contenus": {
                "paragraphs": [
                    "A scatter plot is a diagram where each value in the data set is represented by a dot.",
                    "The Matplotlib module has a method for drawing scatter plots, it needs two arrays of \nthe same length, one for the values of the x-axis, and one for the values of the \ny-axis:",
                    "x = [5,7,8,7,2,17,2,9,4,11,12,9,6]",
                    "y = [99,86,87,88,111,86,103,87,94,78,77,85,86]",
                    "Thexarray represents the age of each car.",
                    "Theyarray represents the speed of each car.",
                    "Use thescatter()method to draw a scatter \n  plot diagram:",
                    "",
                    "The x-axis represents ages, and the y-axis represents speeds.",
                    "What we can read from the diagram is that the two fastest cars were both 2 \nyears old, and the slowest car was 12 years old.",
                    "Note:It seems that the newer the car, the faster it \n  drives, but that could be a coincidence, after all we only registered 13 cars.",
                    "In Machine Learning the data sets can contain thousands-, or even millions, of values.",
                    "You might not have real world data when you are testing an algorithm, you \nmight have to use randomly generated values.",
                    "As we have learned in the previous chapter, the NumPy module can help us with that!",
                    "Let us create two arrays that are both filled with 1000 random numbers from a \nnormal data distribution.",
                    "The first array will have the mean set to 5.0 with a standard deviation of \n1.0.",
                    "The second array will have the mean set to 10.0 with a standard \ndeviation of 2.0:",
                    "A scatter plot with 1000 dots:",
                    "",
                    "We can see that the dots are concentrated around the value 5 on the x-axis, \nand 10 on the y-axis.",
                    "We can also see that the spread is wider on the y-axis than on the x-axis."
                ],
                "lists": [],
                "examples": [
                    "import matplotlib.pyplot as pltx = \n  [5,7,8,7,2,17,2,9,4,11,12,9,6]y = \n  [99,86,87,88,111,86,103,87,94,78,77,85,86]plt.scatter(x, y)plt.show()",
                    "import numpyimport matplotlib.pyplot as pltx = numpy.random.normal(5.0, \n  1.0, 1000)y = numpy.random.normal(10.0, 2.0, 1000)plt.scatter(x, y)plt.show()"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ml_linear_regression.asp",
        "cours": {
            "titre": "Machine Learning - Linear Regression",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ml_linear_regression.asp",
            "contenus": {
                "paragraphs": [
                    "The term regression is used when you try to find the relationship between variables.",
                    "In Machine Learning, and in statistical modeling, that relationship is used to predict the outcome of future events.",
                    "Linear regression uses the relationship between the data-points to draw a straight line through \nall them.",
                    "This line can be used to predict future values.",
                    "In Machine Learning, predicting the future is very important.",
                    "Python has methods for finding a relationship between data-points and to draw a line of linear regression. \nWe will show you \nhow to use these methods instead of going through the mathematic formula.",
                    "In the example below, the x-axis represents age, and the y-axis represents speed. We have registered the age and speed of 13 cars as they were passing a \ntollbooth. Let us see if the data we collected could be used in a linear \nregression:",
                    "Start by drawing a scatter plot:",
                    "",
                    "Importscipyand draw the line of Linear Regression:",
                    "",
                    "Import the modules you need.",
                    "You can learn about the Matplotlib module in ourMatplotlib Tutorial.",
                    "You can learn about the SciPy module in ourSciPy Tutorial.",
                    "import matplotlib.pyplot as pltfrom scipy \n  import stats",
                    "Create the arrays that represent the values of the x and y axis:",
                    "x = [5,7,8,7,2,17,2,9,4,11,12,9,6]y = [99,86,87,88,111,86,103,87,94,78,77,85,86]",
                    "Execute a method that returns some important key values of Linear Regression:",
                    "slope, intercept, r, \n  p, std_err = stats.linregress(x, y)",
                    "Create a function that uses theslopeandinterceptvalues to return a new value. This \nnew value represents where on the y-axis the corresponding x value will be \nplaced:",
                    "def myfunc(x):return slope * x + intercept",
                    "Run each value of the x array through the function. This will result in a new \narray with new values for the y-axis:",
                    "mymodel = list(map(myfunc, x))",
                    "Draw the original scatter plot:",
                    "plt.scatter(x, y)",
                    "Draw the line of linear regression:",
                    "plt.plot(x, mymodel)",
                    "Display the diagram:",
                    "plt.show()",
                    "It is important to know how the relationship between the values of the \nx-axis and the values of the y-axis is, if there are no relationship the linear \nregression can not be used to predict anything.",
                    "This relationship - the coefficient of correlation - is calledr.",
                    "Thervalue ranges from -1 to 1, where 0 means no relationship, and 1 \n(and -1) \nmeans 100% related.",
                    "Python and the Scipy module will compute this value for you, all you have to \ndo is feed it with the x and y values.",
                    "How well does my data fit in a linear regression?",
                    "Note:The result -0.76 shows that there is a relationship, \n  not perfect, but it indicates that we could use linear regression in future \n  predictions.",
                    "Now we can use the information we have gathered to predict future values.",
                    "Example: Let us try to predict the speed of a 10 years old car.",
                    "To do so, we need the samemyfunc()function \nfrom the example above:",
                    "def myfunc(x):return slope * x + intercept",
                    "Predict the speed of a 10 years old car:",
                    "The example predicted a speed at 85.6, which we also could read from the \ndiagram:",
                    "Let us create an example where linear regression would not be the best method \nto predict future values.",
                    "These values for the x- and y-axis should result in a very bad fit for linear \n  regression:",
                    "",
                    "And therfor relationship?",
                    "You should get a very lowrvalue.",
                    "The result: 0.013 indicates a very bad relationship, and tells us that this data set is not suitable for linear regression."
                ],
                "lists": [],
                "examples": [
                    "import matplotlib.pyplot as pltx = [5,7,8,7,2,17,2,9,4,11,12,9,6]y = \n  [99,86,87,88,111,86,103,87,94,78,77,85,86]plt.scatter(x, y)plt.show()",
                    "import matplotlib.pyplot as pltfrom scipy import statsx = [5,7,8,7,2,17,2,9,4,11,12,9,6]y = \n  [99,86,87,88,111,86,103,87,94,78,77,85,86]slope, intercept, r, \n  p, std_err = stats.linregress(x, y)def myfunc(x):return slope * x + interceptmymodel = list(map(myfunc, x))plt.scatter(x, y)plt.plot(x, mymodel)plt.show()",
                    "from scipy import statsx = \n  [5,7,8,7,2,17,2,9,4,11,12,9,6]y = \n  [99,86,87,88,111,86,103,87,94,78,77,85,86]slope, intercept, r, \n  p, std_err = stats.linregress(x, y)print(r)",
                    "from scipy import statsx = [5,7,8,7,2,17,2,9,4,11,12,9,6]y = \n  [99,86,87,88,111,86,103,87,94,78,77,85,86]slope, intercept, r, \n  p, std_err = stats.linregress(x, y)def myfunc(x):return slope * x + interceptspeed = myfunc(10)print(speed)",
                    "import matplotlib.pyplot as pltfrom scipy import statsx = [89,43,36,36,95,10,66,34,38,20,26,29,48,64,6,5,36,66,72,40]y = \n  [21,46,3,35,67,95,53,72,58,10,26,34,90,33,38,20,56,2,47,15]slope, \n  intercept, r, p, std_err = stats.linregress(x, y)def \n  myfunc(x):return slope * x + interceptmymodel = list(map(myfunc, \n  x))plt.scatter(x, y)plt.plot(x, mymodel)plt.show()",
                    "import numpyfrom scipy import statsx = \n  [89,43,36,36,95,10,66,34,38,20,26,29,48,64,6,5,36,66,72,40]y = \n  [21,46,3,35,67,95,53,72,58,10,26,34,90,33,38,20,56,2,47,15]slope, intercept, r, \n  p, std_err = stats.linregress(x, y)print(r)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ml_polynomial_regression.asp",
        "cours": {
            "titre": "Machine Learning - Polynomial Regression",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ml_polynomial_regression.asp",
            "contenus": {
                "paragraphs": [
                    "If your data points clearly will not fit a linear regression (a straight line \nthrough all data points), it might be ideal for polynomial regression.",
                    "Polynomial regression, like linear regression, uses the relationship between the \nvariables x and y to find the best way to draw a line through the data points.",
                    "Python has methods for finding a relationship between data-points and to draw \na line of polynomial regression. We will show you how to use these methods \ninstead of going through the mathematic formula.",
                    "In the example below, we have registered 18 cars as they were passing a \ncertain tollbooth.",
                    "We have registered the car's speed, and the time of day (hour) the passing \noccurred.",
                    "The x-axis represents the hours of the day and the y-axis represents the \nspeed:",
                    "Start by drawing a scatter plot:",
                    "",
                    "Importnumpyandmatplotlibthen draw the line of \n  Polynomial Regression:",
                    "",
                    "Import the modules you need.",
                    "You can learn about the NumPy module in ourNumPy Tutorial.",
                    "You can learn about the SciPy module in ourSciPy Tutorial.",
                    "import numpyimport matplotlib.pyplot as plt",
                    "Create the arrays that represent the values of the x and y axis:",
                    "x = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]y = \n  [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]",
                    "NumPy has a method that lets us make a polynomial model:",
                    "mymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))",
                    "Then specify how the line will display, we start at position 1, and end at \nposition 22:",
                    "myline = numpy.linspace(1, 22, 100)",
                    "Draw the original scatter plot:",
                    "plt.scatter(x, y)",
                    "Draw the line of polynomial regression:",
                    "plt.plot(myline, mymodel(myline))",
                    "Display the diagram:",
                    "plt.show()",
                    "It is important to know how well the relationship between the values of the \nx- and y-axis is, if there are no relationship the \npolynomial \nregression can not be used to predict anything.",
                    "The relationship is measured with a value called the r-squared.",
                    "The r-squared value ranges from 0 to 1, where 0 means no relationship, and 1 \nmeans 100% related.",
                    "Python and the Sklearn module will compute this value for you, all you have to \ndo is feed it with the x and y arrays:",
                    "How well does my data fit in a polynomial regression?",
                    "Note:The result 0.94 shows that there is a very good relationship, \n  and we can use polynomial regression in future \n  predictions.",
                    "Now we can use the information we have gathered to predict future values.",
                    "Example: Let us try to predict the speed of a car that passes the tollbooth \nat around the time 17:00:",
                    "To do so, we need the samemymodelarray \nfrom the example above:",
                    "mymodel = numpy.poly1d(numpy.polyfit(x, y, 3))",
                    "Predict the speed of a car passing at 17:00:",
                    "The example predicted a speed to be 88.87, which we also could read from the diagram:",
                    "Let us create an example where polynomial regression would not be the best method \nto predict future values.",
                    "These values for the x- and y-axis should result in a very bad fit for \n  polynomial \n  regression:",
                    "",
                    "And the r-squared value?",
                    "You should get a very low r-squared value.",
                    "The result: 0.00995 indicates a very bad relationship, and tells us that this data set is not suitable for polynomial regression."
                ],
                "lists": [],
                "examples": [
                    "import matplotlib.pyplot as pltx = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]y = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]plt.scatter(x, y)plt.show()",
                    "import numpyimport matplotlib.pyplot as pltx = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]y = \n  [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]mymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))myline = numpy.linspace(1, 22, 100)plt.scatter(x, y)plt.plot(myline, mymodel(myline))plt.show()",
                    "import numpyfrom sklearn.metrics import r2_scorex = \n  [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]y = \n  [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]mymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))print(r2_score(y, mymodel(x)))",
                    "import numpyfrom sklearn.metrics import r2_scorex = \n  [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]y = \n  [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]mymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))speed = mymodel(17)print(speed)",
                    "import numpyimport matplotlib.pyplot as pltx = \n  [89,43,36,36,95,10,66,34,38,20,26,29,48,64,6,5,36,66,72,40]y = \n  [21,46,3,35,67,95,53,72,58,10,26,34,90,33,38,20,56,2,47,15]mymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))myline = numpy.linspace(2, 95, 100)plt.scatter(x, y)plt.plot(myline, mymodel(myline))plt.show()",
                    "import numpyfrom sklearn.metrics import r2_scorex = \n  [89,43,36,36,95,10,66,34,38,20,26,29,48,64,6,5,36,66,72,40]y = \n  [21,46,3,35,67,95,53,72,58,10,26,34,90,33,38,20,56,2,47,15]mymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))print(r2_score(y, mymodel(x)))"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ml_multiple_regression.asp",
        "cours": {
            "titre": "Machine Learning - Multiple Regression",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ml_multiple_regression.asp",
            "contenus": {
                "paragraphs": [
                    "Multiple regression is likelinear regression, but with more than one \nindependent value, meaning that we try to predict a value based ontwo \nor morevariables.",
                    "Take a look at the data set below, it contains some information about cars.",
                    "We can predict the CO2 emission of a car based on \nthe size of the engine, but with multiple regression we can throw in more \nvariables, like the weight of the car, to make the prediction more accurate.",
                    "In Python we have modules that will do the work for us. Start by importing \nthe Pandas module.",
                    "import pandas",
                    "Learn about the Pandas module in ourPandas Tutorial.",
                    "The Pandas module allows us to read csv files and return a DataFrame object.",
                    "The file is meant for testing purposes only, you can download it here:data.csv",
                    "df = pandas.read_csv(\"data.csv\")",
                    "Then make a list of the independent values and call this \nvariableX.",
                    "Put the dependent values in a variable calledy.",
                    "X = df[['Weight', 'Volume']]y = df['CO2']",
                    "Tip:It is common to name the list of independent values with a upper \ncase X, and the list of dependent values with a lower case y.",
                    "We will use some methods from the sklearn module, so we will have to import that module as well:",
                    "from sklearn import linear_model",
                    "From the sklearn module we will use theLinearRegression()method \nto create a linear regression object.",
                    "This object has a method calledfit()that takes \nthe independent and dependent values as parameters and fills the regression object with data that describes the relationship:",
                    "regr = linear_model.LinearRegression()regr.fit(X, y)",
                    "Now we have a regression object that are ready to predict CO2 values based on \na car's weight and volume:",
                    "#predict the CO2 emission of a car where the weight \n  is 2300kg, and the volume is 1300cm3:predictedCO2 = regr.predict([[2300, 1300]])",
                    "See the whole example in action:",
                    "Run example »",
                    "We have predicted that a car with 1.3 liter engine, and a weight of 2300 kg, will release approximately 107 grams of CO2 for every \nkilometer it drives.",
                    "The coefficient is a factor that describes the relationship \nwith an unknown variable.",
                    "Example: ifxis a variable, then2xisxtwo \ntimes.xis the unknown variable, and the \nnumber2is the coefficient.",
                    "In this case, we can ask for the coefficient value of weight against CO2, and \nfor volume against CO2. The answer(s) we get tells us what would happen if we \nincrease, or decrease, one of the independent values.",
                    "Print the coefficient values of the regression object:",
                    "Run example »",
                    "The result array represents the coefficient values of weight and volume.",
                    "Weight: 0.00755095Volume: 0.00780526",
                    "These values tell us that if the weight increase by 1kg, the CO2 \nemission increases by 0.00755095g.",
                    "And if the engine size (Volume) increases by 1 cm3, the CO2 emission \nincreases by 0.00780526 g.",
                    "I think that is a fair guess, but let test it!",
                    "We have already predicted that if a car with a 1300cm3engine weighs 2300kg, the CO2 emission will be approximately 107g.",
                    "What if we increase the weight with 1000kg?",
                    "Copy the example from before, but change the weight from 2300 to 3300:",
                    "Run example »",
                    "We have predicted that a car with 1.3 liter engine, and a weight of \n3300 kg, will release approximately 115 grams of CO2 for every kilometer it drives.",
                    "Which shows that the coefficient of 0.00755095 is correct:",
                    "107.2087328 + (1000 * 0.00755095) = 114.75968"
                ],
                "lists": [],
                "examples": [
                    "import pandasfrom sklearn import linear_modeldf = pandas.read_csv(\"data.csv\")X = df[['Weight', 'Volume']]y = df['CO2']regr = \n  linear_model.LinearRegression()regr.fit(X, y)#predict the CO2 \n  emission of a car where the weight is 2300kg, and the volume is 1300cm3:predictedCO2 = regr.predict([[2300, 1300]])print(predictedCO2)",
                    "import pandasfrom sklearn import linear_modeldf = pandas.read_csv(\"data.csv\")X = df[['Weight', 'Volume']]y = df['CO2']regr = \n  linear_model.LinearRegression()regr.fit(X, y)print(regr.coef_)",
                    "import pandasfrom sklearn import linear_modeldf = pandas.read_csv(\"data.csv\")X = df[['Weight', 'Volume']]y = df['CO2']regr = \n  linear_model.LinearRegression()regr.fit(X, y)predictedCO2 = regr.predict([[3300, 1300]])print(predictedCO2)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ml_scale.asp",
        "cours": {
            "titre": "Machine Learning - Scale",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ml_scale.asp",
            "contenus": {
                "paragraphs": [
                    "When your data has different values, and even different measurement units, it can be difficult to \ncompare them. What is kilograms compared to meters? Or altitude compared to time?",
                    "The answer to this problem is scaling. We can scale data into new values that are easier to \ncompare.",
                    "Take a look at the table below, it is the same data set that we used in themultiple regression chapter, but this time thevolumecolumn \ncontains values inlitersinstead ofcm3(1.0 instead of 1000).",
                    "It can be difficult to compare the volume 1.0 with the weight 790, but if we \nscale them both into comparable values, we can easily see how much one value \nis compared to the other.",
                    "There are different methods for scaling data, in this tutorial we will use a \nmethod called standardization.",
                    "The standardization method  \nuses this formula:",
                    "z = (x - u) / s",
                    "Wherezis the new value,xis the original value,uis the mean andsis the \nstandard deviation.",
                    "If you take theweightcolumn from the data set above, the first value \nis 790, and the scaled value will be:",
                    "If you take thevolumecolumn from the data set above, the first value \nis 1.0, and the scaled value \nwill be:",
                    "(1.0 -1.61) /0.38= -1.59",
                    "Now you can compare -2.1 with -1.59 instead of comparing 790 with 1.0.",
                    "You do not have to do this manually,\nthe Python sklearn module has a method calledStandardScaler()which returns a Scaler object with methods for transforming data sets.",
                    "Scale all values in the Weight and Volume columns:",
                    "Note that the first two values are -2.1 and -1.59, which corresponds to our \n  calculations:",
                    "Run example »",
                    "The task in theMultiple Regression chapterwas to predict the CO2 emission from a car \nwhen you only knew its weight and volume.",
                    "When the data set is scaled, you will have to use the scale when you predict values:",
                    "Predict the CO2 emission from a 1.3 liter car that weighs 2300 kilograms:",
                    "Run example »"
                ],
                "lists": [],
                "examples": [
                    "import pandasfrom sklearn import linear_modelfrom \n  sklearn.preprocessing import StandardScalerscale = StandardScaler()df = pandas.read_csv(\"data.csv\")X = df[['Weight', 'Volume']]scaledX = scale.fit_transform(X)print(scaledX)",
                    "import pandasfrom sklearn import linear_modelfrom \n  sklearn.preprocessing import StandardScalerscale = StandardScaler()df = pandas.read_csv(\"data.csv\")X = df[['Weight', 'Volume']]y = df['CO2']scaledX = scale.fit_transform(X)regr = linear_model.LinearRegression()regr.fit(scaledX, y)scaled = \n  scale.transform([[2300, 1.3]])predictedCO2 = regr.predict([scaled[0]])print(predictedCO2)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ml_train_test.asp",
        "cours": {
            "titre": "Machine Learning - Train/Test",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ml_train_test.asp",
            "contenus": {
                "paragraphs": [
                    "In Machine Learning we create models to predict the outcome of certain events,\nlike in the previous chapter where we predicted the CO2 emission of a car when we knew\nthe weight and engine size.",
                    "To measure if the model is good enough, we can use a method called Train/Test.",
                    "Train/Test is a method to measure the accuracy of your model.",
                    "It is called Train/Test because you split the data set into two sets: a training set and a testing set.",
                    "80% for training, and 20% for testing.",
                    "Youtrainthe model using the training set.",
                    "Youtestthe model using the testing set.",
                    "Trainthe model meanscreatethe model.",
                    "Testthe model means test the accuracy of the model.",
                    "Start with a data set you want to test.",
                    "Our data set illustrates 100 customers in a shop, and their shopping habits.",
                    "The x axis represents the number of minutes before making a purchase.",
                    "The y axis represents the amount of money spent on the purchase.",
                    "",
                    "Run example »",
                    "Thetrainingset should be a random selection of 80% of the original data.",
                    "Thetestingset should be the remaining 20%.",
                    "train_x = x[:80]train_y = y[:80]test_x = x[80:]test_y = y[80:]",
                    "Display the same scatter plot with the training set:",
                    "It looks like the original data set, so it seems to be a fair \nselection:",
                    "",
                    "Run example »",
                    "To make sure the testing set is not completely different, we will take a look at the testing set as well.",
                    "The testing set also looks like the original data set:",
                    "",
                    "Run example »",
                    "What does the data set look like? In my opinion I think the best fit would be \napolynomial regression, so let us draw a line of polynomial regression.",
                    "To draw a line through the data points, we use theplot()method of the matplotlib module:",
                    "Draw a polynomial regression line through the data points:",
                    "",
                    "Run example »",
                    "The result can back my suggestion of the data set fitting a polynomial \nregression, even though it would give us some weird results if we try to predict \nvalues outside of the data set. Example: the line indicates that a customer \nspending 6 minutes in the shop would make a purchase worth 200. That is probably \na sign of overfitting.",
                    "But what about the R-squared score? The R-squared score is a good indicator \nof how well my data set is fitting the model.",
                    "Remember R2, also known as R-squared?",
                    "It measures the relationship between the x axis and the y \naxis, and the value ranges from 0 to 1, where 0 means no relationship, and 1 \nmeans totally related.",
                    "The sklearn module has a method calledr2_score()that will help us find this relationship.",
                    "In this case we would like to measure the relationship  \nbetween the minutes a customer stays in the shop and how much money they spend.",
                    "How well does my training data fit in a polynomial regression?",
                    "Note:The result 0.799 shows that there is a OK relationship.",
                    "Now we have made a model that is OK, at least when it comes to training data.",
                    "Now we want to test the model with the testing data as well, to see if gives us the \nsame result.",
                    "Let us find the R2 score when using testing data:",
                    "Note:The result 0.809 shows that the model fits the \n  testing set as well, and we are confident that we can use the model to predict \n  future values.",
                    "Now that we have established that our model is OK, we can start predicting \nnew values.",
                    "How much money will a buying customer spend, if she or he stays in the shop \n  for 5 minutes?",
                    "The example predicted the customer to spend 22.88 dollars, as seems to correspond to the diagram:"
                ],
                "lists": [],
                "examples": [
                    "import numpyimport matplotlib.pyplot as pltnumpy.random.seed(2)x = numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, \n  100) / xplt.scatter(x, y)plt.show()",
                    "plt.scatter(train_x, \n  train_y)plt.show()",
                    "plt.scatter(test_x, \n  test_y)plt.show()",
                    "import numpyimport \n  matplotlib.pyplot as pltnumpy.random.seed(2)x = \n  numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, 100) / xtrain_x = x[:80]train_y = y[:80]test_x = x[80:]test_y = \n  y[80:]mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, 4))myline = numpy.linspace(0, 6, 100)plt.scatter(train_x, train_y)plt.plot(myline, mymodel(myline))plt.show()",
                    "import numpyfrom sklearn.metrics import r2_scorenumpy.random.seed(2)x = numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, \n  100) / xtrain_x = x[:80]train_y = y[:80]test_x = x[80:]test_y = y[80:]mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, \n  4))r2 = r2_score(train_y, mymodel(train_x))print(r2)",
                    "import numpyfrom sklearn.metrics import r2_scorenumpy.random.seed(2)x = numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, \n  100) / xtrain_x = x[:80]train_y = y[:80]test_x = x[80:]test_y = y[80:]mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, \n  4))r2 = r2_score(test_y, mymodel(test_x))print(r2)",
                    "print(mymodel(5))"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ml_decision_tree.asp",
        "cours": {
            "titre": "Machine Learning - Decision Tree",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ml_decision_tree.asp",
            "contenus": {
                "paragraphs": [
                    "",
                    "In this chapter we will show you how to make a \"Decision Tree\". A Decision \nTree is a Flow Chart, and can help you make decisions based on previous experience.",
                    "In the example, a person will try to decide if he/she should go to a comedy show or \nnot.",
                    "Luckily our example person has registered every time there was a comedy show \nin town, and registered some information about the comedian, and also \nregistered if he/she went or not.",
                    "Now, based on this data set, Python can create a decision tree that can be used to decide \nif any new shows are worth attending to.",
                    "First, read the dataset with pandas:",
                    "Read and print the data set:",
                    "Run example »",
                    "To make a decision tree, all data has to be numerical.",
                    "We have to convert the non numerical columns 'Nationality' and 'Go' into numerical values.",
                    "Pandas has amap()method that takes a dictionary with information on how to \nconvert the values.",
                    "{'UK': 0, 'USA': 1, 'N': 2}",
                    "Means convert the values 'UK' to 0, 'USA' to 1, and 'N' to 2.",
                    "Change string values into numerical values:",
                    "Run example »",
                    "Then we have to separate thefeaturecolumns from thetargetcolumn.",
                    "The feature columns are the columns that we try to predictfrom, and \nthe target column is the column with the values we try to predict.",
                    "Xis the feature columns,yis the target column:",
                    "Run example »",
                    "Now we can create the actual decision tree, fit it with our details. Start by \nimporting the modules we need:",
                    "Create and display a Decision Tree:",
                    "Run example »",
                    "The decision tree uses your earlier decisions to calculate the odds for you to wanting to go see \na comedian or not.",
                    "Let us read the different aspects of the decision tree:",
                    "",
                    "Rank <= 6.5means that every comedian with a rank of 6.5 or \nlower will follow theTruearrow (to the left), and the rest will \nfollow theFalsearrow (to the right).",
                    "gini = 0.497refers to the quality of the \nsplit, and is always a number between 0.0 and 0.5, where 0.0 would mean all of \nthe samples got the same result, and 0.5 would mean that the split is done \nexactly in the middle.",
                    "samples = 13means that there are 13 \ncomedians left at this point in the decision, which is all of them since this is \nthe first step.",
                    "value = [6, 7]means that of these 13 \ncomedians, 6 will get a \"NO\", and 7 will get a \n\"GO\".",
                    "There are many ways to split the samples, we use the GINI method in this tutorial.",
                    "The Gini method uses this formula:",
                    "Gini = 1 - (x/n)2- (y/n)2",
                    "Wherexis the number of positive answers(\"GO\"),nis the number of samples, andyis the number of negative answers (\"NO\"), \nwhich gives us this calculation:",
                    "1 - (7 / 13)2- (6 / 13)2= 0.497",
                    "",
                    "The next step contains two boxes, one box for the comedians with a 'Rank' of \n6.5 or lower, and one box with the rest.",
                    "gini = 0.0means all of the samples got the \nsame result.",
                    "samples = 5means that there are 5 comedians \nleft in this branch (5 comedian with a Rank of 6.5 or lower).",
                    "value = [5, 0]means that 5 will get a \"NO\" \nand 0 will get a \"GO\".",
                    "Nationality <= 0.5means that the comedians \nwith a nationality value of less than 0.5 will follow the arrow to the left \n(which means everyone from the UK, ), and the rest will follow the arrow to the \nright.",
                    "gini = 0.219means that about 22% of the \nsamples would go in one direction.",
                    "samples = 8means that there are 8 comedians \nleft in this branch (8 comedian with a Rank higher than 6.5).",
                    "value = [1, 7]means that of these 8 \ncomedians, 1 will get a \"NO\" and 7 will get a \"GO\".",
                    "",
                    "Age <= 35.5means that comedians \nat the age of 35.5 or younger will follow the arrow to the left, and the rest will follow the arrow to the \nright.",
                    "gini = 0.375means that about 37,5% of the \nsamples would go in one direction.",
                    "samples = 4means that there are 4 comedians \nleft in this branch (4 comedians from the UK).",
                    "value = [1, 3]means that of these 4 \ncomedians, 1 will get a \"NO\" and 3 will get a \"GO\".",
                    "gini = 0.0means all of the samples got the \nsame result.",
                    "samples = 4means that there are 4 comedians \nleft in this branch (4 comedians not from the UK).",
                    "value = [0, 4]means that of these 4 \ncomedians, 0 will get a \"NO\" and 4 will get a \"GO\".",
                    "",
                    "gini = 0.0means all of the samples got the \nsame result.",
                    "samples = 2means that there are 2 comedians \nleft in this branch (2 comedians at the age 35.5 or younger).",
                    "value = [0, 2]means that of these 2 \ncomedians, 0 will get a \"NO\" and 2 will get a \"GO\".",
                    "Experience <= 9.5means that comedians \nwith 9.5 years of experience, or less, will follow the arrow to the left, and the rest will follow the arrow to the \nright.",
                    "gini = 0.5means that 50% of the samples \nwould go in one direction.",
                    "samples = 2means that there are 2 comedians \nleft in this branch (2 comedians older than 35.5).",
                    "value = [1, 1]means that of these 2 \ncomedians, 1 will get a \"NO\" and 1 will get a \"GO\".",
                    "",
                    "gini = 0.0means all of the samples got the \nsame result.",
                    "samples = 1means that there is 1 comedian \nleft in this branch (1 comedian with 9.5 years of experience or less).",
                    "value = [0, 1]means that 0 will get a \"NO\" and \n1 will get a \"GO\".",
                    "gini = 0.0means all of the samples got the \nsame result.",
                    "samples = 1means that there is 1 comedians \nleft in this branch (1 comedian with more than 9.5 years of experience).",
                    "value = [1, 0]means that 1 will get a \"NO\" and \n0 will get a \"GO\".",
                    "We can use the Decision Tree to predict new values.",
                    "Example: Should I go see a show starring a 40 years old American comedian, with 10 years of experience, \nand a comedy ranking of 7?",
                    "Use predict() method to predict new values:",
                    "Run example »",
                    "What would the answer be if the comedy rank was 6?",
                    "Run example »",
                    "You will see that the Decision Tree gives you different results if you run \n  it enough times, even if you feed it with the same data.",
                    "That is because the Decision Tree does not give us a 100% certain answer. It is based on the \n  probability of an outcome, and the answer will vary."
                ],
                "lists": [],
                "examples": [
                    "import pandasdf = pandas.read_csv(\"data.csv\")print(df)",
                    "d = {'UK': 0, \n  'USA': 1, 'N': 2}df['Nationality'] = df['Nationality'].map(d)d = \n  {'YES': 1, 'NO': 0}df['Go'] = df['Go'].map(d)print(df)",
                    "features = ['Age', 'Experience', 'Rank', 'Nationality']X = df[features]y = df['Go']print(X)print(y)",
                    "import pandasfrom sklearn import treefrom sklearn.tree import \n  DecisionTreeClassifierimport matplotlib.pyplot as pltdf = \n  pandas.read_csv(\"data.csv\")d = {'UK': 0, 'USA': 1, 'N': 2}df['Nationality'] \n  = df['Nationality'].map(d)d = {'YES': 1, 'NO': 0}df['Go'] = df['Go'].map(d)features = ['Age', 'Experience', 'Rank', 'Nationality']X = df[features]y = df['Go']dtree = DecisionTreeClassifier()dtree = dtree.fit(X, \n  y)tree.plot_tree(dtree, feature_names=features)",
                    "print(dtree.predict([[40, 10, 7, 1]]))",
                    "print(dtree.predict([[40, 10, 6, 1]]))"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ml_confusion_matrix.asp",
        "cours": {
            "titre": "Machine Learning - Confusion Matrix",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ml_confusion_matrix.asp",
            "contenus": {
                "paragraphs": [
                    "On this page, W3schools.com collaborates withNYC Data Science Academy, to deliver digital training content to our students.",
                    "It is a table that is used in classification problems to assess where errors in the model were made.",
                    "The rows represent the actual classes the outcomes should have been.\nWhile the columns represent the predictions we have made.\nUsing this table it is easy to see which predictions are wrong.",
                    "Confusion matrixes can be created by predictions made from a logistic regression.",
                    "For now we will generate actual and predicted values by utilizing NumPy:",
                    "import numpy",
                    "Next we will need to generate the numbers for \"actual\" and \"predicted\" values.",
                    "actual = numpy.random.binomial(1, 0.9, size = 1000)predicted = numpy.random.binomial(1, 0.9, size = 1000)",
                    "In order to create the confusion matrix we need to import metrics from the sklearn module.",
                    "from sklearn import metrics",
                    "Once metrics is imported we can use the confusion matrix function on our actual and predicted values.",
                    "confusion_matrix = metrics.confusion_matrix(actual, predicted)",
                    "To create a more interpretable visual display we need to convert the table into a confusion matrix display.",
                    "cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels = [0, \n1])",
                    "Vizualizing the display requires that we import pyplot from matplotlib.",
                    "import matplotlib.pyplot as plt",
                    "Finally to display the plot we can use the functions plot() and show() from pyplot.",
                    "cm_display.plot()plt.show()",
                    "See the whole example in action:",
                    "",
                    "The Confusion Matrix created has four different quadrants:",
                    "True Negative (Top-Left Quadrant)False Positive (Top-Right Quadrant)False Negative (Bottom-Left Quadrant)True Positive (Bottom-Right Quadrant)",
                    "True means that the values were accurately predicted, False means that there was an error or wrong prediction.",
                    "Now that we have made a Confusion Matrix, we can calculate different measures to quantify the quality of the model. First, lets look at Accuracy.",
                    "ADVERTISEMENT",
                    "The matrix provides us with many useful metrics that help us to evaluate our classification model.",
                    "The different measures include: Accuracy, Precision, Sensitivity (Recall), Specificity, and the F-score, explained below.",
                    "Accuracy measures how often the model is correct.",
                    "(True Positive + True Negative) / Total Predictions",
                    "Of the positives predicted, what percentage is truly positive?",
                    "True Positive / (True Positive + False Positive)",
                    "Precision does not evaluate the correctly predicted negative cases:",
                    "Of all the positive cases, what percentage are predicted positive?",
                    "Sensitivity (sometimes called Recall) measures how good the model is at predicting positives.",
                    "This means it looks at true positives and false negatives (which are positives that have been incorrectly predicted as negative).",
                    "True Positive / (True Positive + False Negative)",
                    "Sensitivity is good at understanding how well the model predicts something is positive:",
                    "How well the model is at prediciting negative results?",
                    "Specificity is similar to sensitivity, but looks at it from the persepctive of negative results.",
                    "True Negative / (True Negative + False Positive)",
                    "Since it is just the opposite of Recall, we use the recall_score function, taking the opposite position label:",
                    "F-score is the \"harmonic mean\" of precision and sensitivity.",
                    "It considers both false positive and false negative cases and is good for imbalanced datasets.",
                    "2 * ((Precision * Sensitivity) / (Precision + Sensitivity))",
                    "This score does not take into consideration the True Negative values:",
                    "All calulations in one:"
                ],
                "lists": [],
                "examples": [
                    "import matplotlib.pyplot as pltimport numpyfrom sklearn import metricsactual = numpy.random.binomial(1,.9,size = 1000)predicted = \n  numpy.random.binomial(1,.9,size = 1000)confusion_matrix = \n  metrics.confusion_matrix(actual, predicted)cm_display = \n  metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, \n  display_labels = [0, 1])cm_display.plot()plt.show()",
                    "Accuracy = metrics.accuracy_score(actual, predicted)",
                    "Precision = metrics.precision_score(actual, predicted)",
                    "Sensitivity_recall = metrics.recall_score(actual, predicted)",
                    "Specificity = metrics.recall_score(actual, predicted, pos_label=0)",
                    "F1_score = metrics.f1_score(actual, predicted)",
                    "#metricsprint({\"Accuracy\":Accuracy,\"Precision\":Precision,\"Sensitivity_recall\":Sensitivity_recall,\"Specificity\":Specificity,\"F1_score\":F1_score})"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ml_hierarchial_clustering.asp",
        "cours": {
            "titre": "Machine Learning - Hierarchical Clustering",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ml_hierarchial_clustering.asp",
            "contenus": {
                "paragraphs": [
                    "On this page, W3schools.com collaborates withNYC Data Science Academy, to deliver digital training content to our students.",
                    "Hierarchical clustering is an unsupervised learning method for clustering data points. The algorithm builds clusters by measuring the dissimilarities between data. Unsupervised learning means that a model does not have to be trained, and we do not need a \"target\" variable. This method can be used on any data to visualize and interpret the relationship between individual data points.",
                    "Here we will use hierarchical clustering to group data points and visualize the clusters using both a dendrogram and scatter plot.",
                    "We will use Agglomerative Clustering, a type of hierarchical clustering that follows a bottom up approach. We begin by treating each data point as its own cluster. Then, we join clusters together that have the shortest distance between them to create larger clusters. This step is repeated until one large cluster is formed containing all of the data points.",
                    "Hierarchical clustering requires us to decide on both a distance and linkage method. We will use euclidean distance and the Ward linkage method, which attempts to minimize the variance between clusters.",
                    "Start by visualizing some data points:",
                    "",
                    "ADVERTISEMENT",
                    "Now we compute the ward linkage using euclidean distance, and visualize it using a dendrogram:",
                    "",
                    "",
                    "Import the modules you need.",
                    "import numpy as npimport matplotlib.pyplot as pltfrom scipy.cluster.hierarchy import dendrogram, linkagefrom sklearn.cluster import AgglomerativeClustering",
                    "You can learn about the Matplotlib module in our\"Matplotlib Tutorial.",
                    "You can learn about the SciPy module in ourSciPy Tutorial.",
                    "NumPy is a library for working with arrays and matricies in Python,\nyou can learn about the NumPy module in ourNumPy Tutorial.",
                    "scikit-learn is a popular library for machine learning.",
                    "Create arrays that resemble two variables in a dataset. Note that while we only \nuse two variables here, this method will work with any number of variables:",
                    "x = [4, 5, 10, 4, 3, 11, 14 , 6, 10, 12]y = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]",
                    "Turn the data into a set of points:",
                    "data = list(zip(x, y))print(data)",
                    "Result:",
                    "[(4, 21), (5, 19), (10, 24), (4, 17), (3, 16), (11, 25), (14, 24), (6, 22), (10, 21), (12, 21)]",
                    "Compute the linkage between all of the different points. Here we use a simple euclidean distance measure and Ward's linkage, which seeks to minimize the variance between clusters.",
                    "linkage_data = linkage(data, method='ward', metric='euclidean')",
                    "Finally, plot the results in a dendrogram. This plot will show us the hierarchy of clusters from the bottom (individual points) to the top (a single cluster consisting of all data points).",
                    "plt.show()lets us visualize the dendrogram instead of just the raw linkage data.",
                    "dendrogram(linkage_data)plt.show()",
                    "Result:",
                    "",
                    "The scikit-learn library allows us to use hierarchichal clustering in a different manner. First, we initialize theAgglomerativeClusteringclass with 2 clusters, using the same euclidean distance and Ward linkage.",
                    "hierarchical_cluster = AgglomerativeClustering(n_clusters=2, affinity='euclidean', linkage='ward')",
                    "The.fit_predictmethod can be called on our data to compute the clusters using the defined parameters across our chosen number of clusters.",
                    "labels = hierarchical_cluster.fit_predict(data)\nprint(labels)",
                    "Result:",
                    "[0 0 1 0 0 1 1 0 1 1]",
                    "Finally, if we plot the same data and color the points using the labels assigned to each index by the hierarchical clustering method, we can see the cluster each point was assigned to:",
                    "plt.scatter(x, y, c=labels)plt.show()",
                    "Result:",
                    ""
                ],
                "lists": [],
                "examples": [
                    "import numpy as npimport matplotlib.pyplot as pltx = [4, 5, 10, 4, \n  3, 11, 14 , 6, 10, 12]y = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]plt.scatter(x, y)plt.show()",
                    "import numpy as npimport matplotlib.pyplot as pltfrom \n  scipy.cluster.hierarchy import dendrogram, linkagex = [4, 5, 10, 4, 3, \n  11, 14 , 6, 10, 12]y = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]data = list(zip(x, y))linkage_data = linkage(data, method='ward', \n  metric='euclidean')dendrogram(linkage_data)plt.show()",
                    "import numpy as npimport matplotlib.pyplot as pltfrom sklearn.cluster \n  import AgglomerativeClusteringx = [4, 5, 10, 4, 3, 11, 14 , 6, 10, 12]y = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]data = list(zip(x, y))hierarchical_cluster = AgglomerativeClustering(n_clusters=2, affinity='euclidean', \n  linkage='ward')labels = hierarchical_cluster.fit_predict(data)plt.scatter(x, y, c=labels)plt.show()"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ml_logistic_regression.asp",
        "cours": {
            "titre": "Machine Learning - Logistic Regression",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ml_logistic_regression.asp",
            "contenus": {
                "paragraphs": [
                    "On this page, W3schools.com collaborates withNYC Data Science Academy, to deliver digital training content to our students.",
                    "Logistic regression aims to solve classification problems. It does this by predicting categorical outcomes, unlike linear regression that predicts a continuous outcome.",
                    "In the simplest case there are two outcomes, which is called binomial, an example of which is predicting if a tumor is malignant or benign. Other cases have more than two outcomes to classify, in this case it is called multinomial. A common example for multinomial logistic regression would be predicting the class of an iris flower between 3 different species.",
                    "Here we will be using basic logistic regression to predict a binomial variable. This means it has only two possible outcomes.",
                    "In Python we have modules that will do the work for us. Start by importing the NumPy module.",
                    "import numpy",
                    "Store the independent variables in X.",
                    "Store the dependent variable in y.",
                    "Below is a sample dataset:",
                    "#X represents the size of a tumor in centimeters.X = numpy.array([3.78, 2.44, 2.09, 0.14, 1.72, 1.65, 4.92, 4.37, 4.96, 4.52, 3.69, 5.88]).reshape(-1,1)#Note: X has to be reshaped into a column from a row for the LogisticRegression() function to work.#y represents whether or not the tumor is cancerous (0 for \"No\", 1 for \"Yes\").y = numpy.array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1])",
                    "We will use a method from the sklearn module, so we will have to import that module as well:",
                    "from sklearn import linear_model",
                    "From the sklearn module we will use the LogisticRegression() method to create a logistic regression object.",
                    "This object has a method calledfit()that takes the independent and dependent values as parameters and fills the regression object with data that describes the relationship:",
                    "logr = linear_model.LogisticRegression()logr.fit(X,y)",
                    "Now we have a logistic regression object that is ready to whether a tumor is cancerous based on the tumor size:",
                    "#predict if tumor is cancerous where the size is 3.46mm:predicted = logr.predict(numpy.array([3.46]).reshape(-1,1))",
                    "See the whole example in action:",
                    "We have predicted that a tumor with a size of 3.46mm will not be cancerous.",
                    "ADVERTISEMENT",
                    "In logistic regression the coefficient is the expected change in log-odds of having the outcome per unit change in X.",
                    "This does not have the most intuitive understanding so let's use it to create something that makes more sense, odds.",
                    "See the whole example in action:",
                    "This tells us that as the size of a tumor increases by 1mm the odds of it being a \ncancerous tumor increases by 4x.",
                    "The coefficient and intercept values can be used to find the probability that each tumor is cancerous.",
                    "Create a function that uses the model's coefficient and intercept values to return a new value. This new value represents probability that the given observation is a tumor:",
                    "def logit2prob(logr,x):log_odds = logr.coef_ * x + logr.intercept_odds = numpy.exp(log_odds)probability = odds / (1 + odds)return(probability)",
                    "To find the log-odds for each observation, we must first create a formula that looks similar to the one from linear regression, extracting the coefficient and the intercept.",
                    "log_odds = logr.coef_ * x + logr.intercept_",
                    "To then convert the log-odds to odds we must exponentiate the log-odds.",
                    "odds = numpy.exp(log_odds)",
                    "Now that we have the odds, we can convert it to probability by dividing it by 1 plus the odds.",
                    "probability = odds / (1 + odds)",
                    "Let us now use the function with what we have learned to find out the probability that each tumor is cancerous.",
                    "See the whole example in action:",
                    "[[0.60749955]\n   [0.19268876]\n   [0.12775886]\n   [0.00955221]\n   [0.08038616]\n   [0.07345637]\n   [0.88362743]\n   [0.77901378]\n   [0.88924409]\n   [0.81293497]\n   [0.57719129]\n   [0.96664243]]",
                    "3.78 0.61 The probability that a tumor with the size 3.78cm is cancerous is 61%.",
                    "2.44 0.19 The probability that a tumor with the size 2.44cm is cancerous is 19%.",
                    "2.09 0.13 The probability that a tumor with the size 2.09cm is cancerous is 13%."
                ],
                "lists": [],
                "examples": [
                    "import numpyfrom sklearn import linear_model#Reshaped for Logistic function.X = numpy.array([3.78, 2.44, 2.09, 0.14, 1.72, 1.65, 4.92, 4.37, 4.96, 4.52, 3.69, 5.88]).reshape(-1,1)y = numpy.array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1])logr = linear_model.LogisticRegression()logr.fit(X,y)#predict if tumor is cancerous where the size is 3.46mm:predicted = logr.predict(numpy.array([3.46]).reshape(-1,1))print(predicted)",
                    "import numpyfrom sklearn import linear_model#Reshaped for Logistic function.X = numpy.array([3.78, 2.44, 2.09, 0.14, 1.72, 1.65, 4.92, 4.37, 4.96, 4.52, 3.69, 5.88]).reshape(-1,1)y = numpy.array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1])logr = linear_model.LogisticRegression()logr.fit(X,y)log_odds = logr.coef_odds = numpy.exp(log_odds)print(odds)",
                    "import numpyfrom sklearn import linear_modelX = numpy.array([3.78, 2.44, 2.09, 0.14, 1.72, 1.65, 4.92, 4.37, 4.96, 4.52, 3.69, 5.88]).reshape(-1,1)y = numpy.array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1])logr = linear_model.LogisticRegression()logr.fit(X,y)def logit2prob(logr, X):log_odds = logr.coef_ * X + logr.intercept_odds = numpy.exp(log_odds)probability = odds / (1 + odds)return(probability)print(logit2prob(logr, X))"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ml_grid_search.asp",
        "cours": {
            "titre": "Machine Learning - Grid Search",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ml_grid_search.asp",
            "contenus": {
                "paragraphs": [
                    "On this page, W3schools.com collaborates withNYC Data Science Academy, to deliver digital training content to our students.",
                    "The majority of machine learning models contain parameters that can be adjusted to vary how the model learns.\nFor example, the logistic regression model, fromsklearn,\nhas a parameterCthat controls regularization,which affects the complexity of the model.",
                    "How do we pick the best value forC?\nThe best value is dependent on the data used to train the model.",
                    "One method is to try out different values and then pick the value that gives the best score. This technique is known as agrid search.\nIf we had to select the values for two or more parameters, we would evaluate all combinations of the sets of values thus forming a grid of values.",
                    "Before we get into the example it is good to know what the parameter we are changing does.\nHigher values ofCtell the model, the training data resembles real world information,\nplace a greater weight on the training data. While lower values ofCdo the opposite.",
                    "First let's see what kind of results we can generate without a grid search using only the base parameters.",
                    "To get started we must first load in the dataset we will be working with.",
                    "from sklearn import datasetsiris = datasets.load_iris()",
                    "Next in order to create the model we must have a set of independent variables X and a dependant variable y.",
                    "X = iris['data']y = iris['target']",
                    "Now we will load the logistic model for classifying the iris flowers.",
                    "from sklearn.linear_model import LogisticRegression",
                    "Creating the model, setting max_iter to a higher value to ensure that the model finds a result.",
                    "Keep in mind the default value forCin a logistic regression model is1, we will compare this later.",
                    "In the example below, we look at the iris data set and try to train a model with varying values forCin logistic regression.",
                    "logit = LogisticRegression(max_iter = 10000)",
                    "After we create the model, we must fit the model to the data.",
                    "print(logit.fit(X,y))",
                    "To evaluate the model we run the score method.",
                    "print(logit.score(X,y))",
                    "With the default setting ofC = 1, we achieved a score of0.973.",
                    "Let's see if we can do any better by implementing a grid search with difference values of 0.973.",
                    "ADVERTISEMENT",
                    "We will follow the same steps of before except this time we will set a range of values forC.",
                    "Knowing which values to set for the searched parameters will take a combination of domain knowledge and practice.",
                    "Since the default value forCis1, we will set a range of values surrounding it.",
                    "C = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2]",
                    "Next we will create a for loop to change out the values ofCand evaluate the model with each change.",
                    "First we will create an empty list to store the score within.",
                    "scores = []",
                    "To change the values ofCwe must loop over the range of values and update the parameter each time.",
                    "for choice in C:logit.set_params(C=choice)logit.fit(X, y)scores.append(logit.score(X, y))",
                    "With the scores stored in a list, we can evaluate what the best choice ofCis.",
                    "print(scores)",
                    "We can see that the lower values ofCperformed worse than the base parameter of1. However, as we increased the value ofCto1.75the model experienced increased accuracy.",
                    "It seems that increasingCbeyond this amount does not help increase model accuracy.",
                    "We scored our logistic regression model by using the same data that was used to train it. If the model corresponds too closely to that data, it may not be great at predicting unseen data. This statistical error is known asover fitting.",
                    "To avoid being misled by the scores on the training data, we can put aside a portion of our data and use it specifically for the purpose of testing the model. Refer to the lecture on train/test splitting to avoid being misled and overfitting."
                ],
                "lists": [],
                "examples": [
                    "from sklearn import datasetsfrom sklearn.linear_model import \n  LogisticRegressioniris = datasets.load_iris()X = iris['data']y = iris['target']logit = LogisticRegression(max_iter = 10000)print(logit.fit(X,y))print(logit.score(X,y))",
                    "from sklearn import datasetsfrom sklearn.linear_model import \n  LogisticRegressioniris = datasets.load_iris()X = iris['data']y = iris['target']logit = LogisticRegression(max_iter = 10000)C = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2]scores = []for choice in C:logit.set_params(C=choice)logit.fit(X, y)scores.append(logit.score(X, y))print(scores)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ml_preprocessing.asp",
        "cours": {
            "titre": "Preprocessing - Categorical Data",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ml_preprocessing.asp",
            "contenus": {
                "paragraphs": [
                    "On this page, W3schools.com collaborates withNYC Data Science Academy, to deliver digital training content to our students.",
                    "When your data has categories represented by strings, it will be difficult to use them to train machine learning models which often only accepts numeric data.",
                    "Instead of ignoring the categorical data and excluding the information from our model, you can tranform the data so it can be used in your models.",
                    "Take a look at the table below, it is the same data set that we used in themultiple regressionchapter.",
                    "Car       Model  Volume  Weight  CO2\n  0       Toyoty        Aygo    1000     790   99\n  1   Mitsubishi  Space Star    1200    1160   95\n  2        Skoda      Citigo    1000     929   95\n  3         Fiat         500     900     865   90\n  4         Mini      Cooper    1500    1140  105\n  5           VW         Up!    1000     929  105\n  6        Skoda       Fabia    1400    1109   90\n  7     Mercedes     A-Class    1500    1365   92\n  8         Ford      Fiesta    1500    1112   98\n  9         Audi          A1    1600    1150   99\n  10     Hyundai         I20    1100     980   99\n  11      Suzuki       Swift    1300     990  101\n  12        Ford      Fiesta    1000    1112   99\n  13       Honda       Civic    1600    1252   94\n  14      Hundai         I30    1600    1326   97\n  15        Opel       Astra    1600    1330   97\n  16         BMW           1    1600    1365   99\n  17       Mazda           3    2200    1280  104\n  18       Skoda       Rapid    1600    1119  104\n  19        Ford       Focus    2000    1328  105\n  20        Ford      Mondeo    1600    1584   94\n  21        Opel    Insignia    2000    1428   99\n  22    Mercedes     C-Class    2100    1365   99\n  23       Skoda     Octavia    1600    1415   99\n  24       Volvo         S60    2000    1415   99\n  25    Mercedes         CLA    1500    1465  102\n  26        Audi          A4    2000    1490  104\n  27        Audi          A6    2000    1725  114\n  28       Volvo         V70    1600    1523  109\n  29         BMW           5    2000    1705  114\n  30    Mercedes     E-Class    2100    1605  115\n  31       Volvo        XC70    2000    1746  117\n  32        Ford       B-Max    1600    1235  104\n  33         BMW         216    1600    1390  108\n  34        Opel      Zafira    1600    1405  109\n  35    Mercedes         SLK    2500    1395  120",
                    "In the multiple regression chapter, we tried to predict the CO2 emitted based on the volume of the engine and the weight of the car but we excluded information about the car brand and model.",
                    "The information about the car brand or the car model might help us make a better prediction of the CO2 emitted.",
                    "ADVERTISEMENT",
                    "We cannot make use of the Car or Model column in our data since they are not numeric. A linear relationship between a categorical variable, Car or Model, and a numeric variable, CO2, cannot be determined.",
                    "To fix this issue, we must have a numeric representation of the categorical variable. One way to do this is to have a column representing each group in the category.",
                    "For each column, the values will be 1 or 0 where 1 represents the inclusion of the group and 0 represents the exclusion. This transformation is called one hot encoding.",
                    "You do not have to do this manually, the Python Pandas module has a function that calledget_dummies()which does one hot encoding.",
                    "Learn about the Pandas module in ourPandas Tutorial.",
                    "One Hot Encode the Car column:",
                    "Car_Audi  Car_BMW  Car_Fiat  Car_Ford  Car_Honda  Car_Hundai  Car_Hyundai  Car_Mazda  Car_Mercedes  Car_Mini  Car_Mitsubishi  Car_Opel  Car_Skoda  Car_Suzuki  Car_Toyoty  Car_VW  Car_Volvo\n  0          0        0         0         0          0           0            0          0             0         0               0         0          0           0           1       0          0\n  1          0        0         0         0          0           0            0          0             0         0               1         0          0           0           0       0          0\n  2          0        0         0         0          0           0            0          0             0         0               0         0          1           0           0       0          0\n  3          0        0         1         0          0           0            0          0             0         0               0         0          0           0           0       0          0\n  4          0        0         0         0          0           0            0          0             0         1               0         0          0           0           0       0          0\n  5          0        0         0         0          0           0            0          0             0         0               0         0          0           0           0       1          0\n  6          0        0         0         0          0           0            0          0             0         0               0         0          1           0           0       0          0\n  7          0        0         0         0          0           0            0          0             1         0               0         0          0           0           0       0          0\n  8          0        0         0         1          0           0            0          0             0         0               0         0          0           0           0       0          0\n  9          1        0         0         0          0           0            0          0             0         0               0         0          0           0           0       0          0\n  10         0        0         0         0          0           0            1          0             0         0               0         0          0           0           0       0          0\n  11         0        0         0         0          0           0            0          0             0         0               0         0          0           1           0       0          0\n  12         0        0         0         1          0           0            0          0             0         0               0         0          0           0           0       0          0\n  13         0        0         0         0          1           0            0          0             0         0               0         0          0           0           0       0          0\n  14         0        0         0         0          0           1            0          0             0         0               0         0          0           0           0       0          0\n  15         0        0         0         0          0           0            0          0             0         0               0         1          0           0           0       0          0\n  16         0        1         0         0          0           0            0          0             0         0               0         0          0           0           0       0          0\n  17         0        0         0         0          0           0            0          1             0         0               0         0          0           0           0       0          0\n  18         0        0         0         0          0           0            0          0             0         0               0         0          1           0           0       0          0\n  19         0        0         0         1          0           0            0          0             0         0               0         0          0           0           0       0          0\n  20         0        0         0         1          0           0            0          0             0         0               0         0          0           0           0       0          0\n  21         0        0         0         0          0           0            0          0             0         0               0         1          0           0           0       0          0\n  22         0        0         0         0          0           0            0          0             1         0               0         0          0           0           0       0          0\n  23         0        0         0         0          0           0            0          0             0         0               0         0          1           0           0       0          0\n  24         0        0         0         0          0           0            0          0             0         0               0         0          0           0           0       0          1\n  25         0        0         0         0          0           0            0          0             1         0               0         0          0           0           0       0          0\n  26         1        0         0         0          0           0            0          0             0         0               0         0          0           0           0       0          0\n  27         1        0         0         0          0           0            0          0             0         0               0         0          0           0           0       0          0\n  28         0        0         0         0          0           0            0          0             0         0               0         0          0           0           0       0          1\n  29         0        1         0         0          0           0            0          0             0         0               0         0          0           0           0       0          0\n  30         0        0         0         0          0           0            0          0             1         0               0         0          0           0           0       0          0\n  31         0        0         0         0          0           0            0          0             0         0               0         0          0           0           0       0          1\n  32         0        0         0         1          0           0            0          0             0         0               0         0          0           0           0       0          0\n  33         0        1         0         0          0           0            0          0             0         0               0         0          0           0           0       0          0\n  34         0        0         0         0          0           0            0          0             0         0               0         1          0           0           0       0          0\n  35         0        0         0         0          0           0            0          0             1         0               0         0          0           0           0       0          0",
                    "A column was created for every car brand in the Car column.",
                    "We can use this additional information alongside the volume and weight to predict CO2",
                    "To combine the information, we can use theconcat()function from pandas.",
                    "First we will need to import a couple modules.",
                    "We will start with importing the Pandas.",
                    "import pandas",
                    "The pandas module allows us to read csv files and manipulate DataFrame objects:",
                    "cars = pandas.read_csv(\"data.csv\")",
                    "It also allows us to create the dummy variables:",
                    "ohe_cars = pandas.get_dummies(cars[['Car']])",
                    "Then we must select the independent variables (X) and add the dummy variables columnwise.",
                    "Also store the dependent variable in y.",
                    "X = pandas.concat([cars[['Volume', 'Weight']], ohe_cars], axis=1)y = cars['CO2']",
                    "We also need to import a method from sklearn to create a linear model",
                    "Learn aboutlinear regression.",
                    "from sklearn import linear_model",
                    "Now we can fit the data to a linear regression:",
                    "regr = linear_model.LinearRegression()regr.fit(X,y)",
                    "Finally we can predict the CO2 emissions based on the car's weight, volume, and manufacturer.",
                    "##predict the CO2 emission of a Volvo where the weight is 2300kg, and the volume is 1300cm3:predictedCO2 = regr.predict([[2300, 1300,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0]])",
                    "[122.45153299]",
                    "We now have a coefficient for the volume, the weight, and each car brand in the data set",
                    "It is not necessary to create one column for each group in your category. The information can be retained using 1 column less than the number of groups you have.",
                    "For example, you have a column representing colors and in that column, you have two colors, red and blue.",
                    "color\n  0  blue\n  1   red",
                    "You can create 1 column called red where 1 represents red and 0 represents not red, which means it is blue.",
                    "To do this, we can use the same function that we used for one hot encoding, get_dummies, and then drop one of the columns. There is an argument, drop_first, which allows us to exclude the first column from the resulting table.",
                    "color_red\n  0          0\n  1          1",
                    "What if you have more than 2 groups? How can the multiple groups be represented by 1 less column?",
                    "Let's say we have three colors this time, red, blue and green. When we get_dummies while dropping the first column, we get the following table.",
                    "color_green  color_red  color\n  0            0          0   blue\n  1            0          1    red\n  2            1          0  green"
                ],
                "lists": [],
                "examples": [
                    "import pandas as pdcars = pd.read_csv('data.csv')print(cars.to_string())",
                    "import pandas as pdcars = pd.read_csv('data.csv')ohe_cars = \n  pd.get_dummies(cars[['Car']])print(ohe_cars.to_string())",
                    "import pandasfrom sklearn import linear_modelcars = pandas.read_csv(\"data.csv\")ohe_cars = pandas.get_dummies(cars[['Car']])X = pandas.concat([cars[['Volume', 'Weight']], ohe_cars], axis=1)y = cars['CO2']regr = linear_model.LinearRegression()regr.fit(X,y)##predict the CO2 emission of a Volvo where the weight is 2300kg, and the volume is 1300cm3:predictedCO2 = regr.predict([[2300, 1300,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0]])print(predictedCO2)",
                    "import pandas as pdcolors = pd.DataFrame({'color': ['blue', 'red']})print(colors)",
                    "import pandas as pdcolors = pd.DataFrame({'color': ['blue', 'red']})dummies = pd.get_dummies(colors, drop_first=True)print(dummies)",
                    "import pandas as pdcolors = pd.DataFrame({'color': ['blue', 'red', \n  'green']})dummies = pd.get_dummies(colors, drop_first=True)dummies['color'] = colors['color']print(dummies)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ml_k-means.asp",
        "cours": {
            "titre": "Machine Learning - K-means",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ml_k-means.asp",
            "contenus": {
                "paragraphs": [
                    "On this page, W3schools.com collaborates withNYC Data Science Academy, to deliver digital training content to our students.",
                    "K-means is an unsupervised learning method for clustering data points. The algorithm iteratively divides data points into K clusters by minimizing the variance in each cluster.",
                    "Here, we will show you how to estimate the best value for K using the elbow method, then use K-means clustering to group the data points into clusters.",
                    "First, each data point is randomly assigned to one of the K clusters. Then, we compute the centroid (functionally the center) of each cluster, and reassign each data point to the cluster with the closest centroid. We repeat this process until the cluster assignments for each data point are no longer changing.",
                    "K-means clustering requires us to select K, the number of clusters we want to group the data into. The elbow method lets us graph the inertia (a distance-based metric) and visualize the point at which it starts decreasing linearly. This point is referred to as the \"elbow\" and is a good estimate for the best value for K based on our data.",
                    "Start by visualizing some data points:",
                    "",
                    "ADVERTISEMENT",
                    "Now we utilize the elbow method to visualize the intertia for different values of K:",
                    "",
                    "The elbow method shows that 2 is a good value for K, so we retrain and visualize the result:",
                    "",
                    "Import the modules you need.",
                    "import matplotlib.pyplot as pltfrom sklearn.cluster import KMeans",
                    "You can learn about the Matplotlib module in our\"Matplotlib Tutorial.",
                    "scikit-learn is a popular library for machine learning.",
                    "Create arrays that resemble two variables in a dataset. Note that while we only use two variables here, this method will work with any number of variables:",
                    "x = [4, 5, 10, 4, 3, 11, 14 , 6, 10, 12]y = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]",
                    "Turn the data into a set of points:",
                    "data = list(zip(x, y))print(data)",
                    "Result:",
                    "[(4, 21), (5, 19), (10, 24), (4, 17), (3, 16), (11, 25), (14, 24), (6, 22), (10, 21), (12, 21)]",
                    "In order to find the best value for K, we need to run K-means across our data for a range of possible values. We only have 10 data points, so the maximum number of clusters is 10. So for each value K in range(1,11), we train a K-means model and plot the intertia at that number of clusters:",
                    "inertias = []for i in range(1,11):kmeans = KMeans(n_clusters=i)kmeans.fit(data)inertias.append(kmeans.inertia_)plt.plot(range(1,11), inertias, marker='o')plt.title('Elbow method')plt.xlabel('Number of clusters')plt.ylabel('Inertia')plt.show()",
                    "Result:",
                    "",
                    "We can see that the \"elbow\" on the graph above (where the interia becomes more linear) is at K=2. We can then fit our K-means algorithm one more time and plot the different clusters assigned to the data:",
                    "kmeans = KMeans(n_clusters=2)kmeans.fit(data)plt.scatter(x, y, c=kmeans.labels_)plt.show()",
                    "Result:",
                    ""
                ],
                "lists": [],
                "examples": [
                    "import matplotlib.pyplot as pltx = [4, 5, 10, 4, \n  3, 11, 14 , 6, 10, 12]y = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]plt.scatter(x, y)plt.show()",
                    "from sklearn.cluster import KMeansdata = list(zip(x, y))inertias = []for i in range(1,11):kmeans = KMeans(n_clusters=i)kmeans.fit(data)inertias.append(kmeans.inertia_)plt.plot(range(1,11), inertias, marker='o')plt.title('Elbow method')plt.xlabel('Number of clusters')plt.ylabel('Inertia')plt.show()",
                    "kmeans = KMeans(n_clusters=2)kmeans.fit(data)plt.scatter(x, y, c=kmeans.labels_)plt.show()"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ml_bagging.asp",
        "cours": {
            "titre": "Machine Learning - Bootstrap Aggregation (Bagging)",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ml_bagging.asp",
            "contenus": {
                "paragraphs": [
                    "On this page, W3schools.com collaborates withNYC Data Science Academy, to deliver digital training content to our students.",
                    "Methods such as Decision Trees, can be prone to overfitting on the training set which can lead to wrong predictions on new data.",
                    "Bootstrap Aggregation (bagging) is a ensembling method that attempts to resolve overfitting for classification or regression problems. Bagging aims to improve the accuracy and performance of machine learning algorithms. It does this by taking random subsets of an original dataset, with replacement, and fits either a classifier (for classification) or regressor (for regression) to each subset. The predictions for each subset are then aggregated through majority vote for classification or averaging for regression, increasing prediction accuracy.",
                    "To see how bagging can improve model performance, we must start by evaluating how the base classifier performs on the dataset. If you do not know what decision trees are review the lesson on decision trees before moving forward, as bagging is a continuation of the concept.",
                    "We will be looking to identify different classes of wines found in Sklearn's wine dataset.",
                    "from sklearn import datasetsfrom sklearn.model_selection import train_test_splitfrom sklearn.metrics import accuracy_scorefrom sklearn.tree import DecisionTreeClassifier",
                    "Next we need to load in the data and store it into X (input features) and y (target). The parameter as_frame is set equal to True so we do not lose the feature names when loading the data. \n(sklearnversion older than 0.23 must skip theas_frameargument as it is not supported)",
                    "data = datasets.load_wine(as_frame = True)X = data.datay = data.target",
                    "In order to properly evaluate our model on unseen data, we need to split X and y into train and test sets. For information on splitting data, see the Train/Test lesson.",
                    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 22)",
                    "With our data prepared, we can now instantiate a base classifier and fit it to the training data.",
                    "dtree = DecisionTreeClassifier(random_state = 22)dtree.fit(X_train,y_train)",
                    "Result:",
                    "DecisionTreeClassifier(random_state=22)",
                    "We can now predict the class of wine the unseen test set and evaluate the model performance.",
                    "y_pred = dtree.predict(X_test)print(\"Train data accuracy:\",accuracy_score(y_true = y_train, y_pred = dtree.predict(X_train)))print(\"Test data accuracy:\",accuracy_score(y_true = y_test, y_pred = y_pred))",
                    "Result:",
                    "Train data accuracy: 1.0Test data accuracy: 0.8222222222222222",
                    "Import the necessary data and evaluate base classifier performance.",
                    "The base classifier performs reasonably well on the dataset achieving 82% accuracy on the test dataset with the current parameters (Different results may occur if you do not have therandom_stateparameter set).",
                    "Now that we have a baseline accuracy for the test dataset, we can see how the Bagging Classifier out performs a single Decision Tree Classifier.",
                    "ADVERTISEMENT",
                    "For bagging we need to set the parameter n_estimators, this is the number of base classifiers that our model is going to aggregate together.",
                    "For this sample dataset the number of estimators is relatively low, it is often the case that much larger ranges are explored. Hyperparameter tuning is usually done with agrid search, but for now we will use a select set of values for the number of estimators.",
                    "We start by importing the necessary model.",
                    "from sklearn.ensemble import BaggingClassifier",
                    "Now lets create a range of values that represent the number of estimators we want to use in each ensemble.",
                    "estimator_range = [2,4,6,8,10,12,14,16]",
                    "To see how the Bagging Classifier performs with differing values of n_estimators we need a way to iterate over the range of values and store the results from each ensemble. To do this we will create a for loop, storing the models and scores in separate lists for later vizualizations.",
                    "Note: The default parameter for the base classifier inBaggingClassifieris theDicisionTreeClassifiertherefore we do not need to set it when instantiating the bagging model.",
                    "models = []scores = []for n_estimators in estimator_range:# Create bagging classifierclf = BaggingClassifier(n_estimators = n_estimators, random_state = 22)# Fit the modelclf.fit(X_train, y_train)# Append the model and score to their respective listmodels.append(clf)scores.append(accuracy_score(y_true = y_test, y_pred = clf.predict(X_test)))",
                    "With the models and scores stored, we can now visualize the improvement in model performance.",
                    "import matplotlib.pyplot as plt# Generate the plot of scores against number of estimatorsplt.figure(figsize=(9,6))plt.plot(estimator_range, scores)# Adjust labels and font (to make visable)plt.xlabel(\"n_estimators\", fontsize = 18)plt.ylabel(\"score\", fontsize = 18)plt.tick_params(labelsize = 16)# Visualize plotplt.show()",
                    "",
                    "Import the necessary data and evaluate theBaggingClassifierperformance.",
                    "",
                    "By iterating through different values for the number of estimators we can see an increase in model performance from 82.2% to 95.5%. After 14 estimators the accuracy begins to drop, again if you set a differentrandom_statethe values you see will vary.\nThat is why it is best practice to usecross validationto ensure stable results.",
                    "In this case, we see a 13.3% increase in accuracy when it comes to identifying the type of the wine.",
                    "As bootstrapping chooses random subsets of observations to create classifiers, there are observations that are left out in the selection process. These \"out-of-bag\" observations can then be used to evaluate the model, similarly to that of a test set. Keep in mind, that out-of-bag estimation can overestimate error in binary classification problems and should only be used as a compliment to other metrics.",
                    "We saw in the last exercise that 12 estimators yielded the highest accuracy, so we will use that to create our model. This time setting the parameteroob_scoreto true to evaluate the model with out-of-bag score.",
                    "Create a model with out-of-bag metric.",
                    "Since the samples used in OOB and the test set are different, and the dataset is relatively small, there is a difference in the accuracy. It is rare that they would be exactly the same, again OOB should be used quick means for estimating error, but is not the only evaluation metric.",
                    "As was seen in theDecision Treelesson, it is possible to graph the decision tree the model created. It is also possible to see the individual decision trees that went into the aggregated classifier. This helps us to gain a more intuitive understanding on how the bagging model arrives at its predictions.",
                    "Note: This is only functional with smaller datasets, where the trees are relatively shallow and narrow making them easy to visualize.",
                    "We will need to importplot_treefunction fromsklearn.tree. The different trees can be graphed by changing the estimator you wish to visualize.",
                    "Generate Decision Trees from Bagging Classifier",
                    "",
                    "Here we can see just the first decision tree that was used to vote on the final prediction. Again, by changing the index of the classifier you can see each of the trees that have been aggregated."
                ],
                "lists": [],
                "examples": [
                    "from sklearn import datasetsfrom sklearn.model_selection import train_test_splitfrom sklearn.metrics import accuracy_scorefrom sklearn.tree import DecisionTreeClassifierdata = datasets.load_wine(as_frame = True)X = data.datay = data.targetX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 22)dtree = DecisionTreeClassifier(random_state = 22)dtree.fit(X_train,y_train)y_pred = dtree.predict(X_test)print(\"Train data accuracy:\",accuracy_score(y_true = y_train, y_pred = dtree.predict(X_train)))print(\"Test data accuracy:\",accuracy_score(y_true = y_test, y_pred = y_pred))",
                    "import matplotlib.pyplot as pltfrom sklearn import datasetsfrom sklearn.model_selection import train_test_splitfrom sklearn.metrics import accuracy_scorefrom sklearn.ensemble import BaggingClassifierdata = datasets.load_wine(as_frame = True)X = data.datay = data.targetX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 22)estimator_range = [2,4,6,8,10,12,14,16]models = []scores = []for n_estimators in estimator_range:# Create bagging classifierclf = BaggingClassifier(n_estimators = n_estimators, random_state = 22)# Fit the modelclf.fit(X_train, y_train)# Append the model and score to their respective listmodels.append(clf)scores.append(accuracy_score(y_true = y_test, y_pred = clf.predict(X_test)))# Generate the plot of scores against number of estimatorsplt.figure(figsize=(9,6))plt.plot(estimator_range, scores)# Adjust labels and font (to make visable)plt.xlabel(\"n_estimators\", fontsize = 18)plt.ylabel(\"score\", fontsize = 18)plt.tick_params(labelsize = 16)# Visualize plotplt.show()",
                    "from sklearn import datasetsfrom sklearn.model_selection import train_test_splitfrom sklearn.ensemble import BaggingClassifierdata = datasets.load_wine(as_frame = True)X = data.datay = data.targetX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 22)oob_model = BaggingClassifier(n_estimators = 12, oob_score = True,random_state = 22)oob_model.fit(X_train, y_train)print(oob_model.oob_score_)",
                    "from sklearn import datasetsfrom sklearn.model_selection import train_test_splitfrom sklearn.ensemble import BaggingClassifierfrom sklearn.tree import plot_treeX = data.datay = data.targetX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 22)clf = BaggingClassifier(n_estimators = 12, oob_score = True,random_state = 22)clf.fit(X_train, y_train)plt.figure(figsize=(30, 20))plot_tree(clf.estimators_[0], feature_names = X.columns)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ml_cross_validation.asp",
        "cours": {
            "titre": "Machine Learning - Cross Validation",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ml_cross_validation.asp",
            "contenus": {
                "paragraphs": [
                    "On this page, W3schools.com collaborates withNYC Data Science Academy, to deliver digital training content to our students.",
                    "When adjusting models we are aiming to increase overall model performance on unseen data. Hyperparameter tuning can lead to much better performance on test sets. However, optimizing parameters to the test set can lead information leakage causing the model to preform worse on unseen data. To correct for this we can perform cross validation.",
                    "To better understand CV, we will be performing different methods on the iris dataset. Let us first load in and separate the data.",
                    "from sklearn import datasetsX, y = datasets.load_iris(return_X_y=True)",
                    "There are many methods to cross validation, we will start by looking at k-fold cross validation.",
                    "The training data used in the model is split, into k number of smaller sets, to be used to validate the model. The model is then trained on k-1 folds of training set. The remaining fold is then used as a validation set to evaluate the model.",
                    "As we will be trying to classify different species of iris flowers we will need to import a classifier model, for this exercise we will be using aDecisionTreeClassifier. We will also need to import CV modules fromsklearn.",
                    "from sklearn.tree import DecisionTreeClassifierfrom sklearn.model_selection import KFold, cross_val_score",
                    "With the data loaded we can now create and fit a model for evaluation.",
                    "clf = DecisionTreeClassifier(random_state=42)",
                    "Now let's evaluate our model and see how it performs on eachk-fold.",
                    "k_folds = KFold(n_splits = 5)scores = cross_val_score(clf, X, y, cv = k_folds)",
                    "It is also good pratice to see how CV performed overall by averaging the scores for all folds.",
                    "Run k-fold CV:",
                    "ADVERTISEMENT",
                    "In cases where classes are imbalanced we need a way to account for the imbalance in both the train and validation sets. To do so we can stratify the target classes, meaning that both sets will have an equal proportion of all classes.",
                    "While the number of folds is the same, the average CV increases from the basic k-fold when making sure there is stratified classes.",
                    "Instead of selecting the number of splits in the training data set like k-fold LeaveOneOut, utilize 1 observation to validate and n-1 observations to train. This method is an exaustive technique.",
                    "Run LOO CV:",
                    "We can observe that the number of cross validation scores performed is equal to the number of observations in the dataset. In this case there are 150 observations in the iris dataset.",
                    "The average CV score is 94%.",
                    "Leave-P-Out is simply a nuanced diffence to the Leave-One-Out idea, in that we can select the number of p to use in our validation set.",
                    "Run LPO CV:",
                    "As we can see this is an exhaustive method we many more scores being calculated than Leave-One-Out, even with a p = 2, yet it achieves roughly the same average CV score.",
                    "UnlikeKFold,ShuffleSplitleaves out a percentage of the data, not to be used in the train or validation sets. To do so we must decide what the train and test sizes are, as well as the number of splits.",
                    "Run Shuffle Split CV:",
                    "These are just a few of the CV methods that can be applied to models. There are many more cross validation classes, with most models having their own class. Check out sklearns cross validation for more CV options."
                ],
                "lists": [],
                "examples": [
                    "from sklearn import datasetsfrom sklearn.tree import DecisionTreeClassifierfrom sklearn.model_selection import KFold, cross_val_scoreX, y = datasets.load_iris(return_X_y=True)clf = DecisionTreeClassifier(random_state=42)k_folds = KFold(n_splits = 5)scores = cross_val_score(clf, X, y, cv = k_folds)print(\"Cross Validation Scores: \", scores)print(\"Average CV Score: \", scores.mean())print(\"Number of CV Scores used in Average: \", len(scores))",
                    "from sklearn import datasetsfrom sklearn.tree import DecisionTreeClassifierfrom sklearn.model_selection import StratifiedKFold, cross_val_scoreX, y = datasets.load_iris(return_X_y=True)clf = DecisionTreeClassifier(random_state=42)sk_folds = StratifiedKFold(n_splits = 5)scores = cross_val_score(clf, X, y, cv = sk_folds)print(\"Cross Validation Scores: \", scores)print(\"Average CV Score: \", scores.mean())print(\"Number of CV Scores used in Average: \", len(scores))",
                    "from sklearn import datasetsfrom sklearn.tree import DecisionTreeClassifierfrom sklearn.model_selection import LeaveOneOut, cross_val_scoreX, y = datasets.load_iris(return_X_y=True)clf = DecisionTreeClassifier(random_state=42)loo = LeaveOneOut()scores = cross_val_score(clf, X, y, cv = loo)print(\"Cross Validation Scores: \", scores)print(\"Average CV Score: \", scores.mean())print(\"Number of CV Scores used in Average: \", len(scores))",
                    "from sklearn import datasetsfrom sklearn.tree import DecisionTreeClassifierfrom sklearn.model_selection import LeavePOut, cross_val_scoreX, y = datasets.load_iris(return_X_y=True)clf = DecisionTreeClassifier(random_state=42)lpo = LeavePOut(p=2)scores = cross_val_score(clf, X, y, cv = lpo)print(\"Cross Validation Scores: \", scores)print(\"Average CV Score: \", scores.mean())print(\"Number of CV Scores used in Average: \", len(scores))",
                    "from sklearn import datasetsfrom sklearn.tree import DecisionTreeClassifierfrom sklearn.model_selection import ShuffleSplit, cross_val_scoreX, y = datasets.load_iris(return_X_y=True)clf = DecisionTreeClassifier(random_state=42)ss = ShuffleSplit(train_size=0.6, test_size=0.3, n_splits = 5)scores = cross_val_score(clf, X, y, cv = ss)print(\"Cross Validation Scores: \", scores)print(\"Average CV Score: \", scores.mean())print(\"Number of CV Scores used in Average: \", len(scores))"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ml_auc_roc.asp",
        "cours": {
            "titre": "Machine Learning - AUC - ROC Curve",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ml_auc_roc.asp",
            "contenus": {
                "paragraphs": [
                    "On this page, W3schools.com collaborates withNYC Data Science Academy, to deliver digital training content to our students.",
                    "In classification, there are many different evaluation metrics. The most popular isaccuracy, which measures how often the model is correct. This is a great metric because it is easy to understand and getting the most correct guesses is often desired. There are some cases where you might consider using another evaluation metric.",
                    "Another common metric isAUC, area under the receiver operating characteristic (ROC) curve.\nThe Reciever operating characteristic curve plots the true positive (TP) rate versus the false positive (FP) rate at different classification thresholds. The thresholds are different probability cutoffs that separate the two classes in binary classification. It uses probability to tell us how well a model separates the classes.",
                    "Suppose we have an imbalanced data set where the majority of our data is of one value. We can obtain high accuracy for the model by predicting the majority class.",
                    "ADVERTISEMENT",
                    "Although we obtain a very high accuracy, the model provided no information about the data so it's not useful. We accurately predict class 1 100% of the time while inaccurately predict class 0 0% of the time. At the expense of accuracy, it might be better to have a model that can somewhat separate the two classes.",
                    "For the second set of predictions, we do not have as high of an accuracy score as the first but the accuracy for each class is more balanced. Using accuracy as an evaluation metric we would rate the first model higher than the second even though it doesn't tell us anything about the data.",
                    "In cases like this, using another evaluation metric like AUC would be preferred.",
                    "import matplotlib.pyplot as pltdef plot_roc_curve(true_y, y_prob):\"\"\"plots the roc curve based of the probabilities\"\"\"fpr, tpr, thresholds = roc_curve(true_y, y_prob)plt.plot(fpr, tpr)plt.xlabel('False Positive Rate')plt.ylabel('True Positive Rate')",
                    "Model 1:",
                    "model 1 AUC score: 0.5",
                    "Model 2:",
                    "model 2 AUC score: 0.8270551578947367",
                    "An AUC score of around .5 would mean that the model is unable to make a distinction between the two classes and the curve would look like a line with a slope of 1. An AUC score closer to 1 means that the model has the ability to separate the two classes and the curve would come closer to the top left corner of the graph.",
                    "Because AUC is a metric that utilizes probabilities of the class predictions, we can be more confident in a model that has a higher AUC score than one with a lower score even if they have similar accuracies.",
                    "In the data below, we have two sets of probabilites from hypothetical models. The first has probabilities that are not as \"confident\" when predicting the two classes (the probabilities are close to .5). The second has probabilities that are more \"confident\" when predicting the two classes (the probabilities are close to the extremes of 0 or 1).",
                    "Plot model 1:",
                    "",
                    "Plot model 2:",
                    "",
                    "Even though the accuracies for the two models are similar, the model with the higher AUC score will be more reliable because it takes into account the predicted probability. It is more likely to give you higher accuracy when predicting future data."
                ],
                "lists": [],
                "examples": [
                    "import numpy as npfrom sklearn.metrics import accuracy_score, confusion_matrix, roc_auc_score, roc_curven = 10000ratio = .95n_0 = int((1-ratio) * n)n_1 = int(ratio * n)y = np.array([0] * n_0 + [1] * n_1)# below are the probabilities obtained from a hypothetical model that always predicts the majority class# probability of predicting class 1 is going to be 100%y_proba = np.array([1]*n)y_pred = y_proba > .5print(f'accuracy score: {accuracy_score(y, y_pred)}')cf_mat = confusion_matrix(y, y_pred)print('Confusion matrix')print(cf_mat)print(f'class 0 accuracy: {cf_mat[0][0]/n_0}')print(f'class 1 accuracy: {cf_mat[1][1]/n_1}')",
                    "# below are the probabilities obtained from a hypothetical model that doesn't always predict the modey_proba_2 = np.array(np.random.uniform(0, .7, n_0).tolist() +np.random.uniform(.3, 1,  n_1).tolist())y_pred_2 = y_proba_2 > .5print(f'accuracy score: {accuracy_score(y, y_pred_2)}')cf_mat = confusion_matrix(y, y_pred_2)print('Confusion matrix')print(cf_mat)print(f'class 0 accuracy: {cf_mat[0][0]/n_0}')print(f'class 1 accuracy: {cf_mat[1][1]/n_1}')",
                    "plot_roc_curve(y, y_proba)print(f'model 1 AUC score: {roc_auc_score(y, y_proba)}')",
                    "plot_roc_curve(y, y_proba_2)print(f'model 2 AUC score: {roc_auc_score(y, y_proba_2)}')",
                    "import numpy as npn = 10000y = np.array([0] * n + [1] * n)#y_prob_1 = np.array(np.random.uniform(.25, .5, n//2).tolist() +np.random.uniform(.3, .7, n).tolist() +np.random.uniform(.5, .75, n//2).tolist())y_prob_2 = np.array(np.random.uniform(0, .4, n//2).tolist() +np.random.uniform(.3, .7, n).tolist() +np.random.uniform(.6, 1, n//2).tolist())print(f'model 1 accuracy score: {accuracy_score(y, y_prob_1>.5)}')print(f'model 2 accuracy score: {accuracy_score(y, y_prob_2>.5)}')print(f'model 1 AUC score: {roc_auc_score(y, y_prob_1)}')print(f'model 2 AUC score: {roc_auc_score(y, y_prob_2)}')",
                    "plot_roc_curve(y, y_prob_1)",
                    "fpr, tpr, thresholds = roc_curve(y, y_prob_2)plt.plot(fpr, tpr)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ml_knn.asp",
        "cours": {
            "titre": "Machine Learning - K-nearest neighbors (KNN)",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ml_knn.asp",
            "contenus": {
                "paragraphs": [
                    "On this page, W3schools.com collaborates withNYC Data Science Academy, to deliver digital training content to our students.",
                    "KNN is a simple, supervised machine learning (ML) algorithm that can be used for classification or regression tasks - and is also frequently used in missing value imputation. It is based on the idea that the observations closest to a given data point are the most \"similar\" observations in a data set, and we can therefore classify unforeseen points based on the values of the closest existing points. By choosingK, the user can select the number of nearby observations to use in the algorithm.",
                    "Here, we will show you how to implement the KNN algorithm for classification, and show how different values ofKaffect the results.",
                    "Kis the number of nearest neighbors to use. \nFor classification, a majority vote is used to determined which class a new observation should fall into. \nLarger values ofKare often more robust to outliers and produce more stable decision boundaries than\nvery small values (K=3would be better thanK=1, which might produce undesirable results.",
                    "Start by visualizing some data points:",
                    "",
                    "ADVERTISEMENT",
                    "Now we fit the KNN algorithm with K=1:",
                    "from sklearn.neighbors import KNeighborsClassifierdata = list(zip(x, y))knn = KNeighborsClassifier(n_neighbors=1)knn.fit(data, classes)",
                    "And use it to classify a new data point:",
                    "",
                    "Now we do the same thing, but with a higher K value which changes the prediction:",
                    "",
                    "Import the modules you need.",
                    "You can learn about the Matplotlib module in our\"Matplotlib Tutorial.",
                    "scikit-learn is a popular library for machine learning in Python.",
                    "import matplotlib.pyplot as pltfrom sklearn.neighbors import KNeighborsClassifier",
                    "Create arrays that resemble variables in a dataset. \nWe have two input features (xandy) and then a target class (class). The input features that are pre-labeled with our target class will be used to predict the class of new data. Note that while we only use two input features here, this method will work with any number of variables:",
                    "x = [4, 5, 10, 4, 3, 11, 14 , 8, 10, 12]y = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]classes = [0, 0, 1, 0, 0, 1, 1, 0, 1, 1]",
                    "Turn the input features into a set of points:",
                    "data = list(zip(x, y))print(data)",
                    "[(4, 21), (5, 19), (10, 24), (4, 17), (3, 16), (11, 25), (14, 24), (8, 22), (10, 21), (12, 21)]",
                    "Using the input features and target class, we fit a KNN model on the model using 1 nearest neighbor:",
                    "knn = KNeighborsClassifier(n_neighbors=1)knn.fit(data, classes)",
                    "Then, we can use the same KNN object to predict the class of new, \nunforeseen data points. First we create new x and y features, and then callknn.predict()on the new data point to get a class of 0 or 1:",
                    "new_x = 8new_y = 21new_point = [(new_x, new_y)]prediction = knn.predict(new_point)print(prediction)",
                    "[0]",
                    "When we plot all the data along with the new point and class, we can see it's been labeled blue with the1class. The text annotation is just to highlight the location of the new point:",
                    "plt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[0]])plt.text(x=new_x-1.7, y=new_y-0.7, s=f\"new point, class: {prediction[0]}\")plt.show()",
                    "",
                    "However, when we changes the number of neighbors to 5, the number of points used to classify our new point changes. As a result, so does the classification of the new point:",
                    "knn = KNeighborsClassifier(n_neighbors=5)knn.fit(data, classes)prediction = knn.predict(new_point)print(prediction)",
                    "[1]",
                    "When we plot the class of the new point along with the older points, we note that the color has changed based on the associated class label:",
                    "plt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[0]])plt.text(x=new_x-1.7, y=new_y-0.7, s=f\"new point, class: {prediction[0]}\")plt.show()",
                    ""
                ],
                "lists": [],
                "examples": [
                    "import matplotlib.pyplot as pltx = [4, 5, 10, 4, 3, 11, 14 , 8, 10, 12]y = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]classes = [0, 0, 1, 0, 0, 1, 1, 0, 1, 1]plt.scatter(x, y, c=classes)plt.show()",
                    "new_x = 8new_y = 21new_point = [(new_x, new_y)]prediction = knn.predict(new_point)plt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[0]])plt.text(x=new_x-1.7, y=new_y-0.7, s=f\"new point, class: {prediction[0]}\")plt.show()",
                    "knn = KNeighborsClassifier(n_neighbors=5)knn.fit(data, classes)prediction = knn.predict(new_point)plt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[0]])plt.text(x=new_x-1.7, y=new_y-0.7, s=f\"new point, class: {prediction[0]}\")plt.show()"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_mysql_getstarted.asp",
        "cours": {
            "titre": "PythonMySQL",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_mysql_getstarted.asp",
            "contenus": {
                "paragraphs": [
                    "Python can be used in database applications.",
                    "One of the most popular databases is MySQL.",
                    "To be able to experiment with the code examples in this tutorial, you should \nhave MySQL installed on your computer.",
                    "You can download a MySQL database athttps://www.mysql.com/downloads/.",
                    "Python needs a MySQL driver to access the MySQL database.",
                    "In this tutorial we will use the driver \"MySQL Connector\".",
                    "We recommend that you use PIP to install \"MySQL Connector\".",
                    "PIP is most likely already installed in your Python environment.",
                    "Navigate your command line to the location of PIP, and type the following:",
                    "Download and install \"MySQL Connector\":",
                    "Now you have downloaded and installed a MySQL driver.",
                    "To test if the installation was successful, or if you already have \"MySQL \nConnector\" \ninstalled, create a Python page with \nthe following content:",
                    "demo_mysql_test.py:",
                    "If the above code was executed with no errors, \"MySQL Connector\" is installed and \nready to be used.",
                    "Start by creating a connection to the database.",
                    "Use the username and password from your MySQL database:",
                    "demo_mysql_connection.py:",
                    "Now you can start querying the database using SQL statements."
                ],
                "lists": [],
                "examples": [
                    "C:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>python -m pip install \n  mysql-connector-python",
                    "import mysql.connector",
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\")print(mydb)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_mysql_create_db.asp",
        "cours": {
            "titre": "Python MySQLCreate Database",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_mysql_create_db.asp",
            "contenus": {
                "paragraphs": [
                    "To create a database in MySQL, use the \"CREATE DATABASE\" statement:",
                    "create a database named \"mydatabase\":",
                    "If the above code was executed with no errors, you have successfully \ncreated a database.",
                    "You can check if a database exist by listing all databases in your system by \nusing the \"SHOW DATABASES\" statement:",
                    "Return a list of your system's databases:",
                    "Or you can try to access the database when making the connection:",
                    "Try connecting to the database \"mydatabase\":",
                    "If the database does not exist, you will get an error."
                ],
                "lists": [],
                "examples": [
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\")mycursor = mydb.cursor()mycursor.execute(\"CREATE DATABASE \n  mydatabase\")",
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\")mycursor = mydb.cursor()mycursor.execute(\"SHOW DATABASES\")for x in mycursor:print(x)",
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\",database=\"mydatabase\")"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_mysql_create_table.asp",
        "cours": {
            "titre": "Python MySQLCreate Table",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_mysql_create_table.asp",
            "contenus": {
                "paragraphs": [
                    "To create a table in MySQL, use the \"CREATE TABLE\" statement.",
                    "Make sure you define the name of the database when you create the connection",
                    "Create a table named \"customers\":",
                    "If the above code was executed with no errors, you have now successfully \ncreated a table.",
                    "You can check if a table exist by listing all tables in your database with the \"SHOW TABLES\" statement:",
                    "Return a list of your system's databases:",
                    "When creating a table, you should also create a column with a unique key for each \nrecord.",
                    "This can be done by defining a PRIMARY KEY.",
                    "We use the statement \"INT AUTO_INCREMENT PRIMARY KEY\" which will insert a \nunique number for each record. Starting at 1, and increased by one for each \nrecord.",
                    "Create primary key when creating the table:",
                    "If the table already exists, use the ALTER TABLE keyword:",
                    "Create primary key on an existing table:"
                ],
                "lists": [],
                "examples": [
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\",database=\"mydatabase\")mycursor = mydb.cursor()mycursor.execute(\"CREATE TABLE customers (name VARCHAR(255), \n  address VARCHAR(255))\")",
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\",database=\"mydatabase\")mycursor = mydb.cursor()mycursor.execute(\"SHOW TABLES\")for x in mycursor:print(x)",
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\",database=\"mydatabase\")mycursor = mydb.cursor()mycursor.execute(\"CREATE TABLE customers (id INT AUTO_INCREMENT \n  PRIMARY KEY, name VARCHAR(255), \n  address VARCHAR(255))\")",
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\",database=\"mydatabase\")mycursor = mydb.cursor()mycursor.execute(\"ALTER TABLE customers ADD COLUMN id INT AUTO_INCREMENT \n  PRIMARY KEY\")"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_mysql_insert.asp",
        "cours": {
            "titre": "Python MySQLInsert Into Table",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_mysql_insert.asp",
            "contenus": {
                "paragraphs": [
                    "To fill a table in MySQL, use the \"INSERT INTO\" statement.",
                    "Insert a record in the \"customers\" table:",
                    "Important!:Notice the statement:mydb.commit(). It is required to make the \n  changes, otherwise no \n  changes are made to the table.",
                    "To insert multiple rows into a table, use theexecutemany()method.",
                    "The second parameter of theexecutemany()method \nis a list of tuples, containing the data you want to insert:",
                    "Fill the \"customers\" table with data:",
                    "You can get the id of the row you \njust inserted by asking the cursor object.",
                    "Note:If you insert more than one row, the id of the last \ninserted row is returned.",
                    "Insert one row, and return the ID:"
                ],
                "lists": [],
                "examples": [
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\",database=\"mydatabase\")mycursor = mydb.cursor()sql = \"INSERT INTO customers (name, \n  address) VALUES (%s, %s)\"val = (\"John\", \"Highway 21\")mycursor.execute(sql, \n  val)mydb.commit()print(mycursor.rowcount, \"record inserted.\")",
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\",database=\"mydatabase\")mycursor = mydb.cursor()sql = \"INSERT INTO customers (name, \n  address) VALUES (%s, %s)\"val = [('Peter', 'Lowstreet 4'),('Amy', 'Apple st 652'),('Hannah', 'Mountain 21'),('Michael', 'Valley 345'),('Sandy', 'Ocean blvd 2'),('Betty', 'Green Grass 1'),('Richard', 'Sky st 331'),('Susan', 'One way 98'),('Vicky', 'Yellow Garden 2'),('Ben', 'Park Lane 38'),('William', 'Central st 954'),('Chuck', 'Main Road 989'),('Viola', 'Sideway 1633')]mycursor.executemany(sql, val)mydb.commit()print(mycursor.rowcount, \"was inserted.\")",
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\",database=\"mydatabase\")mycursor = mydb.cursor()sql = \"INSERT INTO customers (name, \n  address) VALUES (%s, %s)\"val = (\"Michelle\", \"Blue Village\")mycursor.execute(sql, val)mydb.commit()print(\"1 record \n  inserted, ID:\", mycursor.lastrowid)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_mysql_select.asp",
        "cours": {
            "titre": "Python MySQLSelect From",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_mysql_select.asp",
            "contenus": {
                "paragraphs": [
                    "To select from a table in MySQL, use the \"SELECT\" statement:",
                    "Select all records from the \"customers\" table, and display the \n  result:",
                    "Note:We use thefetchall()method, which fetches all rows from the last executed statement.",
                    "To select only some of the columns in a table, use the \"SELECT\" statement \nfollowed by the column name(s):",
                    "Select only the name and address columns:",
                    "If you are only interested in one row, you can use thefetchone()method.",
                    "Thefetchone()method will return the first row of \nthe result:",
                    "Fetch only one row:"
                ],
                "lists": [],
                "examples": [
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\",database=\"mydatabase\")mycursor = \n  mydb.cursor()mycursor.execute(\"SELECT * FROM customers\")myresult = mycursor.fetchall()for x in myresult:print(x)",
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\",database=\"mydatabase\")mycursor = mydb.cursor()mycursor.execute(\"SELECT name, \n  address FROM \n  customers\")myresult = mycursor.fetchall()for x in myresult:print(x)",
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\",database=\"mydatabase\")mycursor = \n  mydb.cursor()mycursor.execute(\"SELECT * FROM customers\")myresult = mycursor.fetchone()print(myresult)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_mysql_where.asp",
        "cours": {
            "titre": "Python MySQLWhere",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_mysql_where.asp",
            "contenus": {
                "paragraphs": [
                    "When selecting records from a table, you can filter the selection by using \nthe \"WHERE\" statement:",
                    "Select record(s) where the address is \"Park Lane 38\":\n  result:",
                    "You can also select the records that starts, includes, or ends with a given letter \nor phrase.",
                    "Use the%to represent wildcard \ncharacters:",
                    "Select records where the address contains the word \"way\":",
                    "When query values are provided by the user, you should escape the values.",
                    "This is to prevent SQL injections, which is a common web hacking technique to  \ndestroy or misuse your database.",
                    "The mysql.connector module has methods to escape query values:",
                    "Escape query values by using the placholder%smethod:"
                ],
                "lists": [],
                "examples": [
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\",database=\"mydatabase\")mycursor = \n  mydb.cursor()sql = \"SELECT * FROM customers WHERE address ='Park Lane \n  38'\"mycursor.execute(sql)myresult = mycursor.fetchall()for x in myresult:print(x)",
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\",database=\"mydatabase\")mycursor = mydb.cursor()sql = \"SELECT * FROM customers WHERE address \n  LIKE '%way%'\"mycursor.execute(sql)myresult = mycursor.fetchall()for x in myresult:print(x)",
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\",database=\"mydatabase\")mycursor = mydb.cursor()sql = \"SELECT * FROM customers WHERE \n  address = %s\"adr = (\"Yellow Garden 2\", )mycursor.execute(sql, adr)myresult = mycursor.fetchall()for x in myresult:print(x)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_mysql_orderby.asp",
        "cours": {
            "titre": "Python MySQLOrder By",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_mysql_orderby.asp",
            "contenus": {
                "paragraphs": [
                    "Use the ORDER BY statement to sort the result in ascending or descending \norder.",
                    "The ORDER BY keyword sorts the result ascending by default. To sort the \nresult in descending order, use the DESC keyword.",
                    "Sort the result alphabetically by name:\n  result:",
                    "Use the DESC keyword to sort the result in a descending order.",
                    "Sort the result reverse alphabetically by name:"
                ],
                "lists": [],
                "examples": [
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\",database=\"mydatabase\")mycursor = \n  mydb.cursor()sql = \"SELECT * FROM customers ORDER BY name\"mycursor.execute(sql)myresult = mycursor.fetchall()for x in myresult:print(x)",
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\",database=\"mydatabase\")mycursor = mydb.cursor()sql = \"SELECT * FROM customers ORDER BY \n  name DESC\"mycursor.execute(sql)myresult = mycursor.fetchall()for x in myresult:print(x)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_mysql_delete.asp",
        "cours": {
            "titre": "Python MySQLDelete From By",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_mysql_delete.asp",
            "contenus": {
                "paragraphs": [
                    "You can delete records from an existing table by using the \"DELETE FROM\" statement:",
                    "Delete any record where the address is \"Mountain 21\":",
                    "Important!:Notice the statement:mydb.commit(). It is required to make the \n  changes, otherwise no \n  changes are made to the table.",
                    "Notice the WHERE clause in the DELETE syntax:The WHERE clause \nspecifies which record(s) that should be deleted. If you omit the WHERE \nclause, all records will be deleted!",
                    "It is considered a good practice to escape the values of any query, also in delete statements.",
                    "This is to prevent SQL injections, which is a common web hacking technique to  \ndestroy or misuse your database.",
                    "The mysql.connector module uses the placeholder%sto escape values in the delete statement:",
                    "Escape values by using the placeholder%smethod:"
                ],
                "lists": [],
                "examples": [
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\",database=\"mydatabase\")mycursor = \n  mydb.cursor()sql = \"DELETE FROM customers WHERE address = \n  'Mountain 21'\"mycursor.execute(sql)mydb.commit()print(mycursor.rowcount, \"record(s) deleted\")",
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\",database=\"mydatabase\")mycursor = mydb.cursor()sql = \"DELETE FROM customers WHERE address = \n  %s\"adr = (\"Yellow Garden 2\", )mycursor.execute(sql, adr)mydb.commit()print(mycursor.rowcount, \"record(s) deleted\")"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_mysql_drop_table.asp",
        "cours": {
            "titre": "Python MySQLDrop Table",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_mysql_drop_table.asp",
            "contenus": {
                "paragraphs": [
                    "You can delete an existing table by using \nthe \"DROP TABLE\" statement:",
                    "Delete the table \"customers\":",
                    "If the table you want to delete is already deleted, or for any other \nreason does not exist, you can use the IF EXISTS keyword to avoid getting an \nerror.",
                    "Delete the table \"customers\" if it exists:"
                ],
                "lists": [],
                "examples": [
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\",database=\"mydatabase\")mycursor = \n  mydb.cursor()sql = \"DROP TABLE customers\"mycursor.execute(sql)",
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\",database=\"mydatabase\")mycursor = \n  mydb.cursor()sql = \"DROP TABLE IF EXISTS customers\"mycursor.execute(sql)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_mysql_update.asp",
        "cours": {
            "titre": "Python MySQLUpdate Table",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_mysql_update.asp",
            "contenus": {
                "paragraphs": [
                    "You can update existing records in a table by using \nthe \"UPDATE\" statement:",
                    "Overwrite the address column from \"Valley 345\" to \"Canyon 123\":",
                    "Important!:Notice the statement:mydb.commit(). It is required to make the \n  changes, otherwise no \n  changes are made to the table.",
                    "Notice the WHERE clause in the UPDATE syntax:The WHERE clause \nspecifies which record or records that should be updated. If you omit the WHERE \nclause, all records will be updated!",
                    "It is considered a good practice to escape the values of any query, also in \nupdate statements.",
                    "This is to prevent SQL injections, which is a common web hacking technique to  \ndestroy or misuse your database.",
                    "The mysql.connector module uses the placeholder%sto escape values in the \nupdate statement:",
                    "Escape values by using the placeholder%smethod:"
                ],
                "lists": [],
                "examples": [
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\",database=\"mydatabase\")mycursor = \n  mydb.cursor()sql = \"UPDATE customers SET address = 'Canyon 123' \n  WHERE address = 'Valley 345'\"mycursor.execute(sql)mydb.commit()print(mycursor.rowcount, \"record(s) affected\")",
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\",database=\"mydatabase\")mycursor = mydb.cursor()sql = \"UPDATE customers SET address = %s \n  WHERE address = %s\"val = (\"Valley 345\", \"Canyon 123\")mycursor.execute(sql, \n  val)mydb.commit()print(mycursor.rowcount, \"record(s) \n  affected\")"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_mysql_limit.asp",
        "cours": {
            "titre": "Python MySQLLimit",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_mysql_limit.asp",
            "contenus": {
                "paragraphs": [
                    "You can limit the number of records returned from the query, by using the \"LIMIT\" statement:",
                    "Select the 5 first records in the \"customers\" table:",
                    "If you want to return five records, starting from the third record, you \ncan use the \"OFFSET\" keyword:",
                    "Start from position 3, and return 5 records:"
                ],
                "lists": [],
                "examples": [
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\",database=\"mydatabase\")mycursor = \n  mydb.cursor()mycursor.execute(\"SELECT * FROM customers LIMIT 5\")myresult = mycursor.fetchall()for x in \n  myresult:print(x)",
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\",database=\"mydatabase\")mycursor = \n  mydb.cursor()mycursor.execute(\"SELECT * FROM customers LIMIT 5 \n  OFFSET 2\")myresult = mycursor.fetchall()for x in \n  myresult:print(x)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_mysql_join.asp",
        "cours": {
            "titre": "Python MySQLJoin",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_mysql_join.asp",
            "contenus": {
                "paragraphs": [
                    "You can combine rows from two or more tables, based on a related column \nbetween them, by using a JOIN statement.",
                    "Consider you have a \"users\" table and a \"products\" table:",
                    "These two tables can be combined by using users'favfield and products'idfield.",
                    "Join users and products to see the name of the users favorite product:",
                    "Note:You can use JOIN instead of INNER JOIN. They will \n  both give you the same result.",
                    "In the example above, Hannah, and Michael were excluded from the result, that \nis because INNER JOIN only shows the records where there is a match.",
                    "If you want to show all users, even if they do not have a favorite product, \nuse the LEFT JOIN statement:",
                    "Select all users and their favorite product:",
                    "If you want to return all products, and the users who have them as their \nfavorite, even if no user have them as their favorite, use the RIGHT JOIN \nstatement:",
                    "Select all products, and the user(s) who have them as their favorite:",
                    "Note:Hannah and Michael, who have no favorite product, are not included in the result."
                ],
                "lists": [],
                "examples": [
                    "{ id: 1, name: 'John', fav: 154},{ id: \n  2, name: 'Peter', fav: 154},{ id: 3, name: 'Amy', fav: 155},{ id: 4, name: 'Hannah', fav:},{ id: 5, name: 'Michael', fav:}",
                    "{ id: 154, name: \n  'Chocolate Heaven' },{ id: 155, name: 'Tasty Lemons' },{ \n  id: 156, name: 'Vanilla Dreams' }",
                    "import mysql.connectormydb = mysql.connector.connect(host=\"localhost\",user=\"yourusername\",password=\"yourpassword\",database=\"mydatabase\")mycursor = mydb.cursor()sql = \"SELECT \\users.name AS user, \n  \\products.name AS favorite \\FROM users \\INNER JOIN \n  products ON users.fav = products.id\"mycursor.execute(sql)myresult = mycursor.fetchall()for x in myresult:print(x)",
                    "sql = \"SELECT \\users.name AS user, \n  \\products.name AS favorite \\FROM users \\LEFT JOIN \n  products ON users.fav = products.id\"",
                    "sql = \"SELECT \\users.name AS user, \n  \\products.name AS favorite \\FROM users \\RIGHT JOIN \n  products ON users.fav = products.id\""
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_mongodb_getstarted.asp",
        "cours": {
            "titre": "PythonMongoDB",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_mongodb_getstarted.asp",
            "contenus": {
                "paragraphs": [
                    "Python can be used in database applications.",
                    "One of the most popular NoSQL database is MongoDB.",
                    "MongoDB stores data in JSON-like documents, which makes the database very \nflexible and scalable.",
                    "To be able to experiment with the code examples in this tutorial, you will need access to a MongoDB database.",
                    "You can download a free MongoDB database athttps://www.mongodb.com.",
                    "Or get started right away with a MongoDB cloud service athttps://www.mongodb.com/cloud/atlas.",
                    "Python needs a MongoDB driver to access the MongoDB database.",
                    "In this tutorial we will use the MongoDB driver \"PyMongo\".",
                    "We recommend that you use PIP to install \"PyMongo\".",
                    "PIP is most likely already installed in your Python environment.",
                    "Navigate your command line to the location of PIP, and type the following:",
                    "Download and install \"PyMongo\":",
                    "Now you have downloaded and installed a mongoDB driver.",
                    "To test if the installation was successful, or if you already have \"pymongo\" \ninstalled, create a Python page with \nthe following content:",
                    "demo_mongodb_test.py:",
                    "If the above code was executed with no errors, \"pymongo\" is installed and \nready to be used."
                ],
                "lists": [],
                "examples": [
                    "C:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>python -m pip install pymongo",
                    "import pymongo"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_mongodb_create_db.asp",
        "cours": {
            "titre": "Python MongoDBCreate Database",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_mongodb_create_db.asp",
            "contenus": {
                "paragraphs": [
                    "To create a database in MongoDB, start by creating a MongoClient object, then specify a connection URL with the \ncorrect ip address and the name of the database you want to create.",
                    "MongoDB will create the database if it does not exist, and make a connection \nto it.",
                    "Create a database called \"mydatabase\":",
                    "Important:In MongoDB, a database is not created until it \n  gets content!",
                    "MongoDB waits until you have created a collection (table), with at least one document (record) before it actually creates the database (and collection).",
                    "Remember:In MongoDB, a database is not created until it \n  gets content, so if this is your first time creating a database, you should \n  complete the next two chapters (create collection and create document) before \n  you check if the database exists!",
                    "You can check if a database exist by listing all databases in you system:",
                    "Return a list of your system's databases:",
                    "Or you can check a specific database by name:",
                    "Check if \"mydatabase\" exists:"
                ],
                "lists": [],
                "examples": [
                    "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")mydb = myclient[\"mydatabase\"]",
                    "print(myclient.list_database_names())",
                    "dblist = myclient.list_database_names()if \"mydatabase\" in dblist:print(\"The database exists.\")"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_mongodb_create_collection.asp",
        "cours": {
            "titre": "Python MongoDBCreate Collection",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_mongodb_create_collection.asp",
            "contenus": {
                "paragraphs": [
                    "Acollectionin MongoDB is the same as atablein SQL databases.",
                    "To create a collection in MongoDB, use database object and specify the name \nof the collection you want to create.",
                    "MongoDB will create the collection if it does not exist.",
                    "Create a collection called \"customers\":",
                    "Important:In MongoDB, a collection is not created until it \n  gets content!",
                    "MongoDB waits until you have inserted a document before it actually creates the collection.",
                    "Remember:In MongoDB, a collection is not created until it \n  gets content, so if this is your first time creating a collection, you should \n  complete the next chapter (create document) before \n  you check if the collection exists!",
                    "You can check if a collection exist in a database by listing all collections:",
                    "Return a list of all collections in your database:",
                    "Or you can check a specific collection by name:",
                    "Check if the \"customers\" collection exists:"
                ],
                "lists": [],
                "examples": [
                    "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]",
                    "print(mydb.list_collection_names())",
                    "collist = mydb.list_collection_names()if \"customers\" in collist:print(\"The collection exists.\")"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_mongodb_insert.asp",
        "cours": {
            "titre": "Python MongoDBInsert Document",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_mongodb_insert.asp",
            "contenus": {
                "paragraphs": [
                    "Adocumentin MongoDB is the same as arecordin SQL databases.",
                    "To insert a record, ordocumentas it is called in MongoDB, into a collection, we use theinsert_one()method.",
                    "The first parameter of theinsert_one()method is a \ndictionary containing the \nname(s) and value(s) of each field in the document you want to insert.",
                    "Insert a record in the \"customers\" collection:",
                    "Theinsert_one()method returns a InsertOneResult object, which has a \nproperty,inserted_id, that holds the id of the inserted document.",
                    "Insert another record in the \"customers\" collection, and return the value of the_idfield:",
                    "If you do not specify an_idfield, then MongoDB \nwill add one for you and assign a unique id for each document.",
                    "In the example above no_idfield was \nspecified, so MongoDB assigned a unique \n_id for the record (document).",
                    "To insert multiple documents into a collection in MongoDB, we use theinsert_many()method.",
                    "The first parameter of theinsert_many()method \nis a list containing dictionaries with the data you want to insert:",
                    "Theinsert_many()method returns a InsertManyResult object, which has a property,inserted_ids, that holds the ids of the inserted documents.",
                    "If you do not want MongoDB to assign unique ids for your document, you can \nspecify the _id field when you insert the document(s).",
                    "Remember that the values has to be unique. Two documents cannot have the same \n_id."
                ],
                "lists": [],
                "examples": [
                    "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]mydict = { \"name\": \"John\", \"address\": \"Highway 37\" }x =\n  mycol.insert_one(mydict)",
                    "mydict = { \"name\": \"Peter\", \"address\": \"Lowstreet 27\" }x = mycol.insert_one(mydict)print(x.inserted_id)",
                    "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]mylist = [{ \"name\": \"Amy\", \"address\": \"Apple st 652\"},{ \"name\": \"Hannah\", \"address\": \"Mountain 21\"},{ \"name\": \n    \"Michael\", \"address\": \"Valley 345\"},{ \"name\": \"Sandy\", \"address\": \n    \"Ocean blvd 2\"},{ \"name\": \"Betty\", \"address\": \"Green Grass 1\"},{ \"name\": \"Richard\", \"address\": \"Sky st 331\"},{ \"name\": \"Susan\", \n    \"address\": \"One way 98\"},{ \"name\": \"Vicky\", \"address\": \"Yellow \n    Garden 2\"},{ \"name\": \"Ben\", \"address\": \"Park Lane 38\"},{ \"name\": \"William\", \"address\": \"Central st 954\"},{ \"name\": \n    \"Chuck\", \"address\": \"Main Road 989\"},{ \"name\": \"Viola\", \n    \"address\": \"Sideway 1633\"}]x = mycol.insert_many(mylist)#print list of the _id values of the inserted \n    documents:print(x.inserted_ids)",
                    "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]mylist = [{ \"_id\": 1, \"name\": \"John\", \"address\": \"Highway 37\"},{ \"_id\": 2, \"name\": \"Peter\", \"address\": \"Lowstreet 27\"},{ \"_id\": \n    3, \"name\": \"Amy\", \"address\": \"Apple st 652\"},{ \"_id\": 4, \"name\": \n    \"Hannah\", \"address\": \"Mountain 21\"},{ \"_id\": 5, \"name\": \n    \"Michael\", \"address\": \"Valley 345\"},{ \"_id\": 6, \"name\": \"Sandy\", \n    \"address\": \"Ocean blvd 2\"},{ \"_id\": 7, \"name\": \"Betty\", \n    \"address\": \"Green Grass 1\"},{ \"_id\": 8, \"name\": \"Richard\", \n    \"address\": \"Sky st 331\"},{ \"_id\": 9, \"name\": \"Susan\", \"address\": \n    \"One way 98\"},{ \"_id\": 10, \"name\": \"Vicky\", \"address\": \"Yellow \n    Garden 2\"},{ \"_id\": 11, \"name\": \"Ben\", \"address\": \"Park Lane \n    38\"},{ \"_id\": 12, \"name\": \"William\", \"address\": \"Central st \n    954\"},{ \"_id\": 13, \"name\": \"Chuck\", \"address\": \"Main Road 989\"},{ \"_id\": 14, \"name\": \"Viola\", \"address\": \"Sideway 1633\"}]x = mycol.insert_many(mylist)#print list of the _id values of the inserted \n    documents:print(x.inserted_ids)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_mongodb_find.asp",
        "cours": {
            "titre": "Python MongoDBFind",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_mongodb_find.asp",
            "contenus": {
                "paragraphs": [
                    "In MongoDB we use thefind()andfind_one()methods to find data in a collection.",
                    "Just like theSELECTstatement is used to find data in a \n  table in a MySQL database.",
                    "To select data from a collection in MongoDB, we can use thefind_one()method.",
                    "Thefind_one()method returns the first \noccurrence in the selection.",
                    "Find the first document in the customers collection:",
                    "To select data from a table in MongoDB, we can also use thefind()method.",
                    "Thefind()method returns all \noccurrences in the selection.",
                    "The first parameter of thefind()method \nis a query object. In this example we use an empty query object, which selects \nall documents in the collection.",
                    "No parameters in the find() method gives you the same result asSELECT *in MySQL.",
                    "Return all documents in the \"customers\" collection, and print each document:",
                    "The second parameter of thefind()method \nis an object describing which fields to include in the result.",
                    "This parameter is optional, and if omitted, all fields will be included in \nthe result.",
                    "Return only the names and addresses, not the _ids:",
                    "You are not allowed to specify both 0 and 1 values in the same object (except \nif one of the fields is the _id field). If you specify a field with the value 0, all other fields get the value 1, \nand vice versa:",
                    "This example will exclude \"address\" from the result:",
                    "You get an error if you specify both 0 and 1 values in the same object \n(except if one of the fields is the _id field):"
                ],
                "lists": [],
                "examples": [
                    "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]x = mycol.find_one()print(x)",
                    "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]for x in mycol.find():print(x)",
                    "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]for x in mycol.find({},{ \"_id\": 0, \"name\": 1, \"address\": 1 }):print(x)",
                    "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]for x in mycol.find({},{ \"address\": 0 }):print(x)",
                    "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]for x in mycol.find({},{ \"name\": 1, \"address\": 0 }):print(x)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_mongodb_query.asp",
        "cours": {
            "titre": "Python MongoDBQuery",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_mongodb_query.asp",
            "contenus": {
                "paragraphs": [
                    "When finding documents in a collection, you can filter the result by using a \nquery object.",
                    "The first argument of thefind()method \nis a query object, and is used to limit the search.",
                    "Find document(s) with the address \"Park Lane 38\":",
                    "To make advanced queries you can use modifiers as values in the query object.",
                    "E.g. to find the documents where the \"address\" field starts with the letter \"S\" \nor higher (alphabetically), use the greater than modifier:{\"$gt\": \"S\"}:",
                    "Find documents where the address starts with the letter \"S\" or \nhigher:",
                    "You can also use regular expressions as a modifier.",
                    "Regular expressions can only be used to querystrings.",
                    "To find only the documents where the \"address\" field starts with the letter \"S\", use the regular \nexpression{\"$regex\": \"^S\"}:",
                    "Find documents where the address starts with the letter \"S\":"
                ],
                "lists": [],
                "examples": [
                    "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]myquery = { \"address\": \"Park Lane 38\" }mydoc = mycol.find(myquery)for x in mydoc:print(x)",
                    "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]myquery = { \"address\": { \"$gt\": \"S\" } }mydoc = mycol.find(myquery)for x in mydoc:print(x)",
                    "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]myquery = { \"address\": { \"$regex\": \"^S\" } }mydoc = mycol.find(myquery)for x in mydoc:print(x)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_mongodb_sort.asp",
        "cours": {
            "titre": "Python MongoDBSort",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_mongodb_sort.asp",
            "contenus": {
                "paragraphs": [
                    "Use thesort()method to sort the result in \nascending or descending order.",
                    "Thesort()method takes one parameter for \n\"fieldname\" and one parameter for \"direction\" (ascending is the default \ndirection).",
                    "Sort the result alphabetically by name:",
                    "Use the value -1 as the second parameter to sort descending.",
                    "sort(\"name\", 1) #ascendingsort(\"name\", -1) #descending",
                    "Sort the result reverse alphabetically by name:"
                ],
                "lists": [],
                "examples": [
                    "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]mydoc = mycol.find().sort(\"name\")for x in mydoc:print(x)",
                    "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]mydoc = mycol.find().sort(\"name\", -1)for x in mydoc:print(x)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_mongodb_delete.asp",
        "cours": {
            "titre": "Python MongoDBDelete Document",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_mongodb_delete.asp",
            "contenus": {
                "paragraphs": [
                    "To delete one document, we use thedelete_one()method.",
                    "The first parameter of thedelete_one()method \nis a query object defining which document to delete.",
                    "Note:If the query finds more than one document, only the first \noccurrence is deleted.",
                    "Delete the document with the address \"Mountain 21\":",
                    "To delete more than one document, use thedelete_many()method.",
                    "The first parameter of thedelete_many()method \nis a query object defining which documents to delete.",
                    "Delete all documents were the address starts with the letter S:",
                    "To delete all documents in a collection, pass an empty query object to thedelete_many()method:",
                    "Delete all documents in the \"customers\" collection:"
                ],
                "lists": [],
                "examples": [
                    "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]myquery = { \"address\": \"Mountain 21\" }mycol.delete_one(myquery)",
                    "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]myquery = { \"address\": {\"$regex\": \"^S\"} }x = mycol.delete_many(myquery)print(x.deleted_count, \" documents \n  deleted.\")",
                    "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]x = mycol.delete_many({})print(x.deleted_count, \" documents \n  deleted.\")"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_mongodb_drop_collection.asp",
        "cours": {
            "titre": "Python MongoDBDrop Collection",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_mongodb_drop_collection.asp",
            "contenus": {
                "paragraphs": [
                    "You can delete a table, or collection as it is called in MongoDB, by using \nthedrop()method.",
                    "Delete the \"customers\" collection:",
                    "Thedrop()method returns true if the collection was dropped successfully, \nand false if the collection does not exist."
                ],
                "lists": [],
                "examples": [
                    "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]mycol.drop()"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_mongodb_update.asp",
        "cours": {
            "titre": "Python MongoDBUpdate",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_mongodb_update.asp",
            "contenus": {
                "paragraphs": [
                    "You can update a record, or document as it is called in MongoDB, by using \ntheupdate_one()method.",
                    "The first parameter of theupdate_one()method \nis a query object defining which document to update.",
                    "Note:If the query finds more than one record, only the first \noccurrence is updated.",
                    "The second parameter  \nis an object defining the new values of the document.",
                    "Change the address from \"Valley 345\" to \"Canyon 123\":",
                    "To updatealldocuments that meets the criteria of the query, use \ntheupdate_many()method.",
                    "Update all documents where the address starts with the letter \"S\":"
                ],
                "lists": [],
                "examples": [
                    "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]myquery = { \"address\": \"Valley 345\" }newvalues = { \"$set\": { \n  \"address\": \"Canyon 123\" } }mycol.update_one(myquery, newvalues)#print \"customers\" after the update:for x in mycol.find():print(x)",
                    "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]myquery = { \"address\": { \"$regex\": \"^S\" } }newvalues = { \"$set\": { \n  \"name\": \"Minnie\" } }x = mycol.update_many(myquery, newvalues)print(x.modified_count, \"documents updated.\")"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_mongodb_limit.asp",
        "cours": {
            "titre": "Python MongoDBLimit",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_mongodb_limit.asp",
            "contenus": {
                "paragraphs": [
                    "To limit the result in MongoDB, we use thelimit()method.",
                    "Thelimit()method takes one parameter, a number defining how many documents \nto return.",
                    "Consider you have a \"customers\" collection:",
                    "Limit the result to only return 5 documents:"
                ],
                "lists": [],
                "examples": [
                    "{'_id': 1, 'name': 'John', 'address': 'Highway37'}{'_id': 2, 'name': 'Peter', 'address': 'Lowstreet 27'}{'_id': 3, 'name': 'Amy', 'address': 'Apple st 652'}{'_id': 4, 'name': 'Hannah', 'address': 'Mountain 21'}{'_id': 5, 'name': 'Michael', 'address': 'Valley 345'}{'_id': 6, 'name': 'Sandy', 'address': 'Ocean blvd 2'}{'_id': 7, 'name': 'Betty', 'address': 'Green Grass 1'}{'_id': 8, 'name': 'Richard', 'address': 'Sky st 331'}{'_id': 9, 'name': 'Susan', 'address': 'One way 98'}{'_id': 10, 'name': 'Vicky', 'address': 'Yellow Garden 2'}{'_id': 11, 'name': 'Ben', 'address': 'Park Lane 38'}{'_id': 12, 'name': 'William', 'address': 'Central st 954'}{'_id': 13, 'name': 'Chuck', 'address': 'Main Road 989'}{'_id': 14, 'name': 'Viola', 'address': 'Sideway 1633'}",
                    "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]myresult = mycol.find().limit(5)#print the result:for x in myresult:print(x)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_reference.asp",
        "cours": {
            "titre": "PythonReference",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_reference.asp",
            "contenus": {
                "paragraphs": [
                    "This section contains a Python reference documentation."
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ref_functions.asp",
        "cours": {
            "titre": "PythonBuilt in Functions",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ref_functions.asp",
            "contenus": {
                "paragraphs": [
                    "Python has a set of built-in functions."
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ref_string.asp",
        "cours": {
            "titre": "PythonString Methods",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ref_string.asp",
            "contenus": {
                "paragraphs": [
                    "Python has a set of built-in methods that you can use on strings.",
                    "Note:All string methods returns new values. They do not change the original string.",
                    "Note:All string methods returns new values. They do not change the original string.",
                    "Learn more about strings in ourPython Strings Tutorial."
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ref_list.asp",
        "cours": {
            "titre": "PythonList/Array Methods",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ref_list.asp",
            "contenus": {
                "paragraphs": [
                    "Python has a set of built-in methods that you can use on lists/arrays.",
                    "Note:Python does not have built-in support for Arrays, \n  but Python Lists can be used instead.",
                    "Learn more about lists in ourPython Lists Tutorial.",
                    "Learn more about arrays in ourPython Arrays Tutorial."
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ref_dictionary.asp",
        "cours": {
            "titre": "PythonDictionary Methods",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ref_dictionary.asp",
            "contenus": {
                "paragraphs": [
                    "Python has a set of built-in methods that you can use on dictionaries.",
                    "Learn more about dictionaries in ourPython Dictionaries Tutorial."
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ref_tuple.asp",
        "cours": {
            "titre": "PythonTuple Methods",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ref_tuple.asp",
            "contenus": {
                "paragraphs": [
                    "Python has two built-in methods that you can use on tuples.",
                    "Learn more about tuples in ourPython Tuples Tutorial."
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ref_set.asp",
        "cours": {
            "titre": "PythonSet Methods",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ref_set.asp",
            "contenus": {
                "paragraphs": [
                    "Python has a set of built-in methods that you can use on sets.",
                    "Learn more about sets in ourPython Sets Tutorial."
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ref_file.asp",
        "cours": {
            "titre": "PythonFile Methods",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ref_file.asp",
            "contenus": {
                "paragraphs": [
                    "Python has a set of methods available for the file object.",
                    "Learn more about the file object in ourPython File Handling Tutorial."
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ref_keywords.asp",
        "cours": {
            "titre": "PythonKeywords",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ref_keywords.asp",
            "contenus": {
                "paragraphs": [
                    "Python has a set of keywords that are reserved words that cannot be used as \nvariable names, function names, or any other identifiers:"
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ref_exceptions.asp",
        "cours": {
            "titre": "PythonBuilt-in Exceptions",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ref_exceptions.asp",
            "contenus": {
                "paragraphs": [
                    "The table below shows built-in exceptions that are usually raised in Python:"
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_ref_glossary.asp",
        "cours": {
            "titre": "PythonGlossary",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_ref_glossary.asp",
            "contenus": {
                "paragraphs": [
                    "This is a list of all the features explained in the Python Tutorial."
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/module_random.asp",
        "cours": {
            "titre": "PythonRandom Module",
            "description": "",
            "lien": "https://www.w3schools.com/python/module_random.asp",
            "contenus": {
                "paragraphs": [
                    "Python has a built-in module that you can use to make random numbers.",
                    "Therandommodule has a set of methods:"
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/module_requests.asp",
        "cours": {
            "titre": "PythonRequestsModule",
            "description": "",
            "lien": "https://www.w3schools.com/python/module_requests.asp",
            "contenus": {
                "paragraphs": [
                    "Make a request to a web page, and print the response text:",
                    "Therequestsmodule allows you to send HTTP \nrequests using Python.",
                    "The HTTP request returns aResponse Objectwith all the response data \n(content, encoding, status, etc).",
                    "Navigate your command line to the location of PIP, and type the following:"
                ],
                "lists": [],
                "examples": [
                    "import requestsx = requests.get('https://w3schools.com/python/demopage.htm')print(x.text)",
                    "C:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>pip install requests",
                    "requests.methodname(params)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/module_statistics.asp",
        "cours": {
            "titre": "Pythonstatistics Module",
            "description": "",
            "lien": "https://www.w3schools.com/python/module_statistics.asp",
            "contenus": {
                "paragraphs": [
                    "Python has a built-in module that you can use to calculate mathematical \nstatistics of numeric data.",
                    "Thestatisticsmodule was new in Python 3.4."
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/module_math.asp",
        "cours": {
            "titre": "Pythonmath Module",
            "description": "",
            "lien": "https://www.w3schools.com/python/module_math.asp",
            "contenus": {
                "paragraphs": [
                    "Python has a built-in module that you can use for mathematical tasks.",
                    "Themathmodule has a set of methods and constants."
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/module_cmath.asp",
        "cours": {
            "titre": "Pythoncmath Module",
            "description": "",
            "lien": "https://www.w3schools.com/python/module_cmath.asp",
            "contenus": {
                "paragraphs": [
                    "Python has a built-in module that you can use for mathematical tasks for \ncomplex numbers.",
                    "The methods in this module acceptsint,float,  andcomplexnumbers. It even accepts Python objects that has a__complex__()or__float__()method.",
                    "The methods in this module almost always return a complex number. If the return \nvalue can be expressed as a real number, the return value has an imaginary part \nof 0.",
                    "Thecmathmodule has a set of methods and constants."
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_howto_remove_duplicates.asp",
        "cours": {
            "titre": "How to Remove Duplicates From a Python List",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_howto_remove_duplicates.asp",
            "contenus": {
                "paragraphs": [
                    "Learn how to remove duplicates from a List in Python.",
                    "Remove any duplicates from a List:",
                    "First we have a List that contains duplicates:",
                    "Create a dictionary, \nusing the List items as keys. This will automatically remove any duplicates \nbecause dictionaries cannot have duplicate keys.",
                    "Then, convert the dictionary back into a list:",
                    "Now we have a List without any duplicates, and it has the same order as the \noriginal List.",
                    "Print the List to demonstrate the result",
                    "If you like to have a function where you can send your lists, and get them \nback without duplicates, you can create a function and insert the code from the \nexample above.",
                    "Create a function that takes a List as an argument.",
                    "Create a dictionary, using this List items as keys.",
                    "Convert the dictionary into a list.",
                    "Return the list",
                    "Call the function, with a list as a parameter:",
                    "Print the result:"
                ],
                "lists": [],
                "examples": [
                    "mylist = [\"a\", \"b\", \"a\", \"c\", \"c\"]mylist = list(dict.fromkeys(mylist))print(mylist)",
                    "mylist = [\"a\", \"b\", \"a\", \"c\", \"c\"]mylist = list(dict.fromkeys(mylist))print(mylist)",
                    "mylist = [\"a\", \"b\", \"a\", \"c\", \"c\"]mylist = list(dict.fromkeys(mylist))print(mylist)",
                    "mylist = [\"a\", \"b\", \"a\", \"c\", \"c\"]mylist = list(dict.fromkeys(mylist))print(mylist)",
                    "mylist = [\"a\", \"b\", \"a\", \"c\", \"c\"]mylist = list(dict.fromkeys(mylist))print(mylist)",
                    "def my_function(x):return list(dict.fromkeys(x))mylist = \n  my_function([\"a\", \"b\", \"a\", \"c\", \"c\"])print(mylist)",
                    "def my_function(x):return list(dict.fromkeys(x))mylist = \n  my_function([\"a\", \"b\", \"a\", \"c\", \"c\"])print(mylist)",
                    "def my_function(x):return list(dict.fromkeys(x))mylist = \n  my_function([\"a\", \"b\", \"a\", \"c\", \"c\"])print(mylist)",
                    "def my_function(x):returnlist(dict.fromkeys(x))mylist = \n  my_function([\"a\", \"b\", \"a\", \"c\", \"c\"])print(mylist)",
                    "def my_function(x):returnlist(dict.fromkeys(x))mylist = \n  my_function([\"a\", \"b\", \"a\", \"c\", \"c\"])print(mylist)",
                    "def my_function(x):return list(dict.fromkeys(x))mylist = my_function([\"a\", \"b\", \"a\", \"c\", \"c\"])print(mylist)",
                    "def my_function(x):return list(dict.fromkeys(x))mylist = my_function([\"a\", \"b\", \"a\", \"c\", \"c\"])print(mylist)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_howto_reverse_string.asp",
        "cours": {
            "titre": "How to Reverse a String in Python",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_howto_reverse_string.asp",
            "contenus": {
                "paragraphs": [
                    "Learn how to reverse a String in Python.",
                    "There is no built-in function to reverse a String in Python.",
                    "The fastest (and easiest?) way is to use a slice that steps backwards,-1.",
                    "Reverse the string \"Hello World\":",
                    "We have a string, \"Hello World\", which we want to reverse:",
                    "Create a slice that starts at the end of the string, and moves backwards.",
                    "In this particular example, the slice statement[::-1]means start at \nthe end of the string and end at position 0, move with the \nstep-1,negativeone, which means one step backwards.",
                    "Now we have a stringtxtthat reads \"Hello \nWorld\" backwards.",
                    "Print the String to demonstrate the result",
                    "If you like to have a function where you can send your strings, and return \nthem \nbackwards, you can create a function and insert the code from the \nexample above.",
                    "Create a function that takes a String as an argument.",
                    "Slice the string starting at the end of the string and move backwards.",
                    "Return the backward String",
                    "Call the function, with a string as a parameter:",
                    "Print the result:"
                ],
                "lists": [],
                "examples": [
                    "txt = \"Hello World\"[::-1]print(txt)",
                    "txt =\"Hello World\"[::-1]print(txt)",
                    "txt = \"Hello World\"[::-1]print(txt)",
                    "txt = \"Hello World\"[::-1]print(txt)",
                    "def my_function(x):return x[::-1]mytxt = \n  my_function(\"I wonder how this text looks like backwards\")print(mytxt)",
                    "def my_function(x):return x[::-1]mytxt = \n  my_function(\"I wonder how this text looks like backwards\")print(mytxt)",
                    "def my_function(x):return x[::-1]mytxt = \n  my_function(\"I wonder how this text looks like backwards\")print(mytxt)",
                    "def my_function(x):returnx[::-1]mytxt = \n  my_function(\"I wonder how this text looks like backwards\")print(mytxt )",
                    "def my_function(x):return \n  x[::-1]mytxt = my_function(\"I \n  wonder how this text looks like backwards\")print(mytxt)",
                    "def my_function(x):return \n  x[::-1]mytxt = my_function(\"I wonder how this text looks like backwards\")print(mytxt)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_howto_add_two_numbers.asp",
        "cours": {
            "titre": "How to Add Two Numbers in Python",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_howto_add_two_numbers.asp",
            "contenus": {
                "paragraphs": [
                    "Learn how to add two numbers in Python.",
                    "Use the+operator to add two numbers:",
                    "In this example, the user must input two numbers. Then we print the sum by calculating (adding) the two numbers:"
                ],
                "lists": [],
                "examples": [
                    "x = 5y = 10print(x + y)",
                    "x = input(\"Type a number: \")y = input(\"Type another number: \")sum \n  = int(x) + int(y)print(\"The sum is: \", sum)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_examples.asp",
        "cours": {
            "titre": "PythonExamples",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_examples.asp",
            "contenus": {
                "paragraphs": [
                    "Syntax Explained",
                    "Variables Explained",
                    "Numbers Explained",
                    "Casting Explained",
                    "Strings Explained",
                    "Operators Explained",
                    "Lists Explained",
                    "Tuples Explained",
                    "Sets Explained",
                    "Dictionaries Explained",
                    "If ... Else Explained",
                    "While Loop Explained",
                    "For Loop Explained",
                    "Functions Explained",
                    "Lambda Explained",
                    "Arrays Explained",
                    "Classes/Objects Explained",
                    "Iterators Explained",
                    "Modules Explained",
                    "Dates Explained",
                    "Math Explained",
                    "JSON Explained",
                    "RegEx Explained",
                    "PIP Explained",
                    "Try Except Explained",
                    "File Handling Explained",
                    "MySQL Explained",
                    "MongoDB Explained"
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_compiler.asp",
        "cours": {
            "titre": "PythonOnline Compiler",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_compiler.asp",
            "contenus": {
                "paragraphs": [
                    "With our online Python compiler, you can edit Python code, and view the result in your browser.",
                    "Click on the \"Try it Yourself\" button to see how it works.",
                    "If you want to create your own website or build Python applications, check outW3Schools Spaces.",
                    "W3Schools Spacesis a website-building tool that enables you to create and share your own website. \nYou can also get a Python server, allowing you to develop and host your Python applications with ease.",
                    "Note:This includes Python libraries such as: Django, Pandas, NumPy, SciPy and more.",
                    "You can change the website's look and how it works by editing the code right in your web browser.",
                    "It's easy to use and doesn't require any setup:",
                    "The code editor is packed with features to help you achieve more:",
                    "Practice is key to mastering coding, and the best way to put your Python knowledge into practice is by getting practical with code.",
                    "UseW3Schools Spacesto build, test and deploy code.",
                    "The code editor lets you write and practice different types of computer languages. It includes \nPython, but you can use it for other languages too.",
                    "New languages are added all the time:",
                    "If you don't know Python, we suggest that you read ourPython Tutorialfrom scratch.",
                    "Get an overview of your packages and easily add or delete frameworks and libraries. Then, with just one click, you can make changes to your packages without manual installation.",
                    "",
                    "You can also use the code editor inW3School Spacesto build frontend or full-stack websites from scratch.",
                    "Or you can use the 60+ templates available and save time:",
                    "Create your Spaces account today and explore them all!",
                    "Host and publish your websites in no time withW3School Spaces.",
                    "W3Schools subdomain and SSL certificate are included for free withW3School Spaces. An SSL certificate makes your website safe and secure. It also helps people trust your website and makes it easier to find it online.",
                    "Want a custom domain for your website?",
                    "You can buy a domain or transfer an existing one and connect it to your space.",
                    "Get started in a few clicks withW3School Spaces."
                ],
                "lists": [
                    [
                        "Templates:Start from scratch or use a template",
                        "Cloud-based:no installations required. You only need your browser",
                        "Terminal & Log:debug and troubleshoot your code easily",
                        "File Navigator:switch between files inside the code editor",
                        "And much more!"
                    ]
                ],
                "examples": [
                    "print(\"Hello, World!\")x=\"Python\"y=\"is\"z=\"awesome\"print(x, y, z)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_exercises.asp",
        "cours": {
            "titre": "PythonExercises",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_exercises.asp",
            "contenus": {
                "paragraphs": [
                    "Test your Python skills with exercises from all categories:",
                    "If you haven't already,sign upto become a W3Schooler, and get points for every exercise you complete.",
                    "As a logged-in W3Schools user you will have access to many features like havingyour own web page,track your learning progress,receive personal guided paths, andmore.",
                    "The exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. \nThere are between 3 and 9 questions in each category.\nThe answer can be found in the corresponding tutorial chapter. If you're stuck, \nor answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer.",
                    "Get certified by completingthecourse"
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_quiz.asp",
        "cours": {
            "titre": "PythonQuiz",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_quiz.asp",
            "contenus": {
                "paragraphs": [
                    "You can test your Python skills with W3Schools' Quiz.",
                    "The test contains 25 questions and there is no time limit.",
                    "The test is not official, it's just a nice way to see how much you know, or don't know, about \nPython.",
                    "You will get 1 point for each correct answer. At the end of the Quiz,\nyour total score will be displayed. Maximum score is 25 points.",
                    "Good luck!",
                    "Start the Python Quiz ❯",
                    "If you don't know Python, we suggest that you read ourPython Tutorialfrom scratch.",
                    "Get certified by completingthecourse"
                ],
                "lists": [],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_server.asp",
        "cours": {
            "titre": "PythonServer",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_server.asp",
            "contenus": {
                "paragraphs": [
                    "Coding Skills",
                    "AI Tutor",
                    "Projects",
                    "Securely",
                    "By subscribing to a plan you support the W3Schools mission to makelearning available to everyone - no matter their background.",
                    "$0/Forever",
                    "This is for you that are beginning to explore coding and web development",
                    "$14.99/Month",
                    "This is for you that want to learn and reach your goals faster. Build fullstack projects, ad free experience.",
                    "Contact us for information",
                    "W3Schools right to use and Plus for educational institutions or enterprise customers",
                    "You can also buy a domain or connect an existing one.",
                    "Just landed inSpaces",
                    "Learn to code more effectivelyand intelligently with kAI - AI tutor",
                    "Hi! I'm kAI, W3Schools AI Tutor...",
                    "Feel free to ask me any coding-related questions, and I'll do my best to assist you.",
                    "I can help you checking your code for errors, improving your code's structure, explaining coding concepts in a clear and understandable way, and more...",
                    "I can even create complete websites for you based on your input, so what are you waiting for?",
                    "Cloud-based",
                    "Terminal & Log",
                    "How To Libraries",
                    "Database",
                    "File Navigator",
                    "Package Manager",
                    "Analytics",
                    "Environment Manager",
                    "With Basic Spaces, you can build frontend websites. Whereas with Fullstack Spaces, you can build frontend and backend websites.",
                    "Basic Spaces include HTML, CSS, and Javascript. Full Stack Spaces include everything in Basic Spaces plus PHP, Python, React.js, Vue.js, Node.js, Handlebars, and Django.",
                    "Your subscription will be automatically renewed every month.",
                    "Your access to all the benefits for the paid period of time will continue. However, the subscription will not be renewed automatically.",
                    "To subscribe W3Schools accounts for multiple users, you can contact sales@w3schools.com"
                ],
                "lists": [
                    [
                        "Build and host 1 static website",
                        "100 credits/monthAccess various AI features like W3Schools kAI coding tutor and interview preparation.",
                        "No support"
                    ],
                    [
                        "Ad-free experience",
                        "Build and host 15 static websites",
                        "Build and host 1 full stack server",
                        "Choose from 18 frameworks / languages",
                        "Choose from 75+ templates",
                        "50000 credits/monthAccess various AI features like W3Schools kAI coding tutor and interview preparation.",
                        "Priority Support",
                        "Cancel anytime"
                    ],
                    [
                        "Everything in W3Schools Plus",
                        "Certification Exams",
                        "And much more!"
                    ]
                ],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_syllabus.asp",
        "cours": {
            "titre": "PythonSyllabus",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_syllabus.asp",
            "contenus": {
                "paragraphs": [
                    "TheW3Schools Python Tutorialis comprehensive and beginner-friendly.",
                    "It will give you a fundamental knowledge of Python.",
                    "It is designed for beginners and requires no prior experience with programming.",
                    "The content has been carefully made to be bite-sized, simple, and easy to understand.",
                    "The content has been proven by millions of users over the years. It is updated and improved frequently.",
                    "The syllabus outline and its sequence are structured so you can learn Python step by step, from the introduction, to creating your first application with Python.",
                    "Get Started With Python »",
                    "Note:Are you a teacher teaching Python programming?W3Schools Academyis a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more aboutAcademy here.",
                    "Get Started",
                    "In this tutorial we offer different activities for you to learn Python for free:",
                    "You can also create a free account to track your progress.",
                    "As a signed-in user, you get access to features such as:",
                    "Sign Up - It's free",
                    "Get Started",
                    "Python, like any other programming language, is best learned by working hands-on with code.",
                    "Easily try code with our \"Try it Yourself\" editor.",
                    "Here, you can edit Python code and view the result:",
                    "If you want to explore more and host your project, we have a feature calledSpacesthat allows you to build, test and deploy Python code and other backend languages.",
                    "Here you get a secure sandbox environment called Spaces, where you can practice coding and test projects in real-time.",
                    "Spaces allow you to test, build, and deploy code. This includes a W3Schools subdomain, hosting, and secure SSL certificates.",
                    "Spaces require no installation and run directly in the browser.",
                    "Features include:",
                    "Create a Spaces Account",
                    "W3Schools offers an end-of-pathway certification program.",
                    "Here you can take exams to get certified.",
                    "The Python exam is a test that summarizes the W3Schools Python syllabus.",
                    "After passing the exam you get the \"Certified Python Developer\" Certification.",
                    "There are two different types of certifications:",
                    "The non-adaptive is pass or no pass.",
                    "The adaptive certification is adaptive and graded; students will get a grade from intermediate, advanced to professional.",
                    "Buy Certificate »",
                    "Are you interested in learning how you can useW3Schools Academyto Teach Python programming?",
                    "Join our upcoming webinar for a guided demo ofW3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.",
                    "Join our FREE Webinar »"
                ],
                "lists": [
                    [
                        "Understand Python basics, such as syntax, variables, and data types.",
                        "Write Python code using loops, conditionals, and functions.",
                        "Handle files (open, read, write) using Python.",
                        "Use Python libraries and modules for specific tasks.",
                        "Work with data structures like lists, tuples, sets, and dictionaries.",
                        "Develop programs that use object-oriented concepts such as classes and inheritance.",
                        "Develop a problem-solving mindset."
                    ],
                    [
                        "Computer SciencePython can be used to learn programming",
                        "MathematicsPython can help solve math problems and do calculations",
                        "Science (Physics, Chemistry, Biology)Python can be used to make scientific models and undertake experiments",
                        "Economics and FinancePython can be used to analyze data, understand trends, and do financial calculations",
                        "Data Science and AnalyticsPython and its libraries can be used for big data and to find patterns",
                        "Robotics and EngineeringPython can be used to make programs to control robots or test engineering projects",
                        "Art and DesignPython can be used to create digital art, interactive projects, and automate tasks",
                        "And morePython can be useful for many other subjects"
                    ],
                    [
                        "Lessons",
                        "Exercises",
                        "Quizzes"
                    ],
                    [
                        "Learning paths",
                        "Sandbox and lab environments",
                        "Achievements",
                        "And much more!"
                    ],
                    [
                        "Python HOME",
                        "Python Intro",
                        "Python Get Started",
                        "Python Syntax",
                        "Python Comments",
                        "Python Variables",
                        "Python Data Types",
                        "Python Numbers",
                        "Python Casting",
                        "Python Strings",
                        "Python Booleans",
                        "Python Operators",
                        "Python Lists",
                        "Python Tuples",
                        "Python Sets",
                        "Python Dictionaries",
                        "Python If...Else",
                        "Python While Loops",
                        "Python For Loops",
                        "Python Functions",
                        "Python Lambda",
                        "Python Arrays",
                        "Python Classes/Objects",
                        "Python Inheritance",
                        "Python Iterators",
                        "Python Polymorphism",
                        "Python Scope",
                        "Python Modules",
                        "Python Dates",
                        "Python Math",
                        "Python JSON",
                        "Python RegEx",
                        "Python PIP",
                        "Python Try...Except",
                        "Python User Input",
                        "Python String Formatting",
                        "Python File Handling",
                        "Python NumPy",
                        "Python Pandas",
                        "Python SciPy",
                        "Python Django",
                        "Python Matplotlib",
                        "Python Machine Learning",
                        "Python MySQL",
                        "Python MongoDB"
                    ],
                    [
                        "Collaboration",
                        "File navigator",
                        "Terminal & log",
                        "Package manager",
                        "Database",
                        "Environment manager",
                        "Analytics"
                    ],
                    [
                        "Non-adaptive",
                        "Adaptive"
                    ]
                ],
                "examples": [
                    "print(\"Hello, World!\")"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_study_plan.asp",
        "cours": {
            "titre": "PythonStudy Plan",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_study_plan.asp",
            "contenus": {
                "paragraphs": [
                    "The Python study plan helps you teach your students Python step-by-step.",
                    "Creating a study plan for Python is easy.",
                    "You can use a pre-built study plan or customize it.",
                    "Students have different skill levels. The study plans can be customized to ensure that everyone is challenged.",
                    "Save time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of Python to the final exam.",
                    "The study plan is a feature of W3Schools Academy.",
                    "W3Schools Academy is a platform that has everything you need to teach coding, all in one place.",
                    "It offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom.",
                    "You need to have an active subscription to access the study plan feature. There are two different subscription tiers:",
                    "Learn More »",
                    "Academy also offer other features such as:",
                    "Get a free demo »",
                    "W3Schools has everything you need to teach Python.",
                    "The Python training materials is available for you to include and use in your study plan:",
                    "With the Python Syllabus, your students will start with the basics, like understanding variables and data types, and move to more advanced topics, like working with loops, functions, and file handling. Each chapter has examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun.",
                    "Read more about Python Syllabus.",
                    "The study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level.",
                    "Learn More »",
                    "You choose the timeline and paceof your study plans.",
                    "Schools have different preferences.",
                    "Some would like more intensive pace, e.g. 5 weeks, others 12 or more weeks.",
                    "It is completely up to you.",
                    "For example, this is how a 5-week Python study plan could look like:",
                    "Image of Sample Python study plan:",
                    "Start withPython Study Planstoday.",
                    "Get Started »",
                    "Are you interested in learning how you can useW3Schools Academyto Teach Python programming?",
                    "Join our upcoming webinar for a guided demo ofW3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.",
                    "Join our FREE Webinar »"
                ],
                "lists": [
                    [
                        "Essentials ($1.99 / month per student)",
                        "Full Access ($5.99 / month per student)",
                        "Calculate your price and orderhere."
                    ],
                    [
                        "Managing your classroom",
                        "Tracking of student progress and reports",
                        "Labs, assignments, and code challenges (prebuilt challenges or create your own ones)",
                        "Auto-grading",
                        "Teaching materials",
                        "Certification exams"
                    ],
                    [
                        "W3Schools Python Tutorial",
                        "Python Exercises",
                        "Python Quiz",
                        "Python Challenges (Coding challenges)",
                        "Python Certification Exam (End of Pathway Exam)"
                    ],
                    [
                        "Learning PathsYou can add ready-made learning paths.The learning paths are by default ordered by our recommended order.You can change the order.You can add custom activities with text, links, or multi-media files.Drag and drop or click to make changes to the path.",
                        "You can add ready-made learning paths.",
                        "The learning paths are by default ordered by our recommended order.",
                        "You can change the order.",
                        "You can add custom activities with text, links, or multi-media files.",
                        "Drag and drop or click to make changes to the path.",
                        "Interactive ContentTutorialsTry-its (test code snippets)ExercisesQuizChallengesLabs",
                        "Tutorials",
                        "Try-its (test code snippets)",
                        "Exercises",
                        "Quiz",
                        "Challenges",
                        "Labs",
                        "Timeline and PaceYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).You can decide the learning pace for your class.Different study plans can be assigned to different students in the same class.The flexibility can help to make sure that everyone is challenged.",
                        "You can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).",
                        "You can decide the learning pace for your class.",
                        "Different study plans can be assigned to different students in the same class.",
                        "The flexibility can help to make sure that everyone is challenged.",
                        "Track Student ProgressThere are tools to track student progress.The analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.The challenges can be auto-graded or manually graded. The results are available to you as a teacher.",
                        "There are tools to track student progress.",
                        "The analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.",
                        "The challenges can be auto-graded or manually graded. The results are available to you as a teacher.",
                        "End of Pathway ExamThe Python study plan aligns with the Python Certification Exam.The exam can be taken at the end of the study plan, at your selected date.The exam summarizes the Python Tutorial.You get reports of the students' results.",
                        "The Python study plan aligns with the Python Certification Exam.",
                        "The exam can be taken at the end of the study plan, at your selected date.",
                        "The exam summarizes the Python Tutorial.",
                        "You get reports of the students' results.",
                        "AccessibilityStudy plans and learning materials are accessible on desktops, tablets, and smartphones.This ensures students can learn anytime, anywhere.",
                        "Study plans and learning materials are accessible on desktops, tablets, and smartphones.",
                        "This ensures students can learn anytime, anywhere."
                    ],
                    [
                        "You can add ready-made learning paths.",
                        "The learning paths are by default ordered by our recommended order.",
                        "You can change the order.",
                        "You can add custom activities with text, links, or multi-media files.",
                        "Drag and drop or click to make changes to the path."
                    ],
                    [
                        "Tutorials",
                        "Try-its (test code snippets)",
                        "Exercises",
                        "Quiz",
                        "Challenges",
                        "Labs"
                    ],
                    [
                        "You can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).",
                        "You can decide the learning pace for your class.",
                        "Different study plans can be assigned to different students in the same class.",
                        "The flexibility can help to make sure that everyone is challenged."
                    ],
                    [
                        "There are tools to track student progress.",
                        "The analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.",
                        "The challenges can be auto-graded or manually graded. The results are available to you as a teacher."
                    ],
                    [
                        "The Python study plan aligns with the Python Certification Exam.",
                        "The exam can be taken at the end of the study plan, at your selected date.",
                        "The exam summarizes the Python Tutorial.",
                        "You get reports of the students' results."
                    ],
                    [
                        "Study plans and learning materials are accessible on desktops, tablets, and smartphones.",
                        "This ensures students can learn anytime, anywhere."
                    ],
                    [
                        "Week 1: Introduction, variables, Data Types, Numbers & Casting",
                        "Week 2: Strings, Booleans & Operators, Lists, Tuples",
                        "Week 3: Sets, Dictionaries",
                        "Week 4: Conditionals, Loops & Iterators, Polymorphism, Arrays, Objects, Inheritance & Scope, Functions & Lambdas",
                        "Week 5: Miscellaneous, File Handling, MySQL, MongoDB, Matplotlib, Machine Learning, Python Certification Exam"
                    ]
                ],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_interview_questions.asp",
        "cours": {
            "titre": "PythonInterview Questions",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_interview_questions.asp",
            "contenus": {
                "paragraphs": [
                    "This page contains a list of typical Python Interview Questions and Answers.",
                    "These questions and answers cover some fundamental Python concepts that are often discussed in interviews.",
                    "Membership operators are used to test if a sequence is present in an object. Theinandnot inoperators are examples of these:",
                    "To create a module just save the code you want in a file with the file extension.py:",
                    "Now we can use the module we just created, by using theimportstatement:",
                    "Get the characters from position 2 to position 5 (not included):",
                    "Now we can use the class named MyClass to create objects:",
                    "Create an object named p1, and print the value of x:",
                    "Get certified by completingthecourse"
                ],
                "lists": [
                    [
                        "A variable created inside a function belongs to the local scope of that function, and can only be used inside that function.",
                        "A variable created in the main body of the Python code is a global variable and belongs to the global scope. Global variables are available from within any scope, global and local."
                    ],
                    [
                        "An iterator is an object that contains a countable number of values.",
                        "An iterator is an object that can be iterated upon, meaning that you can traverse through all the values.",
                        "Technically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods __iter__() and __next__()."
                    ],
                    [
                        "All classes in Python have a function called __init__(), which is always executed when the class is being initiated.",
                        "We can use the __init__() function to assign values to object properties, or other operations that are necessary to do when the object is being created."
                    ],
                    [
                        "Use lambda functions when an anonymous function is required for a short period of time."
                    ],
                    [
                        "Lists, tuples and sets are all used to store multiple items in a single variable.",
                        "A list is a collection of data which is ordered and changeable (elements can be added, removed and changed).",
                        "A tuple is a collection of data which is ordered and unchangeable (elements cannot be added, removed or changed).",
                        "A set is a collection of data which is unordered, unchangeable, and unindexed."
                    ],
                    [
                        "You can use theisalnum()method, which returns True if all the characters are alphanumeric, meaning alphabet letter (a-z) and numbers (0-9)."
                    ],
                    [
                        "You can use theint()function, like this:"
                    ],
                    [
                        "Indentation refers to the spaces at the beginning of a code line. Where in other programming languages the indentation in code is for readability only, the indentation in Python is very important.",
                        "Python uses indentation to indicate a block of code.",
                        "Python will give you an error if you skip the indentation."
                    ],
                    [],
                    [
                        "SET"
                    ],
                    [
                        "Inheritance allows us to define a class that inherits all the methods and properties from another class.",
                        "Parent class is the class being inherited from, also called base class.",
                        "Child class is the class that inherits from another class, also called derived class."
                    ],
                    [
                        "Above ten,and also above 20!"
                    ],
                    [
                        "Text Type:str",
                        "Numeric Types:int,float,complex",
                        "Sequence Types:list,tuple,range",
                        "Mapping Type:dict",
                        "Set Types:set,frozenset",
                        "Boolean Type:bool",
                        "Binary Types:bytes,bytearray,memoryview"
                    ],
                    [
                        "Membership operators are used to test if a sequence is present in an object. Theinandnot inoperators are examples of these:"
                    ],
                    [
                        "Thepassstatement"
                    ],
                    [
                        "Arbitrary Arguments are often shortened to*argsin Python documentations.",
                        "If you do not know how many arguments that will be passed into your function, add a*before the parameter name in the function definition. This way the function will receive a tuple of arguments, and can access the items accordingly."
                    ],
                    [
                        "To create a module just save the code you want in a file with the file extension.py:def greeting(name):print(\"Hello, \" + name)",
                        "Now we can use the module we just created, by using theimportstatement:import mymodulemymodule.greeting(\"Jonathan\")"
                    ],
                    [
                        "No, because:list2will only be areferencetolist1, and changes made inlist1will automatically also be made inlist2.",
                        "To make a copy of a list, you can usecopy()or thelist()method."
                    ],
                    [
                        "You can return a range of characters by using the \"slice syntax\".",
                        "Specify the start index and the end index, separated by a colon, to return a part of the string, for example:"
                    ],
                    [
                        "A Class is like an object constructor, or a \"blueprint\" for creating objects.",
                        "You can create a class with the class keyword:class MyClass:x = 5Now we can use the class named MyClass to create objects:Create an object named p1, and print the value of x:p1 = MyClass()print(p1.x)"
                    ]
                ],
                "examples": [
                    "num = \"5\"convert = int(num)",
                    "print(type(x))",
                    "x = 41\n\nif x > 10:\n  print(\"Above ten,\")\n  if x > 20:\n    print(\"and also above 20!\")\n  else:\n    print(\"but not above 20.\")",
                    "x = [\"apple\", \"banana\"]print(\"banana\" in x) # returns Truex = [\"apple\", \"banana\"]print(\"pineapple\" not in x) # returns True",
                    "def greeting(name):print(\"Hello, \" + name)",
                    "import mymodulemymodule.greeting(\"Jonathan\")",
                    "b = \"Hello, World!\"print(b[2:5])",
                    "class MyClass:x = 5",
                    "p1 = MyClass()print(p1.x)"
                ]
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_bootcamp.asp",
        "cours": {
            "titre": "W3SchoolsPython Bootcamp",
            "description": "",
            "lien": "https://www.w3schools.com/python/python_bootcamp.asp",
            "contenus": {
                "paragraphs": [
                    "Learn More",
                    "Start learning Data Analytics with the W3Schools program and lay the foundations of your programming skills. This program is a great foundation for you that wants to get started with Data Analytics. It covers Python, SQL, NumPy, Pandas, R, and Data Science.",
                    "Python is a popular object oriented programming language.",
                    "SQL is a standard language for storing, manipulating and retrieving data in databases.",
                    "NumPy is a Python library for using arrays in statistics and math.",
                    "Pandas is a Python library for data analysis.",
                    "R is a language for statistical computing and graphics. It provides an environment for data manipulation, calculation and visualization.",
                    "This is a structured and interactive version of the w3schools Python, SQL, NumPy, Pandas, R, and Data Science Tutorial together with the w3schools certification.",
                    "The program is a set of self-paced courses with text based modules, practical interactive examples and exercises to check your understanding as you progress. Complete the modules and the final certification exams to get the w3schools certification.",
                    "7x Certifications:",
                    "The Certified Data Analyst certification is granted when all the above certifications are obtained!",
                    "You get sharable certificates that can be added to your CV, Resume or LinkedIn.",
                    "Check out what it looks like in this example!",
                    "Learn More",
                    "Enroll by paying the enrollment fee and gain access to the course and final exam.\nThere is no deadline to take the exam. All questions in the exam are based on W3Schools content.",
                    "The courses are self-paced with text based modules, practical interactive examples and exercises\nto check your understanding as you progress. Complete the learning modules to unlock the final exam.",
                    "The exams are taken at the end of each course after finishing the course learning modules.\nImmediately after completing the exam, you will be informed of your score and of your pass/fail status.\nYou will get three attempts to pass each exam. You can use the new attempts to improve \nyour score.\nThe best result of the attempts will count.",
                    "Pass the exams and get your certifications and your Certified Developer titles!\nEach certificate gets a unique link that can be shared with others. Validate your certificates with \na link or a QR code.",
                    "Learn More"
                ],
                "lists": [
                    [
                        "How to write scripts for automating tasks.",
                        "How to create and serve web applications.",
                        "How to write programs for mathematical and scientific computing.",
                        "How to use object-oriented programming and third-party libraries.",
                        "How to build secure and reliable applications."
                    ],
                    [
                        "How to store, change and retrieve data in databases with SQL.",
                        "How to use SQL in: MySQL, SQL Server, MS Access, Oracle, Sybase, Informix, Postgres, and other database systems."
                    ],
                    [
                        "How NumPy can be used for arrays in statistics and math."
                    ],
                    [
                        "How Pandas can be used for data analysis."
                    ],
                    [
                        "How to use R for managing different types of data.",
                        "How to use R for statistical data analysis.",
                        "How to use R to visualize data with plots and diagrams."
                    ],
                    [
                        "Certified Python Developer",
                        "Certified SQL Developer",
                        "Numpy Fundamentals",
                        "Pandas Fundamentals",
                        "R Fundamentals",
                        "Data Science Fundamentals",
                        "Certified Data Analyst"
                    ]
                ],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://www.w3schools.com/python/python_exam.asp",
        "cours": {
            "titre": "W3SchoolsPython Certificate",
            "description": "How Does It Work?Study for free at W3Schools.comStudy at your own speedTest your skills with W3Schools online quizzesApply for your certificate by paying an exam feeTake your exam online, at any time, and from any location",
            "lien": "https://www.w3schools.com/python/python_exam.asp",
            "contenus": {
                "paragraphs": [
                    "W3Schools offers an Online Certification Program.",
                    "The perfect solution for busy professionals who need to balance work, family, and career building.",
                    "More than 50 000 certificates already issued!",
                    "Get Your Certificate »",
                    "W3Schools offers an Online Certification Program.",
                    "The perfect solution for busy professionals who need to balance work, family, and career building.",
                    "More than 50 000 certificates already issued!",
                    "Get Your Certificate »",
                    "Any student or professional within the digital industry.",
                    "Certifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.",
                    "W3Schools has over two decades of experience with teaching coding online.",
                    "Our certificates are recognized and valued by companies looking to employ skilled developers.",
                    "Show the world your coding skills by getting a certification.",
                    "The prices is a small fraction compared to the price of traditional education.",
                    "Document and validate your competence by getting certified!",
                    "Fee:95 USD",
                    "Achievable certification levels:Intermediate (40%)Advanced (75%)Professional (90%)",
                    "Number of questions:Adaptive,60on average",
                    "Requirement to pass:Minimum 40% - Intermediate level",
                    "Time limit:60 minutes",
                    "Number of attempts to pass:3",
                    "Exam deadline:None",
                    "Certification Expiration:None",
                    "Format:Online, multiple choice",
                    "Register now »",
                    "Getting a certificate proves your commitment to upgrading your skills.",
                    "The certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.",
                    "It gives you the credibility needed for more responsibilities, larger projects, and a higher salary.",
                    "Knowledge is power, especially in the current job market.",
                    "Documentation of your skills enables you to advance your career or helps you to start a new one.",
                    "Example certificate:",
                    "Each certificate gets a unique link that can be shared with others.",
                    "Validate your certification with the link or QR code.",
                    "Check how it looks like in thisExample.",
                    "Share your certificate on Linkedin the Certifications section in just one click!",
                    "Getting a certificate proves your commitment to upgrade your skills,\ngives you the credibility needed for more responsibilities, larger projects, and a higher salary.",
                    "Get Your Certificate »",
                    "Are you an educator, manager or business owner looking for courses or certifications?",
                    "We are working with schools, companies and organizations from all over the world.",
                    "Get courses and/or certifications for your team here."
                ],
                "lists": [
                    [
                        "Study for free at W3Schools.com",
                        "Study at your own speed",
                        "Test your skills with W3Schools online quizzes",
                        "Apply for your certificate by paying an exam fee",
                        "Take your exam online, at any time, and from any location"
                    ]
                ],
                "examples": []
            },
            "categories": "",
            "niveau": "",
            "durée": ""
        }
    },
    {
        "url": "https://campus.w3schools.com/products/python-certificate?utm_source=w3schools&utm_medium=referral&utm_campaign=python_exam&utm_content=get_your_certificate",
        "cours": {}
    }
]