[
  {
    "url": "https://www.w3schools.com/nodejs/default.asp",
    "cours": {
      "titre": "Node.jsTutorial",
      "description": "Node.js is an open source server environment.Node.js allows you to run JavaScript on the server.Start learning Node.js now »",
      "lien": "https://www.w3schools.com/nodejs/default.asp",
      "contenus": {
        "paragraphs": [
          "Node.js is an open source server environment.",
          "Node.js allows you to run JavaScript on the server.",
          "Our \"Show Node.js\" tool makes it easy to learn Node.js, it shows both the \ncode and the result.",
          "Click on the \"Run example\" button to see how it works.",
          "In this tutorial there will be some examples that are better explained by displaying the result in the \ncommand line interface.",
          "When this happens, The \"Show Node.js\" tool will show the result in a black screen on the right:",
          "Click on the \"Run example\" button to see how it works.",
          "Track your progress with the free \"My Learning\" program here at W3Schools.",
          "Log in to your account, and start earning points!",
          "This is an optional feature. You can study at W3Schools without using My Learning.",
          "Node.js has a set of built-in modules.",
          "Built-in Modules",
          "Download Node.js from the official Node.js web site:https://nodejs.org"
        ],
        "lists": [],
        "examples": [
          "var http = require('http');http.createServer(function (req, res) {res.writeHead(200, {'Content-Type': 'text/plain'});res.end('Hello World!');}).listen(8080);",
          "console.log('This example is different!');console.log('The result is displayed in the Command Line Interface');"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_intro.asp",
    "cours": {
      "titre": "Node.jsIntroduction",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_intro.asp",
      "contenus": {
        "paragraphs": [
          "Node.js uses asynchronous programming!",
          "A common task for a web server can be to open a file on the server and return the content to \nthe client.",
          "Here is how PHP or ASP handles a file request:",
          "Here is how Node.js handles a file request:",
          "Node.js eliminates the waiting, and simply continues with the next request.",
          "Node.js runs single-threaded, non-blocking, asynchronous programming, which \nis very memory efficient."
        ],
        "lists": [
          [
            "Node.js is an open source server environment",
            "Node.js is free",
            "Node.js runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)",
            "Node.js uses JavaScript on the server"
          ],
          [
            "Sends the task to the computer's file system.",
            "Waits while the file system opens and reads the \n  file.",
            "Returns the content to the client.",
            "Ready to handle the next \nrequest."
          ],
          [
            "Sends the task to the computer's file system.",
            "Ready to handle the next request.",
            "When the file system has \nopened and read the file, the server returns the content to the client."
          ],
          [
            "Node.js can generate dynamic page content",
            "Node.js can create, open, read, write, delete, and close files on the server",
            "Node.js can collect form data",
            "Node.js can add, delete, modify data in your database"
          ],
          [
            "Node.js files contain tasks that will be executed on certain events",
            "A typical event is someone trying to access a port on the server",
            "Node.js files must be initiated on the server before having any effect",
            "Node.js files have extension \".js\""
          ]
        ],
        "examples": []
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_get_started.asp",
    "cours": {
      "titre": "Node.jsGet Started",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_get_started.asp",
      "contenus": {
        "paragraphs": [
          "The official Node.js website has installation instructions for Node.js:https://nodejs.org",
          "Once you have downloaded and installed Node.js on your computer, let's try to \ndisplay \"Hello World\" in a web browser.",
          "Create a Node.js file named \"myfirst.js\", and add the following \ncode:",
          "myfirst.js",
          "Save the file on your computer: C:\\Users\\Your Name\\myfirst.js",
          "The code \ntells the computer to write \"Hello World!\" if anyone (e.g. a web browser) tries \nto access your computer on port 8080.",
          "For now, you do not have to \nunderstand the code. It will be explained later.",
          "Node.js files must be initiated in the \"Command Line Interface\" program \nof your computer.",
          "How to open the command line interface on your computer depends on the operating system. For Windows users, press the start button and look for \n\"Command \nPrompt\", or simply write \"cmd\" in the search field.",
          "Navigate to the folder that contains the file \"myfirst.js\", the \ncommand line interface \nwindow should look something like this:",
          "The file you have just created must be initiated by Node.js before any action \ncan take place.",
          "Start your command line interface, writenode myfirst.jsand hit enter:",
          "Initiate \"myfirst.js\":",
          "Now, your computer works as a server!",
          "If anyone tries to access your computer on port 8080, they will get a \"Hello \nWorld!\" message in return!",
          "Start your internet browser, and type in the address:http://localhost:8080"
        ],
        "lists": [],
        "examples": [
          "var http = require('http');http.createServer(function (req, res) {res.writeHead(200, {'Content-Type': 'text/html'});res.end('Hello World!');}).listen(8080);",
          "C:\\Users\\Your Name>_",
          "C:\\Users\\Your Name>node myfirst.js"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_modules.asp",
    "cours": {
      "titre": "Node.jsModules",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_modules.asp",
      "contenus": {
        "paragraphs": [
          "Consider modules to be the same as JavaScript libraries.",
          "A set of functions you want to include in your application.",
          "Node.js has a set of built-in modules which you can use without any further \ninstallation.",
          "Look at ourBuilt-in Modules Referencefor a \ncomplete list of modules.",
          "To include a module, use therequire()function with the name of the module:",
          "Now your application has access to the HTTP module, and is able to create a server:",
          "You can create your own modules, and easily include them in your applications.",
          "The following example creates a module that returns a date and time object:",
          "Create a module that returns the current date and time:",
          "Use theexportskeyword to make properties and methods available outside the module file.",
          "Save the code above in a file called \"myfirstmodule.js\"",
          "Now you can include and use the module in any of your Node.js files.",
          "Use the module \"myfirstmodule\" in a Node.js file:",
          "Notice that we use./to locate the module, that means that the \nmodule is located in the same folder as the Node.js file.",
          "Save the code above in a file called \"demo_module.js\", and initiate the file:",
          "Initiate demo_module.js:",
          "If you have followed the same steps on your computer, you will see the same result as the example:http://localhost:8080"
        ],
        "lists": [],
        "examples": [
          "var http = require('http');",
          "http.createServer(function (req, res) {res.writeHead(200, {'Content-Type': 'text/html'});res.end('Hello World!');}).listen(8080);",
          "exports.myDateTime = function () {return Date();};",
          "var http = require('http');var dt = require('./myfirstmodule');http.createServer(function (req, res) {res.writeHead(200, {'Content-Type': 'text/html'});res.write(\"The date and time are currently: \" +dt.myDateTime());res.end();}).listen(8080);",
          "C:\\Users\\Your Name>node demo_module.js"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_http.asp",
    "cours": {
      "titre": "Node.jsHTTP Module",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_http.asp",
      "contenus": {
        "paragraphs": [
          "Node.js has a built-in module called HTTP, which allows Node.js to transfer \ndata over the Hyper Text Transfer Protocol (HTTP).",
          "To include the HTTP module, use therequire()method:",
          "The HTTP module can create an HTTP server that listens to \nserver ports and gives a response back to \nthe client.",
          "Use thecreateServer()method to create an \nHTTP server:",
          "The function passed into thehttp.createServer()method, will be executed when someone tries to access the \ncomputer on port 8080.",
          "Save the code above in a file called \"demo_http.js\", and initiate \nthe file:",
          "Initiate demo_http.js:",
          "If you have followed the same steps on your computer, you will see the same result as the example:http://localhost:8080",
          "If the response from the HTTP server is supposed to be displayed as HTML, you \nshould include an HTTP header with the correct content type:",
          "The first argument of theres.writeHead()method is the status code, 200 means \nthat \nall is OK, the second argument is an object containing the response headers.",
          "The function passed into thehttp.createServer()has areqargument that represents the request from the \nclient, as an object (http.IncomingMessage object).",
          "This object has a property called \"url\" which holds the \npart of the url that comes after the domain name:",
          "demo_http_url.js",
          "Save the code above in a file called \"demo_http_url.js\" and \ninitiate the file:",
          "Initiate demo_http_url.js:",
          "If you have followed the same steps on your computer, you should see two \ndifferent results when opening these two addresses:",
          "http://localhost:8080/summer",
          "Will produce this result:",
          "http://localhost:8080/winter",
          "Will produce this result:",
          "There are built-in modules to easily split the query string into readable \nparts, such as the URL module.",
          "Split the query string into readable parts:",
          "Save the code above in a file called \"demo_querystring.js\" and \ninitiate the file:",
          "Initiate demo_querystring.js:",
          "The address:",
          "http://localhost:8080/?year=2017&month=July",
          "Will produce this result:",
          "Read more about the URL module in theNode.js URL \nModulechapter."
        ],
        "lists": [],
        "examples": [
          "var http = require('http');",
          "var http = require('http');//create a server object:http.createServer(function \n  (req, res) {res.write('Hello World!'); //write a response to the \n  clientres.end(); //end the response}).listen(8080); //the \n  server object listens on port 8080",
          "C:\\Users\\Your Name>node demo_http.js",
          "var http = require('http');http.createServer(function \n  (req, res) {res.writeHead(200, \n  {'Content-Type': 'text/html'});res.write('Hello \n  World!');res.end();}).listen(8080);",
          "var http = require('http');http.createServer(function \n  (req, res) {res.writeHead(200, {'Content-Type': 'text/html'});res.write(req.url);res.end();}).listen(8080);",
          "C:\\Users\\Your Name>node demo_http_url.js",
          "/summer",
          "/winter",
          "var http = require('http');var url = require('url');http.createServer(function (req, res) {res.writeHead(200, \n    {'Content-Type': 'text/html'});var q = url.parse(req.url, \n    true).query;var txt =q.year+ \" \" +q.month;res.end(txt);}).listen(8080);",
          "C:\\Users\\Your Name>node demo_querystring.js",
          "2017 July"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_filesystem.asp",
    "cours": {
      "titre": "Node.jsFile System Module",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_filesystem.asp",
      "contenus": {
        "paragraphs": [
          "The Node.js file system module allows you to work with the file system on your \ncomputer.",
          "To include the File System module, use therequire()method:",
          "Common use for the File System module:",
          "Thefs.readFile()method is used to read files on your computer.",
          "Assume we have the following HTML file (located in the same folder as \nNode.js):",
          "demofile1.html",
          "Create a Node.js file that reads the HTML file, \nand return the content:",
          "Save the code above in a file called \"demo_readfile.js\", and initiate the \nfile:",
          "Initiate demo_readfile.js:",
          "If you have followed the same steps on your computer, you will see the same \nresult as the example:http://localhost:8080",
          "The File System module has methods for creating new files:",
          "Thefs.appendFile()method appends specified content to a file. If the \nfile does not exist, the file will be created:",
          "Create a new file using the appendFile() method:",
          "Thefs.open()method takes a \"flag\" as the second argument, if the \nflag is \"w\" for \"writing\", the specified file is opened for writing. If the file \ndoes not exist, an empty file is created:",
          "Create a new, empty file using the open() method:",
          "Thefs.writeFile()method replaces the specified file and content if it exists. \nIf the file does not exist, a new file, containing the specified content, will \nbe created:",
          "Create a new file using the writeFile() method:",
          "The File System module has methods for updating files:",
          "Thefs.appendFile()method appends the specified content at the end of the specified file:",
          "Append \"This is my text.\" to the end of the file \"mynewfile1.txt\":",
          "Thefs.writeFile()method replaces the specified file and content:",
          "Replace the content of the file \"mynewfile3.txt\":",
          "To delete a file with the File System module,  use thefs.unlink()method.",
          "Thefs.unlink()method deletes the specified file:",
          "Delete \"mynewfile2.txt\":",
          "To rename a file with the File System module,  use thefs.rename()method.",
          "Thefs.rename()method renames the specified file:",
          "Rename \"mynewfile1.txt\" to \"myrenamedfile.txt\":",
          "You can also use Node.js to upload files to your computer.",
          "Read how in ourNode.js Upload Fileschapter."
        ],
        "lists": [
          [
            "Read files",
            "Create files",
            "Update files",
            "Delete files",
            "Rename files"
          ],
          [
            "fs.appendFile()",
            "fs.open()",
            "fs.writeFile()"
          ],
          [
            "fs.appendFile()",
            "fs.writeFile()"
          ]
        ],
        "examples": [
          "var fs = require('fs');",
          "<html><body><h1>My Header</h1><p>My paragraph.</p></body></html>",
          "var http = require('http');var fs = require('fs');http.createServer(function \n  (req, res) {fs.readFile('demofile1.html', function(err, data) {res.writeHead(200, {'Content-Type': 'text/html'});res.write(data);return res.end();});}).listen(8080);",
          "C:\\Users\\Your Name>node demo_readfile.js",
          "var fs = require('fs');fs.appendFile('mynewfile1.txt', 'Hello \n  content!', function (err) {if (err) throw err;console.log('Saved!');});",
          "var fs = require('fs');fs.open('mynewfile2.txt', 'w', function (err, \n  file) {if (err) throw err;console.log('Saved!');});",
          "var fs = require('fs');fs.writeFile('mynewfile3.txt', 'Hello \n  content!', function (err) {if (err) throw err;console.log('Saved!');});",
          "var fs = require('fs');fs.appendFile('mynewfile1.txt', ' This is my \n  text.', function (err) {if (err) throw err;console.log('Updated!');});",
          "var fs = require('fs');fs.writeFile('mynewfile3.txt', 'This is my text', function (err) {if (err) throw err;console.log('Replaced!');});",
          "var fs = require('fs');fs.unlink('mynewfile2.txt', function (err) {if (err) throw err;console.log('File deleted!');});",
          "var fs = require('fs');fs.rename('mynewfile1.txt', 'myrenamedfile.txt', function (err) {if (err) throw err;console.log('File Renamed!');});"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_url.asp",
    "cours": {
      "titre": "Node.jsURL Module",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_url.asp",
      "contenus": {
        "paragraphs": [
          "The URL module splits up a web address into readable parts.",
          "To include the URL module, use therequire()method:",
          "Parse an address with theurl.parse()method, and it will return a URL object with each part of the address as \nproperties:",
          "Split a web address into readable parts:",
          "Now we know how to parse the query string, and in the previous chapter we \nlearned how to make Node.js behave as a file \nserver. Let us combine the two, and serve the file requested by the client.",
          "Create two html files and save them in the same folder as your node.js files.",
          "summer.html",
          "winter.html",
          "Create a Node.js file that opens the requested file and returns the content \nto the client. If anything goes wrong, throw a 404 error:",
          "demo_fileserver.js:",
          "Remember to initiate the file:",
          "Initiate demo_fileserver.js:",
          "If you have followed the same steps on your computer, you should see two \ndifferent results when opening these two addresses:",
          "http://localhost:8080/summer.html",
          "Will produce this result:",
          "I love the sun!",
          "http://localhost:8080/winter.html",
          "Will produce this result:",
          "I love the snow!"
        ],
        "lists": [],
        "examples": [
          "var url = require('url');",
          "var url = require('url');var adr = 'http://localhost:8080/default.htm?year=2017&month=february';var q = url.parse(adr, true);console.log(q.host); //returns 'localhost:8080'console.log(q.pathname); //returns '/default.htm'console.log(q.search); //returns '?year=2017&month=february'var qdata = q.query; //returns an object: { year: 2017, month: 'february' }console.log(qdata.month); //returns 'february'",
          "<!DOCTYPE html><html><body><h1>Summer</h1><p>I love \n  the sun!</p></body></html>",
          "<!DOCTYPE html><html><body><h1>Winter</h1><p>I love \n  the snow!</p></body></html>",
          "var http = require('http');var url = require('url');var fs = require('fs');http.createServer(function \n  (req, res) {var q = url.parse(req.url, true);var \n    filename = \".\" + q.pathname;fs.readFile(filename, \n    function(err, data) {if (err) {res.writeHead(404, {'Content-Type': 'text/html'});return res.end(\"404 Not Found\");}res.writeHead(200, {'Content-Type': 'text/html'});res.write(data);return res.end();});}).listen(8080);",
          "C:\\Users\\Your Name>node demo_fileserver.js",
          "SummerI love the sun!",
          "WinterI love the snow!"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_npm.asp",
    "cours": {
      "titre": "Node.jsNPM",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_npm.asp",
      "contenus": {
        "paragraphs": [
          "NPM is a package manager for Node.js packages, or modules if you like.",
          "www.npmjs.comhosts thousands of \nfree packages to download and use.",
          "The NPM program is installed on your computer when you install Node.js",
          "NPM is already ready to run on your computer!",
          "A package in Node.js contains all the files you need for a module.",
          "Modules are JavaScript libraries you can include in your project.",
          "Downloading a package is very easy.",
          "Open the command line interface and tell NPM to download the package you want.",
          "I want to download a package called \"upper-case\":",
          "Download \"upper-case\":",
          "Now you have downloaded and installed your first package!",
          "NPM creates a folder named \"node_modules\", where the package will be placed. \nAll packages you install in the future will be \nplaced in this folder.",
          "My project now has a folder structure like this:",
          "C:\\Users\\My Name\\node_modules\\upper-case",
          "Once the package is installed, it is ready to use.",
          "Include the \"upper-case\" package the same way you include any other \nmodule:",
          "Create a Node.js file that will convert the output \"Hello World!\" into upper-case letters:",
          "Save the code above in a file called \"demo_uppercase.js\", and initiate the file:",
          "Initiate demo_uppercase:",
          "If you have followed the same steps on your computer, you will see the same result as the example:http://localhost:8080"
        ],
        "lists": [],
        "examples": [
          "C:\\Users\\Your Name>npm install upper-case",
          "var uc = require('upper-case');",
          "var http = require('http');var uc = require('upper-case');http.createServer(function \n  (req, res) {res.writeHead(200, {'Content-Type': 'text/html'});res.write(uc.upperCase(\"Hello \n  World!\"));res.end();}).listen(8080);",
          "C:\\Users\\Your Name>node demo_uppercase.js"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_events.asp",
    "cours": {
      "titre": "Node.jsEvents",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_events.asp",
      "contenus": {
        "paragraphs": [
          "Node.js is perfect for event-driven applications.",
          "Every action on a computer is an event. Like when a connection is made or a \nfile is opened.",
          "Objects in Node.js can fire events, like the readStream object fires \nevents when opening and closing a file:",
          "Node.js has a \nbuilt-in module, called \"Events\", where you can create-, fire-, and listen for- your own \nevents.",
          "To include the built-in Events module use therequire()method. In addition, all event properties and methods are an instance of an \nEventEmitter object. To be able to access these properties and methods, create \nan EventEmitter object:",
          "You can assign event handlers to your own events with the EventEmitter \nobject.",
          "In the example below we have created a function that will be \nexecuted when a \"scream\" event is fired.",
          "To fire an event, use theemit()method."
        ],
        "lists": [],
        "examples": [
          "var fs = require('fs');var rs = fs.createReadStream('./demofile.txt');rs.on('open', function () {console.log('The file is open');});",
          "var events = require('events');var eventEmitter = new events.EventEmitter();",
          "var events = require('events');var eventEmitter = new events.EventEmitter();//Create an event handler:var myEventHandler = function () {console.log('I hear a scream!');}//Assign the event handler to an \n  event:eventEmitter.on('scream', myEventHandler);//Fire the \n  'scream' event:eventEmitter.emit('scream');"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_uploadfiles.asp",
    "cours": {
      "titre": "Node.jsUpload Files",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_uploadfiles.asp",
      "contenus": {
        "paragraphs": [
          "There is a very good module for working with file uploads, called \"Formidable\".",
          "The Formidable module can be downloaded and installed using NPM:",
          "After you have downloaded the Formidable module, you can include the module \nin any application:",
          "Now you are ready to make a web page in Node.js that lets the user upload \nfiles to your computer:",
          "Create a Node.js file that writes an HTML form, with an upload field:",
          "This code will produce an HTML form:",
          "Include the Formidable module to be able to parse the uploaded file once it \nreaches the server.",
          "When the file is uploaded and parsed, it gets placed on a temporary folder on your computer.",
          "The file will be uploaded, and placed on a temporary folder:",
          "When a file is successfully uploaded to the server, it is placed on a \ntemporary folder.",
          "The path to this directory can be found in the \"files\" object, passed as the \nthird argument in theparse()method's callback function.",
          "To move the file to the folder of your choice, use the File System module, \nand rename the file:",
          "Include the fs module, and move the file to the current folder:"
        ],
        "lists": [],
        "examples": [
          "C:\\Users\\Your Name>npm install formidable",
          "var formidable = require('formidable');",
          "var http = require('http');http.createServer(function \n  (req, res) {res.writeHead(200, {'Content-Type': 'text/html'});res.write('<form \n  action=\"fileupload\" method=\"post\" enctype=\"multipart/form-data\">');res.write('<input \n  type=\"file\" name=\"filetoupload\"><br>');res.write('<input \n  type=\"submit\">');res.write('</form>');return res.end();}).listen(8080);",
          "var http = require('http');var formidable = require('formidable');http.createServer(function \n  (req, res) {if (req.url == '/fileupload') {var form = new formidable.IncomingForm();form.parse(req, \n  function (err, fields, files) {res.write('File \n  uploaded');res.end();});} else {res.writeHead(200, {'Content-Type': 'text/html'});res.write('<form \n  action=\"fileupload\" method=\"post\" enctype=\"multipart/form-data\">');res.write('<input \n  type=\"file\" name=\"filetoupload\"><br>');res.write('<input \n  type=\"submit\">');res.write('</form>');return res.end();}}).listen(8080);",
          "var http = require('http');var formidable = require('formidable');var fs = require('fs');http.createServer(function \n  (req, res) {if (req.url == '/fileupload') {var form = new formidable.IncomingForm();form.parse(req, \n  function (err, fields, files) {var \n  oldpath = files.filetoupload.filepath;var \n  newpath = 'C:/Users/Your Name/' + files.filetoupload.originalFilename;fs.rename(oldpath, newpath, function (err) {if (err) throw \n  err;res.write('File uploaded \n  and moved!');res.end();});});} else {res.writeHead(200, {'Content-Type': 'text/html'});res.write('<form \n  action=\"fileupload\" method=\"post\" enctype=\"multipart/form-data\">');res.write('<input \n  type=\"file\" name=\"filetoupload\"><br>');res.write('<input \n  type=\"submit\">');res.write('</form>');return res.end();}}).listen(8080);"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_email.asp",
    "cours": {
      "titre": "Node.jsSend an Email",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_email.asp",
      "contenus": {
        "paragraphs": [
          "The Nodemailer module makes it easy to send emails from your computer.",
          "The Nodemailer module can be downloaded and installed using npm:",
          "After you have downloaded the Nodemailer module, you can include the module \nin any application:",
          "Now you are ready to send emails from your server.",
          "Use the username and password from your selected email provider to send an \nemail. This tutorial will show you how to use your Gmail account to send an \nemail:",
          "And that's it! Now your server is able to send emails.",
          "To send an email to more than one receiver, add them to the \"to\" property of the mailOptions object, separated by commas:",
          "Send email to more than one address:",
          "To send HTML formatted text in your email, use the \"html\" property instead of \nthe \"text\" property:",
          "Send email containing HTML:"
        ],
        "lists": [],
        "examples": [
          "C:\\Users\\Your Name>npm install nodemailer",
          "var nodemailer = require('nodemailer');",
          "var nodemailer = require('nodemailer');var transporter = \n  nodemailer.createTransport({service: 'gmail',auth: {user: 'youremail@gmail.com',pass: 'yourpassword'}});var mailOptions = {from: 'youremail@gmail.com',to: 'myfriend@yahoo.com',subject: 'Sending Email using Node.js',text: \n  'That was easy!'};transporter.sendMail(mailOptions, \n  function(error, info){if (error) {console.log(error);} else {console.log('Email sent: ' + info.response);}});",
          "var mailOptions = {from: 'youremail@gmail.com',to:'myfriend@yahoo.com,myotherfriend@yahoo.com',subject: 'Sending Email using Node.js',text: \n'That was easy!'}",
          "var mailOptions = {from: 'youremail@gmail.com',to: 'myfriend@yahoo.com',subject: 'Sending Email using Node.js',html: \n'<h1>Welcome</h1><p>That was easy!</p>'}"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_mysql.asp",
    "cours": {
      "titre": "Node.jsMySQL",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_mysql.asp",
      "contenus": {
        "paragraphs": [
          "Node.js can be used in database applications.",
          "One of the most popular databases is MySQL.",
          "To be able to experiment with the code examples, you should have MySQL installed \non your computer.",
          "You can download a free MySQL database athttps://www.mysql.com/downloads/.",
          "Once you have MySQL up and running on your computer, you can access it by \nusing Node.js.",
          "To access a MySQL database with Node.js, you need a MySQL driver. This \ntutorial will use the \"mysql\" module, downloaded from NPM.",
          "To download and install the \"mysql\" module, open the Command Terminal and execute the following:",
          "Now you have downloaded and installed a mysql database driver.",
          "Node.js can use this module to manipulate the MySQL database:",
          "Start by creating a connection to the database.",
          "Use the username and password from your MySQL database.",
          "demo_db_connection.js",
          "Save the code above in a file called \"demo_db_connection.js\" and run the file:",
          "Run \"demo_db_connection.js\"",
          "Which will give you this result:",
          "Now you can start querying the database using SQL statements.",
          "Use SQL statements to read from (or write to) a MySQL database. This \nis also called \"to query\" the database.",
          "The connection object created in the example above, has a method for querying the database:",
          "The query method takes an sql statements as a parameter and returns the \nresult.",
          "Learn how to read, write, delete, and update a database in the next chapters.",
          "Read more about SQL statements in ourSQL Tutorial."
        ],
        "lists": [],
        "examples": [
          "C:\\Users\\Your Name>npm install mysql",
          "var mysql = require('mysql');",
          "var mysql = require('mysql');var con = mysql.createConnection({host: \"localhost\",user: \"yourusername\",password: \"yourpassword\"});con.connect(function(err) {if (err) throw err;console.log(\"Connected!\");});",
          "C:\\Users\\Your Name>node demo_db_connection.js",
          "Connected!",
          "con.connect(function(err) {if (err) throw err;console.log(\"Connected!\");con.query(sql, function (err, result) {if (err) throw err;console.log(\"Result: \n  \" + result);});});"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_mysql_create_db.asp",
    "cours": {
      "titre": "Node.jsMySQLCreate Database",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_mysql_create_db.asp",
      "contenus": {
        "paragraphs": [
          "To create a database in MySQL, use the \"CREATE DATABASE\" statement:",
          "Create a database named \"mydb\":",
          "Save the code above in a file called \"demo_create_db.js\" and run the file:",
          "Run \"demo_create_db.js\"",
          "Which will give you this result:"
        ],
        "lists": [],
        "examples": [
          "var mysql = require('mysql');var con = mysql.createConnection({host: \"localhost\",user: \"yourusername\",password: \"yourpassword\"});con.connect(function(err) {if (err) throw err;console.log(\"Connected!\");con.query(\"CREATE DATABASE mydb\", function (err, result) {if (err) throw err;console.log(\"Database \n  created\");});});",
          "C:\\Users\\Your Name>node demo_create_db.js",
          "Connected!Database created"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_mysql_create_table.asp",
    "cours": {
      "titre": "Node.jsMySQLCreate Table",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_mysql_create_table.asp",
      "contenus": {
        "paragraphs": [
          "To create a table in MySQL, use the \"CREATE TABLE\" statement.",
          "Make sure you define the name of the database when you create the connection:",
          "Create a table named \"customers\":",
          "Save the code above in a file called \"demo_create_table.js\" and run the file:",
          "Run \"demo_create_table.js\"",
          "Which will give you this result:",
          "When creating a table, you should also create a column with a unique key for each \nrecord.",
          "This can be done by defining a column as \"INT AUTO_INCREMENT PRIMARY KEY\" which will insert a \nunique number for each record. Starting at 1, and increased by one for each \nrecord.",
          "Create primary key when creating the table:",
          "If the table already exists, use the ALTER TABLE keyword:",
          "Create primary key on an existing table:"
        ],
        "lists": [],
        "examples": [
          "var mysql = require('mysql');var con = mysql.createConnection({host: \"localhost\",user: \"yourusername\",password: \"yourpassword\",database: \"mydb\"});con.connect(function(err) {if (err) throw err;console.log(\"Connected!\");var sql = \"CREATE TABLE customers (name VARCHAR(255), \n  address VARCHAR(255))\";con.query(sql, function (err, result) {if (err) \n  throw err;console.log(\"Table created\");});});",
          "C:\\Users\\Your Name>node demo_create_table.js",
          "Connected!Table created",
          "var mysql = require('mysql');var con = mysql.createConnection({host: \"localhost\",user: \"yourusername\",password: \"yourpassword\",database: \"mydb\"});con.connect(function(err) {if (err) throw err;console.log(\"Connected!\");var sql = \"CREATE TABLE customers (id INT AUTO_INCREMENT PRIMARY \n  KEY, name VARCHAR(255), \n  address VARCHAR(255))\";con.query(sql, function (err, result) {if (err) \n  throw err;console.log(\"Table created\");});});",
          "var mysql = require('mysql');var con = mysql.createConnection({host: \"localhost\",user: \"yourusername\",password: \"yourpassword\",database: \"mydb\"});con.connect(function(err) {if (err) throw err;console.log(\"Connected!\");var sql = \"ALTER TABLE customers ADD COLUMN id INT AUTO_INCREMENT \n  PRIMARY KEY\";con.query(sql, function (err, result) {if (err) \n  throw err;console.log(\"Table altered\");});});"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_mysql_insert.asp",
    "cours": {
      "titre": "Node.jsMySQLInsert Into",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_mysql_insert.asp",
      "contenus": {
        "paragraphs": [
          "To fill a table in MySQL, use the \"INSERT INTO\" statement.",
          "Insert a record in the \"customers\" table:",
          "Save the code above in a file called \"demo_db_insert.js\", and run the file:",
          "Run \"demo_db_insert.js\"",
          "Which will give you this result:",
          "To insert more than one record, make an array containing the values, and \ninsert a question mark in the sql, which will be replaced by the value array:INSERT INTO customers (name, address) VALUES ?",
          "Fill the \"customers\" table with data:",
          "Save the code above in a file called \"demo_db_insert_multple.js\", and run the file:",
          "Run \"demo_db_insert_multiple.js\"",
          "Which will give you this result:",
          "When executing a query, a result object is returned.",
          "The result object contains information about how the query  \naffected the table.",
          "The result object returned from the example above looks like this:",
          "The values of the properties can be displayed like this:",
          "Return the  number of affected rows:",
          "Which will produce this result:",
          "For tables with an auto increment id field, you can get the id of the row you \njust inserted by asking the result object.",
          "Note:To be able to get the inserted id,only one rowcan be inserted.",
          "Insert a record in the \"customers\" table, and return the ID:",
          "Save the code above in a file called \"demo_db_insert_id.js\", and run the file:",
          "Run \"demo_db_insert_id.js\"",
          "Which will give you something like this in return:"
        ],
        "lists": [],
        "examples": [
          "var mysql = require('mysql');var con = mysql.createConnection({host: \"localhost\",user: \"yourusername\",password: \"yourpassword\",database: \"mydb\"});con.connect(function(err) {if (err) throw err;console.log(\"Connected!\");var sql = \"INSERT INTO customers (name, address) \n  VALUES ('Company Inc', 'Highway 37')\";con.query(sql, function (err, result) {if (err) throw err;console.log(\"1 record inserted\");});});",
          "C:\\Users\\Your Name>node demo_db_insert.js",
          "Connected!1 record inserted",
          "var mysql = require('mysql');var con = mysql.createConnection({host: \"localhost\",user: \"yourusername\",password: \"yourpassword\",database: \"mydb\"});con.connect(function(err) {if (err) throw err;console.log(\"Connected!\");var sql = \"INSERT INTO customers (name, \n  address) VALUES ?\";var values = [['John', \n  'Highway 71'],['Peter', 'Lowstreet 4'],['Amy', 'Apple st 652'],['Hannah', 'Mountain 21'],['Michael', 'Valley 345'],['Sandy', 'Ocean blvd 2'],['Betty', 'Green Grass 1'],['Richard', 'Sky st 331'],['Susan', 'One way 98'],['Vicky', 'Yellow Garden 2'],['Ben', 'Park Lane 38'],['William', 'Central st 954'],['Chuck', 'Main Road 989'],['Viola', 'Sideway 1633']];con.query(sql,[values], function (err, result) \n  {if (err) throw err;console.log(\"Number \n  of records inserted: \" + result.affectedRows);});});",
          "C:\\Users\\Your Name>node demo_db_insert_multiple.js",
          "Connected!Number of records inserted: 14",
          "{fieldCount: 0,affectedRows: 14,insertId: 0,serverStatus: 2,warningCount: 0,message: '\\'Records:14  \n  Duplicated: 0  Warnings: 0',protocol41: true,changedRows: 0}",
          "console.log(result.affectedRows)",
          "14",
          "var mysql = require('mysql');var con = mysql.createConnection({host: \"localhost\",user: \"yourusername\",password: \"yourpassword\",database: \"mydb\"});con.connect(function(err) {if (err) throw err;var sql = \"INSERT INTO customers (name, address) \n  VALUES ('Michelle', 'Blue Village 1')\";con.query(sql, function (err, result) {if (err) throw err;console.log(\"1 record inserted, \n  ID: \" +result.insertId);});});",
          "C:\\Users\\Your Name>node demo_db_insert_id.js",
          "1 record inserted, ID: 15"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_mysql_select.asp",
    "cours": {
      "titre": "Node.jsMySQLSelect From",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_mysql_select.asp",
      "contenus": {
        "paragraphs": [
          "To select data from a table in MySQL, use the \"SELECT\" statement.",
          "Select all records from the \"customers\" table, and display the result object:",
          "SELECT *will returnallcolumns",
          "Save the code above in a file called \"demo_db_select.js\" and run the file:",
          "Run \"demo_db_select.js\"",
          "Which will give you this result:",
          "To select only some of the columns in a table, use the \"SELECT\" statement followed by the column name.",
          "Select name and address from the \"customers\" table, and display the return object:",
          "Save the code above in a file called \"demo_db_select2.js\" and run the file:",
          "Run \"demo_db_select2.js\"",
          "Which will give you this result:",
          "As you can see from the result of the example above, the result object is an \narray containing each row as an object.",
          "To return e.g. the address of the third record, just refer to the third array \nobject's address property:",
          "Return the address of the third record:",
          "Which will produce this result:",
          "The third parameter of the callback function is an array containing \ninformation about each field in the result.",
          "Select all records from the \"customers\" table, and display thefieldsobject:",
          "Save the code above in a file called \"demo_db_select_fields.js\" and run the file:",
          "Run \"demo_db_select_fields.js\"",
          "Which will give you this result:",
          "As you can see from the result of the example above, the fields object is an \narray containing information about each field as an object.",
          "To return e.g. the name of the second field, just refer to the second array item's name property:",
          "Return the name of the second field:",
          "Which will produce this result:"
        ],
        "lists": [],
        "examples": [
          "var mysql = require('mysql');var con = mysql.createConnection({host: \"localhost\",user: \"yourusername\",password: \"yourpassword\",database: \"mydb\"});con.connect(function(err) {if (err) throw err;con.query(\"SELECT * FROM customers\", function (err, result, fields) {if (err) throw err;console.log(result);});});",
          "C:\\Users\\Your Name>node demo_db_select.js",
          "[{ id: 1, name: 'John', address: 'Highway 71'},{ id: \n  2, name: 'Peter', address: 'Lowstreet 4'},{ id: 3, name: 'Amy', \n  address: 'Apple st 652'},{ id: 4, name: 'Hannah', address: \n  'Mountain 21'},{ id: 5, name: 'Michael', address: 'Valley 345'},{ id: 6, name: 'Sandy', address: 'Ocean blvd 2'},{ id: 7, \n  name: 'Betty', address: 'Green Grass 1'},{ id: 8, name: 'Richard', \n  address: 'Sky st 331'},{ id: 9, name: 'Susan', address: 'One way \n  98'},{ id: 10, name: 'Vicky', address: 'Yellow Garden 2'},{ id: 11, name: 'Ben', address: 'Park Lane 38'},{ id: 12, name: 'William', \n  address: 'Central st 954'},{ id: 13, name: 'Chuck', address: \n  'Main Road 989'},{ id: 14, name: 'Viola', address: 'Sideway \n  1633'}]",
          "var mysql = require('mysql');var con = mysql.createConnection({host: \"localhost\",user: \"yourusername\",password: \"yourpassword\",database: \"mydb\"});con.connect(function(err) {if (err) throw err;con.query(\"SELECT name, address FROM customers\", function (err, result, fields) {if (err) throw err;console.log(result);});});",
          "C:\\Users\\Your Name>node demo_db_select2.js",
          "[{ name: 'John', address: 'Highway 71'},{ name: 'Peter', address: 'Lowstreet 4'},{ name: 'Amy', \n  address: 'Apple st 652'},{ name: 'Hannah', address: \n  'Mountain 21'},{ name: 'Michael', address: 'Valley 345'},{ name: 'Sandy', address: 'Ocean blvd 2'},{  \n  name: 'Betty', address: 'Green Grass 1'},{ name: 'Richard', \n  address: 'Sky st 331'},{ name: 'Susan', address: 'One way \n  98'},{ name: 'Vicky', address: 'Yellow Garden 2'},{ name: 'Ben', address: 'Park Lane 38'},{ name: 'William', \n  address: 'Central st 954'},{ name: 'Chuck', address: \n  'Main Road 989'},{ name: 'Viola', address: 'Sideway \n  1633'}]",
          "console.log(result[2].address);",
          "Apple st 652",
          "var mysql = require('mysql');var con = mysql.createConnection({host: \"localhost\",user: \"yourusername\",password: \"yourpassword\",database: \"mydb\"});con.connect(function(err) {if (err) throw err;con.query(\"SELECT name, address FROM customers\", function (err, \n  result,fields) {if (err) throw err;console.log(fields);});});",
          "C:\\Users\\Your Name>node demo_db_select_fields.js",
          "[{catalog: 'def',db: \n  'mydb',table: 'customers',orgTable: 'customers',name: 'name',orgName: 'name',charsetNr: 33,length: 765,type: 253,flags: 0,decimals: 0,default: undefined,zeroFill: false,protocol41: true},{catalog: 'def',db: 'mydb',table: 'customers',orgTable: 'customers',name: 'address',orgName: 'address',charsetNr: 33,length: 765,type: \n  253,flags: 0,decimals: 0,default: undefined,zeroFill: false,protocol41: true}]",
          "console.log(fields[1].name);",
          "address"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_mysql_where.asp",
    "cours": {
      "titre": "Node.jsMySQLWhere",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_mysql_where.asp",
      "contenus": {
        "paragraphs": [
          "When selecting records from a table, you can filter the selection by using \nthe \"WHERE\" statement:",
          "Select record(s) with the address \"Park Lane 38\":",
          "Save the code above in a file called \"demo_db_where.js\" and run the file:",
          "Run \"demo_db_where.js\"",
          "Which will give you this result:",
          "You can also select the records that starts, includes, or ends with a given letter \nor phrase.",
          "Use the '%' wildcard to represent zero, one or multiple characters:",
          "Select records where the address starts with the letter 'S':",
          "Save the code above in a file called \"demo_db_where_s.js\" and run the file:",
          "Run \"demo_db_where_s.js\"",
          "Which will give you this result:",
          "When query values are variables provided by the user, you should escape the values.",
          "This is to prevent SQL injections, which is a common web hacking technique to  \ndestroy or misuse your database.",
          "The MySQL module has methods to escape query values:",
          "Escape query values by using themysql.escape()method:",
          "You can also use a?as a placeholder for \nthe values you want to escape.",
          "In this case, the variable is sent as the second parameter in the query() \nmethod:",
          "Escape query values by using the placeholder?method:",
          "If you have multiple placeholders, the array contains multiple values, in \nthat order:",
          "Multiple placeholders:"
        ],
        "lists": [],
        "examples": [
          "var mysql = require('mysql');var con = mysql.createConnection({host: \"localhost\",user: \"yourusername\",password: \"yourpassword\",database: \"mydb\"});con.connect(function(err) {if (err) throw err;con.query(\"SELECT * FROM customersWHERE address = 'Park Lane 38'\", function (err, result) {if (err) throw err;console.log(result);});});",
          "C:\\Users\\Your Name>node demo_db_where.js",
          "[{ id: 11, name: 'Ben', address: 'Park Lane 38'}]",
          "var mysql = require('mysql');var con = mysql.createConnection({host: \"localhost\",user: \"yourusername\",password: \"yourpassword\",database: \"mydb\"});con.connect(function(err) {if (err) throw err;con.query(\"SELECT * FROM customers WHERE addressLIKE 'S%'\", function (err, result) {if (err) throw err;console.log(result);});});",
          "C:\\Users\\Your Name>node demo_db_where_s.js",
          "[{ id: 8, name: 'Richard', \n  address: 'Sky st 331'},{ id: 14, name: 'Viola', address: 'Sideway \n  1633'}]",
          "var adr = 'Mountain 21';var sql = 'SELECT * FROM customers WHERE address = \n  ' + mysql.escape(adr);con.query(sql, function (err, result) {if (err) throw err;console.log(result);});",
          "var adr = 'Mountain 21';var sql = 'SELECT * FROM customers WHERE address = \n  ?';con.query(sql,[adr], function (err, result) {if (err) throw err;console.log(result);});",
          "var name = 'Amy';var adr = 'Mountain 21';var sql = 'SELECT * FROM \n  customers WHERE name = ? OR address = ?';con.query(sql,[name, adr], function (err, result) {if (err) throw err;console.log(result);});"
        ]
      },
      "categories": "",
      "niveau": 4,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_mysql_orderby.asp",
    "cours": {
      "titre": "Node.jsMySQLOrder By",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_mysql_orderby.asp",
      "contenus": {
        "paragraphs": [
          "Use the ORDER BY statement to sort the result in ascending or descending \norder.",
          "The ORDER BY keyword sorts the result ascending by default. To sort the \nresult in descending order, use the DESC keyword.",
          "Sort the result alphabetically by name:",
          "Save the code above in a file called \"demo_db_orderby.js\" and run the file:",
          "Run \"demo_db_orderby.js\"",
          "Which will give you this result:",
          "Use the DESC keyword to sort the result in a descending order.",
          "Sort the result reverse alphabetically by name:",
          "Save the code above in a file called \"demo_db_orderby_desc.js\" and run the file:",
          "Run \"demo_db_orderby_desc.js\"",
          "Which will give you this result:"
        ],
        "lists": [],
        "examples": [
          "var mysql = require('mysql');var con = mysql.createConnection({host: \"localhost\",user: \"yourusername\",password: \"yourpassword\",database: \"mydb\"});con.connect(function(err) {if (err) throw err;con.query(\"SELECT * FROM customersORDER BY name\", function (err, result) {if (err) throw err;console.log(result);});});",
          "C:\\Users\\Your Name>node demo_db_orderby.js",
          "[{ id: 3, name: 'Amy', \n  address: 'Apple st 652'},{ id: 11, name: 'Ben', address: 'Park Lane 38'},{ id: 7, \n  name: 'Betty', address: 'Green Grass 1'},{ id: 13, name: 'Chuck', address: \n  'Main Road 989'},{ id: 4, name: 'Hannah', address: \n  'Mountain 21'},{ id: 1, name: 'John', address: 'Higheay 71'},{ id: 5, name: 'Michael', address: 'Valley 345'},{ id: \n  2, name: 'Peter', address: 'Lowstreet 4'},{ id: 8, name: 'Richard', \n  address: 'Sky st 331'},{ id: 6, name: 'Sandy', address: 'Ocean blvd 2'},{ id: 9, name: 'Susan', address: 'One way \n  98'},{ id: 10, name: 'Vicky', address: 'Yellow Garden 2'},{ id: 14, name: 'Viola', address: 'Sideway \n  1633'},{ id: 12, name: 'William', \n  address: 'Central st 954'}]",
          "var mysql = require('mysql');var con = mysql.createConnection({host: \"localhost\",user: \"yourusername\",password: \"yourpassword\",database: \"mydb\"});con.connect(function(err) {if (err) throw err;con.query(\"SELECT * FROM customersORDER BY name DESC\", function (err, result) {if (err) throw err;console.log(result);});});",
          "C:\\Users\\Your Name>node demo_db_orderby_desc.js",
          "[{ id: 12, name: 'William', \n  address: 'Central st 954'},{ id: 14, name: 'Viola', address: 'Sideway \n  1633'},{ id: 10, name: 'Vicky', address: 'Yellow Garden 2'},{ id: 9, name: 'Susan', address: 'One way \n  98'},{ id: 6, name: 'Sandy', address: 'Ocean blvd 2'},{ id: 8, name: 'Richard', \n  address: 'Sky st 331'},{ id: \n  2, name: 'Peter', address: 'Lowstreet 4'},{ id: 5, name: 'Michael', address: 'Valley 345'},{ id: 1, name: 'John', address: 'Higheay 71'},{ id: 4, name: 'Hannah', address: \n  'Mountain 21'},{ id: 13, name: 'Chuck', address: \n  'Main Road 989'},{ id: 7, \n  name: 'Betty', address: 'Green Grass 1'},{ id: 11, name: 'Ben', address: 'Park Lane 38'},{ id: 3, name: 'Amy', \n  address: 'Apple st 652'}]"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_mysql_delete.asp",
    "cours": {
      "titre": "Node.jsMySQLDelete",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_mysql_delete.asp",
      "contenus": {
        "paragraphs": [
          "You can delete records from an existing table by using \nthe \"DELETE FROM\" statement:",
          "Delete any record with the address \"Mountain 21\":",
          "Notice the WHERE clause in the DELETE syntax:The WHERE clause \nspecifies which record or records that should be deleted. If you omit the WHERE \nclause, all records will be deleted!",
          "Save the code above in a file called \"demo_db_delete.js\" and run the file:",
          "Run \"demo_db_delete.js\"",
          "Which will give you this result:",
          "When executing a query, a result object is returned.",
          "The result object contains information about how the query  \naffected the table.",
          "The result object returned from the example above looks like this:",
          "The values of the properties can be displayed like this:",
          "Return the  number of affected rows:",
          "Which will produce this result:"
        ],
        "lists": [],
        "examples": [
          "var mysql = require('mysql');var con = mysql.createConnection({host: \"localhost\",user: \"yourusername\",password: \"yourpassword\",database: \"mydb\"});con.connect(function(err) {if (err) throw err;var sql = \"DELETE FROM customers WHERE address = 'Mountain 21'\";con.query(sql,function (err, result) {if (err) throw err;console.log(\"Number of records \n  deleted: \" + result.affectedRows);});});",
          "C:\\Users\\Your Name>node demo_db_delete.js",
          "Number of records deleted: 1",
          "{fieldCount: 0,affectedRows: 1,insertId: 0,serverStatus: 34,warningCount: 0,message: '',protocol41: true,changedRows: 0}",
          "console.log(result.affectedRows)",
          "1"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_mysql_drop_table.asp",
    "cours": {
      "titre": "Node.jsMySQLDrop Table",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_mysql_drop_table.asp",
      "contenus": {
        "paragraphs": [
          "You can delete an existing table by using \nthe \"DROP TABLE\" statement:",
          "Delete the table \"customers\":",
          "Save the code above in a file called \"demo_db_drop_table.js\" and run the file:",
          "Run \"demo_db_drop_table.js\"",
          "Which will give you this result:",
          "If the the table you want to delete is already deleted, or for any other \nreason does not exist, you can use the IF EXISTS keyword to avoid getting an \nerror.",
          "Delete the table \"customers\" if it exists:",
          "Save the code above in a file called \"demo_db_drop_table_if.js\" and run the file:",
          "Run \"demo_db_drop_table_if.js\"",
          "If the table exist, the result object will look like this:",
          "If the table does not exist, the result object will look like this:",
          "As you can see the only differnce is that the warningCount property is set to 1 if the table does not exist."
        ],
        "lists": [],
        "examples": [
          "var mysql = require('mysql');var con = mysql.createConnection({host: \"localhost\",user: \"yourusername\",password: \"yourpassword\",database: \"mydb\"});con.connect(function(err) {if (err) throw err;var sql = \"DROP TABLE customers\";con.query(sql,function (err, result) {if (err) throw err;console.log(\"Table deleted\");});});",
          "C:\\Users\\Your Name>node demo_db_drop_table.js",
          "Table deleted",
          "var mysql = require('mysql');var con = mysql.createConnection({host: \"localhost\",user: \"yourusername\",password: \"yourpassword\",database: \"mydb\"});con.connect(function(err) {if (err) throw err;var sql = \"DROP TABLE IF EXISTS customers\";con.query(sql,function (err, result) {if (err) throw err;console.log(result);});});",
          "C:\\Users\\Your Name>node demo_db_drop_table_if.js",
          "{fieldCount: 0,affectedRows: 0,insertId: 0,serverstatus: 2,warningCount: 0,message: '',protocol41: true,changedRows: 0}",
          "{fieldCount: 0,affectedRows: 0,insertId: 0,serverstatus: 2,warningCount: 1,message: '',protocol41: true,changedRows: 0}"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_mysql_update.asp",
    "cours": {
      "titre": "Node.jsMySQLUpdate",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_mysql_update.asp",
      "contenus": {
        "paragraphs": [
          "You can update existing records in a table by using \nthe \"UPDATE\" statement:",
          "Overwrite the address column from \"Valley 345\" to \"Canyon 123\":",
          "Notice the WHERE clause in the UPDATE syntax:The WHERE clause \nspecifies which record or records that should be updated. If you omit the WHERE \nclause, all records will be updated!",
          "Save the code above in a file called \"demo_db_update.js\" and run the file:",
          "Run \"demo_db_update.js\"",
          "Which will give you this result:",
          "When executing a query, a result object is returned.",
          "The result object contains information about how the query  \naffected the table.",
          "The result object returned from the example above looks like this:",
          "The values of the properties can be displayed like this:",
          "Return the  number of affected rows:",
          "Which will produce this result:"
        ],
        "lists": [],
        "examples": [
          "var mysql = require('mysql');var con = mysql.createConnection({host: \"localhost\",user: \"yourusername\",password: \"yourpassword\",database: \"mydb\"});con.connect(function(err) {if (err) throw err;var sql = \"UPDATE customers SET address = 'Canyon 123' WHERE address = \n  'Valley 345'\";con.query(sql,function (err, result) {if (err) throw err;console.log(result.affectedRows + \" \n  record(s) updated\");});});",
          "C:\\Users\\Your Name>node demo_db_update.js",
          "1 record(s) updated",
          "{fieldCount: 0,affectedRows: 1,insertId: 0,serverStatus: 34,warningCount: 0,message: '(Rows \n  matched: 1 Changed: 1 Warnings: 0',protocol41: true,changedRows: 1}",
          "console.log(result.affectedRows)",
          "1"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_mysql_limit.asp",
    "cours": {
      "titre": "Node.jsMySQLLimit",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_mysql_limit.asp",
      "contenus": {
        "paragraphs": [
          "You can limit the number of records returned from the query, by using the \"LIMIT\" statement:",
          "Select the 5 first records in the \"customers\" table:",
          "Save the code above in a file called \"demo_db_limit.js\" and run the file:",
          "Run \"demo_db_limit.js\"",
          "Which will give you this result:",
          "If you want to return five records, starting from the third record, you \ncan use the \"OFFSET\" keyword:",
          "Start from position 3, and return the next 5 records:",
          "Note:\"OFFSET 2\", means starting from the third position, \nnot the second!",
          "Save the code above in a file called \"demo_db_offset.js\" and run the file:",
          "Run \"demo_db_offset.js\"",
          "Which will give you this result:",
          "You can also write your SQL statement like this \"LIMIT 2, 5\" which \nreturns the same as the offset example above:",
          "Start from position 3, and return the next 5 records:",
          "Note:The numbers are reversed: \"LIMIT 2, 5\" is the \n  same as \"LIMIT 5 OFFSET 2\""
        ],
        "lists": [],
        "examples": [
          "var mysql = require('mysql');var con = mysql.createConnection({host: \"localhost\",user: \"yourusername\",password: \"yourpassword\",database: \"mydb\"});con.connect(function(err) {if (err) throw err;var sql = \"SELECT * FROM customersLIMIT 5\";con.query(sql, function (err, result) {if (err) throw err;console.log(result);});});",
          "C:\\Users\\Your Name>node demo_db_limit.js",
          "[{ id: 1, name: 'John', address: 'Highway 71'},{ id: \n  2, name: 'Peter', address: 'Lowstreet 4'},{ id: 3, name: 'Amy', \n  address: 'Apple st 652'},{ id: 4, name: 'Hannah', address: \n  'Mountain 21'},{ id: 5, name: 'Michael', address: 'Valley 345'}]",
          "var mysql = require('mysql');var con = mysql.createConnection({host: \"localhost\",user: \"yourusername\",password: \"yourpassword\",database: \"mydb\"});con.connect(function(err) {if (err) throw err;var sql = \"SELECT * FROM customersLIMIT 5 OFFSET 2\";con.query(sql, function (err, result) {if (err) throw err;console.log(result);});});",
          "C:\\Users\\Your Name>node demo_db_offset.js",
          "[{ id: 3, name: 'Amy', \n  address: 'Apple st 652'},{ id: 4, name: 'Hannah', address: \n  'Mountain 21'},{ id: 5, name: 'Michael', address: 'Valley 345'},{ id: 6, name: 'Sandy', address: 'Ocean blvd 2'},{ id: 7, name: 'Betty', \n  address: 'Green Grass 1'}]",
          "var mysql = require('mysql');var con = mysql.createConnection({host: \"localhost\",user: \"yourusername\",password: \"yourpassword\",database: \"mydb\"});con.connect(function(err) {if (err) throw err;var sql = \"SELECT * FROM customersLIMIT 2, 5\";con.query(sql, function (err, result) {if (err) throw err;console.log(result);});});"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_mysql_join.asp",
    "cours": {
      "titre": "Node.jsMySQLJoin",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_mysql_join.asp",
      "contenus": {
        "paragraphs": [
          "You can combine rows from two or more tables, based on a related column \nbetween them, by using a JOIN statement.",
          "Consider you have a \"users\" table and a \"products\" table:",
          "These two tables can be combined by using users'favorite_productfield and products'idfield.",
          "Select records with a match in both tables:",
          "Note:You can use INNER JOIN instead of JOIN. They will \n  both give you the same result.",
          "Save the code above in a file called \"demo_db_join.js\" and run the file:",
          "Run \"demo_db_join.js\"",
          "Which will give you this result:",
          "As you can see from the result above, only the records with a match in both \ntables are returned.",
          "If you want to returnallusers, no matter if they have a favorite product or \nnot, use the LEFT JOIN statement:",
          "Select all users and their favorite product:",
          "Which will give you this result:",
          "If you want to return all products, and the users who have them as their \nfavorite, even if no user have them as their favorite, use the RIGHT JOIN \nstatement:",
          "Select all products and the user who have them as their favorite:",
          "Which will give you this result:",
          "Note:Hannah and Michael, who have no favorite product, are not included in the result."
        ],
        "lists": [],
        "examples": [
          "[{ id: 1, name: 'John', \n  favorite_product: 154},{ id: \n  2, name: 'Peter', favorite_product: 154},{ id: 3, name: 'Amy', \n  favorite_product: 155},{ id: 4, name: 'Hannah', favorite_product:},{ id: 5, name: 'Michael', \n  favorite_product:}]",
          "[{ id: 154, name: \n  'Chocolate Heaven' },{ id: 155, name: 'Tasty Lemons' },{ \n  id: 156, name: 'Vanilla Dreams' }]",
          "var mysql = require('mysql');var con = mysql.createConnection({host: \"localhost\",user: \"yourusername\",password: \"yourpassword\",database: \"mydb\"});con.connect(function(err) {if (err) throw err;var \n  sql = \"SELECT users.name AS user, products.name AS favorite FROM usersJOIN products ON \n  users.favorite_product = products.id\";con.query(sql, function (err, result) {if (err) throw err;console.log(result);});});",
          "C:\\Users\\Your Name>node demo_db_join.js",
          "[{ user: 'John', favorite: \n  'Chocolate Heaven' },{ user: 'Peter', favorite: 'Chocolate Heaven' },{ \n  user: 'Amy', favorite: 'Tasty Lemons' }]",
          "SELECT users.name AS user,products.name AS favoriteFROM usersLEFT\n  JOINproducts ON users.favorite_product = products.id",
          "[{ user: 'John', favorite: \n  'Chocolate Heaven' },{ user: 'Peter', favorite: 'Chocolate Heaven' },{ \n  user: 'Amy', favorite: 'Tasty Lemons' },{ \n  user: 'Hannah', favorite: null },{ user: 'Michael', favorite: null }]",
          "SELECT users.name AS user,products.name AS favoriteFROM usersRIGHT\n  JOINproducts ON users.favorite_product = products.id",
          "[{ user: 'John', favorite: \n  'Chocolate Heaven' },{ user: 'Peter', favorite: 'Chocolate Heaven' },{ \n  user: 'Amy', favorite: 'Tasty Lemons' },{ \n  user: null, favorite: 'Vanilla Dreams' }]"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_mongodb.asp",
    "cours": {
      "titre": "Node.jsMongoDB",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_mongodb.asp",
      "contenus": {
        "paragraphs": [
          "Node.js can be used in database applications.",
          "One of the most popular NoSQL database is MongoDB.",
          "To be able to experiment with the code examples, you will need access to a MongoDB database.",
          "You can download a free MongoDB database athttps://www.mongodb.com.",
          "Or get started right away with a MongoDB cloud service athttps://www.mongodb.com/cloud/atlas.",
          "Let us try to access a MongoDB database with Node.js.",
          "To download and install the official MongoDB driver, open the Command Terminal and execute the following:",
          "Download and install mongodb package:",
          "Now you have downloaded and installed a mongodb database driver.",
          "Node.js can use this module to manipulate MongoDB databases:"
        ],
        "lists": [],
        "examples": [
          "C:\\Users\\Your Name>npm install mongodb",
          "var mongo = require('mongodb');"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_mongodb_create_db.asp",
    "cours": {
      "titre": "Node.jsMongoDBCreate Database",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_mongodb_create_db.asp",
      "contenus": {
        "paragraphs": [
          "To create a database in MongoDB, start by creating a MongoClient object, then specify a connection URL with the \ncorrect ip address and the name of the database you want to create.",
          "MongoDB will create the database if it does not exist, and make a connection \nto it.",
          "Create a database called \"mydb\":",
          "Save the code above in a file called \"demo_create_mongo_db.js\" and run the file:",
          "Run \"demo_create_mongo_db.js\"",
          "Which will give you this result:",
          "Important:In MongoDB, a database is not created until it \n  gets content!",
          "MongoDB waits until you have created a collection (table), with at least one document (record) before it actually creates the database (and collection)."
        ],
        "lists": [],
        "examples": [
          "var MongoClient = require('mongodb').MongoClient;var url = \"mongodb://localhost:27017/mydb\";MongoClient.connect(url, function(err, db) {if (err) throw err;console.log(\"Database \n  created!\");db.close();});",
          "C:\\Users\\Your Name>node demo_create_mongo_db.js",
          "Database created!"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_mongodb_createcollection.asp",
    "cours": {
      "titre": "Node.jsMongoDBCreate Collection",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_mongodb_createcollection.asp",
      "contenus": {
        "paragraphs": [
          "Acollectionin MongoDB is the same as atablein MySQL",
          "To create a collection in MongoDB, use thecreateCollection()method:",
          "Create a collection called \"customers\":",
          "Save the code above in a file called \"demo_mongodb_createcollection.js\" and run the file:",
          "Run \"demo_mongodb_createcollection.js\"",
          "Which will give you this result:",
          "Important:In MongoDB, a collection is not created until it \n  gets content!",
          "MongoDB waits until you have inserted a document before it actually creates the collection."
        ],
        "lists": [],
        "examples": [
          "var MongoClient = require('mongodb').MongoClient;var url = \"mongodb://localhost:27017/\";MongoClient.connect(url, function(err, db) {if (err) throw err;var dbo = db.db(\"mydb\");dbo.createCollection(\"customers\", \n  function(err, res) {if (err) throw err;console.log(\"Collection created!\");db.close();});});",
          "C:\\Users\\Your Name>node demo_mongodb_createcollection.js",
          "Collection created!"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_mongodb_insert.asp",
    "cours": {
      "titre": "Node.jsMongoDBInsert",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_mongodb_insert.asp",
      "contenus": {
        "paragraphs": [
          "To insert a record, ordocumentas it is called in MongoDB, into a collection, we use theinsertOne()method.",
          "Adocumentin MongoDB is the same as arecordin MySQL",
          "The first parameter of theinsertOne()method is an object containing the \nname(s) and value(s) of each field in the document you want to insert.",
          "It also takes a callback function where you can work with any errors, or the \nresult of the insertion:",
          "Insert a document in the \"customers\" collection:",
          "Save the code above in a file called \"demo_mongodb_insert.js\" and run the file:",
          "Run \"demo_mongodb_insert.js\"",
          "Which will give you this result:",
          "Note:If you try to insert documents in a collection that do not \nexist, MongoDB will create the collection automatically.",
          "To insert multiple documents into a collection in MongoDB, we use theinsertMany()method.",
          "The first parameter of theinsertMany()method \nis an array of objects, containing the data you want to \ninsert.",
          "It also takes a callback function where you can work with any errors, or the \nresult of the insertion:",
          "Insert multiple documents in the \"customers\" collection:",
          "Save the code above in a file called \"demo_mongodb_insert_multiple.js\" and run the file:",
          "Run \"demo_mongodb_insert_multiple.js\"",
          "Which will give you this result:",
          "When executing theinsertMany()method, a result object is returned.",
          "The result object contains information about how the insertion affected the \ndatabase.",
          "The object returned from the example above looked like this:",
          "The values of the properties can be displayed like this:",
          "Return the number of inserted documents:",
          "Which will produce this result:",
          "If you do not specify an_idfield, then MongoDB \nwill add one for you and assign a unique id for each document.",
          "In the example above no_idfield was \nspecified, and as you can see from the result object, MongoDB assigned a unique \n_id for each document.",
          "If youdospecify the_idfield, the value must \nbe unique for each document:",
          "Insert three records in a \"products\" table, with specified_idfields:",
          "Save the code above in a file called \"demo_mongodb_insert_id.js\" and run the file:",
          "Run \"demo_mongodb_insert_id.js\"",
          "Which will give you this result:"
        ],
        "lists": [],
        "examples": [
          "var MongoClient = require('mongodb').MongoClient;var url = \"mongodb://localhost:27017/\";MongoClient.connect(url, function(err, db) {if (err) throw err;var dbo = db.db(\"mydb\");var myobj = { name: \"Company \n  Inc\", address: \"Highway 37\" };dbo.collection(\"customers\").insertOne(myobj, function(err, res) {if (err) throw err;console.log(\"1 \n  document \n  inserted\");db.close();});});",
          "C:\\Users\\Your Name>node demo_mongodb_insert.js",
          "1 document inserted",
          "var MongoClient = require('mongodb').MongoClient;var url = \"mongodb://localhost:27017/\";MongoClient.connect(url, function(err, db) {if (err) throw err;var dbo = db.db(\"mydb\");var myobj = [{ name: 'John', address: 'Highway 71'},{ name: 'Peter', address: 'Lowstreet 4'},{ name: 'Amy', \n  address: 'Apple st 652'},{ name: 'Hannah', address: \n  'Mountain 21'},{ name: 'Michael', address: 'Valley \n  345'},{ name: 'Sandy', address: 'Ocean blvd 2'},{ name: 'Betty', address: 'Green Grass 1'},{ name: \n  'Richard', address: 'Sky st 331'},{ name: 'Susan', \n  address: 'One way 98'},{ name: 'Vicky', address: \n  'Yellow Garden 2'},{ name: 'Ben', address: 'Park Lane \n  38'},{ name: 'William', address: 'Central st 954'},{ name: 'Chuck', address: 'Main Road 989'},{ name: \n  'Viola', address: 'Sideway 1633'}];dbo.collection(\"customers\").insertMany(myobj, \n  function(err, res) {if (err) throw err;console.log(\"Number of documents inserted: \" + res.insertedCount);db.close();});});",
          "C:\\Users\\Your Name>node demo_mongodb_insert_multiple.js",
          "Number of documents inserted: 14",
          "{result: { ok: 1, n: 14 },ops: [{ \n  name: 'John', address: 'Highway 71', _id: 58fdbf5c0ef8a50b4cdd9a84 },{ name: 'Peter', address: 'Lowstreet 4', _id: 58fdbf5c0ef8a50b4cdd9a85 },{ name: 'Amy', address: 'Apple st 652', _id: 58fdbf5c0ef8a50b4cdd9a86 },{ name: 'Hannah', address: 'Mountain 21', _id: 58fdbf5c0ef8a50b4cdd9a87 },{ name: 'Michael', address: 'Valley 345', _id: 58fdbf5c0ef8a50b4cdd9a88 },{ name: 'Sandy', address: 'Ocean blvd 2', _id: 58fdbf5c0ef8a50b4cdd9a89 },{ name: 'Betty', address: 'Green Grass 1', _id: 58fdbf5c0ef8a50b4cdd9a8a },{ name: 'Richard', address: 'Sky st 331', _id: 58fdbf5c0ef8a50b4cdd9a8b },{ name: 'Susan', address: 'One way 98', _id: 58fdbf5c0ef8a50b4cdd9a8c },{ name: 'Vicky', address: 'Yellow Garden 2', _id: 58fdbf5c0ef8a50b4cdd9a8d },{ name: 'Ben', address: 'Park Lane 38', _id: 58fdbf5c0ef8a50b4cdd9a8e },{ name: 'William', address: 'Central st 954', _id: 58fdbf5c0ef8a50b4cdd9a8f },{ name: 'Chuck', address: 'Main Road 989', _id: 58fdbf5c0ef8a50b4cdd9a90 },{ name: 'Viola', address: 'Sideway 1633', _id: 58fdbf5c0ef8a50b4cdd9a91 } ],insertedCount: 14,insertedIds: [58fdbf5c0ef8a50b4cdd9a84,58fdbf5c0ef8a50b4cdd9a85,58fdbf5c0ef8a50b4cdd9a86,58fdbf5c0ef8a50b4cdd9a87,58fdbf5c0ef8a50b4cdd9a88,58fdbf5c0ef8a50b4cdd9a89,58fdbf5c0ef8a50b4cdd9a8a,58fdbf5c0ef8a50b4cdd9a8b,58fdbf5c0ef8a50b4cdd9a8c,58fdbf5c0ef8a50b4cdd9a8d,58fdbf5c0ef8a50b4cdd9a8e,58fdbf5c0ef8a50b4cdd9a8f58fdbf5c0ef8a50b4cdd9a90,58fdbf5c0ef8a50b4cdd9a91 ]}",
          "console.log(res.insertedCount)",
          "14",
          "var MongoClient = require('mongodb').MongoClient;var url = \"mongodb://localhost:27017/\";MongoClient.connect(url, function(err, db) {if (err) throw err;var dbo = db.db(\"mydb\");var myobj = [{_id: 154, name: \n  'Chocolate Heaven'},{_id: 155, name: \n  'Tasty Lemon'},{_id: 156, name: \n  'Vanilla Dream'}];dbo.collection(\"products\").insertMany(myobj, \n  function(err, res) {if (err) throw err;console.log(res);db.close();});});",
          "C:\\Users\\Your Name>node demo_mongodb_insert_id.js",
          "{result: { ok: 1, n: 3 },ops: [{ \n  _id: 154, name: 'Chocolate Heaven },{ \n  _id: 155, name: 'Tasty Lemon },{ \n  _id: 156, name: 'Vanilla Dream } ],insertedCount: 3,insertedIds: [154,155,156 ]}"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_mongodb_find.asp",
    "cours": {
      "titre": "Node.jsMongoDBFind",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_mongodb_find.asp",
      "contenus": {
        "paragraphs": [
          "In MongoDB we use thefindandfindOnemethods to find data in a collection.",
          "Just like theSELECTstatement is used to find data in a \n  table in a MySQL database.",
          "To select data from a collection in MongoDB, we can use thefindOne()method.",
          "ThefindOne()method returns the first \noccurrence in the selection.",
          "The first parameter of thefindOne()method \nis a query object. In this example we use an empty query object, which selects \nall documents in a collection (but returns only the first document).",
          "Find the first document in the customers collection:",
          "Save the code above in a file called \"demo_mongodb_findone.js\" and run the file:",
          "Run \"demo_mongodb_findone.js\"",
          "Which will give you this result:",
          "To select data from a table in MongoDB, we can also use thefind()method.",
          "Thefind()method returns all \noccurrences in the selection.",
          "The first parameter of thefind()method \nis a query object. In this example we use an empty query object, which selects \nall documents in the collection.",
          "No parameters in the find() method gives you the same result asSELECT *in MySQL.",
          "Find all documents in the customers collection:",
          "Save the code above in a file called \"demo_mongodb_find.js\" and run the file:",
          "Run \"demo_mongodb_find.js\"",
          "Which will give you this result:",
          "The second parameter of thefind()method \nis theprojectionobject that describes which fields to include in the result.",
          "This parameter is optional, and if omitted, all fields will be included in \nthe result.",
          "Return the fields \"name\" and \"address\" of all documents in the customers collection:",
          "Save the code above in a file called \"demo_mongodb_find_fields.js\" and run the file:",
          "Run \"demo_mongodb_find_fields.js\"",
          "Which will give you this result:",
          "You are not allowed to specify both 0 and 1 values in the same object (except \nif one of the fields is the _id field). If you specify a field with the value 0, all other fields get the value 1, \nand vice versa:",
          "This example will exclude \"address\" from the result:",
          "To exclude the _id field, you must set its value to 0:",
          "This example will return only the \"name\" field:",
          "This example will give you the same result as the first example; return all \nfields except the _id field:",
          "You get an error if you specify both 0 and 1 values in the same object \n(except if one of the fields is the _id field):",
          "As you can see from the result of the example above, the result can be converted into an array containing each \ndocument as an object.",
          "To return e.g. the address of the third document, just refer to the third array \nobject's address property:",
          "Return the address of the third document:",
          "Which will produce this result:"
        ],
        "lists": [],
        "examples": [
          "var MongoClient = require('mongodb').MongoClient;var url = \"mongodb://localhost:27017/\";MongoClient.connect(url, function(err, db) {if (err) throw err;var dbo = db.db(\"mydb\");dbo.collection(\"customers\").findOne({}, function(err, result) {if (err) throw err;console.log(result.name);db.close();});});",
          "C:\\Users\\Your Name>node demo_mongodb_findone.js",
          "Company Inc.",
          "var MongoClient = require('mongodb').MongoClient;var url = \"mongodb://localhost:27017/\";MongoClient.connect(url, function(err, db) {if (err) throw err;var dbo = db.db(\"mydb\");dbo.collection(\"customers\").find({}).toArray(function(err, result) {if (err) throw err;console.log(result);db.close();});});",
          "C:\\Users\\Your Name>node demo_mongodb_find.js",
          "[{ _id: \n  58fdbf5c0ef8a50b4cdd9a84 , name: 'John', address: 'Highway 71'},{ _id: \n  58fdbf5c0ef8a50b4cdd9a85 , name: 'Peter', address: 'Lowstreet 4'},{ \n  _id: 58fdbf5c0ef8a50b4cdd9a86 , name: 'Amy', \n  address: 'Apple st 652'},{ _id: 58fdbf5c0ef8a50b4cdd9a87 , name: 'Hannah', address: \n  'Mountain 21'},{ _id: 58fdbf5c0ef8a50b4cdd9a88 , name: 'Michael', address: 'Valley 345'},{ _id: 58fdbf5c0ef8a50b4cdd9a89 , name: 'Sandy', address: 'Ocean blvd 2'},{ \n  _id: 58fdbf5c0ef8a50b4cdd9a8a , \n  name: 'Betty', address: 'Green Grass 1'},{ _id: \n  58fdbf5c0ef8a50b4cdd9a8b , name: 'Richard', \n  address: 'Sky st 331'},{ _id: 58fdbf5c0ef8a50b4cdd9a8c , name: 'Susan', address: 'One way \n  98'},{ _id: 58fdbf5c0ef8a50b4cdd9a8d , name: 'Vicky', address: 'Yellow Garden 2'},{ _id: 58fdbf5c0ef8a50b4cdd9a8e , name: 'Ben', address: 'Park Lane 38'},{ \n  _id: 58fdbf5c0ef8a50b4cdd9a8f , name: 'William', \n  address: 'Central st 954'},{ _id: 58fdbf5c0ef8a50b4cdd9a90 , name: 'Chuck', address: \n  'Main Road 989'},{ _id: 58fdbf5c0ef8a50b4cdd9a91 , name: 'Viola', address: 'Sideway \n  1633'}]",
          "var MongoClient = require('mongodb').MongoClient;var url = \"mongodb://localhost:27017/\";MongoClient.connect(url, function(err, db) {if (err) throw err;var dbo = db.db(\"mydb\");dbo.collection(\"customers\").find({},{ projection: { _id: 0, name: 1, address: \n  1 } }).toArray(function(err, result) {if (err) throw err;console.log(result);db.close();});});",
          "C:\\Users\\Your Name>node demo_mongodb_find_fields.js",
          "[{ name: 'John', address: 'Highway 71'},{ name: 'Peter', address: 'Lowstreet 4'},{ \n  name: 'Amy', \n  address: 'Apple st 652'},{ name: 'Hannah', address: \n  'Mountain 21'},{ name: 'Michael', address: 'Valley 345'},{ name: 'Sandy', address: 'Ocean blvd 2'},{ \n  name: 'Betty', address: 'Green Grass 1'},{ name: 'Richard', \n  address: 'Sky st 331'},{ name: 'Susan', address: 'One way \n  98'},{ name: 'Vicky', address: 'Yellow Garden 2'},{ name: 'Ben', address: 'Park Lane 38'},{ \n  name: 'William', \n  address: 'Central st 954'},{ name: 'Chuck', address: \n  'Main Road 989'},{ name: 'Viola', address: 'Sideway \n  1633'}]",
          "var MongoClient = require('mongodb').MongoClient;var url = \"mongodb://localhost:27017/\";MongoClient.connect(url, function(err, db) {if (err) throw err;var dbo = db.db(\"mydb\");dbo.collection(\"customers\").find({},{ projection: { address: 0 \n  } }).toArray(function(err, result) {if (err) throw err;console.log(result);db.close();});});",
          "var MongoClient = require('mongodb').MongoClient;var url = \"mongodb://localhost:27017/\";MongoClient.connect(url, function(err, db) {if (err) throw err;var dbo = db.db(\"mydb\");dbo.collection(\"customers\").find({},{ projection: { _id: 0, name: 1 \n  } }).toArray(function(err, result) {if (err) throw err;console.log(result);db.close();});});",
          "var MongoClient = require('mongodb').MongoClient;var url = \"mongodb://localhost:27017/\";MongoClient.connect(url, function(err, db) {if (err) throw err;var dbo = db.db(\"mydb\");dbo.collection(\"customers\").find({},{ projection: { _id: 0 \n  } }).toArray(function(err, result) {if (err) throw err;console.log(result);db.close();});});",
          "var MongoClient = require('mongodb').MongoClient;var url = \"mongodb://localhost:27017/\";MongoClient.connect(url, function(err, db) {if (err) throw err;var dbo = db.db(\"mydb\");dbo.collection(\"customers\").find({},{ projection: { name: 1, address: 0 \n  } }).toArray(function(err, result) {if (err) throw err;console.log(result);db.close();});});",
          "console.log(result[2].address);",
          "Apple st 652"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_mongodb_query.asp",
    "cours": {
      "titre": "Node.jsMongoDBQuery",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_mongodb_query.asp",
      "contenus": {
        "paragraphs": [
          "When finding documents in a collection, you can filter the result by using a \nquery object.",
          "The first argument of thefind()method \nis a query object, and is used to limit the search.",
          "Find documents with the address \"Park Lane 38\":",
          "Save the code above in a file called \"demo_mongodb_query.js\" and run the file:",
          "Run \"demo_mongodb_query.js\"",
          "Which will give you this result:",
          "You can write regular expressions to find exactly what you are searching for.",
          "Regular expressions can only be used to querystrings.",
          "To find only the documents where the \"address\" field starts with the letter \"S\", use the regular \nexpression/^S/:",
          "Find documents where the address starts with the letter \"S\":",
          "Save the code above in a file called \"demo_mongodb_query_s.js\" and run the file:",
          "Run \"demo_mongodb_query_s.js\"",
          "Which will give you this result:"
        ],
        "lists": [],
        "examples": [
          "var MongoClient = require('mongodb').MongoClient;var url = \"mongodb://localhost:27017/\";MongoClient.connect(url, function(err, db) {if (err) throw err;var dbo = db.db(\"mydb\");var query = { address: \"Park Lane 38\" };dbo.collection(\"customers\").find(query).toArray(function(err, result) {if (err) throw err;console.log(result);db.close();});});",
          "C:\\Users\\Your Name>node demo_mongodb_query.js",
          "[{ _id: 58fdbf5c0ef8a50b4cdd9a8e \n  , name: 'Ben', address: 'Park Lane 38' }]",
          "var MongoClient = require('mongodb').MongoClient;var url = \"mongodb://localhost:27017/\";MongoClient.connect(url, function(err, db) {if (err) throw err;var dbo = db.db(\"mydb\");var query = { address:/^S/};dbo.collection(\"customers\").find(query).toArray(function(err, result) {if (err) throw err;console.log(result);db.close();});});",
          "C:\\Users\\Your Name>node demo_mongodb_query_s.js",
          "[{ _id: \n  58fdbf5c0ef8a50b4cdd9a8b , name: 'Richard', \n  address: 'Sky st 331' },{ _id: 58fdbf5c0ef8a50b4cdd9a91 , name: 'Viola', address: 'Sideway \n  1633' }]"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_mongodb_sort.asp",
    "cours": {
      "titre": "Node.jsMongoDBSort",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_mongodb_sort.asp",
      "contenus": {
        "paragraphs": [
          "Use thesort()method to sort the result in ascending or descending order.",
          "Thesort()method takes one parameter, an \nobject defining the sorting order.",
          "Sort the result alphabetically by name:",
          "Save the code above in a file called \"demo_sort.js\" and run the file:",
          "Run \"demo_sort.js\"",
          "Which will give you this result:",
          "Use the value -1 in the sort object to sort descending.",
          "{ name: 1 } // ascending{ name: -1 } // descending",
          "Sort the result reverse alphabetically by name:",
          "Save the code above in a file called \"demo_sort_desc.js\" and run the file:",
          "Run \"demo_sort_desc.js\"",
          "Which will give you this result:"
        ],
        "lists": [],
        "examples": [
          "var MongoClient = require('mongodb').MongoClient;var url = \"mongodb://localhost:27017/\";MongoClient.connect(url, function(err, db) {if (err) throw err;var dbo = db.db(\"mydb\");var mysort = { name: 1 };dbo.collection(\"customers\").find().sort(mysort).toArray(function(err, result) {if (err) throw err;console.log(result);db.close();});});",
          "C:\\Users\\Your Name>node demo_sort.js",
          "[{ \n  _id: 58fdbf5c0ef8a50b4cdd9a86, name: 'Amy', \n  address: 'Apple st 652'},{ _id: 58fdbf5c0ef8a50b4cdd9a8e, name: 'Ben', address: 'Park Lane 38'},{ \n  _id: 58fdbf5c0ef8a50b4cdd9a8a, \n  name: 'Betty', address: 'Green Grass 1'},{ _id: 58fdbf5c0ef8a50b4cdd9a90, name: 'Chuck', address: \n  'Main Road 989'},{ _id: 58fdbf5c0ef8a50b4cdd9a87, name: 'Hannah', address: \n  'Mountain 21'},{ _id: \n  58fdbf5c0ef8a50b4cdd9a84, name: 'John', address: 'Highway 71'},{ _id: 58fdbf5c0ef8a50b4cdd9a88, name: 'Michael', address: 'Valley 345'},{ _id: \n  58fdbf5c0ef8a50b4cdd9a85, name: 'Peter', address: 'Lowstreet 4'},{ _id: \n  58fdbf5c0ef8a50b4cdd9a8b, name: 'Richard', \n  address: 'Sky st 331'},{ _id: 58fdbf5c0ef8a50b4cdd9a89, name: 'Sandy', address: 'Ocean blvd 2'},{ _id: 58fdbf5c0ef8a50b4cdd9a8c, name: 'Susan', address: 'One way \n  98'},{ _id: 58fdbf5c0ef8a50b4cdd9a8d, name: 'Vicky', address: 'Yellow Garden 2'},{ _id: 58fdbf5c0ef8a50b4cdd9a91, name: 'Viola', address: 'Sideway \n  1633'},{ \n  _id: 58fdbf5c0ef8a50b4cdd9a8f, name: 'William', \n  address: 'Central st 954'}]",
          "var MongoClient = require('mongodb').MongoClient;var url = \"mongodb://localhost:27017/\";MongoClient.connect(url, function(err, db) {if (err) throw err;var dbo = db.db(\"mydb\");var mysort = { name: -1 };dbo.collection(\"customers\").find().sort(mysort).toArray(function(err, result) {if (err) throw err;console.log(result);db.close();});});",
          "C:\\Users\\Your Name>node demo_sort_desc.js",
          "[{ \n  _id: 58fdbf5c0ef8a50b4cdd9a8f, name: 'William', \n  address: 'Central st 954'},{ _id: 58fdbf5c0ef8a50b4cdd9a91, name: 'Viola', address: 'Sideway \n  1633'},{ _id: 58fdbf5c0ef8a50b4cdd9a8d, name: 'Vicky', address: 'Yellow Garden 2'},{ _id: 58fdbf5c0ef8a50b4cdd9a8c, name: 'Susan', address: 'One way \n  98'},{ _id: 58fdbf5c0ef8a50b4cdd9a89, name: 'Sandy', address: 'Ocean blvd 2'},{ _id: \n  58fdbf5c0ef8a50b4cdd9a8b, name: 'Richard', \n  address: 'Sky st 331'},{ _id: \n  58fdbf5c0ef8a50b4cdd9a85, name: 'Peter', address: 'Lowstreet 4'},{ _id: 58fdbf5c0ef8a50b4cdd9a88, name: 'Michael', address: 'Valley 345'},{ _id: \n  58fdbf5c0ef8a50b4cdd9a84, name: 'John', address: 'Highway 71'},{ _id: 58fdbf5c0ef8a50b4cdd9a87, name: 'Hannah', address: \n  'Mountain 21'},{ _id: 58fdbf5c0ef8a50b4cdd9a90, name: 'Chuck', address: \n  'Main Road 989'},{ \n  _id: 58fdbf5c0ef8a50b4cdd9a8a, \n  name: 'Betty', address: 'Green Grass 1'},{ _id: 58fdbf5c0ef8a50b4cdd9a8e, name: 'Ben', address: 'Park Lane 38'},{ \n  _id: 58fdbf5c0ef8a50b4cdd9a86, name: 'Amy', \n  address: 'Apple st 652'}]"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_mongodb_delete.asp",
    "cours": {
      "titre": "Node.jsMongoDBDelete",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_mongodb_delete.asp",
      "contenus": {
        "paragraphs": [
          "To delete a record, or document as it is called in MongoDB, we use thedeleteOne()method.",
          "The first parameter of thedeleteOne()method \nis a query object defining which document to delete.",
          "Note:If the query finds more than one document, only the first \noccurrence is deleted.",
          "Delete the document with the address \"Mountain 21\":",
          "Save the code above in a file called \"demo_delete.js\" and run the file:",
          "Run \"demo_delete.js\"",
          "Which will give you this result:",
          "To delete more than one document, use thedeleteMany()method.",
          "The first parameter of thedeleteMany()method \nis a query object defining which documents to delete.",
          "Delete all documents were the address starts with the letter \"O\":",
          "Save the code above in a file called \"demo_delete_many.js\" and run the file:",
          "Run \"demo_delete_many.js\"",
          "Which will give you this result:",
          "ThedeleteMany()method returns an object which contains information about how \nthe execution affected the database.",
          "Most of the information is not important to understand, but one object inside \nthe object is called \"result\" which tells us if the execution went OK, and how \nmany documents were affected.",
          "The result object looks like this:",
          "You can use this object to return the number of deleted documents:",
          "Return the number of deleted documents:",
          "Which will produce this result:"
        ],
        "lists": [],
        "examples": [
          "var MongoClient = require('mongodb').MongoClient;var url = \"mongodb://localhost:27017/\";MongoClient.connect(url, function(err, db) {if (err) throw err;var dbo = db.db(\"mydb\");var myquery = { address: 'Mountain 21' };dbo.collection(\"customers\").deleteOne(myquery, function(err, obj) {if (err) throw err;console.log(\"1 \n  document deleted\");db.close();});});",
          "C:\\Users\\Your Name>node demo_delete.js",
          "1 document deleted",
          "var MongoClient = require('mongodb').MongoClient;var url = \"mongodb://localhost:27017/\";MongoClient.connect(url, function(err, db) {if (err) throw err;var dbo = db.db(\"mydb\");var myquery = { address: /^O/ };dbo.collection(\"customers\").deleteMany(myquery, function(err, obj) {if (err) throw err;console.log(obj.result.n + \" \n  document(s) deleted\");db.close();});});",
          "C:\\Users\\Your Name>node demo_delete_many.js",
          "2 document(s) deleted",
          "{ n: 2, ok: 1 }",
          "console.log(obj.result.n);",
          "2"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_mongodb_drop.asp",
    "cours": {
      "titre": "Node.jsMongoDBDrop",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_mongodb_drop.asp",
      "contenus": {
        "paragraphs": [
          "You can delete a table, or collection as it is called in MongoDB, by using \nthedrop()method.",
          "Thedrop()method takes a callback function \ncontaining the error object and the result parameter which returns true if the collection was dropped successfully, \notherwise it returns false.",
          "Delete the \"customers\" table:",
          "Save the code above in a file called \"demo_drop.js\" and run the file:",
          "Run \"demo_drop.js\"",
          "Which will give you this result:",
          "You can also use thedropCollection()method to delete a table (collection).",
          "ThedropCollection()method takes two parameters: the name of the collection \nand a callback function.",
          "Delete the \"customers\" collection, using dropCollection():",
          "Save the code above in a file called \"demo_dropcollection.js\" and run the file:",
          "Run \"demo_dropcollection.js\"",
          "Which will give you this result:"
        ],
        "lists": [],
        "examples": [
          "var MongoClient = require('mongodb').MongoClient;var url = \"mongodb://localhost:27017/\";MongoClient.connect(url, function(err, db) {if (err) throw err;var dbo = db.db(\"mydb\");dbo.collection(\"customers\").drop(function(err, delOK) {if (err) throw err;if (delOK) console.log(\"Collection \n  deleted\");db.close();});});",
          "C:\\Users\\Your Name>node demo_drop.js",
          "Collection deleted",
          "var MongoClient = require('mongodb').MongoClient;var url = \"mongodb://localhost:27017/\";MongoClient.connect(url, function(err, db) {if (err) throw err;var dbo = db.db(\"mydb\");dbo.dropCollection(\"customers\", function(err, delOK) {if (err) throw err;if (delOK) console.log(\"Collection \n  deleted\");db.close();});});",
          "C:\\Users\\Your Name>node demo_dropcollection.js",
          "Collection deleted"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_mongodb_update.asp",
    "cours": {
      "titre": "Node.jsMongoDBUpdate",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_mongodb_update.asp",
      "contenus": {
        "paragraphs": [
          "You can update a record, or document as it is called in MongoDB, by using \ntheupdateOne()method.",
          "The first parameter of theupdateOne()method \nis a query object defining which document to update.",
          "Note:If the query finds more than one record, only the first \noccurrence is updated.",
          "The second parameter  \nis an object defining the new values of the document.",
          "Update the document with the address \"Valley 345\" to name=\"Mickey\" and \naddress=\"Canyon 123\":",
          "Save the code above in a file called \"demo_update_one.js\" and run the file:",
          "Run \"demo_update_one.js\"",
          "Which will give you this result:",
          "When using the$setoperator, only the \nspecified fields are updated:",
          "Update the address from \"Valley 345\" to \"Canyon 123\":",
          "To updatealldocuments that meets the criteria of the query, use \ntheupdateMany()method.",
          "Update all documents where the name starts with the letter \"S\":",
          "Save the code above in a file called \"demo_update_many.js\" and run the file:",
          "Run \"demo_update_many.js\"",
          "Which will give you this result:",
          "TheupdateOne()and theupdateMany()methods return an object which contains information about how \nthe execution affected the database.",
          "Most of the information is not important to understand, but one object inside \nthe object is called \"result\" which tells us if the execution went OK, and how \nmany documents were affected.",
          "The result object looks like this:",
          "You can use this object to return the number of updated documents:",
          "Return the number of updated documents:",
          "Which will produce this result:"
        ],
        "lists": [],
        "examples": [
          "var MongoClient = require('mongodb').MongoClient;var url = \"mongodb://127.0.0.1:27017/\";MongoClient.connect(url, function(err, db) {if (err) throw err;var dbo = db.db(\"mydb\");var myquery = { address: \"Valley 345\" };var newvalues = { \n  $set: {name: \n  \"Mickey\", address: \"Canyon 123\" } };dbo.collection(\"customers\").updateOne(myquery, \n  newvalues, function(err, res) {if (err) throw err;console.log(\"1 document updated\");db.close();});});",
          "C:\\Users\\Your Name>node demo_update_one.js",
          "1 document updated",
          "...var myquery = { address: \"Valley 345\" };var newvalues \n  = {$set: { address: \"Canyon 123\" }};dbo.collection(\"customers\").updateOne(myquery, \n  newvalues, function(err, res) {...",
          "var MongoClient = require('mongodb').MongoClient;var url = \"mongodb://127.0.0.1:27017/\";MongoClient.connect(url, function(err, db) {if (err) throw err;var dbo = db.db(\"mydb\");var myquery = { address: /^S/ };var newvalues = {$set: {name: \n  \"Minnie\"} };dbo.collection(\"customers\").updateMany(myquery, newvalues, function(err, \n  res) {if (err) throw err;console.log(res.result.nModified + \" document(s) updated\");db.close();});});",
          "C:\\Users\\Your Name>node demo_update_many.js",
          "2 document(s) updated",
          "{ n: 1, nModified: 2, ok: 1 }",
          "console.log(res.result.nModified);",
          "2"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_mongodb_limit.asp",
    "cours": {
      "titre": "Node.jsMongoDBLimit",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_mongodb_limit.asp",
      "contenus": {
        "paragraphs": [
          "To limit the result in MongoDB, we use thelimit()method.",
          "Thelimit()method takes one parameter, a number defining how many documents \nto return.",
          "Consider you have a \"customers\" collection:",
          "Limit the result to only return 5 documents:",
          "Save the code above in a file called \"demo_mongodb_limit.js\" and run the file:",
          "Run \"demo_mongodb_limit.js\"",
          "Which will give you this result:",
          "As you can see from the result above, only the 5 first documents were \nreturned."
        ],
        "lists": [],
        "examples": [
          "[{ _id: \n  58fdbf5c0ef8a50b4cdd9a84 , name: 'John', address: 'Highway 71'},{ _id: \n  58fdbf5c0ef8a50b4cdd9a85 , name: 'Peter', address: 'Lowstreet 4'},{ \n  _id: 58fdbf5c0ef8a50b4cdd9a86 , name: 'Amy', \n  address: 'Apple st 652'},{ _id: 58fdbf5c0ef8a50b4cdd9a87 , name: 'Hannah', address: \n  'Mountain 21'},{ _id: 58fdbf5c0ef8a50b4cdd9a88 , name: 'Michael', address: 'Valley 345'},{ _id: 58fdbf5c0ef8a50b4cdd9a89 , name: 'Sandy', address: 'Ocean blvd 2'},{ \n  _id: 58fdbf5c0ef8a50b4cdd9a8a , \n  name: 'Betty', address: 'Green Grass 1'},{ _id: \n  58fdbf5c0ef8a50b4cdd9a8b , name: 'Richard', \n  address: 'Sky st 331'},{ _id: 58fdbf5c0ef8a50b4cdd9a8c , name: 'Susan', address: 'One way \n  98'},{ _id: 58fdbf5c0ef8a50b4cdd9a8d , name: 'Vicky', address: 'Yellow Garden 2'},{ _id: 58fdbf5c0ef8a50b4cdd9a8e , name: 'Ben', address: 'Park Lane 38'},{ \n  _id: 58fdbf5c0ef8a50b4cdd9a8f , name: 'William', \n  address: 'Central st 954'},{ _id: 58fdbf5c0ef8a50b4cdd9a90 , name: 'Chuck', address: \n  'Main Road 989'},{ _id: 58fdbf5c0ef8a50b4cdd9a91 , name: 'Viola', address: 'Sideway \n  1633'}]",
          "var MongoClient = require('mongodb').MongoClient;var url = \"mongodb://localhost:27017/\";MongoClient.connect(url, function(err, db) {if (err) throw err;var dbo = db.db(\"mydb\");dbo.collection(\"customers\").find().limit(5).toArray(function(err, result) {if (err) throw err;console.log(result);db.close();});});",
          "C:\\Users\\Your Name>node demo_mongodb_limit.js",
          "[{ _id: \n  58fdbf5c0ef8a50b4cdd9a84 , name: 'John', address: 'Highway 71'},{ _id: \n  58fdbf5c0ef8a50b4cdd9a85 , name: 'Peter', address: 'Lowstreet 4'},{ \n  _id: 58fdbf5c0ef8a50b4cdd9a86 , name: 'Amy', \n  address: 'Apple st 652'},{ _id: 58fdbf5c0ef8a50b4cdd9a87 , name: 'Hannah', address: \n  'Mountain 21'},{ _id: 58fdbf5c0ef8a50b4cdd9a88 , name: 'Michael', \n  address: 'Valley 345'}]"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_mongodb_join.asp",
    "cours": {
      "titre": "Node.jsMongoDBJoin",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_mongodb_join.asp",
      "contenus": {
        "paragraphs": [
          "MongoDB is not a relational database, but you can perform a left outer join \nby using the$lookupstage.",
          "The$lookupstage lets you specify which \ncollection you want to join with the current collection, and which \nfields that should match.",
          "Consider you have a \"orders\" collection and a \"products\" collection:",
          "Join the matching \"products\" document(s) to the \"orders\" collection:",
          "Save the code above in a file called \"demo_mongodb_join.js\" and run the file:",
          "Run \"demo_mongodb_join.js\"",
          "Which will give you this result:",
          "As you can see from the result above, the matching document from the products \ncollection is included in the orders collection as an array."
        ],
        "lists": [],
        "examples": [
          "[{ _id: 1, product_id: \n  154, status: 1 }]",
          "[{ _id: 154, name: \n  'Chocolate Heaven' },{ _id: 155, name: 'Tasty Lemons' },{ \n  _id: 156, name: 'Vanilla Dreams' }]",
          "var MongoClient = require('mongodb').MongoClient;var url = \"mongodb://127.0.0.1:27017/\";MongoClient.connect(url, function(err, db) {if (err) throw err;var dbo = db.db(\"mydb\");dbo.collection('orders').aggregate([{ $lookup:{from: 'products',localField: 'product_id',foreignField: '_id',as: 'orderdetails'}}]).toArray(function(err, \n  res) {if (err) throw err;console.log(JSON.stringify(res));db.close();});});",
          "C:\\Users\\Your Name>node demo_mongodb_join.js",
          "[{ \"_id\": 1, \"product_id\": \n  154, \"status\": 1, \"orderdetails\": [{ \"_id\": 154, \"name\": \n  \"Chocolate Heaven\" } ]}]"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_raspberrypi.asp",
    "cours": {
      "titre": "Node.js andRaspberry Pi",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_raspberrypi.asp",
      "contenus": {
        "paragraphs": [
          "Raspberry Pi is a small, multi-use computer.",
          "With Node.js you can do amazing things with your Raspberry Pi.",
          "The Raspberry Pi is a small, affordable, and amazingly capable, credit card \nsize computer.",
          "It is developed by the Raspberry Pi Foundation, and it might be the most \nversatile tech ever created.",
          "Creator Eben Upton's goal was to create a low-cost device that would improve \nprogramming skills and hardware understanding.",
          "Due to the small size and price of the device, it has become the center of a \nwide range of projects by tinkerers, makers, and electronics enthusiasts.",
          "The Raspberry Pi has a row of GPIO (General Purpose input/output) pins, and \nthese can be used to interact in amazing ways with the real world. This tutorial \nwill focus on how to use these with Node.js.",
          "For this tutorial you need a Raspberry Pi. In our examples we use a Raspberry Pi 3, \nbut this tutorial should work for most versions.",
          "Hardware needed:",
          "For later chapters in this tutorial we will use special sensors or devices \nthat we connect to the Raspberry Pi. We will specify these as special \nrequirements in the relevant chapters.",
          "If you already have a Raspberry Pi set up with Raspbian, internet and enabled \nSSH, you can skip to the step \"Install Node.js on Raspberry Pi\".",
          "Before we can start using our Raspberry Pi for anything, we need to get a OS \ninstalled.",
          "Raspbian is a free operating system based on Debian Linux, and it is \noptimized Raspberry Pi.",
          "Download the latest Raspbian image fromhttps://www.raspberrypi.org/downloads/raspbian/to your computer.",
          "We use the \"LITE\" version in our tutorial, since we are setting the Raspberry \nPi up as a headless server (we will connect to it through SSH, without having a \nkeyboard/display connected to it). You can use whichever version you want, but \nthis tutorial is written with the \"LITE\" version as its focus.",
          "Insert the MicroSD memory card in your computer (via the SD adapter if \nneeded). \nOpen File Explorer to verify that it is operational.",
          "Etcher is a program for flashing images to memory cards. Download and \ninstall Etcher from:https://etcher.io/",
          "Launch Etcher:",
          "Click \"Select image\" button and find the Raspbian zip file that \nyou downloaded.",
          "Click the \"Select drive\" button and specify the memory card as the target location.",
          "Click the \"Flash!\" button to write the image to the memory card.",
          "After Etcher is finished writing the image to the memory card, remove it from your computer.",
          "To get the Raspberry Pi ready to boot we need to:",
          "When the Raspberry Pi is finished booting up, log in using username:piand password:raspberry",
          "If you will use a Ethernet cable to connect your Raspberry Pi to the \ninternet, you can skip this step.",
          "For this section we will assume you have a Raspberry Pi 3, with built in \nWiFi.",
          "Start by scanning for wireless networks:",
          "This will list all of the available WiFi networks. (It also confirms that \nyour WiFi is working)",
          "Now we need to open the wpa-supplicant file, to add the network you want to \nconnect to:",
          "This will open the file in the Nano editor. Add the following to the bottom \nof the file (changewifiNameandwifiPasswordwith the actual network name and \npassword):",
          "Press \"Ctrl+x\" to save the code. Confirm with \"y\", and confirm the name with \"Enter\".",
          "And reboot the Raspberry Pi:",
          "After reboot, log in again, and confirm that the WiFi is connected and working:",
          "If the WiFi is working propery, the information displayed should include an \nIP address, similar to this:",
          "Write down that IP address, as we will use it to connect to the Raspberry Pi \nvia SSH.",
          "Now your Raspberry Pi is connected to the internet, it is time to enable SSH.",
          "SSH allows you up use the Raspberry Pi without having a monitor and keyboard \nconnected to it.",
          "(You will need a SSH client for this on your non-Raspberry Pi computer. We usePuTTYfor windows)",
          "Open the Raspberry Pi Software Configuration Tool:",
          "You should see a menu like this:",
          "Select option5 Interfacing Options:",
          "Select optionP2 SSH, to activate SSH:",
          "Confirm withYES, to activate SSH:",
          "SSH is now enabled, and you should be in the main menu again.",
          "Select1 Change User Password, and follow the instructions to change the password. Choose a secure password, but something you will remember:",
          "After you have finished changing the password, you should be back in the main menu.",
          "Select2 Hostname, and follow the instructions to change the hostname:",
          "After you have finished changing the hostname, you should be back in the main menu.",
          "Now we will close the menu and save the changes:",
          "When selectingFinish, you will get the option to reboot. SelectYesto reboot the Raspberry Pi.",
          "You can now unplug the monitor and keyboard from the Raspberry Pi, and we can log in using out SSH client.",
          "Open PuTTY, type in the IP address for your Raspberry Pi, and clickOpen:",
          "Log in using the usernamepiand the new password you specified.",
          "You should now see a command line like this: (we used w3demopi as our hostname)",
          "You are now able to run your Raspberry Pi in \"Headless-mode\", meaning you do not need a monitor or keyboard. And if you have a WiFi connection, you do not need a ethernet cable either, just the power cable!",
          "With the Raspberry Pi properly set up, login in via SSH, and update your Raspberry Pi system packages to their latest versions.",
          "Update your system package list:",
          "Upgrade all your installed packages to their latest version:",
          "Doing this regularly will keep your Raspberry Pi installation up to date.",
          "To download and install newest version of Node.js, use the following command:",
          "Now install it by running:",
          "Check that the installation was successful, and the version number of \nNode.js with:",
          "Now you have a Raspberry Pi with Node.js installed!",
          "If you want to learn more about Node.js, follow our tutorial:https://www.w3schools.com/nodejs/",
          "In the next chapter we will get to know the GPIO and how to use it with \nNode.js."
        ],
        "lists": [
          [
            "Raspberry Pi computer",
            "MicroSD memory card (We recommend a class 10 with 16 GB or higher)",
            "MicroSD to SD memory card adapter (usually included with the MicroSD card)",
            "Micro USB power supply to power the Raspberry Pi (2.5A or greater \n  recommended)",
            "WiFi/Ethernet Cable connection for the Raspberry Pi (Not needed for \n  Raspberry Pi 3 as it has built in WiFi)",
            "A working computer with internet and SD memory card reader (used to get the OS \n  (Operating System) for the Raspberry Pi onto the memory card). In our tutorial \n  we use a Windows computer for this, but you can use a Mac or Linux computer if \n  you prefer",
            "HDMI monitor, USB keyboard (we need these only temporarily for the first \n  boot of the Raspberry Pi)"
          ],
          [
            "Insert the MicroSD memory card into the Raspberry Pi",
            "Connect the USB keyboard",
            "Connect the HDMI cable",
            "Connect the USB Wi-Fi adapter (or Ethernet cable). Skip this step if you \n  are using a Raspberry Pi 3",
            "Connect the micro USB power supply",
            "The Raspberry Pi should now be booting up"
          ]
        ],
        "examples": [
          "pi@raspberrypi:~ $ \n  sudo iwlist wlan0 scan",
          "pi@raspberrypi:~ $ sudo \n  nano /etc/wpa_supplicant/wpa_supplicant.conf",
          "network={ssid=\"wifiName\"psk=\"wifiPassword\"}",
          "pi@raspberrypi:~ $ sudo reboot",
          "pi@raspberrypi:~ $ ifconfig wlan0",
          "inet addr:192.168.1.50",
          "pi@raspberrypi:~ $ sudo raspi-config",
          "pi@w3demopi:~ $",
          "pi@w3demopi:~ $ sudo apt-get update",
          "pi@w3demopi:~ $ sudo apt-get dist-upgrade",
          "pi@w3demopi:~ $ curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -",
          "pi@w3demopi:~ $ sudo apt-get install -y nodejs",
          "pi@w3demopi:~ $ node -v"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_raspberrypi_gpio_intro.asp",
    "cours": {
      "titre": "Node.jsRaspberry Pi - GPIO Introduction",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_raspberrypi_gpio_intro.asp",
      "contenus": {
        "paragraphs": [
          "GPIO stands for General Purpose Input Output.",
          "The Raspberry Pi has two rows of GPIO pins, which are connections between the \nRaspberry Pi, and the real world.",
          "Output pins are like switches that the Raspberry Pi can turn on or off (like \nturning on/off a LED light). But it can also send a signal to another device.",
          "Input pins are like switches that you can turn on or off from the outside \nworld (like a on/off light switch). But it can also be a data from a sensor, or \na signal from another device.",
          "That means that you can interact with the real world, and control devices and \nelectronics using the Raspberry PI and its GPIO pins!",
          "This is an illustration of the Raspberry Pi 3.",
          "The GPIO pins are the small \nred squares in two rows on the right side of the Raspberry Pi, on the actual Raspberry Pi they are small metal pins.",
          "The Raspberry Pi 3 has 26 GPIO pins, the rest of the pins are power, ground \nor \"other\".",
          "The pin placements correspond with the table below.",
          "A breadboard is used for prototyping electronics, it allows you to create \ncircuits without soldering. It is basically a plastic board, with a grid of \ntie-points (holes). Inside the board there are metal strips connecting the \ndifferent tie-points in specific ways.",
          "In the illustration below we have highlighted some of the sections with different colors. This is to show you how the grid is connected.",
          "The different sections of the breadboard:",
          "To interface with the GPIO on the Raspberry Pi using Node.js, we will use a \nModule called \"onoff\".",
          "Install the onoff module using npm:",
          "Now onoff should be installed and we can interact with the GPIO of the Raspberry Pi."
        ],
        "lists": [
          [
            "On the left, and right, side there are 2 columns of tie-points. All the \n    tie points in each of these columns are connected.",
            "The Power Bus- The columns highlighted with red. There are usually used \n    to connect power to the Breadboard. Since the entire column is connected, \n    you can connect power to any of the tie-points in the column.",
            "The Ground Bus- The columns highlighted with blue. There are usually \n    used to connect Ground to the Breadboard. Since the entire column is \n    connected, you can connect ground to any of the tie-points in the column.",
            "Rows of connected Tie-Points- The rows highlighted with green. The \n    tie-points of each of these rows are connected, but not the entire row! The \n    left side tie-points are connected (A-B-C-D-E), and the right side \n    tie-points are connected (F-G-H-I-J).",
            "In the center of the Breadboard there is a Trench, this separates the \n    left and right rows. The width of the trench is designed so that many \n    Integrated Circuits fit across it."
          ]
        ],
        "examples": [
          "pi@w3demopi:~ $ npm install onoff"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_raspberrypi_blinking_led.asp",
    "cours": {
      "titre": "Node.jsRaspberry Pi GPIO - Blinking LED",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_raspberrypi_blinking_led.asp",
      "contenus": {
        "paragraphs": [
          "In this chapter we will use a Raspberry Pi and its GPIO to \nmake a LED blink.",
          "We use Node.js with the onoff module to control the GPIO.",
          "To get a LED light to turn on, we use a GPIO pin as \"Output\", and create a \nscript to turn it on and off (blinking).",
          "In this chapter we will create a simple example where \nwe control a LED light.",
          "For this you need:",
          "Click the links in the list above for descriptions of the different \ncomponents.",
          "Note:The resistor you need can be different from what we use depending on the type of LED you use. Most small LEDs only need a small resistor, around 200-500 ohms. It is generally not critical what exact value you use, but the smaller the value of the resistor, the brighter the LED will\nshine.",
          "Now it is time to build the circuit on our Breadboard.",
          "If you are new to electronics, we recommend you turn off the power for \nthe Raspberry Pi. And use an anti-static mat or a grounding strap to avoid \ndamaging it.",
          "Shut down the Raspberry Pi properly with the command:",
          "After the LEDs stop blinking on the Raspberry Pi, then pull out the power \nplug from the Raspberry Pi (or turn off the power strip it is connected to).",
          "Just pulling the plug without shutting down properly may cause corruption of the memory card.",
          "Look at the above illustration of the circuit.",
          "Your circuit should now be complete, and your connections should look \n  pretty similar to the illustration above.",
          "Now it is time to boot up the Raspberry Pi, and write the Node.js script to \n  interact with it.",
          "Now that we have everything set up, we can write a script to turn the LED on and off.",
          "Start by making a directory where we can keep our Node.js scripts:",
          "Go to our new directory:",
          "Now we will create a new file called \"blink.js\" using the Nano Editor:",
          "The file is now open and can be edited with the built in Nano Editor.",
          "Write, or paste the following code:",
          "Press \"Ctrl+x\" to save the code. Confirm with \"y\", and confirm the name with \"Enter\".",
          "Run the code:",
          "Now the LED should blink for 5 seconds (10 times) before turning off again!"
        ],
        "lists": [
          [
            "A Raspberry Pi with Raspian, internet, SSH, with Node.js installed",
            "Theonoff modulefor Node.js",
            "1 xBreadboard",
            "1 x68 Ohm resistor",
            "1 xThrough Hole LED",
            "2 xFemale to male jumper wires"
          ],
          [
            "On the Raspberry Pi, connect the female leg of the first jumper wire toGround. You can use anyGNDpin. In this example we used Physical Pin 9 (GND, \n    row 5, left column)",
            "On the Breadboard, connect the male leg of the first jumper wire to \n    theGround Buscolumn on the right. That entire \n    column of your breadboard is connected, so it doesn't matter which row. In \n    this example we have attached it to row 1",
            "On the Raspberry Pi, connect the female leg of the second jumper cable \n    to aGPIOpin. In this example we used Physical Pin \n    7 (GPIO 4, row 4, left \n    column)",
            "On the Breadboard, connect the male leg of the second jumper wire to the \n    Tie-Point row of your choice. In this example we connected it to row 5, \n    column A",
            "On the Breadboard, connect one leg of the resistor to theGround Buscolumn on the right side. That entire column of your breadboard is \n    connected, so it doesn't matter which row. In this example we have attached \n    it to row 5",
            "On the Breadboard, connect the other leg of the resistor to the right \n    side Tie-Point row of your choice. In this example we have used row 5, \n    column J",
            "On the Breadboard, connect the cathode leg (the shortest leg) of the \n    LED to the same Tie-Point row that you connected the resistor fromGNDto. In this example we used row 5, column F",
            "On the Breadboard, connect the anode leg (the longest leg) of the \n    LED to the same Tie-Point row that you connected the jumper from \n    theGPIOpin to. In this example we used row \n    5, column E"
          ]
        ],
        "examples": [
          "pi@w3demopi:~ $ sudo shutdown -h now",
          "pi@w3demopi:~ $ mkdir nodetest",
          "pi@w3demopi:~ $ cd nodetest",
          "pi@w3demopi:~ $ nano blink.js",
          "var Gpio = require('onoff').Gpio; //include onoff to interact with the GPIOvar LED = new Gpio(4, 'out'); \n  //use GPIO pin 4, and specify that it is outputvar \n  blinkInterval = setInterval(blinkLED, 250); //run the blinkLED function every \n  250msfunction blinkLED() { //function to start blinkingif (LED.readSync() === \n  0) { //check the pin state, if the state is 0 (or off)LED.writeSync(1); \n  //set pin state to 1 (turn LED on)} else {LED.writeSync(0); \n  //set pin state to 0 (turn LED off)}}function endBlink() \n  { //function to stop blinkingclearInterval(blinkInterval); // Stop blink intervalsLED.writeSync(0); // Turn LED offLED.unexport(); // Unexport GPIO \n  to free resources}setTimeout(endBlink, 5000); //stop blinking \n  after 5 seconds",
          "pi@w3demopi:~ $ node blink.js"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_raspberrypi_led_pushbutton.asp",
    "cours": {
      "titre": "Node.jsRaspberry Pi GPIO - LED and Pushbutton",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_raspberrypi_led_pushbutton.asp",
      "contenus": {
        "paragraphs": [
          "In the previous chapter we learned how to use a Raspberry Pi and its GPIO to \nmake a LED blink.",
          "For that we used a GPIO pin as \"Output\".",
          "In this chapter we will use another GPIO pin as \"Input\".",
          "Instead of blinking for 5 seconds, we want the LED to light up when you push \na button connected to the breadboard.",
          "In this chapter we will create a simple example where \nwe control a LED light with a Push Button.",
          "For this you need:",
          "Click the links in the list above for descriptions of the different \ncomponents.",
          "Note:The resistor you need can be different from what we use depending on the type of LED you use. Most small LEDs only need a small resistor, around 200-500 ohms. It is generally not critical what exact value you use, but the smaller the value of the resistor, the brighter the LED will\nshine.",
          "In this chapter we will build on the circuit we built in last chapter, so you \nwill recognize some of the parts in the list above.",
          "Now it is time to build the circuit on our Breadboard. We will use thecircuit we created in the last chapteras a starting point.",
          "If you are new to electronics, we recommend you turn off the power for \nthe Raspberry Pi. And use an anti-static mat or a grounding strap to avoid \ndamaging it.",
          "Shut down the Raspberry Pi properly with the command:",
          "After the LEDs stop blinking on the Raspberry Pi, then pull out the power \nplug from the Raspberry Pi (or turn of the power strip it is connected to).",
          "Just pulling the plug without shutting down properly may cause corruption of the memory card.",
          "Look at the above illustration of the circuit.",
          "Your circuit should now be complete, and your connections should look \n  pretty similar to the illustration above.",
          "Now it is time to boot up the Raspberry Pi, and write the Node.js script to \n  interact with it.",
          "Go to the \"nodetest\" directory, and create a new file called \"buttonled.js\":",
          "The file is now open and can be edited with the built in Nano Editor.",
          "Write, or paste the following:",
          "Press \"Ctrl+x\" to save the code. Confirm with \"y\", and confirm the name with \"Enter\".",
          "Run the code:",
          "Now the LED should turn on when you press the button, and turn off when you \nrelease it.",
          "End the program withCtrl+c."
        ],
        "lists": [
          [
            "A Raspberry Pi with Raspian, internet, SSH, with Node.js installed",
            "Theonoff modulefor Node.js",
            "1 xBreadboard",
            "1 x68 Ohm resistor",
            "1 x1k Ohm resistor",
            "1 xThrough Hole LED",
            "1 xPush Button",
            "4 xFemale to male jumper wires",
            "1 xMale to Male jumper wires"
          ],
          [
            "Starting with the circuit we created in the last chapter:On the Raspberry Pi, connect the female leg of a jumper wire to a5Vpower pin. In our example we used Physical Pin 2 (5V, \n    row 1, right column)",
            "On the Breadboard, connect the male leg of the jumper wire connected to \n    the5Vpower, to thePower Buson the right side. That entire column \n    of your breadboard is connected, so it doesn't matter which row. In our \n    example we attached it to row 1",
            "On the Breadboard, connect the push button so that it fits across the \n    Trench. In our example it connects to rows 13 and 15, columns E and F",
            "On the Breadboard, connect one leg of the 1k ohm resistor to theGround Buscolumn on the right side, and the other leg to the right side Tie-Point row \n    where it connects to one of the right side legs of the push button. In our example we attached \n    one side to Tie-Point row 13, column J, and the other side to the closestGround Bushole",
            "On the Breadboard, connect a male-to-male jumper wire from the rightPower Bus, to the right Tie-Point row that \n    connects to the other leg of the \n    push button. In our example we attached \n    one side to Tie-Point row 15, column J, and the other side to the closestPower Bushole",
            "On the Raspberry Pi, connect the female leg of a jumper wire to aGPIOpin. In our example we used Physical Pin \n    11 (GPIO 17, row 6, left \n    column)",
            "On the Breadboard, connect the male leg of the jumper wire to left \n    Tie-Point row the Push Button leg that is directly across theGroundconnection leg.  In our example we \n    attached it to row 13, column A"
          ]
        ],
        "examples": [
          "pi@w3demopi:~ $ sudo shutdown -h now",
          "pi@w3demopi:~ $ nano buttonled.js",
          "var\n  Gpio = require('onoff').Gpio; //include onoff to interact with the GPIOvar \n  LED = new Gpio(4, 'out'); //use GPIO pin 4 as outputvar pushButton = new \n  Gpio(17, 'in', 'both'); //use GPIO pin 17 as input, and 'both' button presses, \n  and releases should be handledpushButton.watch(function (err, value) { \n  //Watch for hardware interrupts on pushButton GPIO, specify callback functionif (err) { //if an errorconsole.error('There was an \n  error', err); //output error message to consolereturn;}LED.writeSync(value); //turn LED on or off depending on the button state (0 or \n  1)});function unexportOnClose() { //function to run when exiting programLED.writeSync(0); // Turn LED offLED.unexport(); // Unexport LED \n  GPIO to free resourcespushButton.unexport(); // Unexport Button \n  GPIO to free resources};process.on('SIGINT', unexportOnClose); //function to \n  run when user closes using ctrl+c",
          "pi@w3demopi:~ $ node buttonled.js"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_raspberrypi_flowing_leds.asp",
    "cours": {
      "titre": "Node.jsRaspberry Pi GPIO - Flowing LEDs",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_raspberrypi_flowing_leds.asp",
      "contenus": {
        "paragraphs": [
          "In this chapter we will use several GPIO pins to create a \"flowing\" effect by \nturning them on and off in sequence.",
          "For this you need:",
          "Note:The resistor you need can be different from what we use depending on the type of LEDs you use. Most small LEDs only need a small resistor, around 200-500 ohms. It is generally not critical what exact value you use, but the smaller the value of the resistor, the brighter the LED will\nshine.",
          "Click the links in the list above for descriptions of the different \ncomponents.",
          "Now it is time to build the circuit on our Breadboard.",
          "If you are new to electronics, we recommend you turn off the power for \nthe Raspberry Pi. And use an anti-static mat or a grounding strap to avoid \ndamaging it.",
          "Shut down the Raspberry Pi properly with the command:",
          "After the LEDs stop blinking on the Raspberry Pi, then pull out the power \nplug from the Raspberry Pi (or turn of the power strip it is connected to).",
          "Just pulling the plug without shutting down properly may cause corruption of the memory card.",
          "Look at the above illustration of the circuit.",
          "Your circuit should now be complete, and your connections should look \n  pretty similar to the illustration above.",
          "Now it is time to boot up the Raspberry Pi, and write the Node.js script to \n  interact with it.",
          "Go to the \"nodetest\" directory, and create a new file called \"flowingleds.js\":",
          "The file is now open and can be edited with the built in Nano Editor.",
          "Write, or paste the following:",
          "Press \"Ctrl+x\" to save the code. Confirm with \"y\", and confirm the name with \"Enter\".",
          "Run the code:",
          "Now the LEDs should turn on and off in sequence, creating a flowing effect.",
          "End the program withCtrl+c."
        ],
        "lists": [
          [
            "A Raspberry Pi with Raspian, internet, SSH, with Node.js installed",
            "Theonoff modulefor Node.js",
            "1 xBreadboard",
            "8 x220 Ohm resistor",
            "8 xThrough Hole LED",
            "9 xFemale to male jumper wires"
          ],
          [
            "On the Raspberry Pi, connect the female leg of a jumper wire to aGNDpin. In our example we used Physical Pin 6 (GND, \n    row 3, right column)",
            "On the Breadboard, connect the male leg of the jumper wire connected to \n    theGNDpower, to theGround Buson the right side. That entire column \n    of your breadboard is connected, so it doesn't matter which row. In our example we attached it to row 1",
            "For each LED: Connect the LED so that it connects to 2 Tie-Point rows. In our example \n    we connected:LED1 to rows 5 (cathode) & 6 (anode) column JLED2 to rows 8 (cathode) & 9 (anode) column JLED3 to rows 11 (cathode) & 12 (anode) column JLED4 to rows 14 (cathode) & 15 (anode) column JLED5 to rows 17 (cathode) & 18 (anode) column JLED6 to rows 20 (cathode) & 21 (anode) column JLED7 to rows 23 (cathode) & 24 (anode) column JLED8 to rows 26 (cathode) & 27 (anode) column J",
            "LED1 to rows 5 (cathode) & 6 (anode) column J",
            "LED2 to rows 8 (cathode) & 9 (anode) column J",
            "LED3 to rows 11 (cathode) & 12 (anode) column J",
            "LED4 to rows 14 (cathode) & 15 (anode) column J",
            "LED5 to rows 17 (cathode) & 18 (anode) column J",
            "LED6 to rows 20 (cathode) & 21 (anode) column J",
            "LED7 to rows 23 (cathode) & 24 (anode) column J",
            "LED8 to rows 26 (cathode) & 27 (anode) column J",
            "For each LED: Connect one of the legs of a 220 ohm resistor from the theGround Buscolumn on the right side, and the other leg to the right side Tie-Point row \n    where it connects to the cathode leg of the LED. In our example we \n    connected:LED1 to row 5 column ILED2 to row 8 column ILED3 to row 11 column ILED4 to row 14 column ILED5 to row 17 column ILED6 to row 20 column ILED7 to row 23 column ILED8 to row 26 column I",
            "LED1 to row 5 column I",
            "LED2 to row 8 column I",
            "LED3 to row 11 column I",
            "LED4 to row 14 column I",
            "LED5 to row 17 column I",
            "LED6 to row 20 column I",
            "LED7 to row 23 column I",
            "LED8 to row 26 column I",
            "For each LED: Connect the female leg of a jumper wire to aGPIOpin on the Raspberry Pi, and the male leg \n    of the jumper wire to the right side Tie-Point row \n    where it connects to the anode leg of the LED. In our example we connected:LED1 from Physical Pin \n    7 (GPIO 4, row 4, left \n    column) to Tie-point row 6 column FLED2 from Physical Pin \n      11 (GPIO 17, row 6, left \n    column) to Tie-point row 9 column FLED3 from Physical Pin \n      13 (GPIO 27, row 7, left \n    column) to Tie-point row 12 column FLED4 from Physical Pin \n      15 (GPIO 22, row 8, left \n    column) to Tie-point row 15 column FLED5 from Physical Pin \n      12 (GPIO 18, row 6, right \n    column) to Tie-point row 18 column FLED6 from Physical Pin \n      16 (GPIO 23, row 8, right column) to \n      Tie-point row 21 column FLED7 from Physical Pin \n      18 (GPIO 24, row 9, right column) to \n      Tie-point row 24 column FLED8 from Physical Pin \n      22 (GPIO 25, row 11, right column) to \n      Tie-point row 27 column F",
            "LED1 from Physical Pin \n    7 (GPIO 4, row 4, left \n    column) to Tie-point row 6 column F",
            "LED2 from Physical Pin \n      11 (GPIO 17, row 6, left \n    column) to Tie-point row 9 column F",
            "LED3 from Physical Pin \n      13 (GPIO 27, row 7, left \n    column) to Tie-point row 12 column F",
            "LED4 from Physical Pin \n      15 (GPIO 22, row 8, left \n    column) to Tie-point row 15 column F",
            "LED5 from Physical Pin \n      12 (GPIO 18, row 6, right \n    column) to Tie-point row 18 column F",
            "LED6 from Physical Pin \n      16 (GPIO 23, row 8, right column) to \n      Tie-point row 21 column F",
            "LED7 from Physical Pin \n      18 (GPIO 24, row 9, right column) to \n      Tie-point row 24 column F",
            "LED8 from Physical Pin \n      22 (GPIO 25, row 11, right column) to \n      Tie-point row 27 column F"
          ],
          [
            "LED1 to rows 5 (cathode) & 6 (anode) column J",
            "LED2 to rows 8 (cathode) & 9 (anode) column J",
            "LED3 to rows 11 (cathode) & 12 (anode) column J",
            "LED4 to rows 14 (cathode) & 15 (anode) column J",
            "LED5 to rows 17 (cathode) & 18 (anode) column J",
            "LED6 to rows 20 (cathode) & 21 (anode) column J",
            "LED7 to rows 23 (cathode) & 24 (anode) column J",
            "LED8 to rows 26 (cathode) & 27 (anode) column J"
          ],
          [
            "LED1 to row 5 column I",
            "LED2 to row 8 column I",
            "LED3 to row 11 column I",
            "LED4 to row 14 column I",
            "LED5 to row 17 column I",
            "LED6 to row 20 column I",
            "LED7 to row 23 column I",
            "LED8 to row 26 column I"
          ],
          [
            "LED1 from Physical Pin \n    7 (GPIO 4, row 4, left \n    column) to Tie-point row 6 column F",
            "LED2 from Physical Pin \n      11 (GPIO 17, row 6, left \n    column) to Tie-point row 9 column F",
            "LED3 from Physical Pin \n      13 (GPIO 27, row 7, left \n    column) to Tie-point row 12 column F",
            "LED4 from Physical Pin \n      15 (GPIO 22, row 8, left \n    column) to Tie-point row 15 column F",
            "LED5 from Physical Pin \n      12 (GPIO 18, row 6, right \n    column) to Tie-point row 18 column F",
            "LED6 from Physical Pin \n      16 (GPIO 23, row 8, right column) to \n      Tie-point row 21 column F",
            "LED7 from Physical Pin \n      18 (GPIO 24, row 9, right column) to \n      Tie-point row 24 column F",
            "LED8 from Physical Pin \n      22 (GPIO 25, row 11, right column) to \n      Tie-point row 27 column F"
          ]
        ],
        "examples": [
          "pi@w3demopi:~ $ sudo shutdown -h now",
          "pi@w3demopi:~ $ nano \n  flowingleds.js",
          "var Gpio = require('onoff').Gpio; //include onoff to interact with the GPIOvar LED04 = new Gpio(4, 'out'), //use declare variables for all the GPIO \n  output pinsLED17 = new Gpio(17, 'out'),LED27 = new Gpio(27, \n  'out'),LED22 = new Gpio(22, 'out'),LED18 = new Gpio(18, \n  'out'),LED23 = new Gpio(23, 'out'),LED24 = new Gpio(24, \n  'out'),LED25 = new Gpio(25, 'out');//Put all the LED \n  variables in an arrayvar leds = [LED04, \n  LED17, LED27, LED22, LED18, LED23, LED24, LED25];var indexCount = 0; //a \n  counterdir = \"up\"; //variable for flowing directionvar \n  flowInterval = setInterval(flowingLeds, 100); //run the flowingLeds function \n  every 100msfunction flowingLeds() { //function for flowing Ledsleds.forEach(function(currentValue) { //for each item in arraycurrentValue.writeSync(0); //turn off LED});if (indexCount \n  == 0) dir = \"up\"; //set flow direction to \"up\" if the count reaches zeroif (indexCount >= leds.length) dir = \"down\"; //set flow direction to \"down\" if \n  the count reaches 7if (dir == \"down\") indexCount--; //count \n  downwards if direction is downleds[indexCount].writeSync(1); \n  //turn on LED that where array index matches countif (dir == \n  \"up\") indexCount++ //count upwards if direction is up};function unexportOnClose() { \n  //function to run when exiting programclearInterval(flowInterval); \n  //stop flow interwalleds.forEach(function(currentValue) { //for \n  each LEDcurrentValue.writeSync(0); //turn off LEDcurrentValue.unexport(); //unexport GPIO});};process.on('SIGINT', unexportOnClose); //function to \n  run when user closes using ctrl+cc",
          "pi@w3demopi:~ $ node flowingleds.js"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_raspberrypi_webserver_websocket.asp",
    "cours": {
      "titre": "Node.js andRaspberry Pi - Webserver with WebSocket",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_raspberrypi_webserver_websocket.asp",
      "contenus": {
        "paragraphs": [
          "WebSocket enables bidirectional communication in real time over the web.",
          "WebSocket can be run together with a normal HTTP server. You can click a button in a web browser, and enable a GPIO on your Raspberry Pi which turns on a light in your house. All in real time, and with communication going both ways!",
          "In this chapter, we will set up a web server with WebSocket. Then create a browser UI to interact with our earlier example ofturning a LED on and off with a button.",
          "For this tutorial you need a Raspberry Pi. In our examples we use a a Raspberry Pi 3, \nbut this tutorial should work for most versions.",
          "For this you need:",
          "Click the links in the list above for descriptions of the different \ncomponents.",
          "Note:The resistor you need can be different from what we use depending on the type of LED you use. Most small LEDs only need a small resistor, around 200-500 ohms. It is generally not critical what exact value you use, but the smaller the value of the resistor, the brighter the LED will\nshine.",
          "Compared to our earlier example, the only new thing we need is to set up a \nweb server, and install the socket.io module.",
          "Following the earlier chapters in this Node.js tutorial, lets set up a web \nserver that can serve HTML files.",
          "In our \"nodetest\" directory create a new directory we can use for static html files:",
          "Now lets set up a webserver. Create a Node.js file that opens the requested \nfile and returns the content to the client. If anything goes wrong, throw a 404 \nerror.",
          "webserver.js:",
          "Go to the folder \"public\":",
          "And create a HTML file, index.html:",
          "index.html:",
          "This file will not have any functionality yet. For now it is just a \nplaceholder. Lets see if the webserver is working:",
          "Open the website in a browser using http://[RaspberryPi_IP]:8080/:",
          "The webserver should now be up and running, and we can move on to the \nWebSocket part.",
          "With the webserver set up, update your Raspberry Pi system packages to their latest versions.",
          "Update your system package list:",
          "Upgrade all your installed packages to their latest version:",
          "Doing this regularly will keep your Raspberry Pi installation up to date.",
          "To download and install newest version of socket.io, use the following command:",
          "Now we can use WebSocket in our application. Lets update our index.html \nfile:",
          "index.html:",
          "And our webserver.js file:",
          "webserver.js:",
          "Lets test the server:",
          "Open the website in a browser using http://[RaspberryPi_IP]:8080/:",
          "Now the server should output all the changes to the checkbox to the console \non the Raspberry Pi.",
          "The client is sending the changes to the server, and the server is \nresponding.",
          "Lets add thepush button \ncontrolled LEDfrom a previous chapter.",
          "Lets update our webserver.js file again. We will use a lot of the code from \nthe Pushbutton controlled LED chapter.",
          "webserver.js:",
          "Lets test the server:",
          "Open the website in a browser using http://[RaspberryPi_IP]:8080/:",
          "Now the server should output all the changes to the checkbox to the console \non the Raspberry Pi.",
          "The client is sending the changes to the server, and the server is \nresponding.",
          "End the program withCtrl+c."
        ],
        "lists": [
          [
            "A Raspberry Pi with Raspian, internet, SSH, with Node.js installed",
            "Theonoff modulefor Node.js",
            "Thesocket.io modulefor Node.js",
            "1 xBreadboard",
            "1 x68 Ohm resistor",
            "1 x1k Ohm resistor",
            "1 xThrough Hole LED",
            "1 xPush Button",
            "4 xFemale to male jumper wires",
            "1 xMale to Male jumper wires"
          ]
        ],
        "examples": [
          "pi@w3demopi:~/nodetest $ \n  mkdir public",
          "pi@w3demopi:~/nodetest $ \n  nano webserver.js",
          "var http = require('http').createServer(handler); //require http server, and \n    create server with function handler()var fs = require('fs'); //require filesystem modulehttp.listen(8080); //listen to port 8080function handler (req, res) { //create serverfs.readFile(__dirname + '/public/index.html', function(err, data) { //read \n    file index.html in public folderif (err) \n    {res.writeHead(404, \n    {'Content-Type': 'text/html'}); //display 404 on errorreturn res.end(\"404 Not Found\");}res.writeHead(200, {'Content-Type': 'text/html'}); //write HTMLres.write(data); //write data from index.htmlreturn res.end();});}",
          "pi@w3demopi:~/nodetest $ \n  cd public",
          "pi@w3demopi:~/nodetest/public $ \n  nano index.html",
          "<!DOCTYPE html><html><body><h1>Control LED light</h1><input \n    id=\"light\" type=\"checkbox\">LED</body></html>",
          "pi@w3demopi:~/nodetest/public $ cd ..",
          "pi@w3demopi:~/nodetest $ node webserver.js",
          "pi@w3demopi:~ $ sudo apt-get update",
          "pi@w3demopi:~ $ sudo apt-get dist-upgrade",
          "pi@w3demopi:~ $ \n  npm install socket.io --save",
          "<!DOCTYPE html><html><body><h1>Control LED \n    light</h1><p><input type=\"checkbox\" id=\"light\"></p><script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"></script> \n    <!-- include socket.io client side script --><script>var socket = io(); \n    //load socket.io-client and connect to the host that serves the pagewindow.addEventListener(\"load\", function(){ //when page loadsvar \n    lightbox = document.getElementById(\"light\");lightbox.addEventListener(\"change\", function() { //add event listener for \n    when checkbox changessocket.emit(\"light\", Number(this.checked)); \n    //send button status to server (as 1 or 0)});});socket.on('light', \n    function (data) { //get button status from clientdocument.getElementById(\"light\").checked = data; //change checkbox according \n    to push button on Raspberry Pisocket.emit(\"light\", data); //send \n    push button status to back to server});</script></body></html>",
          "var http = require('http').createServer(handler); //require http server, and \n    create server with function handler()var fs = require('fs'); //require filesystem modulevar io \n    = require('socket.io')(http) //require socket.io module and pass the http \n    object (server)http.listen(8080); //listen to port 8080function handler (req, res) { //create serverfs.readFile(__dirname + '/public/index.html', function(err, data) { //read \n    file index.html in public folderif (err) \n    {res.writeHead(404, \n    {'Content-Type': 'text/html'}); //display 404 on errorreturn res.end(\"404 Not Found\");}res.writeHead(200, {'Content-Type': 'text/html'}); //write HTMLres.write(data); //write data from index.htmlreturn res.end();});}io.sockets.on('connection', function (socket) {// WebSocket Connectionvar lightvalue = 0; //static variable for current statussocket.on('light', \n    function(data) { //get light switch status from clientlightvalue = data;if (lightvalue) {console.log(lightvalue); //turn LED on or off, for now we will just show it \n    in console.log}});});",
          "pi@w3demopi:~ $ \n  node webserver.js",
          "var http = require('http').createServer(handler); //require http server, and \n    create server with function handler()var fs = require('fs'); //require filesystem modulevar io \n    = require('socket.io')(http) //require socket.io module and pass the http \n    object (server)var Gpio = require('onoff').Gpio; //include onoff to \n    interact with the GPIOvar LED = new Gpio(4, 'out'); //use GPIO pin 4 as \n    outputvar pushButton = new Gpio(17, 'in', 'both'); //use GPIO pin 17 as \n    input, and 'both' button presses, and releases should be handledhttp.listen(8080); //listen to port 8080function handler (req, res) \n    { //create serverfs.readFile(__dirname \n    + '/public/index.html', function(err, data) { //read file index.html in \n    public folderif (err) {res.writeHead(404, {'Content-Type': 'text/html'}); //display 404 on errorreturn res.end(\"404 Not Found\");}res.writeHead(200, {'Content-Type': 'text/html'}); //write HTMLres.write(data); //write data from index.htmlreturn res.end();});}io.sockets.on('connection', function (socket) {// WebSocket Connectionvar lightvalue = 0; //static variable for current statuspushButton.watch(function (err, value) { //Watch for hardware interrupts on \n    pushButtonif (err) { //if an errorconsole.error('There was an error', err); //output error message to consolereturn;}lightvalue = value;socket.emit('light', lightvalue); //send button status to client});socket.on('light', function(data) { //get light switch status \n    from clientlightvalue = data;if (lightvalue != LED.readSync()) { //only change LED if status has changedLED.writeSync(lightvalue); //turn LED on or off}});});process.on('SIGINT', function () { //on ctrl+cLED.writeSync(0); // Turn LED offLED.unexport(); // Unexport LED \n    GPIO to free resourcespushButton.unexport(); // Unexport Button \n    GPIO to free resourcesprocess.exit(); //exit completely});",
          "pi@w3demopi:~ $ node webserver.js"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_raspberrypi_rgb_led_websocket.asp",
    "cours": {
      "titre": "Node.jsRaspberry Pi RGB LED with WebSocket",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_raspberrypi_rgb_led_websocket.asp",
      "contenus": {
        "paragraphs": [
          "In the previous chapters we have learned how to use WebSocket, and how to \nuse GPIO to turn LEDs on and off.",
          "In this we will use chapter we use a RGB LED, with PWM (Pulse-width \nmodulation) to display different colors based on user input via WebSocket.",
          "An RGB LED is a LED with 3 different colors. It has a RED, GREEN and \nBLUE LED (RGB LED).",
          "And using PWM, we can set the individual strength of the 3 LEDs. This will allow us to \nmix them, to set a color.",
          "In this chapter we will create an example where \nwe control an RGB LED with a web page via WebSocket.",
          "For this you need:",
          "Click the links in the list above for descriptions of the different \ncomponents.",
          "Note:The resistor you need can be different from what we use depending on the type of LED you use. Most small LEDs only need a small resistor, around 200-500 ohms. It is generally not critical what exact value you use, but the smaller the value of the resistor, the brighter the LED will\nshine.",
          "Earlier, we have used the \"onoff\" module, which works great for just turning \non and off. Now we want to set the set the strength of the LEDs, so we need a \nGPIO Module with a bit more functionality.",
          "We will use the \"pigpio\" Node.js module, as this allows for PWM.",
          "With PWM we \ncan set the strength of a LED from 0 to 255.",
          "The \"pigpio\" Node.js module is based on the pigpio C library.",
          "If you are using the \"Lite\" version of Raspbian, this is most likely not \nincluded and must be manually installed.",
          "Update your system package list:",
          "Install the pigpio C library:",
          "Now we can install the \"pigpio\" Node.js module using npm:",
          "Now the \"pigpio\" module should be installed and we can use it to \ninteract with the GPIO of the Raspberry Pi.",
          "Note:Since the \"pigpio\" module uses the pigpio C library, \n  it requires root/sudo privileges to access hardware peripherals (like the \n  GPIO).",
          "Now it is time to build the circuit on our Breadboard.",
          "If you are new to electronics, we recommend you turn off the power for \nthe Raspberry Pi. And use an anti-static mat or a grounding strap to avoid \ndamaging it.",
          "Shut down the Raspberry Pi properly with the command:",
          "After the LEDs stop blinking on the Raspberry Pi, then pull out the power \nplug from the Raspberry Pi (or turn of the power strip it is connected to).",
          "Just pulling the plug without shutting down properly may cause corruption of the memory card.",
          "In building this Circuit it is important to know if you have a common \n  anode, or common cathode, RGB LED:",
          "You can check with your provider, or test it yourself:",
          "Connect cables to GND and 3.3V pin. Connect GND to the longest leg of the \n  RGB LED and the 3.3 V to any other leg. If the it lights up, your RGB LED has \n  a common cathode. If not, it has a common anode.",
          "Look at the above illustration of the circuit.",
          "Your circuit should now be complete, and your connections should look \n  pretty similar to the illustration above.",
          "Now it is time to boot up the Raspberry Pi, and write the Node.js script to \n  interact with it.",
          "Look at the above illustration of the circuit.",
          "Your circuit should now be complete, and your connections should look \n  pretty similar to the illustration above.",
          "Now it is time to boot up the Raspberry Pi, and write the Node.js script to \n  interact with it.",
          "Go to the \"nodetest\" directory, and create a new file called \"rgbws.js\":",
          "The file is now open and can be edited with the built in Nano Editor.",
          "Write, or paste the following:",
          "Press \"Ctrl+x\" to save the code. Confirm with \"y\", and confirm the name with \"Enter\".",
          "Write, or paste the following:",
          "Press \"Ctrl+x\" to save the code. Confirm with \"y\", and confirm the name with \"Enter\".",
          "Now it is time add the HTML that allows for user input via WebSocket.",
          "For this we want:",
          "Go to the folder \"public\":",
          "And create a HTML file, rgb.html:",
          "rgb.html:",
          "Return to the \"nodetest\" folder:",
          "Run the code:",
          "Note:Since the \"pigpio\" module uses the pigpio C library, \n  it requires root/sudo privileges to access hardware peripherals (like the \n  GPIO).",
          "Open the website in a browser using http://[RaspberryPi_IP]:8080/",
          "Now the RGB LED should change color depending on the user input.",
          "End the program withCtrl+c."
        ],
        "lists": [
          [
            "A Raspberry Pi with Raspian, internet, SSH, with Node.js installed",
            "Thepigpio modulefor Node.js",
            "Thesocket.io modulefor Node.js",
            "1 xBreadboard",
            "3 x220 \n  Ohm resistor",
            "1 xRGB LED(common anode or common cathode)",
            "4 xFemale to male jumper wires"
          ],
          [
            "On the Breadboard, connect the RGB LED to the right ground bus column, \n    and make sure that each leg connects to a different row. The longest leg is \n    the common cathode leg. In this example we have connected the LED to rows \n    1-4, with the common cathode leg connected to row 2 column I. TheREDleg is \n    connected to row 1 column J, theGREENleg is connected to row 3 column J, \n    and theBLUEleg is connected to row 4 column J",
            "On the Raspberry Pi, connect the female leg of the first jumper wire toGround. You can use anyGNDpin. In this example we used Physical Pin 9 (GND, \n    row 5, left column)",
            "On the Breadboard, connect the male leg of the first jumper wire to \n    the same row of the right ground bus column that you connected the common \n    cathode to. In this example we connected it to row 2 column F",
            "On the Raspberry Pi, connect the female leg of the second jumper cable \n    to aGPIOpin. We will use this for theREDleg, In this example we used Physical Pin \n    7 (GPIO 4, row 4, left \n    column)",
            "On the Breadboard, connect the male leg of the second jumper wire to the \n    left ground bus, same row as theREDleg of the LED is connected. In this example we connected it to row \n    1, \n    column A",
            "On the Breadboard, connect a resistor between the left and right ground \n    bus columns for the row with theREDleg of the LED. In this example we have attached \n    it to row 1, column E and F",
            "On the Raspberry Pi, connect the female leg of the third jumper cable \n    to aGPIOpin. We will use this for theGREENleg, In this example we used Physical Pin \n    11 (GPIO 17, row 6, left \n    column)",
            "On the Breadboard, connect the male leg of the third jumper wire to the \n    left ground bus, same row as theGREENleg of the LED is connected. In this example we connected it to row \n    3, \n    column A",
            "On the Breadboard, connect a resistor between the left and right ground \n    bus columns for the row with theGREENleg of the LED. In this example we have attached \n    it to row 3, column E and F",
            "On the Raspberry Pi, connect the female leg of the forth jumper cable \n    to aGPIOpin. We will use this for theBLUEleg, In this example we used Physical Pin \n    13 (GPIO 27, row 7, left \n    column)",
            "On the Breadboard, connect the male leg of the forth jumper wire to the \n    left ground bus, same row as theBLUEleg of the LED is connected. In this example we connected it to row \n    4, \n    column A",
            "On the Breadboard, connect a resistor between the left and right ground \n    bus columns for the row with theBLUEleg of the LED. In this example we have attached \n    it to row 4, column E and F"
          ],
          [
            "On the Breadboard, connect the RGB LED to the right ground bus column, \n    and make sure that each leg connects to a different row. The longest leg is \n    the common anode leg. In this example we have connected the LED to rows \n    1-4, with the common cathode leg connected to row 2 column I. TheREDleg is \n    connected to row 1 column J, theGREENleg is connected to row 3 column J, \n    and theBLUEleg is connected to row 4 column J",
            "On the Raspberry Pi, connect the female leg of the first jumper cable \n    to aGPIOpin. We will use this for theREDleg, In this example we used Physical Pin \n    7 (GPIO 4, row 4, left \n    column)",
            "On the Breadboard, connect the male leg of the first jumper wire to the \n    left ground bus, same row as theREDleg of the LED is connected. In this example we connected it to row \n    1, \n    column A",
            "On the Breadboard, connect a resistor between the left and right ground \n    bus columns for the row with theREDleg of the LED. In this example we have attached \n    it to row 1, column E and F",
            "On the Raspberry Pi, connect the female leg of the second jumper cable \n    to aGPIOpin. We will use this for theGREENleg, In this example we used Physical Pin \n    11 (GPIO 17, row 6, left \n    column)",
            "On the Breadboard, connect the male leg of the second jumper wire to the \n    left ground bus, same row as theGREENleg of the LED is connected. In this example we connected it to row \n    3, \n    column A",
            "On the Breadboard, connect a resistor between the left and right ground \n    bus columns for the row with theGREENleg of the LED. In this example we have attached \n    it to row 3, column E and F",
            "On the Raspberry Pi, connect the female leg of the third jumper cable \n    to aGPIOpin. We will use this for theBLUEleg, In this example we used Physical Pin \n    13 (GPIO 27, row 7, left \n    column)",
            "On the Breadboard, connect the male leg of the third jumper wire to the \n    left ground bus, same row as theBLUEleg of the LED is connected. In this example we connected it to row \n    4, \n    column A",
            "On the Breadboard, connect a resistor between the left and right ground \n    bus columns for the row with theBLUEleg of the LED. In this example we have attached \n    it to row 4, column E and F",
            "On the Raspberry Pi, connect the female leg of the forth jumper wire to3.3V. In this example we used Physical Pin 1 (3.3V, \n    row 1, left column)",
            "On the Breadboard, connect the male leg of the forth jumper wire to \n    the same row of the right ground bus column that you connected the common \n    anode to. In this example we connected it to row 2 column F"
          ],
          [
            "3 color sliders, one for each color (RGB)",
            "A color picker",
            "A div showing the current color"
          ]
        ],
        "examples": [
          "pi@w3demopi:~ $ sudo apt-get update",
          "pi@w3demopi:~ $ sudo apt-get install pigpio",
          "pi@w3demopi:~ $ npm install pigpio",
          "pi@w3demopi:~ $ sudo shutdown -h now",
          "pi@w3demopi:~ $ nano rgbws.js",
          "var http = require('http').createServer(handler); //require http server, and \n  create server with function handler()var fs = require('fs'); //require \n  filesystem modulevar io = require('socket.io')(http) //require socket.io \n  module and pass the http object (server)var Gpio = require('pigpio').Gpio, \n  //include pigpio to interact with the GPIOledRed = new Gpio(4, {mode: \n  Gpio.OUTPUT}), //use GPIO pin 4 as output for REDledGreen = new Gpio(17, \n  {mode: Gpio.OUTPUT}), //use GPIO pin 17 as output for GREENledBlue = new \n  Gpio(27, {mode: Gpio.OUTPUT}), //use GPIO pin 27 as output for BLUEredRGB \n  = 0, //set starting value of RED variable to off (0 for common cathode)greenRGB = 0, //set starting value of GREEN variable to off (0 for common \n  cathode)blueRGB = 0; //set starting value of BLUE variable to off (0 for \n  common cathode)//RESET RGB LEDledRed.digitalWrite(0); // Turn RED \n  LED offledGreen.digitalWrite(0); // Turn GREEN LED offledBlue.digitalWrite(0); // Turn BLUE LED offhttp.listen(8080); \n  //listen to port 8080function handler (req, res) { //what to do on \n  requests to port 8080fs.readFile(__dirname + '/public/rgb.html', \n  function(err, data) { //read file rgb.html in public folderif (err) {res.writeHead(404, \n  {'Content-Type': 'text/html'}); //display 404 on errorreturn res.end(\"404 Not Found\");}res.writeHead(200, {'Content-Type': 'text/html'}); //write HTMLres.write(data); //write data from rgb.htmlreturn \n  res.end();});}io.sockets.on('connection', function \n  (socket) {// Web Socket Connectionsocket.on('rgbLed', \n  function(data) { //get light switch status from clientconsole.log(data); //output data from WebSocket connection to console//for common cathode RGB LED 0 is fully off, and 255 is fully onredRGB=parseInt(data.red);greenRGB=parseInt(data.green);blueRGB=parseInt(data.blue);ledRed.pwmWrite(redRGB); //set RED LED to specified \n  valueledGreen.pwmWrite(greenRGB); //set GREEN LED to \n  specified valueledBlue.pwmWrite(blueRGB); //set BLUE \n  LED to specified value});});process.on('SIGINT', \n  function () { //on ctrl+cledRed.digitalWrite(0); // Turn RED LED \n  offledGreen.digitalWrite(0); // Turn GREEN LED offledBlue.digitalWrite(0); // Turn BLUE LED offprocess.exit(); //exit \n  completely});",
          "var http = require('http').createServer(handler); //require http server, and \n  create server with function handler()var fs = require('fs'); //require \n  filesystem modulevar io = require('socket.io')(http) //require socket.io \n  module and pass the http object (server)var Gpio = require('pigpio').Gpio, \n  //include pigpio to interact with the GPIOledRed = new Gpio(4, {mode: \n  Gpio.OUTPUT}), //use GPIO pin 4 as output for REDledGreen = new Gpio(17, \n  {mode: Gpio.OUTPUT}), //use GPIO pin 17 as output for GREENledBlue = new \n  Gpio(27, {mode: Gpio.OUTPUT}), //use GPIO pin 27 as output for BLUEredRGB \n  = 255, //set starting value of RED variable to off (255 for common anode)greenRGB = 255, //set starting value of GREEN variable to off (255 for common \n  anode)blueRGB = 255; //set starting value of BLUE variable to off (255 for \n  common anode)//RESET RGB LEDledRed.digitalWrite(1); // Turn RED \n  LED offledGreen.digitalWrite(1); // Turn GREEN LED offledBlue.digitalWrite(1); // Turn BLUE LED offhttp.listen(8080); \n  //listen to port 8080function handler (req, res) { //what to do on \n  requests to port 8080fs.readFile(__dirname + '/public/rgb.html', \n  function(err, data) { //read file rgb.html in public folderif (err) {res.writeHead(404, \n  {'Content-Type': 'text/html'}); //display 404 on errorreturn res.end(\"404 Not Found\");}res.writeHead(200, {'Content-Type': 'text/html'}); //write HTMLres.write(data); //write data from rgb.htmlreturn \n  res.end();});}io.sockets.on('connection', function \n  (socket) {// Web Socket Connectionsocket.on('rgbLed', \n  function(data) { //get light switch status from clientconsole.log(data); //output data from WebSocket connection to console//for common anode RGB LED  255 is fully off, and 0 is fully on, so we \n  have to change the value from the clientredRGB=255-parseInt(data.red);greenRGB=255-parseInt(data.green);blueRGB=255-parseInt(data.blue);console.log(\"rbg: \" \n  + redRGB + \", \" + greenRGB + \", \" + blueRGB); //output converted to consoleledRed.pwmWrite(redRGB); //set RED LED to specified \n  valueledGreen.pwmWrite(greenRGB); //set GREEN LED to \n  specified valueledBlue.pwmWrite(blueRGB); //set BLUE \n  LED to specified value});});process.on('SIGINT', \n  function () { //on ctrl+cledRed.digitalWrite(1); // Turn RED LED \n  offledGreen.digitalWrite(1); // Turn GREEN LED offledBlue.digitalWrite(1); // Turn BLUE LED offprocess.exit(); //exit \n  completely});",
          "pi@w3demopi:~/nodetest $ \n  cd public",
          "pi@w3demopi:~/nodetest/public $ \n  nano rgb.html",
          "<!DOCTYPE html><html><meta name=\"viewport\" \n    content=\"width=device-width, initial-scale=1\"><link rel=\"stylesheet\" \n    href=\"https://www.w3schools.com/w3css/4/w3.css\"><style>.slider {-webkit-appearance: none;width: 100%;height: 15px;border-radius: 5px;background: #d3d3d3;outline: none;opacity: 0.7;-webkit-transition: .2s;transition: \n    opacity .2s;}.slider:hover {opacity: 1;}.slider::-webkit-slider-thumb {-webkit-appearance: none;appearance: none;width: 25px;height: 25px;border-radius: 50%;cursor: pointer;}.slider::-moz-range-thumb {width: \n    25px;height: 25px;border-radius: 50%;background: #4CAF50;cursor: pointer;}#redSlider::-webkit-slider-thumb {background: red;}#redSlider::-moz-range-thumb \n    {background: red;}#greenSlider::-webkit-slider-thumb {background: \n    green;}#greenSlider::-moz-range-thumb {background: green;}#blueSlider::-webkit-slider-thumb \n    {background: blue;}#blueSlider::-moz-range-thumb {background: blue;}</style><body><div class=\"w3-container\"><h1>RGB Color</h1><div class=\"w3-cell-row\"><div class=\"w3-container w3-cell w3-mobile\"><p><input type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"redSlider\"></p><p><input type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"greenSlider\"></p><p><input type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"blueSlider\"></p></div><div class=\"w3-container w3-cell w3-mobile\" style=\"background-color:black\" \n    id=\"colorShow\"><div></div></div></div><p>Or pick a color: \n    <input type=\"color\" id=\"pickColor\"></p></div><script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"></script><script src=\"https://www.w3schools.com/lib/w3color.js\"></script><script>var socket = io(); //load socket.io-client and connect to the host that \n    serves the pagevar rgb = w3color(\"rgb(0,0,0)\"); //we use the w3color.js \n    library to keep the color as an objectwindow.addEventListener(\"load\", \n    function(){ //when page loadsvar rSlider = \n    document.getElementById(\"redSlider\");var gSlider = \n    document.getElementById(\"greenSlider\");var bSlider = \n    document.getElementById(\"blueSlider\");var picker = \n    document.getElementById(\"pickColor\");rSlider.addEventListener(\"change\", \n    function() { //add event listener for when red slider changesrgb.red = this.value; //update the RED color according to the slidercolorShow.style.backgroundColor = rgb.toRgbString(); //update the \"Current \n    color\"socket.emit(\"rgbLed\", rgb); //send the updated \n    color to RGB LED via WebSocket});gSlider.addEventListener(\"change\", function() { //add event listener for \n    when green slider changesrgb.green = this.value; \n    //update the GREEN color according to the slidercolorShow.style.backgroundColor = rgb.toRgbString(); //update the \"Current \n    color\"socket.emit(\"rgbLed\", rgb); //send the updated \n    color to RGB LED via WebSocket});bSlider.addEventListener(\"change\", function() { //add event listener for \n    when blue slider changesrgb.blue = this.value;  \n    //update the BLUE color according to the slidercolorShow.style.backgroundColor = rgb.toRgbString(); //update the \"Current \n    color\"socket.emit(\"rgbLed\", rgb); //send the updated \n    color to RGB LED via WebSocket});picker.addEventListener(\"input\", function() { //add event listener for when \n    colorpicker changesrgb.red = w3color(this.value).red; \n    //Update the RED color according to the pickerrgb.green = w3color(this.value).green; //Update the GREEN color according to \n    the pickerrgb.blue = w3color(this.value).blue; \n    //Update the BLUE color according to the pickercolorShow.style.backgroundColor = rgb.toRgbString();  //update the \n    \"Current color\"rSlider.value = rgb.red;  \n    //Update the RED slider position according to the pickergSlider.value = rgb.green;  //Update the GREEN slider position \n    according to the pickerbSlider.value = rgb.blue;  \n    //Update the BLUE slider position according to the pickersocket.emit(\"rgbLed\", rgb);  //send the updated color to RGB LED via \n    WebSocket});});</script></body></html>",
          "pi@w3demopi:~/nodetest $ \n  cd ..",
          "pi@w3demopi:~ $ sudo node rgbws.js"
        ]
      },
      "categories": "",
      "niveau": 3,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_raspberrypi_components.asp",
    "cours": {
      "titre": "Node.jsRaspberry Pi - Components",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_raspberrypi_components.asp",
      "contenus": {
        "paragraphs": [
          "Components are parts of a larger whole. In this chapter, we explain the different components we use in our tutorial.",
          "This is an illustration of the Raspberry Pi 3.",
          "The GPIO pins are the small \nred squares in two rows on the right side of the Raspberry Pi, on the actual Raspberry Pi they are small metal pins.",
          "Input pins are like switches that you can turn on or off from the outside \n  world (like a on/off light switch).",
          "Output pins are like switches that the Raspberry Pi can turn on or off (like \nturning on/off a LED light).",
          "The Raspberry Pi 3 has 26 GPIO pins, the rest of the pins are power, ground \nor \"other\".",
          "The pin placements correspond with the table below.",
          "A breadboard is used for prototyping electronics, it allows you to create \ncircuits without soldering. It is basically a plastic board, with a grid of \ntie-points (holes). Inside the board there are metal strips connecting the \ndifferent tie-points in specific ways.",
          "In the illustration below we have highlighted some of the sections with different colors. This is to show you how the grid is connected.",
          "The different sections of the breadboard:",
          "Light emitting diode (LED). An LED is a diode that emits light when a voltage is applied to it. In our example we use a Through Hole LED. \n    They have a positive (called Anode), and a negative (called Cathode) pin. The \n    longer leg on the LED should indicate the positive pin.",
          "Light emitting diode (LED). An LED is a diode that emits light when a voltage is applied to it. An RGB LED has 4 pins. One for each color (R = Red, G = Green, and, B = Blue), and a common cathode/anode. This one LED can display the pure colors, or with PWD to modulate and mix colors.",
          "A push button is a type of switch. A switch makes or breaks a connection an an electric circuit.",
          "Short pieces of wire called jumper wires are used to make connections. \n    Female to Male jumper wires can be used to connect from the GPIO on the \n    Raspberry Pi to the Breadboard.",
          "Short pieces of wire called jumper wires are used to make connections. \n    Male to Male jumper wires can be used to make connections between different \n    parts of the Breadboard.",
          "Resistors are used to reduce current, adjust signal levels, etc. This is \n    a 68 Ohm resistor.",
          "Resistors are used to reduce current, adjust signal levels, etc. This is \n    a 220 Ohm resistor.",
          "Resistors are used to reduce current, adjust signal levels, etc. This is \n    a 1k Ohm resistor.",
          "onoff - GPIO access and interrupt detection with Node.js",
          "documentation",
          "Socket.IO - real-time bidirectional event-based communication",
          "documentation",
          "pigpio - wrapper for pigpio C library. Enables GPIO, PWM, servo control, state change notification and interrupt handling with Node.js",
          "documentation"
        ],
        "lists": [
          [
            "On the left, and right, side there are 2 columns of tie-points. All the \n    tie points in each of these columns are connected.",
            "The Power Bus- The columns highlighted with red. There are usually used \n    to connect power to the Breadboard. Since the entire column is connected, \n    you can connect power to any of the tie-points in the column.",
            "The Ground Bus- The columns highlighted with blue. There are usually \n    used to connect Ground to the Breadboard. Since the entire column is \n    connected, you can connect ground to any of the tie-points in the column.",
            "Rows of connected Tie-Points- The rows highlighted with green. The \n    tie-points of each of these rows are connected, but not the entire row! The \n    left side tie-points are connected (A-B-C-D-E), and the right side \n    tie-points are connected (F-G-H-I-J).",
            "In the center of the Breadboard there is a Trench, this separates the \n    left and right rows. The width of the trench is designed so that many \n    Integrated Circuits fit across it."
          ]
        ],
        "examples": []
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/ref_modules.asp",
    "cours": {
      "titre": "Node.jsBuilt-in Modules",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/ref_modules.asp",
      "contenus": {
        "paragraphs": [
          "Node.js has a set of built-in modules which you can use without any further \ninstallation.",
          "Here is a list of the built-in modules of Node.js version 6.10.3:"
        ],
        "lists": [],
        "examples": []
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_compiler.asp",
    "cours": {
      "titre": "Node.jsOnline Compiler",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_compiler.asp",
      "contenus": {
        "paragraphs": [
          "Build and host your own website withW3Schools Spaceswith a Node.js environment.",
          "W3Schools Spacesis a website-building tool that enables you to create and share your own website and you can get a Node.js environment to run your web applications.",
          "You have full control over the website's appearance and functionality by editing the code directly in your web browser.",
          "The tool is user-friendly and requires no setup, making it easy to use.",
          "The code editor is packed with features to help you achieve more:",
          "Practice is key to mastering coding, and the best way to put your Node.js knowledge into practice is by getting practical with code.",
          "UseW3Schools Spacesto build, test and deploy code.",
          "The code editor lets you write and practice different types of computer languages. It includes \nNode.js, but you can use it for other languages too.",
          "New languages are added all the time:",
          "If you don't know Node.js, we suggest that you read ourNode.js Tutorialfrom scratch.",
          "Get an overview of your packages and easily add or delete frameworks and libraries. Then, with just one click, you can make changes to your packages without manual installation.",
          "",
          "You can use the code editor inW3School Spacesto build frontend or full-stack websites from scratch.",
          "Or you can use the 60+ templates available and save time:",
          "Create your Spaces account today and explore them all!",
          "Host and publish your websites in no time withW3School Spaces.",
          "W3Schools subdomain and SSL certificate are included for free withW3School Spaces. An SSL certificate makes your website safe and secure. It also helps people trust your website and makes it easier to find it online.",
          "Want a custom domain for your website?",
          "You can buy a domain or transfer an existing one and connect it to your space.",
          "Get started in a few clicks withW3School Spaces."
        ],
        "lists": [
          [
            "Templates:Start from scratch or use a template",
            "Cloud-based:no installations required. You only need your browser",
            "Terminal & Log:debug and troubleshoot your code easily",
            "File Navigator:switch between files inside the code editor",
            "And much more!"
          ]
        ],
        "examples": []
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_server.asp",
    "cours": {
      "titre": "Node.jsServer",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_server.asp",
      "contenus": {
        "paragraphs": [
          "Coding Skills",
          "AI Tutor",
          "Projects",
          "Securely",
          "By subscribing to a plan you support the W3Schools mission to makelearning available to everyone - no matter their background.",
          "$0/Forever",
          "This is for you that are beginning to explore coding and web development",
          "$14.99/Month",
          "This is for you that want to learn and reach your goals faster. Build fullstack projects, ad free experience.",
          "Contact us for information",
          "W3Schools right to use and Plus for educational institutions or enterprise customers",
          "You can also buy a domain or connect an existing one.",
          "Just landed inSpaces",
          "Learn to code more effectivelyand intelligently with kAI - AI tutor",
          "Hi! I'm kAI, W3Schools AI Tutor...",
          "Feel free to ask me any coding-related questions, and I'll do my best to assist you.",
          "I can help you checking your code for errors, improving your code's structure, explaining coding concepts in a clear and understandable way, and more...",
          "I can even create complete websites for you based on your input, so what are you waiting for?",
          "Cloud-based",
          "Terminal & Log",
          "How To Libraries",
          "Database",
          "File Navigator",
          "Package Manager",
          "Analytics",
          "Environment Manager",
          "With Basic Spaces, you can build frontend websites. Whereas with Fullstack Spaces, you can build frontend and backend websites.",
          "Basic Spaces include HTML, CSS, and Javascript. Full Stack Spaces include everything in Basic Spaces plus PHP, Python, React.js, Vue.js, Node.js, Handlebars, and Django.",
          "Your subscription will be automatically renewed every month.",
          "Your access to all the benefits for the paid period of time will continue. However, the subscription will not be renewed automatically.",
          "To subscribe W3Schools accounts for multiple users, you can contact sales@w3schools.com"
        ],
        "lists": [
          [
            "Build and host 1 static website",
            "100 credits/monthAccess various AI features like W3Schools kAI coding tutor and interview preparation.",
            "No support"
          ],
          [
            "Ad-free experience",
            "Build and host 15 static websites",
            "Build and host 1 full stack server",
            "Choose from 18 frameworks / languages",
            "Choose from 75+ templates",
            "50000 credits/monthAccess various AI features like W3Schools kAI coding tutor and interview preparation.",
            "Priority Support",
            "Cancel anytime"
          ],
          [
            "Everything in W3Schools Plus",
            "Certification Exams",
            "And much more!"
          ]
        ],
        "examples": []
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_syllabus.asp",
    "cours": {
      "titre": "Node.jsSyllabus",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_syllabus.asp",
      "contenus": {
        "paragraphs": [
          "TheW3Schools Node.js Tutorialis comprehensive and beginner-friendly.",
          "It will give you a fundamental knowledge of Node.js.",
          "It is designed for beginners and requires only basic JavaScript knowledge.",
          "The content has been carefully made to be bite-sized, simple, and easy to understand.",
          "The content has been proven by millions of users over the years. It is updated and improved frequently.",
          "The syllabus outline and its sequence are structured so you can learn Node.js step by step, from the introduction to creating server-side applications.",
          "Get Started With Node.js »",
          "Note:Are you a teacher teaching Node.js?W3Schools Academyis a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more aboutAcademy here.",
          "Get Started",
          "You can also create a free account to track your progress.",
          "As a signed-in user, you get access to features such as:",
          "Sign Up - It's free",
          "Get Started",
          "Node.js, like any other platform, is best learned through hands-on practice.",
          "Try this example using our editor:",
          "If you want to explore more and host your project, we have a feature calledSpacesthat allows you to build, test and deploy Node.js applications for free.",
          "Here you get a secure sandbox environment called Spaces, where you can practice Node.js code and test projects in real-time.",
          "Spaces allow you to test, build, and deploy code. This includes a W3Schools subdomain, hosting, and secure SSL certificates.",
          "Spaces require no installation and run directly in the browser.",
          "Features include:",
          "Create a Spaces Account",
          "W3Schools offers an end-of-pathway certification program.",
          "Here you can take exams to get certified.",
          "The Node.js exam is a test that summarizes the W3Schools Node.js syllabus.",
          "After passing the exam you get the \"Certified Node.js Developer\" Certification.",
          "The certification exam is adaptive and graded; students will get a grade from intermediate, advanced to professional.",
          "Buy Certificate »",
          "Are you interested in learning how you can useW3Schools Academyto Teach \nNode.js?",
          "Join our upcoming webinar for a guided demo ofW3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.",
          "Join our FREE Webinar »"
        ],
        "lists": [
          [
            "Learn what Node.js is and set up your environment",
            "Create web servers with the HTTP module",
            "Work with built-in modules (File System, URL, Events)",
            "Use Node Package Manager (NPM) to manage packages",
            "Handle files (upload, read, create, update, delete)",
            "Send emails using Node.js",
            "Connect and work with MySQL database",
            "Create and manage MongoDB databases",
            "Build real-world applications with Node.js"
          ],
          [
            "Back-end Development:Node.js is essential for server-side application development.",
            "Web Development:Node.js enables full-stack JavaScript development.",
            "API Development:Node.js is perfect for building RESTful APIs and microservices.",
            "Real-time Applications:Node.js excels at handling real-time data and WebSocket connections.",
            "DevOps:Node.js is widely used for build tools and automation.",
            "Cloud Computing:Node.js is popular for cloud-native application development.",
            "Enterprise Applications:Node.js supports building scalable enterprise solutions."
          ],
          [
            "Learning paths",
            "Sandbox and lab environments",
            "Achievements",
            "And much more!"
          ],
          [
            "Node.js HOME",
            "Node.js Intro",
            "Node.js Get Started",
            "Node.js Modules",
            "Node.js HTTP Module",
            "Node.js File System",
            "Node.js URL Module",
            "Node.js NPM",
            "Node.js Events",
            "Node.js Upload Files",
            "Node.js Email",
            "MySQL Get Started",
            "MySQL Create Database",
            "MySQL Create Table",
            "MySQL Insert Into",
            "MySQL Select From",
            "MySQL Where",
            "MySQL Order By",
            "MySQL Delete",
            "MySQL Drop Table",
            "MySQL Update",
            "MySQL Limit",
            "MySQL Join",
            "MongoDB Get Started",
            "MongoDB Create DB",
            "MongoDB Collection",
            "MongoDB Insert",
            "MongoDB Find",
            "MongoDB Query",
            "MongoDB Sort",
            "MongoDB Delete",
            "MongoDB Drop Collection",
            "MongoDB Update",
            "MongoDB Limit",
            "MongoDB Join",
            "RasPi Get Started",
            "RasPi GPIO Introduction",
            "RasPi Blinking LED",
            "RasPi LED & Pushbutton",
            "RasPi Flowing LEDs",
            "RasPi WebSocket",
            "RasPi RGB LED WebSocket",
            "RasPi Components",
            "Node.js Certificate"
          ],
          [
            "Collaboration",
            "File navigator",
            "Terminal & log",
            "Package manager",
            "Database",
            "Environment manager",
            "Analytics"
          ]
        ],
        "examples": [
          "var http = require('http');http.createServer(function (req, res) {res.writeHead(200, {'Content-Type': 'text/plain'});res.end('Hello World!');}).listen(8080);"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_study_plan.asp",
    "cours": {
      "titre": "Node.jsStudy Plan",
      "description": "",
      "lien": "https://www.w3schools.com/nodejs/nodejs_study_plan.asp",
      "contenus": {
        "paragraphs": [
          "The Node.js study plan helps you teach your students Node.js step-by-step.",
          "Creating a study plan for Node.js is easy.",
          "You can use a pre-built study plan or customize it.",
          "Students have different skill levels. The study plans can be customized to ensure that everyone is challenged.",
          "Save time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of Node.js to the final exam.",
          "This study plan is a feature of W3Schools Academy.",
          "W3Schools Academy is a platform that has everything you need to teach coding, all in one place.",
          "It offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom.",
          "You need to have an active subscription to access the study plan feature. There are two different subscription tiers:",
          "Learn More »",
          "Academy also offer other features such as:",
          "Get a free demo »",
          "W3Schools has everything you need to teach Node.js.",
          "The Node.js training materials is available for you to include and use in your study plan:",
          "With the Node.js Syllabus, your students will start with the basics, like setting up a Node.js environment and running simple scripts, and move to more advanced topics, like building servers, handling asynchronous events, and creating dynamic applications. Each chapter includes examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun.",
          "Read more about Node.js Syllabus.",
          "The study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level.",
          "Learn More »",
          "You choose the timeline and paceof your study plans.",
          "Schools have different preferences.",
          "Some would like more intensive pace, e.g. 5 weeks, others 12 or more weeks.",
          "It is completely up to you.",
          "For example, this is how a 5-week Node.js study plan could look like:",
          "Image of Sample Node.js study plan:",
          "Start withNode.js Study Planstoday.",
          "Get Started »",
          "Are you interested in learning how you can useW3Schools Academyto Teach Node.js programming?",
          "Join our upcoming webinar for a guided demo ofW3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.",
          "Join our FREE Webinar »"
        ],
        "lists": [
          [
            "Essentials ($1.99 / month per student)",
            "Full Access ($5.99 / month per student)",
            "Calculate your price and orderhere."
          ],
          [
            "Managing your classroom",
            "Tracking of student progress and reports",
            "Labs, assignments, and code challenges (prebuilt challenges or create your own ones)",
            "Auto-grading",
            "Teaching materials",
            "Certification exams"
          ],
          [
            "W3Schools Node.js Tutorial",
            "Node.js Challenges (Coding challenges)",
            "Node.js Certification Exam (End of Pathway Exam)"
          ],
          [
            "Learning PathsYou can add ready-made learning paths.The learning paths are by default ordered by our recommended order.You can change the order.You can add custom activities with text, links, or multi-media files.Drag and drop or click to make changes to the path.",
            "You can add ready-made learning paths.",
            "The learning paths are by default ordered by our recommended order.",
            "You can change the order.",
            "You can add custom activities with text, links, or multi-media files.",
            "Drag and drop or click to make changes to the path.",
            "Interactive ContentTutorialsTry-its (test code snippets)ExercisesQuizChallengesLabs",
            "Tutorials",
            "Try-its (test code snippets)",
            "Exercises",
            "Quiz",
            "Challenges",
            "Labs",
            "Timeline and PaceYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).You can decide the learning pace for your class.Different study plans can be assigned to different students in the same class.The flexibility can help to make sure that everyone is challenged.",
            "You can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).",
            "You can decide the learning pace for your class.",
            "Different study plans can be assigned to different students in the same class.",
            "The flexibility can help to make sure that everyone is challenged.",
            "Track Student ProgressThere are tools to track student progress.The analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.The challenges can be auto-graded or manually graded. The results are available to you as a teacher.",
            "There are tools to track student progress.",
            "The analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.",
            "The challenges can be auto-graded or manually graded. The results are available to you as a teacher.",
            "End of Pathway ExamThe Node.js study plan aligns with the Node.js Certification Exam.The exam can be taken at the end of the study plan, at your selected date.The exam summarizes the Node.js Tutorial.You get reports of the students' results.",
            "The Node.js study plan aligns with the Node.js Certification Exam.",
            "The exam can be taken at the end of the study plan, at your selected date.",
            "The exam summarizes the Node.js Tutorial.",
            "You get reports of the students' results.",
            "AccessibilityStudy plans and learning materials are accessible on desktops, tablets, and smartphones.This ensures students can learn anytime, anywhere.",
            "Study plans and learning materials are accessible on desktops, tablets, and smartphones.",
            "This ensures students can learn anytime, anywhere."
          ],
          [
            "You can add ready-made learning paths.",
            "The learning paths are by default ordered by our recommended order.",
            "You can change the order.",
            "You can add custom activities with text, links, or multi-media files.",
            "Drag and drop or click to make changes to the path."
          ],
          [
            "Tutorials",
            "Try-its (test code snippets)",
            "Exercises",
            "Quiz",
            "Challenges",
            "Labs"
          ],
          [
            "You can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).",
            "You can decide the learning pace for your class.",
            "Different study plans can be assigned to different students in the same class.",
            "The flexibility can help to make sure that everyone is challenged."
          ],
          [
            "There are tools to track student progress.",
            "The analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.",
            "The challenges can be auto-graded or manually graded. The results are available to you as a teacher."
          ],
          [
            "The Node.js study plan aligns with the Node.js Certification Exam.",
            "The exam can be taken at the end of the study plan, at your selected date.",
            "The exam summarizes the Node.js Tutorial.",
            "You get reports of the students' results."
          ],
          [
            "Study plans and learning materials are accessible on desktops, tablets, and smartphones.",
            "This ensures students can learn anytime, anywhere."
          ],
          [
            "Week 1: Essentials",
            "Week 2: Modules, HTTP Modules, File System, URL Module, NPM, Events, Upload Files, Email",
            "Week 3: Working with MySQL, Working with MongoDB, Node.js Certification Exam"
          ]
        ],
        "examples": []
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/nodejs/nodejs_exam.asp",
    "cours": {
      "titre": "W3SchoolsNode.JS Certificate",
      "description": "How Does It Work?Study for free at W3Schools.comStudy at your own speedTest your skills with W3Schools online quizzesApply for your certificate by paying an exam feeTake your exam online, at any time, and from any location",
      "lien": "https://www.w3schools.com/nodejs/nodejs_exam.asp",
      "contenus": {
        "paragraphs": [
          "W3Schools offers an Online Certification Program.",
          "The perfect solution for busy professionals who need to balance work, family, and career building.",
          "More than 50 000 certificates already issued!",
          "Get Your Certificate »",
          "W3Schools offers an Online Certification Program.",
          "The perfect solution for busy professionals who need to balance work, family, and career building.",
          "More than 50 000 certificates already issued!",
          "Get Your Certificate »",
          "Any student or professional within the digital industry.",
          "Certifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.",
          "W3Schools has over two decades of experience with teaching coding online.",
          "Our certificates are recognized and valued by companies looking to employ skilled developers.",
          "Show the world your coding skills by getting a certification.",
          "The prices is a small fraction compared to the price of traditional education.",
          "Document and validate your competence by getting certified!",
          "Fee:95 USD",
          "Achievable certification levels:Intermediate (40%)Advanced (75%)Professional (90%)",
          "Number of questions:Adaptive,60on average",
          "Requirement to pass:Minimum 40% - Intermediate level",
          "Time limit:60 minutes",
          "Number of attempts to pass:3",
          "Exam deadline:None",
          "Certification Expiration:None",
          "Format:Online, multiple choice",
          "Register now »",
          "Getting a certificate proves your commitment to upgrading your skills.",
          "The certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.",
          "It gives you the credibility needed for more responsibilities, larger projects, and a higher salary.",
          "Knowledge is power, especially in the current job market.",
          "Documentation of your skills enables you to advance your career or helps you to start a new one.",
          "Example certificate:",
          "Each certificate gets a unique link that can be shared with others.",
          "Validate your certification with the link or QR code.",
          "Check how it looks like in thisExample.",
          "Share your certificate on Linkedin the Certifications section in just one click!",
          "Getting a certificate proves your commitment to upgrade your skills,\n    gives you the credibility needed for more responsibilities, larger projects, and a higher salary.",
          "Get Your Certificate »",
          "Are you an educator, manager or business owner looking for courses or certifications?",
          "We are working with schools, companies and organizations from all over the world.",
          "Get courses and/or certifications for your team here."
        ],
        "lists": [
          [
            "Study for free at W3Schools.com",
            "Study at your own speed",
            "Test your skills with W3Schools online quizzes",
            "Apply for your certificate by paying an exam fee",
            "Take your exam online, at any time, and from any location"
          ]
        ],
        "examples": []
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://campus.w3schools.com/products/nodejs-certificate",
    "cours": {
      "id": "",
      "contenus": {
        "texte": "",
        "lienVideo": ""
      },
      "categories": [],
      "niveau": 1,
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  }
]