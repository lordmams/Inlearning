name: InLearning CI/CD - Version Simplifi√©e

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===============================================
  # Job 1: Build (optimis√© pour la pr√©sentation)
  # ===============================================
  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    strategy:
      matrix:
        service: [django-app, flask-api, orchestrator]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Django app
      if: matrix.service == 'django-app'
      uses: docker/build-push-action@v5
      with:
        context: ./elearning
        file: ./elearning/dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    
    - name: Build and push Flask API
      if: matrix.service == 'flask-api'
      uses: docker/build-push-action@v5
      with:
        context: ./learning_platform
        file: ./learning_platform/dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    
    - name: Build and push Orchestrator
      if: matrix.service == 'orchestrator'
      uses: docker/build-push-action@v5
      with:
        context: ./orchestration/simple
        file: ./orchestration/simple/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  # ===============================================
  # Job 3: Deploy Staging 
  # ===============================================
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Utiliser votre script de d√©ploiement existant
        ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
          cd /opt/inlearning-staging
          git pull origin develop
          cp env.staging .env
          
          # Utiliser le compose simplifi√© bas√© sur votre architecture
          docker-compose -f docker-compose.staging-simple.yml pull
          docker-compose -f docker-compose.staging-simple.yml up -d
          
          # Simple health check
          sleep 30
          curl -f http://localhost:8080/ || echo "Health check failed"
        EOF

  # ===============================================
  # Job 4: Deploy Production (simple)
  # ===============================================
  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          cd /opt/inlearning-production
          
          # Backup simple
          docker-compose -f docker-compose.production-simple.yml exec -T db pg_dump -U $POSTGRES_USER $POSTGRES_DB > backup_$(date +%Y%m%d).sql
          
          git pull origin main
          cp env.production .env
          
          # Deploy avec votre architecture simplifi√©e
          docker-compose -f docker-compose.production-simple.yml pull
          docker-compose -f docker-compose.production-simple.yml up -d
          
          # Health check
          sleep 30
          curl -f https://inlearning.com/ || echo "Production health check failed"
        EOF
    
    - name: Notify success
      run: |
        echo "Production deployment completed! üöÄ"
        # Notification Slack optionnelle
        if [ -n "${{ secrets.SLACK_WEBHOOK }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"‚úÖ InLearning production deployment successful!"}' \
            ${{ secrets.SLACK_WEBHOOK }}
        fi 