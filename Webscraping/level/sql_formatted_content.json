[
  {
    "url": "https://www.w3schools.com/sql/default.asp",
    "cours": {
      "titre": "SQLTutorial",
      "description": "SQL is a standard language for storing, manipulating and retrieving data \nin databases.Our SQL tutorial will teach you how to use SQL in:\nMySQL, SQL Server, MS Access, Oracle, Sybase, Informix, Postgres, and other database systems.Start learning SQL now »",
      "lien": "https://www.w3schools.com/sql/default.asp",
      "contenus": {
        "paragraphs": [
          "SQL is a standard language for storing, manipulating and retrieving data \nin databases.",
          "Our SQL tutorial will teach you how to use SQL in:\nMySQL, SQL Server, MS Access, Oracle, Sybase, Informix, Postgres, and other database systems.",
          "With our online SQL editor, you can edit the SQL statements, and click on a button to view the result.",
          "Click on the \"Try it Yourself\" button to see how it works.",
          "Many chapters in this tutorial end with an exercise where you can check your level of knowledge.",
          "See all SQL Exercises",
          "Learn by examples! This tutorial supplements all explanations with clarifying examples.",
          "See All SQL Examples",
          "Test your SQL skills at W3Schools!",
          "Start SQL Quiz!",
          "Track your progress with the free \"My Learning\" program here at W3Schools.",
          "Log in to your account, and start earning points!",
          "This is an optional feature. You can study at W3Schools without using My Learning.",
          "At W3Schools you will find a complete reference for keywords and functions:",
          "SQL Keyword Reference",
          "MYSQL Functions",
          "SQLServer Functions",
          "MS Access Functions",
          "SQL Quick Reference",
          "Data types and ranges for Microsoft Access, MySQL and SQL Server.",
          "SQL Data Types",
          "Get certified by completingthecourse"
        ],
        "lists": [],
        "examples": [
          "SELECT * FROM Customers;"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/sql/sql_intro.asp",
    "cours": {
      "titre": "Introduction toSQL",
      "description": "",
      "lien": "https://www.w3schools.com/sql/sql_intro.asp",
      "contenus": {
        "paragraphs": [
          "SQL is a standard language for accessing and manipulating databases.",
          "Although SQL is an ANSI/ISO standard, there are different versions of the SQL language.",
          "However, to be compliant with the ANSI standard, they all support at least the major commands (such asSELECT,UPDATE,DELETE,INSERT,WHERE) in a similar manner.",
          "Note:Most of the SQL database programs also have their own proprietary extensions in addition to the SQL standard!",
          "To build a web site that shows data from a database, you will need:",
          "RDBMS stands for Relational Database Management System.",
          "RDBMS is the basis for SQL, and for all modern database systems such as MS SQL Server, IBM DB2, Oracle, MySQL, and Microsoft Access.",
          "The data in RDBMS is stored in database objects called tables. A table is a collection of related data entries and it consists of columns and rows.",
          "Look at the \"Customers\" table:",
          "Every table is broken up into smaller entities called fields. The fields in \nthe Customers table consist of CustomerID, CustomerName, ContactName, Address, \nCity, PostalCode and Country. A field is a column in a table that is designed to maintain \nspecific information about every record in the table.",
          "A record, also called a row, is each individual entry that exists in a table. \nFor example, there are 91 records in the above Customers table. A record is a \nhorizontal entity in a table.",
          "A column is a vertical entity in a table that contains all information \nassociated with a specific field in a table."
        ],
        "lists": [
          [
            "SQL stands for Structured Query Language",
            "SQL lets you access and manipulate databases",
            "SQL became a standard of the American National Standards Institute (ANSI) \n  in 1986, and of the International Organization for Standardization (ISO) in \n  1987"
          ],
          [
            "SQL can execute queries against a database",
            "SQL can retrieve data from a database",
            "SQL can insert records in a database",
            "SQL can update records in a database",
            "SQL can delete records from a database",
            "SQL can create new databases",
            "SQL can create new tables in a database",
            "SQL can create stored procedures in a database",
            "SQL can create views in a database",
            "SQL can set permissions on tables, procedures, and views"
          ],
          [
            "An RDBMS database program (i.e. MS Access, SQL Server, MySQL)",
            "To use a server-side scripting language, like PHP or ASP",
            "To use SQL to get the data you want",
            "To use HTML / CSS to style the page"
          ]
        ],
        "examples": [
          "SELECT * FROM Customers;"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/sql/sql_syntax.asp",
    "cours": {
      "titre": "SQLSyntax",
      "description": "",
      "lien": "https://www.w3schools.com/sql/sql_syntax.asp",
      "contenus": {
        "paragraphs": [
          "Most of the actions you need to perform on a database are done with SQL statements.",
          "SQL statements consist of keywords that are easy to understand.",
          "The following SQL statement returns all records from a table named \"Customers\":",
          "Select all records from the Customers table:",
          "In this tutorial we will teach you all about the different SQL statements.",
          "A database most often contains one or more tables. Each table is identified \nby a name (e.g. \"Customers\" or \"Orders\"), and contain records (rows) with \ndata.",
          "In this tutorial we will use the well-known Northwind sample database \n(included in MS Access and MS SQL Server).",
          "Below is a selection from theCustomerstable used in the examples:",
          "The table above contains five records (one for each customer) and seven columns \n(CustomerID, CustomerName, ContactName, Address, City, PostalCode, and Country).",
          "In this tutorial we will write all SQL keywords in upper-case.",
          "Some database systems require a semicolon at the end of each SQL statement.",
          "Semicolon is the standard way to separate each SQL statement in database \nsystems that allow more than one SQL statement to be executed in the same call \nto the server.",
          "In this tutorial, we will use semicolon at the end of each SQL statement."
        ],
        "lists": [
          [
            "SQL keywords are NOT case sensitive:selectis the same asSELECT"
          ],
          [
            "SELECT- extracts data from a database",
            "UPDATE- updates data in a database",
            "DELETE- deletes data from a database",
            "INSERT INTO- inserts new data into a database",
            "CREATE DATABASE- creates a new database",
            "ALTER DATABASE- modifies a database",
            "CREATE TABLE- creates a new table",
            "ALTER TABLE- modifies a table",
            "DROP TABLE- deletes a table",
            "CREATE INDEX- creates an index (search key)",
            "DROP INDEX- deletes an index"
          ]
        ],
        "examples": [
          "SELECT * FROM Customers;"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/sql/sql_select.asp",
    "cours": {
      "titre": "SQLSELECTStatement",
      "description": "",
      "lien": "https://www.w3schools.com/sql/sql_select.asp",
      "contenus": {
        "paragraphs": [
          "TheSELECTstatement is used to select data from a database.",
          "Return data from the Customers table:",
          "SELECTcolumn1,column2, ...FROMtable_name;",
          "Here, column1, column2, ... are thefield namesof the table you want to select data from.",
          "The table_name represents the name of thetableyou want to select data from.",
          "Below is a selection from theCustomerstable used in the examples:",
          "If you want to return all columns, without specifying every column name, you can use theSELECT *syntax:",
          "Return all the columns from the Customers table:"
        ],
        "lists": [],
        "examples": [
          "SELECT CustomerName, City FROM Customers;",
          "SELECT * FROM Customers;"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/sql/sql_distinct.asp",
    "cours": {
      "titre": "SQLSELECT DISTINCTStatement",
      "description": "",
      "lien": "https://www.w3schools.com/sql/sql_distinct.asp",
      "contenus": {
        "paragraphs": [
          "TheSELECT DISTINCTstatement is used to return only distinct \n(different) values.",
          "Select all the different countries from the \"Customers\" table:",
          "Inside a table, a column often contains many duplicate values; and sometimes you \nonly want to list the different (distinct) values.",
          "SELECT DISTINCTcolumn1,column2, ...FROMtable_name;",
          "Below is a selection from theCustomerstable used in the examples:",
          "If you omit theDISTINCTkeyword, the SQL statement \nreturns the \"Country\" value from all the records of the \"Customers\" table:",
          "By using theDISTINCTkeyword in a function calledCOUNT, we can return the number of different countries.",
          "Note: TheCOUNT(DISTINCTcolumn_name) is not supported in Microsoft Access databases.",
          "Here is a workaround for MS Access:",
          "You will learn about the COUNT function later in this tutorial."
        ],
        "lists": [],
        "examples": [
          "SELECT DISTINCT Country FROM Customers;",
          "SELECT Country FROM Customers;",
          "SELECT COUNT(DISTINCT Country) FROM Customers;",
          "SELECT Count(*) AS DistinctCountriesFROM (SELECT DISTINCT Country FROM Customers);"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/sql/sql_where.asp",
    "cours": {
      "titre": "SQLWHEREClause",
      "description": "",
      "lien": "https://www.w3schools.com/sql/sql_where.asp",
      "contenus": {
        "paragraphs": [
          "TheWHEREclause is used to filter records.",
          "It is used to extract only those records that fulfill a specified \ncondition.",
          "Select all customers from Mexico:",
          "SELECTcolumn1,column2, ...FROMtable_nameWHEREcondition;",
          "Note:TheWHEREclause is not only used inSELECTstatements, it is also used inUPDATE,DELETE, etc.!",
          "Below is a selection from theCustomerstable used in the examples:",
          "SQL requires single quotes around text values (most database systems will \nalso allow double quotes).",
          "However, numeric fields should not be enclosed in quotes:",
          "You can use other operators than the=operator to filter the search.",
          "Select all customers with a CustomerID greater than 80:",
          "The following operators can be used in theWHEREclause:"
        ],
        "lists": [],
        "examples": [
          "SELECT * FROM CustomersWHERE Country='Mexico';",
          "SELECT * FROM CustomersWHERE CustomerID=1;",
          "SELECT * FROM CustomersWHERE CustomerID > 80;"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/sql/sql_orderby.asp",
    "cours": {
      "titre": "SQLORDER BYKeyword",
      "description": "",
      "lien": "https://www.w3schools.com/sql/sql_orderby.asp",
      "contenus": {
        "paragraphs": [
          "TheORDER BYkeyword is used to sort the result-set in ascending or \ndescending order.",
          "Sort the products by price:",
          "SELECTcolumn1,column2, ...FROMtable_nameORDER BYcolumn1, column2, ...ASC|DESC;",
          "Below is a selection from theProductstable used in the examples:",
          "TheORDER BYkeyword sorts the records in ascending order by default. To sort the records in descending order, use theDESCkeyword.",
          "Sort the products from highest to lowest price:",
          "For string values theORDER BYkeyword will order alphabetically:",
          "Sort the products alphabetically by ProductName:",
          "To sort the table reverse alphabetically, use theDESCkeyword:",
          "Sort the products by ProductName in reverse order:",
          "The following SQL statement selects all customers from the \"Customers\" table, \nsorted by the \"Country\" and the \"CustomerName\" column. This means that it orders \nby Country, but if some rows have the same Country, it orders them by \nCustomerName:",
          "The following SQL statement selects all customers from the \"Customers\" table, \nsorted ascending by the \"Country\" and descending by the \"CustomerName\" column:"
        ],
        "lists": [],
        "examples": [
          "SELECT * FROM ProductsORDER BY Price;",
          "SELECT * FROM ProductsORDER BY Price DESC;",
          "SELECT * FROM ProductsORDER BY ProductName;",
          "SELECT * FROM ProductsORDER BY ProductName DESC;",
          "SELECT * FROM CustomersORDER BY Country, CustomerName;",
          "SELECT * FROM CustomersORDER BY Country ASC, CustomerName DESC;"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/sql/sql_and.asp",
    "cours": {
      "titre": "SQLANDOperator",
      "description": "",
      "lien": "https://www.w3schools.com/sql/sql_and.asp",
      "contenus": {
        "paragraphs": [
          "TheWHEREclause can contain one or manyANDoperators.",
          "TheANDoperator is used to filter records based on more than one \ncondition, like if you want to return all customers from Spain that starts with the letter 'G':",
          "SELECTcolumn1,column2, ...FROMtable_nameWHEREcondition1ANDcondition2ANDcondition3 ...;",
          "TheANDoperator displays a record ifallthe conditions are TRUE.",
          "TheORoperator displays a record ifanyof the conditions are TRUE.",
          "Below is a selection from theCustomerstable used in the examples:",
          "The following SQL statement selects all fields fromCustomerswhereCountryis \"Germany\" ANDCityis \"Berlin\" ANDPostalCodeis higher than 12000:",
          "You can combine theANDandORoperators.",
          "The following SQL statement selects all customers from Spain that starts with a \"G\" or an \"R\".",
          "Make sure you use parenthesis to get the correct result.",
          "Select all Spanish customers that starts with either \"G\" or \"R\":",
          "Without parenthesis, the select statement will return all customers from Spain that starts with a \"G\",plusall customers that starts with an \"R\", regardless of the country value:",
          "Select all customers that either:are from Spain and starts with either \"G\",orstarts with the letter \"R\":"
        ],
        "lists": [],
        "examples": [
          "SELECT *FROM CustomersWHERE Country = 'Spain' AND CustomerName LIKE 'G%';",
          "SELECT * FROM CustomersWHERE Country = 'Germany'AND City = 'Berlin'AND PostalCode > 12000;",
          "SELECT * FROM CustomersWHERE Country = 'Spain'\n AND (CustomerName LIKE 'G%' OR CustomerName LIKE 'R%');",
          "SELECT * FROM CustomersWHERE Country = 'Spain'\n AND CustomerName LIKE 'G%' OR CustomerName LIKE 'R%';"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/sql/sql_or.asp",
    "cours": {
      "titre": "SQLOROperator",
      "description": "",
      "lien": "https://www.w3schools.com/sql/sql_or.asp",
      "contenus": {
        "paragraphs": [
          "TheWHEREclause can contain one or moreORoperators.",
          "TheORoperator \nis used to filter records based on more than one condition, like if you want to \nreturn all customers from Germany but also those from Spain:",
          "Select all customers from Germany or Spain:",
          "SELECTcolumn1,column2, ...FROMtable_nameWHEREcondition1ORcondition2ORcondition3 ...;",
          "TheORoperator displays a record ifanyof the conditions are TRUE.",
          "TheANDoperator displays a record ifallthe conditions are TRUE.",
          "Below is a selection from theCustomerstable used in the examples:",
          "The following SQL statement selects all fields from Customers where eitherCityis \"Berlin\",CustomerNamestarts with the letter \"G\" orCountryis \"Norway\":",
          "You can combine theANDandORoperators.",
          "The following SQL statement selects all customers from Spain that starts with a \"G\" or an \"R\".",
          "Make sure you use parenthesis to get the correct result.",
          "Select all Spanish customers that starts with either \"G\" or \"R\":",
          "Without parenthesis, the select statement will return all customers from Spain that starts with a \"G\",plusall customers that starts with an \"R\", regardless of the country value:",
          "Select all customers that either:are from Spain and starts with either \"G\",orstarts with the letter \"R\":"
        ],
        "lists": [],
        "examples": [
          "SELECT *FROM CustomersWHERE Country = 'Germany' OR Country = 'Spain';",
          "SELECT * FROM CustomersWHERE City = 'Berlin'\n OR CustomerName LIKE 'G%'\n OR Country = 'Norway';",
          "SELECT * FROM CustomersWHERE Country = 'Spain'\n AND (CustomerName LIKE 'G%' OR CustomerName LIKE 'R%');",
          "SELECT * FROM CustomersWHERE Country = 'Spain'\n AND CustomerName LIKE 'G%' OR CustomerName LIKE 'R%';"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/sql/sql_not.asp",
    "cours": {
      "titre": "SQLNOTOperator",
      "description": "",
      "lien": "https://www.w3schools.com/sql/sql_not.asp",
      "contenus": {
        "paragraphs": [
          "TheNOToperator is used in combination with \nother operators to give the opposite result, also called the negative result.",
          "In the select statement below we want to return all customers that are NOT \nfrom Spain:",
          "Select only the customers that are NOT from Spain:",
          "In the example above, theNOToperator is used in combination with the=operator, but it can be used in combination with other comparison and/or logical operators.\nSee examples below.",
          "SELECTcolumn1,column2, ...FROMtable_nameWHERE NOTcondition;",
          "Below is a selection from theCustomerstable used in the examples:",
          "Select customers that does not start with the letter 'A':",
          "Select customers with a customerID not between 10 and 60:",
          "Select customers that are not from Paris or London:",
          "Select customers with a CustomerId not greater than 50:",
          "Note:There is a not-greater-than operator:!>that would give you the same result.",
          "Select customers with a CustomerID not less than 50:",
          "Note:There is a not-less-than operator:!<that would give you the same result."
        ],
        "lists": [],
        "examples": [
          "SELECT * FROM CustomersWHERE NOT Country = 'Spain';",
          "SELECT * FROM CustomersWHERE CustomerName NOT LIKE 'A%';",
          "SELECT * FROM CustomersWHERE CustomerID NOT BETWEEN 10 AND 60;",
          "SELECT * FROM CustomersWHERE City NOT IN ('Paris', 'London');",
          "SELECT * FROM CustomersWHERE NOT CustomerID > 50;",
          "SELECT * FROM CustomersWHERE NOT CustomerId < 50;"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/sql/sql_insert.asp",
    "cours": {
      "titre": "SQLINSERT INTOStatement",
      "description": "",
      "lien": "https://www.w3schools.com/sql/sql_insert.asp",
      "contenus": {
        "paragraphs": [
          "TheINSERT INTOstatement is used to insert new records in a table.",
          "It is possible to write theINSERT INTOstatement in two ways:",
          "1. Specify both the column names and the values to be inserted:",
          "INSERT INTOtable_name(column1,column2,column3, ...)VALUES (value1,value2,value3, ...);",
          "2. If you are adding values for all the columns of the table, you do not need to \nspecify the column names in the SQL query. However, make sure the order of the \nvalues is in the same order as the columns in the table. Here, theINSERT INTOsyntax \nwould be as follows:",
          "INSERT INTOtable_nameVALUES (value1,value2,value3, ...);",
          "Below is a selection from theCustomerstable used in the examples:",
          "The following SQL statement inserts a new record in the \"Customers\" table:",
          "The selection from the \"Customers\" table will now look like this:",
          "Did you notice that we did not insert any number into the CustomerID \nfield?The CustomerID column is \nanauto-incrementfield and will be \ngenerated automatically when a new record is inserted into the table.",
          "It is also possible to only insert data in specific columns.",
          "The following SQL statement will insert a new record, but only insert data in the \"CustomerName\", \n\"City\", and \"Country\" columns (CustomerID will \nbe updated automatically):",
          "The selection from the \"Customers\" table will now look like this:",
          "It is also possible to insert multiple rows in one statement.",
          "To insert multiple rows of data, we use the sameINSERT INTOstatement, but with multiple values:",
          "Make sure you separate each set of values with a comma,.",
          "The selection from the \"Customers\" table will now look like this:"
        ],
        "lists": [],
        "examples": [
          "INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');",
          "INSERT INTO Customers (CustomerName, City, Country)VALUES ('Cardinal', 'Stavanger', 'Norway');",
          "INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)VALUES('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway'),('Greasy Burger', 'Per Olsen', 'Gateveien 15', 'Sandnes', '4306', 'Norway'),('Tasty Tee', 'Finn Egan', 'Streetroad 19B', 'Liverpool', 'L1 0AA', 'UK');"
        ]
      },
      "categories": "",
      "niveau": 2,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  },
  {
    "url": "https://www.w3schools.com/sql/sql_null_values.asp",
    "cours": {
      "titre": "SQLNULL Values",
      "description": "",
      "lien": "https://www.w3schools.com/sql/sql_null_values.asp",
      "contenus": {
        "paragraphs": [
          "A field with a NULL value is a field with no value.",
          "If a field in a table is optional, it is possible to insert a new record or \nupdate a record without adding a value to this field. Then, the field will be \nsaved with a NULL value.",
          "Note:A NULL value is different from a zero value or a field that \ncontains spaces. A field with a NULL value is one that has been left blank \nduring record creation!",
          "It is not possible to test for NULL values with comparison operators, such as \n=, <, or <>.",
          "We will have to use theIS NULLandIS NOT NULLoperators instead.",
          "SELECTcolumn_namesFROMtable_nameWHEREcolumn_nameIS NULL;",
          "SELECTcolumn_namesFROMtable_nameWHEREcolumn_nameIS NOT NULL;",
          "Below is a selection from theCustomerstable used in the examples:",
          "TheIS NULLoperator is used to test for empty values (NULL values).",
          "The following SQL lists all customers with a NULL value in the \"Address\" field:",
          "Tip:Always use IS NULL to look for NULL values.",
          "TheIS NOT NULLoperator is used to test for non-empty values (NOT NULL \nvalues).",
          "The following SQL lists all customers with a value in the \"Address\" field:"
        ],
        "lists": [],
        "examples": [
          "SELECT CustomerName, ContactName, AddressFROM CustomersWHERE Address \n  IS NULL;",
          "SELECT CustomerName, ContactName, AddressFROM CustomersWHERE Address \n  IS NOT NULL;"
        ]
      },
      "categories": "",
      "niveau": 1,
      "durée": "",
      "id": "",
      "duree": "45 minutes",
      "vecteur_embedding": []
    }
  }
]